{"file_contents":{"AI_RULES.md":{"content":"# AI Development Rules\n\nThis document outlines the technology stack and specific library usage guidelines for this Next.js application. Adhering to these rules will help maintain consistency, improve collaboration, and ensure the AI assistant can effectively understand and modify the codebase.\n\n## Tech Stack Overview\n\nThe application is built using the following core technologies:\n\n*   **Framework**: Next.js (App Router)\n*   **Language**: TypeScript\n*   **UI Components**: Shadcn/UI - A collection of re-usable UI components built with Radix UI and Tailwind CSS.\n*   **Styling**: Tailwind CSS - A utility-first CSS framework for rapid UI development.\n*   **Icons**: Lucide React - A comprehensive library of simply beautiful SVG icons.\n*   **Forms**: React Hook Form for managing form state and validation, typically with Zod for schema validation.\n*   **State Management**: Primarily React Context API and built-in React hooks (`useState`, `useReducer`).\n*   **Notifications/Toasts**: Sonner for displaying non-intrusive notifications.\n*   **Charts**: Recharts for data visualization.\n*   **Animation**: `tailwindcss-animate` and animation capabilities built into Radix UI components.\n\n## Library Usage Guidelines\n\nTo ensure consistency and leverage the chosen stack effectively, please follow these rules:\n\n1.  **UI Components**:\n    *   **Primary Choice**: Always prioritize using components from the `src/components/ui/` directory (Shadcn/UI components).\n    *   **Custom Components**: If a required component is not available in Shadcn/UI, create a new component in `src/components/` following Shadcn/UI's composition patterns (i.e., building on Radix UI primitives and styled with Tailwind CSS).\n    *   **Avoid**: Introducing new, third-party UI component libraries without discussion.\n\n2.  **Styling**:\n    *   **Primary Choice**: Exclusively use Tailwind CSS utility classes for all styling.\n    *   **Global Styles**: Reserve `src/app/globals.css` for base Tailwind directives, global CSS variable definitions, and minimal base styling. Avoid adding component-specific styles here.\n    *   **CSS-in-JS**: Do not use CSS-in-JS libraries (e.g., Styled Components, Emotion).\n\n3.  **Icons**:\n    *   **Primary Choice**: Use icons from the `lucide-react` library.\n\n4.  **Forms**:\n    *   **Management**: Use `react-hook-form` for all form logic (state, validation, submission).\n    *   **Validation**: Use `zod` for schema-based validation with `react-hook-form` via `@hookform/resolvers`.\n\n5.  **State Management**:\n    *   **Local State**: Use React's `useState` and `useReducer` hooks for component-level state.\n    *   **Shared/Global State**: For state shared between multiple components, prefer React Context API.\n    *   **Complex Global State**: If application state becomes significantly complex, discuss the potential introduction of a dedicated state management library (e.g., Zustand, Jotai) before implementing.\n\n6.  **Routing**:\n    *   Utilize the Next.js App Router (file-system based routing in the `src/app/` directory).\n\n7.  **API Calls & Data Fetching**:\n    *   **Client-Side**: Use the native `fetch` API or a simple wrapper around it.\n    *   **Server-Side (Next.js)**: Leverage Next.js Route Handlers (in `src/app/api/`) or Server Actions for server-side logic and data fetching.\n\n8.  **Animations**:\n    *   Use `tailwindcss-animate` plugin and the animation utilities provided by Radix UI components.\n\n9.  **Notifications/Toasts**:\n    *   Use the `Sonner` component (from `src/components/ui/sonner.tsx`) for all toast notifications.\n\n10. **Charts & Data Visualization**:\n    *   Use `recharts` and its associated components (e.g., `src/components/ui/chart.tsx`) for displaying charts.\n\n11. **Utility Functions**:\n    *   General-purpose helper functions should be placed in `src/lib/utils.ts`.\n    *   Ensure functions are well-typed and serve a clear, reusable purpose.\n\n12. **Custom Hooks**:\n    *   Custom React hooks should be placed in the `src/hooks/` directory (e.g., `src/hooks/use-mobile.tsx`).\n\n13. **TypeScript**:\n    *   Write all new code in TypeScript.\n    *   Strive for strong typing and leverage TypeScript's features to improve code quality and maintainability. Avoid using `any` where possible.\n\nBy following these guidelines, we can build a more robust, maintainable, and consistent application.\n","size_bytes":4352},"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1450},"docs/react-native-migration.md":{"content":"# React Native Migration Plan\n\n## Objectives\n- Deliver a native mobile experience (iOS/Android) feature-parity with the existing Next.js web app.\n- Reuse as much business logic as possible while replacing web-only UI/layout and storage concerns.\n- Maintain Supabase backend integration and offline sync semantics.\n\n## Target Monorepo Layout\n```\n/\n├─ apps/\n│  ├─ web/                 # Current Next.js app (rename current `src/app` entry point)\n│  └─ mobile/              # New Expo Router (React Native) app\n├─ packages/\n│  ├─ ui/                  # Cross-platform components (React Native + NativeWind)\n│  ├─ features/            # Feature hooks + view models shared across apps\n│  └─ data/                # Supabase client, storage adapters, sync logic\n└─ tsconfig.base.json      # Shared TS config for path aliases\n```\n\nThe migration keeps the existing web app running while the mobile client is developed. Gradually move portable logic from `src/lib`, `src/contexts`, `src/hooks`, and `src/types` into `/packages` modules consumed by both apps.\n\n## Migration Phases\n1. **Preparation (Week 0–1)**\n   - Rename current Next.js entry from `src` to `apps/web/src` (update paths/tsconfig).\n   - Introduce Yarn/NPM workspaces with the monorepo structure above.\n   - Set up shared TypeScript config and lint rules that work in both environments.\n\n2. **Platform Foundations (Week 1–2)**\n   - Scaffold Expo app in `apps/mobile` with TypeScript, React Navigation, NativeWind, Reanimated, Gesture Handler, and Supabase client (REST/websocket via `supabase-js` works in RN >= 2.0).\n   - Implement auth flow (email/password + session persistence) using `@react-native-async-storage/async-storage`.\n   - Build an adapter interface for storage (`packages/data/storage`) with two concrete implementations:\n     - Web: Dexie (existing logic)\n     - Mobile: SQLite (via `expo-sqlite` or `drizzle-orm/expo-sqlite`) or WatermelonDB for sync-friendly operations.\n\n3. **Shared Domain Logic (Week 2–3)**\n   - Extract supabase query hooks, calculation helpers (`achievements.ts`, `unit-conversions.ts`, etc.) into `packages/data` and `packages/features`.\n   - Refactor contexts (session, workout session, gym, etc.) to be platform-agnostic: move logic into hooks/services that do not import DOM APIs.\n   - Write Jest tests covering shared logic to ensure parity during migration.\n   - ✅ Supabase auth provider shared between web and mobile with storage-specific session persistence hooks.\n   - ✅ Session persistence adapters extracted (Dexie on web, AsyncStorage on mobile) using shared interfaces.\n   - ✅ Shared workout history hook centralises aggregation logic while keeping platform-specific caching.\n   - ✅ Activity chart hook shared; mobile dashboard surfaces real activity stats from Supabase data.\n   - ✅ Workout performance analytics shared; Dexie caches stay in sync via shared raw payloads.\n   - ✅ Exercise history hook shared; weight-unit preferences remain platform specific but data fetching unified.\n   - ✅ Workout plan aggregation shared; web/mobile consume unified T-Path data with per-platform caching.\n   - ✅ Personal record hook shared; UI formatting handled per platform.\n   - ✅ Sync queue storage abstraction added (Dexie + AsyncStorage adapters) readying offline sync phase.\n   - ✅ Shared sync queue processor hook drives web background syncing via store abstraction.\n   - ✅ Mobile sync manager wired to shared processor using AsyncStorage-backed queue.\n\n4. **UI/UX Parity (Week 3–6)**\n   - For each major surface (Dashboard, Workout Session, Activity Logs, Onboarding) build RN screens using:\n     - Layout: React Native primitives + NativeWind (Tailwind-like styling)\n     - Components: `react-native-paper` or custom components within `packages/ui`\n     - Charts: Replace Recharts with `victory-native` or `react-native-svg-charts`\n     - Drag/drop interactions: `@rn-primitives/dnd` or custom Reanimated gestures replacing `@dnd-kit`\n     - Dialogs/Sheets: `react-native-reanimated-bottom-sheet`, `@gorhom/bottom-sheet`, or Expo Router modals.\n   - Replace Radix UI dependent components with RN equivalents; document mapping (table below).\n\n5. **Offline Sync & Background Tasks (Week 6–7)**\n   - Reimplement SyncManager using a queue stored in SQLite/AsyncStorage.\n   - Use Expo TaskManager or React Native Background Fetch to enqueue sync operations when app regains connectivity.\n\n6. **QA & Deployment (Week 7–8)**\n   - Snapshot test core screens, run device testing (Expo Go + EAS builds).\n   - Configure OTA updates with Expo EAS Update and align Supabase redirect URLs for mobile deep links.\n\n## Web Dependency Mapping\n| Web Dependency | Purpose | React Native Approach |\n| --- | --- | --- |\n| Tailwind + Radix UI wrappers | Layout, components | `nativewind` for styling; custom components or libraries like `react-native-paper`, `@rn-primitives/*`, `react-native-modal`, `@gorhom/bottom-sheet` |\n| `@dnd-kit/*` | Drag-and-drop reorder | Reanimated + Gesture Handler (`react-native-draggable-flatlist`) |\n| Dexie.js | IndexedDB offline store | `expo-sqlite`, `react-native-mmkv`, or WatermelonDB |\n| `sonner` toasts | Notifications | `react-native-toast-message` or Expo Haptics + custom toast context |\n| `react-youtube` | Embedded video | `react-native-youtube-iframe` or Expo AV |\n| `recharts` | Charts for progress | `victory-native`, `react-native-svg-charts` |\n| Next.js routing/layout | Pages & server components | Expo Router + React Navigation stack/tab layout |\n| Next.js API routes | Backend functions | Replace with Supabase Edge Functions or keep separate serverless endpoints |\n\n## Shared Code Extraction Checklist\n- `src/lib/achievements.ts`, `unit-conversions.ts`, `utils.ts` → `packages/data` (ensure no DOM usage).\n- `src/components/session-context-provider.tsx` logic becomes `packages/features/auth/session-service.ts` consumed by platform-specific providers.\n- Workout session business logic from `src/components/workout-session/*` extracted into hooks/services; RN screens consume these while providing platform-specific UI.\n- Form validation with `zod` + `react-hook-form` stays shareable (RN supports React Hook Form controllers with `@react-native-community/hooks`).\n\n## Mobile App Technical Stack\n- **Bundler/Runtime**: Expo SDK 51+, Hermes engine enabled.\n- **Navigation**: Expo Router (file-based) atop React Navigation v7.\n- **Styling**: NativeWind + Tailwind config parity; create limited design tokens to match current theme.\n- **State Management**: React Context + Zustand (optional) for ephemeral UI state (matches existing patterns if introduced).\n- **Storage/Offline**: AsyncStorage for auth session cache; SQLite + custom sync queue for workouts/logs; consider `@supabase-cache-helpers/postgrest-react-query` if migrating to TanStack Query.\n- **Tooling**: Expo EAS builds, ESLint + TypeScript path mapping shared across apps.\n\n## Immediate Next Steps\n1. ✅ (Done) Convert repository to a workspace (npm or pnpm) and relocate current Next.js code into `apps/web` without functional changes.\n2. ✅ (Done) Initialize Expo app in `apps/mobile` (TypeScript template) and configure ESLint + Prettier with shared base config.\n3. ✅ (Done) Implement cross-platform Supabase client wrapper that selects proper storage adapter (AsyncStorage vs. browser `localStorage`).\n4. ✅ (Done) Build placeholder mobile screens for Login and Dashboard that call shared hooks (even with mocked data) to validate architecture.\n5. ✅ (Done) Start migrating shared utilities into `packages` while keeping aliased imports working in the web app.\n\n## Risks & Considerations\n- Dexie-to-SQLite migration requires schema redesign; plan data migration scripts to keep offline queue integrity.\n- Many Radix UI UX patterns (popover, command menu) require custom RN implementations; budget additional time for parity.\n- Supabase auth deep linking (magic links/password resets) must be updated for native (use `AuthSession` or deep link handlers).\n- Testing stack changes: adopt Detox/E2E or Expo Test Runner for device coverage.\n\n## Definition of Done\n- Apps share a majority of business logic packages.\n- Mobile app reproduces core flows: onboarding, workout logging, progress dashboard, profile management, AI prompts (if applicable).\n- Offline sync queue works across login/logout boundaries with conflict resolution parity.\n- CI pipeline builds both web and mobile targets; release process defined for Expo EAS.\n","size_bytes":8511},"supabase/functions/deno-env.d.ts":{"content":"/// <reference types=\"https://raw.githubusercontent.com/denoland/deno/main/cli/tsc/dts/lib.deno.ns.d.ts\" />\n\ndeclare global {\n  namespace Deno {\n    interface Env {\n      get(key: string): string | undefined;\n    }\n  }\n}\n\nexport {};","size_bytes":232},"apps/mobile/app/_layout.tsx":{"content":"import { Stack } from \"expo-router\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { AuthProvider } from \"./_contexts/auth-context\";\nimport { DataProvider } from \"./_contexts/data-context\";\nimport { PreferencesProvider } from \"./_contexts/preferences-context\";\nimport { SyncManagerInitializer } from \"./_components/SyncManagerInitializer\";\nimport { WorkoutFlowProvider } from \"./_contexts/workout-flow-context\";\nimport { UnsavedChangesModal } from \"./_components/workout/UnsavedChangesModal\";\n\nexport default function RootLayout() {\n  return (\n    <SafeAreaProvider>\n      <AuthProvider>\n        <PreferencesProvider>\n          <DataProvider>\n            <WorkoutFlowProvider>\n              <StatusBar style=\"light\" />\n              <SyncManagerInitializer />\n              <Stack screenOptions={{ headerShown: false }}>\n                <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n                <Stack.Screen\n                  name=\"login\"\n                  options={{ headerShown: false, presentation: \"modal\" }}\n                />\n                <Stack.Screen\n                  name=\"history\"\n                  options={{ headerShown: true, title: \"Workout History\" }}\n                />\n                <Stack.Screen\n                  name=\"workout-detail\"\n                  options={{ headerShown: true, title: \"Workout Details\" }}\n                />\n                <Stack.Screen\n                  name=\"exercise-picker\"\n                  options={{ headerShown: true, title: \"Select Exercise\" }}\n                />\n                <Stack.Screen\n                  name=\"templates\"\n                  options={{ headerShown: true, title: \"Templates\" }}\n                />\n                <Stack.Screen\n                  name=\"measurements\"\n                  options={{ headerShown: true, title: \"Body Measurements\" }}\n                />\n                <Stack.Screen\n                  name=\"measurements-history\"\n                  options={{ headerShown: true, title: \"Measurements History\" }}\n                />\n                <Stack.Screen\n                  name=\"gyms\"\n                  options={{ headerShown: true, title: \"My Gyms\" }}\n                />\n                <Stack.Screen\n                  name=\"goals-list\"\n                  options={{ headerShown: true, title: \"Goals\" }}\n                />\n                <Stack.Screen\n                  name=\"create-goal\"\n                  options={{ headerShown: true, title: \"Create Goal\" }}\n                />\n                <Stack.Screen\n                  name=\"gym-photo-analyzer\"\n                  options={{ headerShown: true, title: \"Analyze Gym\" }}\n                />\n                <Stack.Screen\n                  name=\"ai-program-generator\"\n                  options={{ headerShown: true, title: \"AI Program Generator\" }}\n                />\n              </Stack>\n              <UnsavedChangesModal />\n            </WorkoutFlowProvider>\n          </DataProvider>\n        </PreferencesProvider>\n      </AuthProvider>\n    </SafeAreaProvider>\n  );\n}\n","size_bytes":3115},"supabase/functions/ai-coach/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface ExerciseDef { name: string; main_muscle: string; }\ninterface SetLog {\n  session_id: string; weight_kg: number | null; reps: number | null; time_seconds: number | null;\n  exercise_definitions: Pick<ExerciseDef, 'name' | 'main_muscle'> | null;\n}\ninterface WorkoutSession { id: string; session_date: string; template_name: string | null; rating: number | null; }\n\n// @ts-ignore\nconst OPENAI_API_KEY = Deno.env.get(\"OPENAI_API_KEY\");\nconst OPENAI_API_URL = \"https://api.openai.com/v1/chat/completions\";\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });\n\n  try {\n    const supabaseClient = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }\n    );\n    const supabaseServiceRoleClient = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const { data: { user } } = await supabaseClient.auth.getUser();\n    if (!user) throw new Error('Unauthorized');\n\n    const { sessionId } = await req.json();\n    let prompt: string;\n    let workoutHistory;\n\n    if (sessionId) {\n      const { data: sessions, error: sessionError } = await supabaseClient.from('workout_sessions').select('id, session_date, template_name, rating').eq('id', sessionId).eq('user_id', user.id).returns<WorkoutSession[]>();\n      if (sessionError) throw sessionError;\n      if (!sessions || sessions.length === 0) return new Response(JSON.stringify({ analysis: \"Specific workout session not found.\" }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n      \n      const { data: setLogs, error: setLogsError } = await supabaseClient.from('set_logs').select('session_id, weight_kg, reps, time_seconds, exercise_definitions(name, main_muscle)').eq('session_id', sessionId).returns<SetLog[]>();\n      if (setLogsError) throw setLogsError;\n\n      workoutHistory = sessions.map((s: WorkoutSession) => ({ ...s, exercises: setLogs?.filter((l: SetLog) => l.session_id === s.id).map((l: SetLog) => ({ name: l.exercise_definitions?.name, muscle: l.exercise_definitions?.main_muscle, weight: l.weight_kg, reps: l.reps, time: l.time_seconds })) }));\n      prompt = `Analyze the following single workout session... Provide a concise, encouraging, and actionable analysis specific to this workout... Your response must be a JSON object with a single key \"analysis\" containing the markdown formatted string. Example: {\"analysis\": \"**Overall Impression**\\\\n...\"}`;\n    } else {\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      const { data: sessions, error: sessionsError } = await supabaseClient.from('workout_sessions').select('id, session_date, template_name, rating').eq('user_id', user.id).gte('session_date', thirtyDaysAgo.toISOString()).returns<WorkoutSession[]>();\n      if (sessionsError) throw sessionsError;\n      if (!sessions || sessions.length === 0) return new Response(JSON.stringify({ analysis: \"Not enough workout data from the last 30 days to provide an analysis.\" }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n      \n      const sessionIds = sessions.map((s: WorkoutSession) => s.id);\n      const { data: setLogs, error: setLogsError } = await supabaseClient.from('set_logs').select('session_id, weight_kg, reps, time_seconds, exercise_definitions(name, main_muscle)').in('session_id', sessionIds).returns<SetLog[]>();\n      if (setLogsError) throw setLogsError;\n\n      workoutHistory = sessions.map((s: WorkoutSession) => ({ ...s, exercises: setLogs?.filter((l: SetLog) => l.session_id === s.id).map((l: SetLog) => ({ name: l.exercise_definitions?.name, muscle: l.exercise_definitions?.main_muscle, weight: l.weight_kg, reps: l.reps, time: l.time_seconds })) }));\n      prompt = `Analyze the following workout history from the last 30 days... Provide a concise, encouraging, and actionable analysis... Your response must be a JSON object with a single key \"analysis\" containing the markdown formatted string. Example: {\"analysis\": \"**Overall Progress**\\\\n...\"}`;\n    }\n\n    const fullPrompt = `${prompt}\\n\\nWorkout Data:\\n${JSON.stringify(workoutHistory, null, 2)}`;\n\n    const openaiResponse = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${OPENAI_API_KEY}` },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: fullPrompt }],\n        response_format: { type: \"json_object\" }\n      }),\n    });\n\n    if (!openaiResponse.ok) {\n      const errorBody = await openaiResponse.text();\n      throw new Error(`OpenAI API error: ${openaiResponse.status} ${errorBody}`);\n    }\n\n    const openaiData = await openaiResponse.json();\n    const analysisJson = JSON.parse(openaiData.choices[0].message.content);\n\n    const { error: logError } = await supabaseServiceRoleClient.from('ai_coach_usage_logs').insert({ user_id: user.id, used_at: new Date().toISOString() });\n    if (logError) console.error(\"Error logging AI coach usage:\", logError.message);\n\n    return new Response(JSON.stringify({ analysis: analysisJson.analysis }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(error);\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":6064},"supabase/functions/calculate-rolling-status/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n// @ts-ignore\nimport { v4 as uuidv4 } from 'https://esm.sh/uuid@9.0.1';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\ninterface WorkoutSession {\n  session_date: string;\n}\n\n// Helper function to initialize Supabase client with service role key\nconst getSupabaseServiceRoleClient = () => {\n  // @ts-ignore\n  const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';\n  // @ts-ignore\n  const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '';\n  return createClient(supabaseUrl, supabaseServiceRoleKey);\n};\n\n// Helper to log user-specific errors\nconst logUserAlert = async (supabase: any, userId: string, title: string, message: string, type: string = 'system_error') => {\n  const { error: insertAlertError } = await supabase.from('user_alerts').insert({\n    id: uuidv4(),\n    user_id: userId,\n    title: title,\n    message: message,\n    type: type,\n    created_at: new Date().toISOString(),\n    is_read: false,\n  });\n  if (insertAlertError) {\n    console.error(`Failed to log user alert for user ${userId}:`, insertAlertError.message);\n  }\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  const supabaseServiceRoleClient = getSupabaseServiceRoleClient();\n  let userId: string | null = null; // Declare userId here to be accessible in catch block\n\n  try {\n    const { user_id } = await req.json();\n    userId = user_id; // Assign to outer scope userId\n\n    if (!userId) {\n      return new Response(JSON.stringify({ error: 'user_id is required' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // Fetch all workout sessions for the user, ordered by date\n    const { data: workoutSessions, error: sessionsError } = await supabaseServiceRoleClient\n      .from('workout_sessions')\n      .select('session_date')\n      .eq('user_id', userId)\n      .order('session_date', { ascending: false }); // Order descending to easily check recent activity\n\n    if (sessionsError) throw sessionsError;\n\n    const uniqueWorkoutDates = new Set<string>();\n    (workoutSessions || []).forEach((session: WorkoutSession) => {\n      uniqueWorkoutDates.add(new Date(session.session_date).toISOString().split('T')[0]);\n    });\n\n    let consecutivePeriods = 0;\n    let currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0); // Normalize to start of day\n\n    // Check the most recent 7-day period\n    let hasWorkoutInCurrentPeriod = false;\n    for (let i = 0; i < 7; i++) {\n      const checkDate = new Date(currentDate);\n      checkDate.setDate(currentDate.getDate() - i);\n      if (uniqueWorkoutDates.has(checkDate.toISOString().split('T')[0])) {\n        hasWorkoutInCurrentPeriod = true;\n        break;\n      }\n    }\n\n    if (!hasWorkoutInCurrentPeriod) {\n      // If no workout in the last 7 days, status is \"Getting into it\"\n      const { error: updateError } = await supabaseServiceRoleClient\n        .from('profiles')\n        .update({ rolling_workout_status: 'Getting into it' })\n        .eq('id', userId);\n      if (updateError) throw updateError;\n\n      return new Response(\n        JSON.stringify({ status: 'Getting into it', consecutivePeriods: 0 }),\n        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    // If there's a workout in the current 7-day period, start counting consecutive periods backwards\n    consecutivePeriods = 1;\n    let currentPeriodEndDate = new Date(currentDate);\n    currentPeriodEndDate.setDate(currentPeriodEndDate.getDate() - 7); // End of the *previous* 7-day period\n\n    while (true) {\n      let foundWorkoutInPeriod = false;\n      const periodStartDate = new Date(currentPeriodEndDate);\n      periodStartDate.setDate(currentPeriodEndDate.getDate() - 6); // Start of the 7-day period\n\n      for (let i = 0; i < 7; i++) {\n        const checkDate = new Date(periodStartDate);\n        checkDate.setDate(periodStartDate.getDate() + i);\n        if (uniqueWorkoutDates.has(checkDate.toISOString().split('T')[0])) {\n          foundWorkoutInPeriod = true;\n          break;\n        }\n      }\n\n      if (foundWorkoutInPeriod) {\n        consecutivePeriods++;\n        currentPeriodEndDate.setDate(currentPeriodEndDate.getDate() - 7); // Move to the next previous period\n      } else {\n        break; // No workout found in this 7-day period, streak ends\n      }\n    }\n\n    let status: string;\n    if (consecutivePeriods === 0) {\n      status = \"Getting into it\"; // Changed from \"Ready to Start\"\n    } else if (consecutivePeriods >= 1 && consecutivePeriods <= 3) {\n      status = \"Building Momentum\";\n    } else if (consecutivePeriods >= 4 && consecutivePeriods <= 7) {\n      status = \"In the Zone\";\n    } else { // 8+ consecutive periods\n      status = \"On Fire\";\n    }\n\n    const { error: updateError } = await supabaseServiceRoleClient\n      .from('profiles')\n      .update({ rolling_workout_status: status })\n      .eq('id', userId);\n\n    if (updateError) throw updateError;\n\n    return new Response(\n      JSON.stringify({ status, consecutivePeriods }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n\n  } catch (error) {\n    console.error(\"Error in calculate-rolling-status edge function:\", error);\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    if (userId) {\n      await logUserAlert(supabaseServiceRoleClient, userId, \"Rolling Status Update Error\", `An error occurred while updating your rolling workout status: ${message}`, \"system_error\");\n    }\n    return new Response(JSON.stringify({ error: message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});","size_bytes":5984},"supabase/functions/complete-onboarding/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// --- INLINED SHARED UTILITY CODE ---\n\n// Type Definitions\ninterface ExerciseDefinition {\n  id: string; name: string; user_id: string | null; library_id: string | null;\n  movement_type: string | null; movement_pattern: string | null; main_muscle: string;\n  type: string; category: string | null; description: string | null;\n  pro_tip: string | null; video_url: string | null; icon_url: string | null;\n}\ninterface WorkoutExerciseStructure {\n  exercise_library_id: string; workout_name: string;\n  min_session_minutes: number | null; bonus_for_time_group: number | null;\n}\n\n// Utility Functions\nfunction getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30; case '30-45': return 45;\n    case '45-60': return 60; case '60-90': return 90;\n    default: return 90;\n  }\n}\nfunction getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 }; case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 }; case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 };\n  }\n}\nfunction getWorkoutNamesForSplit(workoutSplit: string): string[] {\n  if (workoutSplit === 'ulul') return ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\n  if (workoutSplit === 'ppl') return ['Push', 'Pull', 'Legs'];\n  throw new Error('Unknown workout split type.');\n}\nconst sortExercises = (exercises: ExerciseDefinition[]) => {\n  return exercises.sort((a, b) => {\n    if (a.movement_type === 'compound' && b.movement_type !== 'compound') return -1;\n    if (a.movement_type !== 'compound' && b.movement_type === 'compound') return 1;\n    return a.name.localeCompare(b.name);\n  });\n};\nfunction musclesIntersect(muscleString: string, muscleSet: Set<string>): boolean {\n    if (!muscleString) return false;\n    const muscles = muscleString.split(',').map(m => m.trim());\n    return muscles.some(m => muscleSet.has(m));\n}\nasync function generateWorkoutPlanForTPath(\n  supabaseServiceRoleClient: any, userId: string, tPathId: string,\n  sessionLength: string | null, activeGymId: string | null, useStaticDefaults: boolean\n) {\n  const { data: tPathData, error: tPathError } = await supabaseServiceRoleClient.from('t_paths').select('id, settings, user_id').eq('id', tPathId).eq('user_id', userId).single();\n  if (tPathError || !tPathData) throw new Error(`Main T-Path not found for user ${userId} and tPathId ${tPathId}.`);\n  const { data: oldChildWorkouts, error: fetchOldError } = await supabaseServiceRoleClient.from('t_paths').select('id').eq('parent_t_path_id', tPathId).eq('user_id', userId);\n  if (fetchOldError) throw fetchOldError;\n  if (oldChildWorkouts && oldChildWorkouts.length > 0) {\n    const oldChildIds = oldChildWorkouts.map((w: { id: string }) => w.id);\n    await supabaseServiceRoleClient.from('t_path_exercises').delete().in('template_id', oldChildIds);\n    await supabaseServiceRoleClient.from('t_paths').delete().in('id', oldChildIds);\n  }\n  const tPathSettings = tPathData.settings as { tPathType?: string };\n  if (!tPathSettings?.tPathType) throw new Error('Invalid T-Path settings.');\n  const workoutSplit = tPathSettings.tPathType;\n  const { main: maxMainExercises, bonus: maxBonusExercises } = getExerciseCounts(sessionLength);\n  const workoutNames = getWorkoutNamesForSplit(workoutSplit);\n  const maxAllowedMinutes = getMaxMinutes(sessionLength);\n  if (useStaticDefaults) {\n    const { data: structureData, error: structureError } = await supabaseServiceRoleClient.from('workout_exercise_structure').select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group').eq('workout_split', workoutSplit);\n    if (structureError) throw structureError;\n    const { data: globalExercises, error: globalExError } = await supabaseServiceRoleClient.from('exercise_definitions').select('id, name, main_muscle, type, category, description, pro_tip, video_url, library_id, movement_type, movement_pattern, icon_url').is('user_id', null);\n    if (globalExError) throw globalExError;\n    const globalExerciseMap = new Map<string, ExerciseDefinition>();\n    (globalExercises || []).forEach((ex: ExerciseDefinition) => { if (ex.library_id) globalExerciseMap.set(ex.library_id, ex as ExerciseDefinition); });\n    for (const workoutName of workoutNames) {\n      const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n      if (createChildError) throw createChildError;\n      const childWorkoutId = newChildWorkout.id;\n      const exercisesForThisWorkout = (structureData || []).filter((s: WorkoutExerciseStructure) => s.workout_name === workoutName);\n      let mainExercisesToInsert: any[] = [], bonusExercisesToInsert: any[] = [];\n      exercisesForThisWorkout.forEach((s: WorkoutExerciseStructure) => {\n        const exerciseDef = globalExerciseMap.get(s.exercise_library_id);\n        if (exerciseDef) {\n          if (s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes) mainExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: false });\n          else if (s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group) bonusExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: true });\n        }\n      });\n      mainExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      bonusExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      const finalMainExercises = mainExercisesToInsert.slice(0, maxMainExercises);\n      const finalBonusExercises = bonusExercisesToInsert.slice(0, maxBonusExercises);\n      const exercisesToInsertPayload = [...finalMainExercises.map((ex, index) => ({ ...ex, order_index: index })), ...finalBonusExercises.map((ex, index) => ({ ...ex, order_index: finalMainExercises.length + index }))];\n      if (exercisesToInsertPayload.length > 0) {\n        const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n        if (insertError) throw insertError;\n      }\n    }\n    return;\n  }\n  const { data: allExercises, error: fetchAllExercisesError } = await supabaseServiceRoleClient.from('exercise_definitions').select('*');\n  if (fetchAllExercisesError) throw fetchAllExercisesError;\n  const { data: allGymLinks, error: allGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id');\n  if (allGymLinksError) throw allGymLinksError;\n  const allLinkedExerciseIds = new Set((allGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n  const workoutSpecificPools: Record<string, ExerciseDefinition[]> = {};\n  if (workoutSplit === 'ulul') {\n    const UPPER_BODY_MUSCLES = new Set(['Pectorals', 'Deltoids', 'Lats', 'Traps', 'Biceps', 'Triceps', 'Abdominals', 'Core']);\n    const LOWER_BODY_MUSCLES = new Set(['Quadriceps', 'Hamstrings', 'Glutes', 'Calves']);\n    const upperPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, UPPER_BODY_MUSCLES));\n    const lowerPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, LOWER_BODY_MUSCLES));\n    workoutSpecificPools['Upper Body A'] = []; workoutSpecificPools['Upper Body B'] = [];\n    workoutSpecificPools['Lower Body A'] = []; workoutSpecificPools['Lower Body B'] = [];\n    sortExercises(upperPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Upper Body A' : 'Upper Body B'].push(ex));\n    sortExercises(lowerPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Lower Body A' : 'Lower Body B'].push(ex));\n  } else {\n    workoutSpecificPools['Push'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Push'));\n    workoutSpecificPools['Pull'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Pull'));\n    workoutSpecificPools['Legs'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Legs'));\n  }\n  for (const workoutName of workoutNames) {\n    const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n    if (createChildError) throw createChildError;\n    const childWorkoutId = newChildWorkout.id;\n    const candidatePool = workoutSpecificPools[workoutName] || [];\n    let activeGymExerciseIds = new Set<string>();\n    if (activeGymId) {\n      const { data: activeGymLinks, error: activeGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id').eq('gym_id', activeGymId);\n      if (activeGymLinksError) throw activeGymLinksError;\n      activeGymExerciseIds = new Set((activeGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n    }\n    \n    // --- START OF THE CHANGE ---\n    // Tier 1: User's custom exercises.\n    const tier1Pool = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === userId);\n    // Tier 2: Global exercises linked to the active gym.\n    const tier2Pool_gymLinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && activeGymExerciseIds.has(ex.id));\n    // Tier 3: Global exercises NOT linked to any gym (fallback).\n    const tier3Pool_unlinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && !allLinkedExerciseIds.has(ex.id));\n    \n    // Combine pools in the new priority order.\n    const finalPool = [...tier1Pool, ...tier2Pool_gymLinkedGlobal, ...tier3Pool_unlinkedGlobal];\n    // --- END OF THE CHANGE ---\n\n    const finalUniquePool = [...new Map(finalPool.map(item => [item.id, item])).values()];\n    const mainExercisesForWorkout = finalUniquePool.slice(0, maxMainExercises);\n    const bonusExercisesForWorkout = finalUniquePool.slice(maxMainExercises, maxMainExercises + maxBonusExercises);\n    const exercisesToInsertPayload = [...mainExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: index, is_bonus_exercise: false })), ...bonusExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: mainExercisesForWorkout.length + index, is_bonus_exercise: true }))];\n    if (exercisesToInsertPayload.length > 0) {\n      const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n      if (insertError) throw insertError;\n    }\n  }\n}\n// --- END INLINED CODE ---\n\nconst getSupabaseServiceRoleClient = () => {\n  // @ts-ignore\n  const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';\n  // @ts-ignore\n  const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '';\n  return createClient(supabaseUrl, supabaseServiceRoleKey);\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });\n\n  const supabaseServiceRoleClient = getSupabaseServiceRoleClient();\n  let userId: string | null = null;\n\n  try {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n    userId = user.id;\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'in_progress', t_path_generation_error: null }).eq('id', userId);\n\n    const {\n      tPathType, experience, goalFocus, preferredMuscles, constraints,\n      sessionLength, equipmentMethod, gymName, confirmedExercises,\n      fullName, heightCm, weightKg, bodyFatPct\n    } = await req.json();\n\n    if (!tPathType || !experience || !sessionLength || !fullName || !heightCm || !weightKg) {\n      throw new Error(\"Missing required onboarding data.\");\n    }\n\n    const { data: insertedGym, error: insertGymError } = await supabaseServiceRoleClient.from('gyms').insert({ user_id: user.id, name: gymName || \"My Gym\" }).select('id').single();\n    if (insertGymError) throw insertGymError;\n    const newGymId = insertedGym.id;\n\n    const tPathsToInsert = [\n      { user_id: user.id, gym_id: newGymId, template_name: '4-Day Upper/Lower', is_bonus: false, parent_t_path_id: null, settings: { tPathType: 'ulul', experience, goalFocus, preferredMuscles, constraints, equipmentMethod } },\n      { user_id: user.id, gym_id: newGymId, template_name: '3-Day Push/Pull/Legs', is_bonus: false, parent_t_path_id: null, settings: { tPathType: 'ppl', experience, goalFocus, preferredMuscles, constraints, equipmentMethod } }\n    ];\n    const { data: insertedTPaths, error: insertTPathsError } = await supabaseServiceRoleClient.from('t_paths').insert(tPathsToInsert).select('*');\n    if (insertTPathsError) throw insertTPathsError;\n\n    const activeTPath = insertedTPaths.find((tp: any) => (tPathType === 'ulul' && tp.template_name === '4-Day Upper/Lower') || (tPathType === 'ppl' && tp.template_name === '3-Day Push/Pull/Legs'));\n    if (!activeTPath) throw new Error(\"Could not determine active T-Path after creation.\");\n\n    const exerciseIdsToLinkToGym = new Set<string>();\n    const newExercisesToCreate = [];\n    const confirmedExercisesDataForPlan: any[] = [];\n\n    const useStaticDefaultsForExercises = equipmentMethod === 'skip';\n\n    for (const ex of (confirmedExercises || [])) {\n      if (ex.existing_id) {\n        exerciseIdsToLinkToGym.add(ex.existing_id);\n        confirmedExercisesDataForPlan.push({ id: ex.existing_id, name: ex.name!, user_id: null, library_id: null, movement_type: ex.movement_type || null, movement_pattern: ex.movement_pattern || null, main_muscle: ex.main_muscle!, type: ex.type!, category: ex.category || null, description: ex.description || null, pro_tip: ex.pro_tip || null, video_url: ex.video_url || null, icon_url: ex.icon_url || null });\n      } else {\n        newExercisesToCreate.push({ name: ex.name!, main_muscle: ex.main_muscle!, type: ex.type!, category: ex.category, description: ex.description, pro_tip: ex.pro_tip, video_url: ex.video_url, icon_url: ex.icon_url, user_id: user.id, library_id: null, is_favorite: false, created_at: new Date().toISOString(), movement_type: ex.movement_type, movement_pattern: ex.movement_pattern });\n      }\n    }\n\n    if (newExercisesToCreate.length > 0) {\n      const { data: insertedExercises, error: insertExError } = await supabaseServiceRoleClient.from('exercise_definitions').insert(newExercisesToCreate).select('*');\n      if (insertExError) throw insertExError;\n      insertedExercises.forEach((ex: any) => {\n        exerciseIdsToLinkToGym.add(ex.id);\n        confirmedExercisesDataForPlan.push(ex);\n      });\n    }\n\n    if (exerciseIdsToLinkToGym.size > 0) {\n      const gymLinks = Array.from(exerciseIdsToLinkToGym).map(exId => ({ gym_id: newGymId, exercise_id: exId }));\n      const { error: gymLinkError } = await supabaseServiceRoleClient.from('gym_exercises').insert(gymLinks);\n      if (gymLinkError) throw gymLinkError;\n    }\n\n    const nameParts = fullName.split(' ');\n    const firstName = nameParts.shift() || '';\n    const lastName = nameParts.join(' ') || '';\n    const profileData = { id: user.id, first_name: firstName, last_name: lastName, full_name: fullName, height_cm: heightCm, weight_kg: weightKg, body_fat_pct: bodyFatPct, preferred_muscles: preferredMuscles, primary_goal: goalFocus, health_notes: constraints, default_rest_time_seconds: 60, preferred_session_length: sessionLength, active_t_path_id: activeTPath.id, active_gym_id: newGymId, programme_type: tPathType };\n    const { data: upsertedProfile, error: profileError } = await supabaseServiceRoleClient.from('profiles').upsert(profileData).select().single();\n    if (profileError) throw profileError;\n\n    const childWorkoutsWithExercises = [];\n    for (const tPath of insertedTPaths) {\n      await generateWorkoutPlanForTPath(supabaseServiceRoleClient, user.id, tPath.id, sessionLength, newGymId, useStaticDefaultsForExercises);\n      if (tPath.id === activeTPath.id) {\n        const { data: childWorkouts, error: childWorkoutsError } = await supabaseServiceRoleClient\n          .from('t_paths')\n          .select('*, t_path_exercises(*, exercise_definitions(*))')\n          .eq('parent_t_path_id', tPath.id);\n        if (childWorkoutsError) throw childWorkoutsError;\n\n        const transformedChildWorkouts = (childWorkouts || []).map((workout: any) => {\n          const exercises = (workout.t_path_exercises || []).map((tpe: any) => {\n            if (!tpe.exercise_definitions) return null;\n            return {\n              ...tpe.exercise_definitions,\n              is_bonus_exercise: tpe.is_bonus_exercise,\n            };\n          }).filter(Boolean);\n\n          const { t_path_exercises, ...restOfWorkout } = workout;\n          return {\n            ...restOfWorkout,\n            exercises: exercises,\n          };\n        });\n\n        childWorkoutsWithExercises.push(...transformedChildWorkouts);\n      }\n    }\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'completed', t_path_generation_error: null }).eq('id', userId);\n\n    return new Response(JSON.stringify({ message: 'Onboarding completed successfully.', profile: upsertedProfile, mainTPath: activeTPath, childWorkouts: childWorkoutsWithExercises, identifiedExercises: confirmedExercises }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in complete-onboarding edge function:\", JSON.stringify(error, null, 2));\n    if (userId) {\n      await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'failed', t_path_generation_error: message }).eq('id', userId);\n    }\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":18961},"supabase/functions/copy-gym-setup/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  const supabaseServiceRoleClient = createClient(\n    // @ts-ignore\n    Deno.env.get('SUPABASE_URL') ?? '',\n    // @ts-ignore\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n  );\n\n  let userId: string | null = null;\n\n  try {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n    userId = user.id;\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'in_progress', t_path_generation_error: null }).eq('id', userId);\n\n    const { sourceGymId, targetGymId } = await req.json();\n    if (!sourceGymId || !targetGymId) throw new Error('sourceGymId and targetGymId are required.');\n\n    // Call the safe PostgreSQL function to handle the transactional copy\n    const { data: newMainTPathId, error: rpcError } = await supabaseServiceRoleClient.rpc('clone_gym_setup', {\n      source_gym_id_in: sourceGymId,\n      target_gym_id_in: targetGymId,\n      user_id_in: userId,\n    });\n\n    if (rpcError) {\n      console.error(\"Error from clone_gym_setup RPC:\", rpcError);\n      throw rpcError;\n    }\n\n    // Handle case where source gym had no plan to copy\n    if (!newMainTPathId) {\n      throw new Error(\"The source gym does not have a valid workout plan to copy.\");\n    }\n\n    // After successful copy, check if we need to make the new gym active.\n    const { data: currentProfile, error: currentProfileError } = await supabaseServiceRoleClient.from('profiles').select('active_gym_id').eq('id', user.id).single();\n    if (currentProfileError) throw currentProfileError;\n\n    // If no gym is active, OR if the target gym is the active gym, update the active_t_path_id\n    if (currentProfile.active_gym_id === null || currentProfile.active_gym_id === targetGymId) {\n      await supabaseServiceRoleClient.from('profiles').update({ \n        active_gym_id: targetGymId, // Also set active_gym_id in case it was null\n        active_t_path_id: newMainTPathId \n      }).eq('id', user.id);\n    }\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'completed', t_path_generation_error: null }).eq('id', userId);\n\n    return new Response(JSON.stringify({ message: `Successfully copied setup to new gym.` }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in copy-gym-setup edge function:\", message);\n    if (userId) {\n      await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'failed', t_path_generation_error: message }).eq('id', userId);\n    }\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":3456},"supabase/functions/find-matching-pose/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseServiceRoleClient = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      return new Response(JSON.stringify({ error: 'Authorization header missing' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) {\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    const { source_photo_id } = await req.json();\n    if (!source_photo_id) {\n      return new Response(JSON.stringify({ error: 'source_photo_id is required' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // 1. Fetch the source photo to get its created_at timestamp\n    const { data: sourcePhoto, error: sourcePhotoError } = await supabaseServiceRoleClient\n      .from('progress_photos')\n      .select('created_at')\n      .eq('id', source_photo_id)\n      .eq('user_id', user.id)\n      .single();\n\n    if (sourcePhotoError || !sourcePhoto) {\n      return new Response(JSON.stringify({ error: 'Source photo not found' }), { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // 2. Calculate the target date (30 days prior)\n    const sourceDate = new Date(sourcePhoto.created_at);\n    const targetDate = new Date(sourceDate);\n    targetDate.setDate(sourceDate.getDate() - 30);\n\n    // 3. Fetch all other photos for the user\n    const { data: otherPhotos, error: otherPhotosError } = await supabaseServiceRoleClient\n      .from('progress_photos')\n      .select('id, created_at')\n      .eq('user_id', user.id)\n      .neq('id', source_photo_id);\n\n    if (otherPhotosError) throw otherPhotosError;\n\n    let matchedPhotoId: string | null = null;\n\n    if (otherPhotos && otherPhotos.length > 0) {\n      // 4. Find the photo with the timestamp closest to the target date\n      let closestPhoto = null;\n      let minDiff = Infinity;\n\n      for (const photo of otherPhotos) {\n        const photoDate = new Date(photo.created_at);\n        const diff = Math.abs(photoDate.getTime() - targetDate.getTime());\n        if (diff < minDiff) {\n          minDiff = diff;\n          closestPhoto = photo;\n        }\n      }\n      matchedPhotoId = closestPhoto?.id || null;\n    }\n\n    // 5. Fallback: If no other photos exist, find the user's very first photo\n    if (!matchedPhotoId) {\n      const { data: firstPhoto, error: firstPhotoError } = await supabaseServiceRoleClient\n        .from('progress_photos')\n        .select('id')\n        .eq('user_id', user.id)\n        .neq('id', source_photo_id)\n        .order('created_at', { ascending: true })\n        .limit(1)\n        .single();\n      \n      if (firstPhotoError && firstPhotoError.code !== 'PGRST116') throw firstPhotoError;\n      \n      if (firstPhoto) {\n        matchedPhotoId = firstPhoto.id;\n      }\n    }\n\n    if (!matchedPhotoId) {\n      return new Response(JSON.stringify({ error: 'No matching photo could be found' }), { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // 6. Fetch the full record of the matched photo\n    const { data: matchedPhoto, error: matchedPhotoError } = await supabaseServiceRoleClient\n      .from('progress_photos')\n      .select('*')\n      .eq('id', matchedPhotoId)\n      .single();\n\n    if (matchedPhotoError) throw matchedPhotoError;\n\n    return new Response(JSON.stringify({ matchedPhoto }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in find-matching-pose edge function:\", message);\n    return new Response(JSON.stringify({ error: message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});","size_bytes":4655},"supabase/functions/generate-adhoc-workout/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// Helper to shuffle an array in place\nconst shuffle = (array: any[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n// Define an interface for the exercise definition to avoid 'any' type\ninterface ExerciseDefinition {\n  id: string;\n  name: string;\n  main_muscle: string;\n  type: string;\n  category: string | null;\n  description: string | null;\n  pro_tip: string | null;\n  video_url: string | null;\n  user_id: string | null;\n  library_id: string | null;\n  is_favorite: boolean | null;\n  icon_url: string | null;\n  movement_type: string | null;\n  movement_pattern: string | null;\n}\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabase = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabase.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n\n    const { time_in_minutes, workout_focus, use_gym_equipment } = await req.json();\n    if (!time_in_minutes || !workout_focus) {\n      throw new Error(\"Missing required parameters: time_in_minutes and workout_focus.\");\n    }\n\n    // 1. Calculate Exercise Count\n    const exerciseCount = Math.floor(time_in_minutes / 5);\n    if (exerciseCount < 1) {\n      return new Response(JSON.stringify({ workout: [] }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // 2. Create Workout Template\n    let templateBase: string[] = [];\n    if (workout_focus === 'Full Body') templateBase = ['Push', 'Pull', 'Legs'];\n    else if (workout_focus === 'Upper Body') templateBase = ['Push', 'Pull'];\n    else if (workout_focus === 'Lower Body') templateBase = ['Legs'];\n    else throw new Error(\"Invalid workout_focus value.\");\n\n    let workoutTemplate: string[] = [];\n    for (let i = 0; i < exerciseCount; i++) {\n      workoutTemplate.push(templateBase[i % templateBase.length]);\n    }\n\n    // 3. Fetch Available Exercises\n    let query = supabase.from('exercise_definitions').select('*');\n\n    if (use_gym_equipment) {\n      const { data: profile } = await supabase.from('profiles').select('active_gym_id').eq('id', user.id).single();\n      const activeGymId = profile?.active_gym_id;\n      \n      let gymExerciseIds: string[] = [];\n      if (activeGymId) {\n        const { data: gymEx } = await supabase.from('gym_exercises').select('exercise_id').eq('gym_id', activeGymId);\n        if (gymEx) {\n          gymExerciseIds = gymEx.map((e: { exercise_id: string }) => e.exercise_id);\n        }\n      }\n      \n      // Fetch generic exercises OR exercises linked to the active gym\n      query = query.or(`user_id.is.null,id.in.(${gymExerciseIds.join(',') || '\"\"'})`);\n    } else {\n      // Fetch only generic (global) exercises of any type\n      query = query.is('user_id', null);\n    }\n\n    const { data: availableExercises, error: fetchError } = await query;\n    if (fetchError) throw fetchError;\n\n    // 4. Build the Workout\n    const pushPool = shuffle((availableExercises || []).filter((e: ExerciseDefinition) => e.movement_pattern === 'Push'));\n    const pullPool = shuffle((availableExercises || []).filter((e: ExerciseDefinition) => e.movement_pattern === 'Pull'));\n    const legsPool = shuffle((availableExercises || []).filter((e: ExerciseDefinition) => e.movement_pattern === 'Legs'));\n\n    const finalWorkout = [];\n    const usedExerciseIds = new Set<string>();\n\n    for (const pattern of workoutTemplate) {\n      let pool: any[] | undefined;\n      if (pattern === 'Push') pool = pushPool;\n      if (pattern === 'Pull') pool = pullPool;\n      if (pattern === 'Legs') pool = legsPool;\n\n      if (pool && pool.length > 0) {\n        // Find the first available exercise in the shuffled pool that hasn't been used\n        const exerciseIndex = pool.findIndex((ex: ExerciseDefinition) => !usedExerciseIds.has(ex.id));\n        if (exerciseIndex !== -1) {\n          const [exercise] = pool.splice(exerciseIndex, 1); // Remove it from the pool\n          finalWorkout.push(exercise);\n          usedExerciseIds.add(exercise.id);\n        }\n      }\n    }\n\n    // 5. Return the Workout\n    return new Response(JSON.stringify({ workout: finalWorkout }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in generate-adhoc-workout edge function:\", message);\n    return new Response(JSON.stringify({ error: message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});","size_bytes":5350},"supabase/functions/generate-exercise-suggestion/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n// @ts-ignore\nimport { v4 as uuidv4 } from 'https://esm.sh/uuid@9.0.1';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// @ts-ignore\nconst OPENAI_API_KEY = Deno.env.get(\"OPENAI_API_KEY\");\nconst OPENAI_API_URL = \"https://api.openai.com/v1/chat/completions\";\n\ninterface ExistingExercise { id: string; name: string; user_id: string | null; }\n\nconst VALID_MUSCLE_GROUPS = [ \"Pectorals\", \"Deltoids\", \"Lats\", \"Traps\", \"Biceps\", \"Triceps\", \"Quadriceps\", \"Hamstrings\", \"Glutes\", \"Calves\", \"Abdominals\", \"Core\", \"Full Body\" ];\nconst normalizeName = (name: string): string => name ? name.toLowerCase().replace(/\\s+/g, ' ').trim().replace(/s$/, '').replace(/[^a-z0-9\\s]/g, '') : '';\nconst getYouTubeEmbedUrl = (url: string | null | undefined): string | null => {\n  if (!url) return null;\n  if (url.includes('youtube.com/embed/')) {\n    return url;\n  }\n  const match = url.match(/(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([a-zA-Z0-9_-]{11})(?:\\S+)?/);\n  return (match && match[1]) ? `https://www.youtube.com/embed/${match[1]}` : url;\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });\n\n  try {\n    const supabaseServiceRoleClient = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n\n    const { main_muscle, type, category, saveScope = 'global' } = await req.json();\n    if (!main_muscle || !type) throw new Error('Missing main_muscle or type parameters.');\n\n    const prompt = `\n      You are an expert fitness coach. Generate a single, unique exercise suggestion based on the following criteria.\n      The exercise should be suitable for a general gym setting.\n      \n      Criteria:\n      - Main Muscle: ${main_muscle}\n      - Type: ${type}\n      ${category ? `- Category: ${category}` : ''}\n\n      Your entire response MUST be a single, clean JSON object with the exact following structure. Do not include any other text or markdown.\n      {\n        \"name\": \"Exercise Name\",\n        \"main_muscle\": \"Main Muscle Group (MUST be one of: ${VALID_MUSCLE_GROUPS.join(', ')})\",\n        \"type\": \"weight\" | \"timed\" | \"bodyweight\",\n        \"category\": \"Bilateral\" | \"Unilateral\" | null,\n        \"movement_type\": \"compound\" | \"isolation\",\n        \"movement_pattern\": \"Push\" | \"Pull\" | \"Legs\" | \"Core\",\n        \"description\": \"A brief description of the exercise.\",\n        \"pro_tip\": \"A short, actionable pro tip for performing the exercise.\",\n        \"video_url\": \"Optional YouTube or instructional video URL (can be empty string if none)\"\n      }\n    `;\n\n    const openaiResponse = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${OPENAI_API_KEY}` },\n      body: JSON.stringify({\n        model: \"gpt-4o\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" }\n      }),\n    });\n\n    if (!openaiResponse.ok) {\n      const errorBody = await openaiResponse.text();\n      throw new Error(`OpenAI API error: ${openaiResponse.status} ${errorBody}`);\n    }\n\n    const openaiData = await openaiResponse.json();\n    const newExerciseData = JSON.parse(openaiData.choices[0].message.content);\n\n    if (!newExerciseData || !newExerciseData.name || newExerciseData.name.trim() === '') {\n      throw new Error(\"AI failed to generate a valid exercise with a name.\");\n    }\n\n    const { data: allExistingExercises, error: fetchAllError } = await supabaseServiceRoleClient.from('exercise_definitions').select('name, user_id');\n    if (fetchAllError) throw fetchAllError;\n\n    const normalizedAiName = normalizeName(newExerciseData.name);\n    const isDuplicate = (allExistingExercises || []).some((ex: ExistingExercise) => normalizeName(ex.name) === normalizedAiName && (ex.user_id === null || ex.user_id === user.id));\n\n    if (isDuplicate) {\n      throw new Error(`AI suggested an exercise similar to one that already exists: \"${newExerciseData.name}\". Please try generating another.`);\n    }\n\n    const newLibraryId = `ai_gen_${uuidv4()}`;\n    const { data: insertedExercise, error: insertError } = await supabaseServiceRoleClient\n      .from('exercise_definitions')\n      .insert({\n        ...newExerciseData,\n        video_url: getYouTubeEmbedUrl(newExerciseData.video_url),\n        user_id: saveScope === 'user' ? user.id : null,\n        library_id: saveScope === 'user' ? null : newLibraryId,\n      })\n      .select('id, name, main_muscle, type, category, description, pro_tip, video_url, user_id, library_id, movement_type, movement_pattern')\n      .single();\n\n    if (insertError) throw insertError;\n\n    return new Response(JSON.stringify({ newExercise: insertedExercise }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in generate-exercise-suggestion edge function:\", message);\n    return new Response(JSON.stringify({ error: message }), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":5803},"supabase/functions/generate-t-path/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// --- INLINED SHARED UTILITY CODE ---\n\n// Type Definitions\ninterface ExerciseDefinition {\n  id: string; name: string; user_id: string | null; library_id: string | null;\n  movement_type: string | null; movement_pattern: string | null; main_muscle: string;\n  type: string; category: string | null; description: string | null;\n  pro_tip: string | null; video_url: string | null; icon_url: string | null;\n}\ninterface WorkoutExerciseStructure {\n  exercise_library_id: string; workout_name: string;\n  min_session_minutes: number | null; bonus_for_time_group: number | null;\n}\n\n// Utility Functions\nfunction getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30; case '30-45': return 45;\n    case '45-60': return 60; case '60-90': return 90;\n    default: return 90;\n  }\n}\nfunction getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 }; case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 }; case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 };\n  }\n}\nfunction getWorkoutNamesForSplit(workoutSplit: string): string[] {\n  if (workoutSplit === 'ulul') return ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\n  if (workoutSplit === 'ppl') return ['Push', 'Pull', 'Legs'];\n  throw new Error('Unknown workout split type.');\n}\nconst sortExercises = (exercises: ExerciseDefinition[]) => {\n  return exercises.sort((a, b) => {\n    if (a.movement_type === 'compound' && b.movement_type !== 'compound') return -1;\n    if (a.movement_type !== 'compound' && b.movement_type === 'compound') return 1;\n    return a.name.localeCompare(b.name);\n  });\n};\nfunction musclesIntersect(muscleString: string, muscleSet: Set<string>): boolean {\n    if (!muscleString) return false;\n    const muscles = muscleString.split(',').map(m => m.trim());\n    return muscles.some(m => muscleSet.has(m));\n}\nasync function generateWorkoutPlanForTPath(\n  supabaseServiceRoleClient: any, userId: string, tPathId: string,\n  sessionLength: string | null, activeGymId: string | null, useStaticDefaults: boolean\n) {\n  const { data: tPathData, error: tPathError } = await supabaseServiceRoleClient.from('t_paths').select('id, settings, user_id').eq('id', tPathId).eq('user_id', userId).single();\n  if (tPathError || !tPathData) throw new Error(`Main T-Path not found for user ${userId} and tPathId ${tPathId}.`);\n  const { data: oldChildWorkouts, error: fetchOldError } = await supabaseServiceRoleClient.from('t_paths').select('id').eq('parent_t_path_id', tPathId).eq('user_id', userId);\n  if (fetchOldError) throw fetchOldError;\n  if (oldChildWorkouts && oldChildWorkouts.length > 0) {\n    const oldChildIds = oldChildWorkouts.map((w: { id: string }) => w.id);\n    await supabaseServiceRoleClient.from('t_path_exercises').delete().in('template_id', oldChildIds);\n    await supabaseServiceRoleClient.from('t_paths').delete().in('id', oldChildIds);\n  }\n  const tPathSettings = tPathData.settings as { tPathType?: string };\n  if (!tPathSettings?.tPathType) throw new Error('Invalid T-Path settings.');\n  const workoutSplit = tPathSettings.tPathType;\n  const { main: maxMainExercises, bonus: maxBonusExercises } = getExerciseCounts(sessionLength);\n  const workoutNames = getWorkoutNamesForSplit(workoutSplit);\n  const maxAllowedMinutes = getMaxMinutes(sessionLength);\n  if (useStaticDefaults) {\n    const { data: structureData, error: structureError } = await supabaseServiceRoleClient.from('workout_exercise_structure').select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group').eq('workout_split', workoutSplit);\n    if (structureError) throw structureError;\n    const { data: globalExercises, error: globalExError } = await supabaseServiceRoleClient.from('exercise_definitions').select('id, name, main_muscle, type, category, description, pro_tip, video_url, library_id, movement_type, movement_pattern, icon_url').is('user_id', null);\n    if (globalExError) throw globalExError;\n    const globalExerciseMap = new Map<string, ExerciseDefinition>();\n    (globalExercises || []).forEach((ex: ExerciseDefinition) => { if (ex.library_id) globalExerciseMap.set(ex.library_id, ex as ExerciseDefinition); });\n    for (const workoutName of workoutNames) {\n      const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n      if (createChildError) throw createChildError;\n      const childWorkoutId = newChildWorkout.id;\n      const exercisesForThisWorkout = (structureData || []).filter((s: WorkoutExerciseStructure) => s.workout_name === workoutName);\n      let mainExercisesToInsert: any[] = [], bonusExercisesToInsert: any[] = [];\n      exercisesForThisWorkout.forEach((s: WorkoutExerciseStructure) => {\n        const exerciseDef = globalExerciseMap.get(s.exercise_library_id);\n        if (exerciseDef) {\n          if (s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes) mainExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: false });\n          else if (s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group) bonusExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: true });\n        }\n      });\n      mainExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      bonusExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      const finalMainExercises = mainExercisesToInsert.slice(0, maxMainExercises);\n      const finalBonusExercises = bonusExercisesToInsert.slice(0, maxBonusExercises);\n      const exercisesToInsertPayload = [...finalMainExercises.map((ex, index) => ({ ...ex, order_index: index })), ...finalBonusExercises.map((ex, index) => ({ ...ex, order_index: finalMainExercises.length + index }))];\n      if (exercisesToInsertPayload.length > 0) {\n        const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n        if (insertError) throw insertError;\n      }\n    }\n    return;\n  }\n  const { data: allExercises, error: fetchAllExercisesError } = await supabaseServiceRoleClient.from('exercise_definitions').select('*');\n  if (fetchAllExercisesError) throw fetchAllExercisesError;\n  const { data: allGymLinks, error: allGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id');\n  if (allGymLinksError) throw allGymLinksError;\n  const allLinkedExerciseIds = new Set((allGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n  const workoutSpecificPools: Record<string, ExerciseDefinition[]> = {};\n  if (workoutSplit === 'ulul') {\n    const UPPER_BODY_MUSCLES = new Set(['Pectorals', 'Deltoids', 'Lats', 'Traps', 'Biceps', 'Triceps', 'Abdominals', 'Core']);\n    const LOWER_BODY_MUSCLES = new Set(['Quadriceps', 'Hamstrings', 'Glutes', 'Calves']);\n    const upperPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, UPPER_BODY_MUSCLES));\n    const lowerPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, LOWER_BODY_MUSCLES));\n    workoutSpecificPools['Upper Body A'] = []; workoutSpecificPools['Upper Body B'] = [];\n    workoutSpecificPools['Lower Body A'] = []; workoutSpecificPools['Lower Body B'] = [];\n    sortExercises(upperPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Upper Body A' : 'Upper Body B'].push(ex));\n    sortExercises(lowerPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Lower Body A' : 'Lower Body B'].push(ex));\n  } else {\n    workoutSpecificPools['Push'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Push'));\n    workoutSpecificPools['Pull'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Pull'));\n    workoutSpecificPools['Legs'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Legs'));\n  }\n  for (const workoutName of workoutNames) {\n    const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n    if (createChildError) throw createChildError;\n    const childWorkoutId = newChildWorkout.id;\n    const candidatePool = workoutSpecificPools[workoutName] || [];\n    let activeGymExerciseIds = new Set<string>();\n    if (activeGymId) {\n      const { data: activeGymLinks, error: activeGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id').eq('gym_id', activeGymId);\n      if (activeGymLinksError) throw activeGymLinksError;\n      activeGymExerciseIds = new Set((activeGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n    }\n    \n    // --- START OF THE CHANGE ---\n    // Tier 1: User's custom exercises.\n    const tier1Pool = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === userId);\n    // Tier 2: Global exercises linked to the active gym.\n    const tier2Pool_gymLinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && activeGymExerciseIds.has(ex.id));\n    // Tier 3: Global exercises NOT linked to any gym (fallback).\n    const tier3Pool_unlinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && !allLinkedExerciseIds.has(ex.id));\n    \n    // Combine pools in the new priority order.\n    const finalPool = [...tier1Pool, ...tier2Pool_gymLinkedGlobal, ...tier3Pool_unlinkedGlobal];\n    // --- END OF THE CHANGE ---\n\n    const finalUniquePool = [...new Map(finalPool.map(item => [item.id, item])).values()];\n    const mainExercisesForWorkout = finalUniquePool.slice(0, maxMainExercises);\n    const bonusExercisesForWorkout = finalUniquePool.slice(maxMainExercises, maxMainExercises + maxBonusExercises);\n    const exercisesToInsertPayload = [...mainExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: index, is_bonus_exercise: false })), ...bonusExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: mainExercisesForWorkout.length + index, is_bonus_exercise: true }))];\n    if (exercisesToInsertPayload.length > 0) {\n      const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n      if (insertError) throw insertError;\n    }\n  }\n}\n// --- END INLINED CODE ---\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  const supabaseServiceRoleClient = createClient(\n    // @ts-ignore\n    Deno.env.get('SUPABASE_URL') ?? '',\n    // @ts-ignore\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n  );\n\n  let userId: string | null = null;\n\n  try {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n    userId = user.id;\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'in_progress', t_path_generation_error: null }).eq('id', userId);\n\n    const { tPathId, preferred_session_length } = await req.json();\n    if (!tPathId || !preferred_session_length) {\n      throw new Error(\"Missing tPathId or preferred_session_length.\");\n    }\n\n    const { data: profile, error: profileError } = await supabaseServiceRoleClient\n      .from('profiles')\n      .select('active_gym_id')\n      .eq('id', user.id)\n      .single();\n    if (profileError || !profile) throw new Error('User profile not found.');\n\n    const { data: tPathData, error: tPathError } = await supabaseServiceRoleClient\n      .from('t_paths')\n      .select('settings')\n      .eq('id', tPathId)\n      .single();\n    if (tPathError || !tPathData) throw new Error('T-Path not found.');\n    const equipmentMethod = (tPathData.settings as { equipmentMethod?: string })?.equipmentMethod;\n    const useStaticDefaults = equipmentMethod === 'skip';\n\n    await generateWorkoutPlanForTPath(\n      supabaseServiceRoleClient,\n      user.id,\n      tPathId,\n      preferred_session_length,\n      profile.active_gym_id,\n      useStaticDefaults\n    );\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'completed', t_path_generation_error: null }).eq('id', userId);\n\n    return new Response(JSON.stringify({ message: 'Workout plan regeneration initiated successfully.' }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in generate-t-path edge function:\", message);\n    if (userId) {\n      await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'failed', t_path_generation_error: message }).eq('id', userId);\n    }\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":14208},"supabase/functions/identify-equipment/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// @ts-ignore\nconst OPENAI_API_KEY = Deno.env.get(\"OPENAI_API_KEY\");\nconst OPENAI_API_URL = \"https://api.openai.com/v1/chat/completions\";\n\ninterface ExistingExercise {\n  id: string; name: string; user_id: string | null; main_muscle: string; type: string;\n  category: string | null; description: string | null; pro_tip: string | null;\n  video_url: string | null; library_id: string | null; is_favorite: boolean | null;\n  icon_url: string | null; movement_type: string | null; movement_pattern: string | null;\n}\n\nconst VALID_MUSCLE_GROUPS = [ \"Pectorals\", \"Deltoids\", \"Lats\", \"Traps\", \"Biceps\", \"Triceps\", \"Quadriceps\", \"Hamstrings\", \"Glutes\", \"Calves\", \"Abdominals\", \"Core\", \"Full Body\" ];\nconst normalizeName = (name: string): string => name ? name.toLowerCase().replace(/\\s+/g, ' ').trim().replace(/s$/, '').replace(/[^a-z0-9\\s]/g, '') : '';\nconst getYouTubeEmbedUrl = (url: string | null | undefined): string | null => {\n  if (!url) return null;\n  if (url.includes('youtube.com/embed/')) {\n    return url;\n  }\n  const match = url.match(/(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([a-zA-Z0-9_-]{11})(?:\\S+)?/);\n  return (match && match[1]) ? `https://www.youtube.com/embed/${match[1]}` : url;\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });\n\n  try {\n    const supabase = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabase.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n\n    const { base64Images } = await req.json();\n    if (!base64Images || !Array.isArray(base64Images) || base64Images.length === 0) {\n      throw new Error('No images provided.');\n    }\n\n    const { data: allDbExercises, error: fetchAllError } = await supabase.from('exercise_definitions').select('*');\n    if (fetchAllError) throw fetchAllError;\n\n    const prompt = `\n      You are an expert fitness coach. Analyze the gym equipment in the following image(s).\n      Your task is to identify all possible exercises and provide their details.\n      \n      IMPORTANT INSTRUCTIONS:\n      1. Identify all pieces of equipment shown across all images.\n      2. For each piece of equipment, provide a comprehensive list of possible exercises, including common variations (e.g., incline, decline, single-arm, wide grip, narrow grip). Be creative and thorough.\n      3. Aim to provide between 5 to 15 exercises in total, depending on the equipment identified. The goal is a thorough list, not just the top 3-4 most common ones.\n      4. Consolidate all exercises into a single list, removing duplicates.\n      5. Your entire response MUST be a single, clean JSON object with a key \"exercises\" which contains an array of exercise objects. Do not include any other text, markdown, or explanations outside the JSON object.\n      6. Each object in the array MUST have the following structure:\n         {\n           \"name\": \"Exercise Name\",\n           \"main_muscle\": \"Main Muscle Group (MUST be one of: ${VALID_MUSCLE_GROUPS.join(', ')})\",\n           \"type\": \"weight\" | \"timed\" | \"bodyweight\",\n           \"category\": \"Bilateral\" | \"Unilateral\" | null,\n           \"movement_type\": \"compound\" | \"isolation\",\n           \"movement_pattern\": \"Push\" | \"Pull\" | \"Legs\" | \"Core\",\n           \"description\": \"A brief description of the exercise.\",\n           \"pro_tip\": \"A short, actionable pro tip for performing the exercise.\",\n           \"video_url\": \"Optional YouTube or instructional video URL (can be empty string if none)\"\n         }\n    `;\n\n    const messages = [{\n      role: \"user\",\n      content: [\n        { type: \"text\", text: prompt },\n        ...base64Images.map(img => ({ type: \"image_url\", image_url: { url: `data:image/jpeg;base64,${img}` } }))\n      ]\n    }];\n\n    const openaiResponse = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${OPENAI_API_KEY}` },\n      body: JSON.stringify({ model: \"gpt-4o\", messages: messages, response_format: { type: \"json_object\" } }),\n    });\n\n    if (!openaiResponse.ok) {\n      const errorBody = await openaiResponse.text();\n      throw new Error(`OpenAI API error: ${openaiResponse.status} ${errorBody}`);\n    }\n\n    const openaiData = await openaiResponse.json();\n    const generatedText = openaiData.choices?.[0]?.message?.content;\n    if (!generatedText) return new Response(JSON.stringify({ identifiedExercises: [] }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n    const exercisesFromAI = JSON.parse(generatedText).exercises || [];\n    const finalResults: any[] = [];\n    const seenNormalizedNames = new Set<string>();\n\n    for (const aiExercise of exercisesFromAI) {\n      if (!aiExercise || typeof aiExercise.name !== 'string' || aiExercise.name.trim() === '' || typeof aiExercise.main_muscle !== 'string' || !VALID_MUSCLE_GROUPS.includes(aiExercise.main_muscle)) continue;\n\n      const normalizedAiName = normalizeName(aiExercise.name);\n      if (seenNormalizedNames.has(normalizedAiName)) continue;\n\n      let duplicate_status: 'none' | 'global' | 'my-exercises' = 'none';\n      let foundExercise: ExistingExercise | null = null;\n\n      const userMatch = (allDbExercises || []).find((dbEx: ExistingExercise) => dbEx.user_id === user.id && normalizeName(dbEx.name) === normalizedAiName);\n      if (userMatch) {\n        duplicate_status = 'my-exercises';\n        foundExercise = userMatch;\n      } else {\n        const globalMatch = (allDbExercises || []).find((dbEx: ExistingExercise) => dbEx.user_id === null && normalizeName(dbEx.name) === normalizedAiName);\n        if (globalMatch) {\n          duplicate_status = 'global';\n          foundExercise = globalMatch;\n        }\n      }\n\n      if (foundExercise) {\n        finalResults.push({ ...foundExercise, duplicate_status, existing_id: foundExercise.id });\n      } else {\n        finalResults.push({ ...aiExercise, video_url: getYouTubeEmbedUrl(aiExercise.video_url), duplicate_status: 'none', existing_id: null });\n      }\n      seenNormalizedNames.add(normalizedAiName);\n    }\n\n    return new Response(JSON.stringify({ identifiedExercises: finalResults }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in identify-equipment edge function:\", message);\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":7227},"supabase/functions/process-achievements/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n// @ts-ignore\nimport { v4 as uuidv4 } from 'https://esm.sh/uuid@9.0.1';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// Achievement IDs\nconst ACHIEVEMENT_IDS = {\n  FIRST_WORKOUT: 'first_workout',\n  TEN_DAY_STREAK: 'ten_day_streak',\n  TWENTY_FIVE_WORKOUTS: 'twenty_five_workouts',\n  FIFTY_WORKOUTS: 'fifty_workouts',\n  PERFECT_WEEK: 'perfect_week',\n  BEAST_MODE: 'beast_mode',\n  // New Achievement IDs\n  WEEKEND_WARRIOR: 'weekend_warrior',\n  EARLY_BIRD: 'early_bird',\n  THIRTY_DAY_STREAK: 'thirty_day_streak',\n  VOLUME_MASTER: 'volume_master',\n  // New achievements from user request\n  CENTURY_CLUB: 'century_club',\n  AI_APPRENTICE: 'ai_apprentice',\n};\n\n// Define types for the data we're fetching\ninterface WorkoutSession {\n  id: string;\n  session_date: string;\n  template_name: string | null;\n  user_id: string;\n}\n\ninterface Profile {\n  id: string;\n  total_points: number | null;\n  current_streak: number | null;\n  longest_streak: number | null;\n  active_t_path_id: string | null;\n}\n\ninterface UserAchievement {\n  achievement_id: string;\n  unlocked_at?: string | null; // Added unlocked_at property\n}\n\n// Helper function to initialize Supabase client with service role key\nconst getSupabaseServiceRoleClient = () => {\n  // @ts-ignore\n  const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? '';\n  // @ts-ignore\n  const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '';\n  return createClient(supabaseUrl, supabaseServiceRoleKey);\n};\n\n// Helper to log user-specific errors\nconst logUserAlert = async (supabase: any, userId: string, title: string, message: string, type: string = 'system_error') => {\n  const { error: insertAlertError } = await supabase.from('user_alerts').insert({\n    id: uuidv4(),\n    user_id: userId,\n    title: title,\n    message: message,\n    type: type,\n    created_at: new Date().toISOString(),\n    is_read: false,\n  });\n  if (insertAlertError) {\n    console.error(`Failed to log user alert for user ${userId}:`, insertAlertError.message);\n  }\n};\n\n\n// Achievement Checkers\nconst checkAchievement = async (\n  supabase: any,\n  userId: string,\n  achievementId: string,\n  criteriaMet: boolean,\n  existingAchievements: Set<string>\n): Promise<string | null> => {\n  if (!criteriaMet || existingAchievements.has(achievementId)) {\n    return null;\n  }\n  const { error: insertError } = await supabase.from('user_achievements').insert({ user_id: userId, achievement_id: achievementId });\n  if (insertError) {\n    console.error(`Error unlocking achievement ${achievementId} for user ${userId}:`, insertError.message);\n    await logUserAlert(supabase, userId, \"Achievement Processing Error\", `Failed to unlock achievement '${achievementId}'. Please contact support if this persists.`, \"achievement_error\");\n    return null;\n  }\n  return achievementId;\n};\n\nconst checkFirstWorkout = async (\n  supabase: any,\n  userId: string,\n  totalWorkouts: number,\n  existingAchievements: Set<string>\n) => {\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.FIRST_WORKOUT, totalWorkouts >= 1, existingAchievements);\n};\n\nconst check10DayStreak = async (\n  supabase: any,\n  userId: string,\n  currentStreak: number,\n  existingAchievements: Set<string>\n) => {\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.TEN_DAY_STREAK, currentStreak >= 10, existingAchievements);\n};\n\nconst check30DayStreak = async (\n  supabase: any,\n  userId: string,\n  currentStreak: number,\n  existingAchievements: Set<string>\n) => {\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.THIRTY_DAY_STREAK, currentStreak >= 30, existingAchievements);\n};\n\nconst check25Workouts = async (\n  supabase: any,\n  userId: string,\n  totalWorkouts: number,\n  existingAchievements: Set<string>\n) => {\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.TWENTY_FIVE_WORKOUTS, totalWorkouts >= 25, existingAchievements);\n};\n\nconst check50Workouts = async (\n  supabase: any,\n  userId: string,\n  totalWorkouts: number,\n  existingAchievements: Set<string>\n) => {\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.FIFTY_WORKOUTS, totalWorkouts >= 50, existingAchievements);\n};\n\nconst checkBeastMode = async (\n  supabase: any,\n  userId: string,\n  allWorkoutSessions: WorkoutSession[],\n  existingAchievements: Set<string>\n) => {\n  const sessionsByDate = new Map<string, number>();\n  allWorkoutSessions.forEach(sessionItem => {\n    const dateKey = new Date(sessionItem.session_date).toISOString().split('T')[0];\n    sessionsByDate.set(dateKey, (sessionsByDate.get(dateKey) || 0) + 1);\n  });\n  const beastModeAchieved = Array.from(sessionsByDate.values()).some(count => count >= 2);\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.BEAST_MODE, beastModeAchieved, existingAchievements);\n};\n\nconst checkPerfectWeek = async (\n  supabase: any,\n  userId: string,\n  allWorkoutSessions: WorkoutSession[],\n  activeTPathId: string | null,\n  existingAchievements: Set<string>\n) => {\n  if (!activeTPathId) return null;\n\n  const { data: tpathData, error: tpathError } = await supabase.from('t_paths').select('settings').eq('id', activeTPathId).single();\n  if (tpathError || !tpathData?.settings) {\n    console.error(\"Error fetching active T-Path settings for Perfect Week:\", tpathError);\n    await logUserAlert(supabase, userId, \"Achievement Processing Error\", \"Failed to check 'Perfect Week' achievement due to T-Path data issues.\", \"achievement_error\");\n    return null;\n  }\n  const activeTPathType = (tpathData.settings as { tPathType: string }).tPathType;\n\n  let requiredWorkoutNames: string[] = [];\n  if (activeTPathType === 'ulul') {\n    requiredWorkoutNames = ['Upper Body A', 'Upper Body B', 'Lower Body A', 'Lower Body B'];\n  } else if (activeTPathType === 'ppl') {\n    requiredWorkoutNames = ['Push', 'Pull', 'Legs'];\n  }\n\n  if (requiredWorkoutNames.length === 0) return null;\n\n  const sessionsByDate = new Map<string, WorkoutSession[]>();\n  allWorkoutSessions.forEach(sessionItem => {\n    const dateKey = new Date(sessionItem.session_date).toISOString().split('T')[0];\n    if (!sessionsByDate.has(dateKey)) {\n      sessionsByDate.set(dateKey, []);\n    }\n    sessionsByDate.get(dateKey)?.push(sessionItem);\n  });\n\n  const sortedDates = Array.from(sessionsByDate.keys()).sort();\n  let perfectWeekAchieved = false;\n\n  for (let i = 0; i < sortedDates.length; i++) {\n    const startDate = new Date(sortedDates[i]);\n    const endDate = new Date(startDate);\n    endDate.setDate(startDate.getDate() + 6); // 7-day window (inclusive)\n\n    const workoutsInWindow = new Set<string>();\n    for (let j = i; j < sortedDates.length; j++) {\n      const currentDate = new Date(sortedDates[j]);\n      if (currentDate <= endDate) {\n        sessionsByDate.get(sortedDates[j])?.forEach(sessionItem => {\n          if (sessionItem.template_name) {\n            workoutsInWindow.add(sessionItem.template_name);\n          }\n        });\n      } else {\n        break;\n      }\n    }\n\n    const allRequiredFound = requiredWorkoutNames.every(requiredName => workoutsInWindow.has(requiredName));\n    if (allRequiredFound) {\n      perfectWeekAchieved = true;\n      break;\n    }\n  }\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.PERFECT_WEEK, perfectWeekAchieved, existingAchievements);\n};\n\nconst checkWeekendWarrior = async (\n  supabase: any,\n  userId: string,\n  allWorkoutSessions: WorkoutSession[],\n  existingAchievements: Set<string>\n) => {\n  const weekendWorkouts = allWorkoutSessions.filter(sessionItem => {\n    const date = new Date(sessionItem.session_date);\n    const dayOfWeek = date.getDay(); // 0 for Sunday, 6 for Saturday\n    return dayOfWeek === 0 || dayOfWeek === 6;\n  }).length;\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.WEEKEND_WARRIOR, weekendWorkouts >= 10, existingAchievements);\n};\n\nconst checkEarlyBird = async (\n  supabase: any,\n  userId: string,\n  allWorkoutSessions: WorkoutSession[],\n  existingAchievements: Set<string>\n) => {\n  const earlyBirdWorkouts = allWorkoutSessions.filter(sessionItem => {\n    const date = new Date(sessionItem.session_date);\n    const hour = date.getHours();\n    return hour < 8; // Before 8 AM\n  }).length;\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.EARLY_BIRD, earlyBirdWorkouts >= 10, existingAchievements);\n};\n\nconst checkVolumeMaster = async (\n  supabase: any,\n  userId: string,\n  totalSets: number,\n  existingAchievements: Set<string>\n) => {\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.VOLUME_MASTER, totalSets >= 100, existingAchievements);\n};\n\n// New: Check for Century Club\nconst checkCenturyClub = async (\n  supabase: any,\n  userId: string,\n  totalPoints: number,\n  existingAchievements: Set<string>\n) => {\n  // 100 workouts = 1000 total_points\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.CENTURY_CLUB, totalPoints >= 1000, existingAchievements);\n};\n\n// New: Check for AI Apprentice\nconst checkAIApprentice = async (\n  supabase: any,\n  userId: string,\n  existingAchievements: Set<string>\n) => {\n  // Check for at least one use per week across 3 consecutive weeks.\n  const { data: usageLogs, error: fetchUsageError } = await supabase\n    .from('ai_coach_usage_logs')\n    .select('used_at')\n    .eq('user_id', userId)\n    .order('used_at', { ascending: true });\n\n  if (fetchUsageError) {\n    console.error(\"Error fetching AI coach usage logs for AI Apprentice:\", fetchUsageError.message);\n    await logUserAlert(supabase, userId, \"Achievement Processing Error\", \"Failed to check 'AI Apprentice' achievement due to AI usage data issues.\", \"achievement_error\");\n    return null;\n  }\n\n  if (!usageLogs || usageLogs.length === 0) {\n    return null;\n  }\n\n  const weeklyUsage = new Map<string, boolean>(); // 'YYYY-WW' -> has_used_this_week\n  usageLogs.forEach((log: { used_at: string }) => {\n    const date = new Date(log.used_at);\n    const startOfWeek = new Date(date);\n    startOfWeek.setDate(date.getDate() - (date.getDay() + 6) % 7); // Adjust to Monday\n    startOfWeek.setHours(0, 0, 0, 0);\n    const weekKey = startOfWeek.toISOString().split('T')[0]; // YYYY-MM-DD for start of week\n    weeklyUsage.set(weekKey, true);\n  });\n\n  const sortedWeeks = Array.from(weeklyUsage.keys()).sort();\n  let consecutiveWeeks = 0;\n\n  if (sortedWeeks.length > 0) {\n    let prevWeekDate = new Date(sortedWeeks[0]);\n    consecutiveWeeks = 1; // Start with the first week\n\n    for (let i = 1; i < sortedWeeks.length; i++) {\n      const currentWeekDate = new Date(sortedWeeks[i]);\n      const diffDays = (currentWeekDate.getTime() - prevWeekDate.getTime()) / (1000 * 60 * 60 * 24);\n\n      if (diffDays <= 7) { // If current week is same as or immediately after previous week\n        consecutiveWeeks++;\n      } else {\n        consecutiveWeeks = 1; // Reset if gap found\n      }\n\n      if (consecutiveWeeks >= 3) {\n        break; // Found 3 consecutive weeks\n      }\n      prevWeekDate = currentWeekDate;\n    }\n  }\n\n  return await checkAchievement(supabase, userId, ACHIEVEMENT_IDS.AI_APPRENTICE, consecutiveWeeks >= 3, existingAchievements);\n};\n\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  const supabaseServiceRoleClient = getSupabaseServiceRoleClient();\n  let userId: string | null = null; // Declare userId here to be accessible in catch block\n\n  try {\n    const { user_id, session_id } = await req.json();\n    userId = user_id; // Assign to outer scope userId\n\n    if (!userId) {\n      return new Response(JSON.stringify({ error: 'user_id is required' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // Fetch all existing achievements for the user\n    const { data: existingUserAchievements, error: fetchAchievementsError } = await supabaseServiceRoleClient\n      .from('user_achievements')\n      .select('achievement_id')\n      .eq('user_id', userId);\n\n    if (fetchAchievementsError) throw fetchAchievementsError;\n    const existingAchievementIds = new Set((existingUserAchievements as UserAchievement[] || []).map(a => a.achievement_id));\n\n    // Fetch all workout sessions and profile data for achievement checks\n    const { data: allWorkoutSessions, error: allSessionsError } = await supabaseServiceRoleClient\n      .from('workout_sessions')\n      .select('id, session_date, template_name, user_id')\n      .eq('user_id', userId);\n    if (allSessionsError) throw allSessionsError;\n\n    const { data: profileData, error: profileError } = await supabaseServiceRoleClient\n      .from('profiles')\n      .select('total_points, current_streak, longest_streak, active_t_path_id')\n      .eq('id', userId)\n      .single();\n    if (profileError) throw profileError;\n\n    // Fetch all set logs for the user to count total sets\n    const { data: allSetLogs, error: allSetLogsError } = await supabaseServiceRoleClient\n      .from('set_logs')\n      .select('id, workout_sessions!inner(user_id)') // Join with workout_sessions to filter by user_id\n      .eq('workout_sessions.user_id', userId);\n    if (allSetLogsError) throw allSetLogsError;\n    const totalSets = allSetLogs?.length || 0;\n\n    const totalWorkouts = (profileData?.total_points || 0) / 10; // 10 points per workout\n    const currentStreak = profileData?.current_streak || 0;\n    const activeTPathId = profileData?.active_t_path_id || null;\n    const totalPoints = profileData?.total_points || 0; // For Century Club\n\n    // Run all achievement checks\n    const achievementChecks = [\n      checkFirstWorkout(supabaseServiceRoleClient, userId, totalWorkouts, existingAchievementIds),\n      check10DayStreak(supabaseServiceRoleClient, userId, currentStreak, existingAchievementIds),\n      check30DayStreak(supabaseServiceRoleClient, userId, currentStreak, existingAchievementIds),\n      check25Workouts(supabaseServiceRoleClient, userId, totalWorkouts, existingAchievementIds),\n      check50Workouts(supabaseServiceRoleClient, userId, totalWorkouts, existingAchievementIds),\n      checkBeastMode(supabaseServiceRoleClient, userId, allWorkoutSessions as WorkoutSession[] || [], existingAchievementIds),\n      checkPerfectWeek(supabaseServiceRoleClient, userId, allWorkoutSessions as WorkoutSession[] || [], activeTPathId, existingAchievementIds),\n      checkWeekendWarrior(supabaseServiceRoleClient, userId, allWorkoutSessions as WorkoutSession[] || [], existingAchievementIds),\n      checkEarlyBird(supabaseServiceRoleClient, userId, allWorkoutSessions as WorkoutSession[] || [], existingAchievementIds),\n      checkVolumeMaster(supabaseServiceRoleClient, userId, totalSets, existingAchievementIds),\n      checkCenturyClub(supabaseServiceRoleClient, userId, totalPoints, existingAchievementIds), // New check\n      checkAIApprentice(supabaseServiceRoleClient, userId, existingAchievementIds), // New check\n    ];\n\n    const results = await Promise.all(achievementChecks);\n    const newlyUnlockedAchievementIds = results.filter((id): id is string => id !== null);\n\n    // --- NEW: Invoke calculate-rolling-status Edge Function ---\n    const { error: rollingStatusInvokeError } = await supabaseServiceRoleClient.functions.invoke('calculate-rolling-status', {\n      body: { user_id: userId },\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (rollingStatusInvokeError) {\n      console.error('Error invoking calculate-rolling-status Edge Function:', rollingStatusInvokeError.message);\n      await logUserAlert(supabaseServiceRoleClient, userId, \"System Update Error\", \"Failed to update your rolling workout status. Your achievements might be affected.\", \"system_error\");\n      // Do not throw, as achievement processing should still complete\n    }\n    // --- END NEW ---\n\n    // If a session_id was provided, we only return achievements unlocked *during that session*\n    // This requires a second fetch to filter by unlocked_at after the session_date\n    let sessionSpecificAchievements: string[] = [];\n    if (session_id && newlyUnlockedAchievementIds.length > 0) {\n      const { data: sessionAchievements, error: sessionAchError } = await supabaseServiceRoleClient\n        .from('user_achievements')\n        .select('achievement_id, unlocked_at')\n        .eq('user_id', userId)\n        .in('achievement_id', newlyUnlockedAchievementIds)\n        .order('unlocked_at', { ascending: true });\n\n      if (sessionAchError) throw sessionAchError;\n\n      const { data: sessionDetails, error: sessionDetailsError } = await supabaseServiceRoleClient\n        .from('workout_sessions')\n        .select('session_date')\n        .eq('id', session_id)\n        .single();\n\n      if (sessionDetailsError || !sessionDetails) throw sessionDetailsError;\n\n      const sessionStartDate = new Date(sessionDetails.session_date);\n      // Allow a small window (e.g., 5 minutes) around session start for achievements\n      sessionSpecificAchievements = (sessionAchievements || []).filter((ach: UserAchievement) => { // Explicitly typed ach\n        const unlockedAt = new Date(ach.unlocked_at!);\n        return unlockedAt >= sessionStartDate && unlockedAt.getTime() <= (sessionStartDate.getTime() + 5 * 60 * 1000);\n      }).map((ach: UserAchievement) => ach.achievement_id); // Explicitly typed ach\n    } else if (!session_id) {\n      // If no session_id, return all newly unlocked achievements\n      sessionSpecificAchievements = newlyUnlockedAchievementIds;\n    }\n\n    return new Response(\n      JSON.stringify({ newlyUnlockedAchievementIds: sessionSpecificAchievements }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n\n  } catch (error) {\n    console.error(\"Error in process-achievements edge function:\", error);\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    if (userId) {\n      await logUserAlert(supabaseServiceRoleClient, userId, \"Achievement Processing Error\", `An error occurred while processing your achievements: ${message}`, \"system_error\");\n    }\n    return new Response(JSON.stringify({ error: message }), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n  }\n});","size_bytes":18369},"supabase/functions/regenerate-all-user-plans/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// --- INLINED SHARED UTILITY CODE ---\n\n// Type Definitions\ninterface ExerciseDefinition {\n  id: string; name: string; user_id: string | null; library_id: string | null;\n  movement_type: string | null; movement_pattern: string | null; main_muscle: string;\n  type: string; category: string | null; description: string | null;\n  pro_tip: string | null; video_url: string | null; icon_url: string | null;\n}\ninterface WorkoutExerciseStructure {\n  exercise_library_id: string; workout_name: string;\n  min_session_minutes: number | null; bonus_for_time_group: number | null;\n}\n\n// Utility Functions\nfunction getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30; case '30-45': return 45;\n    case '45-60': return 60; case '60-90': return 90;\n    default: return 90;\n  }\n}\nfunction getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 }; case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 }; case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 };\n  }\n}\nfunction getWorkoutNamesForSplit(workoutSplit: string): string[] {\n  if (workoutSplit === 'ulul') return ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\n  if (workoutSplit === 'ppl') return ['Push', 'Pull', 'Legs'];\n  throw new Error('Unknown workout split type.');\n}\nconst sortExercises = (exercises: ExerciseDefinition[]) => {\n  return exercises.sort((a, b) => {\n    if (a.movement_type === 'compound' && b.movement_type !== 'compound') return -1;\n    if (a.movement_type !== 'compound' && b.movement_type === 'compound') return 1;\n    return a.name.localeCompare(b.name);\n  });\n};\nfunction musclesIntersect(muscleString: string, muscleSet: Set<string>): boolean {\n    if (!muscleString) return false;\n    const muscles = muscleString.split(',').map(m => m.trim());\n    return muscles.some(m => muscleSet.has(m));\n}\nasync function generateWorkoutPlanForTPath(\n  supabaseServiceRoleClient: any, userId: string, tPathId: string,\n  sessionLength: string | null, activeGymId: string | null, useStaticDefaults: boolean\n) {\n  const { data: tPathData, error: tPathError } = await supabaseServiceRoleClient.from('t_paths').select('id, settings, user_id').eq('id', tPathId).eq('user_id', userId).single();\n  if (tPathError || !tPathData) throw new Error(`Main T-Path not found for user ${userId} and tPathId ${tPathId}.`);\n  const { data: oldChildWorkouts, error: fetchOldError } = await supabaseServiceRoleClient.from('t_paths').select('id').eq('parent_t_path_id', tPathId).eq('user_id', userId);\n  if (fetchOldError) throw fetchOldError;\n  if (oldChildWorkouts && oldChildWorkouts.length > 0) {\n    const oldChildIds = oldChildWorkouts.map((w: { id: string }) => w.id);\n    await supabaseServiceRoleClient.from('t_path_exercises').delete().in('template_id', oldChildIds);\n    await supabaseServiceRoleClient.from('t_paths').delete().in('id', oldChildIds);\n  }\n  const tPathSettings = tPathData.settings as { tPathType?: string };\n  if (!tPathSettings?.tPathType) throw new Error('Invalid T-Path settings.');\n  const workoutSplit = tPathSettings.tPathType;\n  const { main: maxMainExercises, bonus: maxBonusExercises } = getExerciseCounts(sessionLength);\n  const workoutNames = getWorkoutNamesForSplit(workoutSplit);\n  const maxAllowedMinutes = getMaxMinutes(sessionLength);\n  if (useStaticDefaults) {\n    const { data: structureData, error: structureError } = await supabaseServiceRoleClient.from('workout_exercise_structure').select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group').eq('workout_split', workoutSplit);\n    if (structureError) throw structureError;\n    const { data: globalExercises, error: globalExError } = await supabaseServiceRoleClient.from('exercise_definitions').select('id, name, main_muscle, type, category, description, pro_tip, video_url, library_id, movement_type, movement_pattern, icon_url').is('user_id', null);\n    if (globalExError) throw globalExError;\n    const globalExerciseMap = new Map<string, ExerciseDefinition>();\n    (globalExercises || []).forEach((ex: ExerciseDefinition) => { if (ex.library_id) globalExerciseMap.set(ex.library_id, ex as ExerciseDefinition); });\n    for (const workoutName of workoutNames) {\n      const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n      if (createChildError) throw createChildError;\n      const childWorkoutId = newChildWorkout.id;\n      const exercisesForThisWorkout = (structureData || []).filter((s: WorkoutExerciseStructure) => s.workout_name === workoutName);\n      let mainExercisesToInsert: any[] = [], bonusExercisesToInsert: any[] = [];\n      exercisesForThisWorkout.forEach((s: WorkoutExerciseStructure) => {\n        const exerciseDef = globalExerciseMap.get(s.exercise_library_id);\n        if (exerciseDef) {\n          if (s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes) mainExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: false });\n          else if (s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group) bonusExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: true });\n        }\n      });\n      mainExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      bonusExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      const finalMainExercises = mainExercisesToInsert.slice(0, maxMainExercises);\n      const finalBonusExercises = bonusExercisesToInsert.slice(0, maxBonusExercises);\n      const exercisesToInsertPayload = [...finalMainExercises.map((ex, index) => ({ ...ex, order_index: index })), ...finalBonusExercises.map((ex, index) => ({ ...ex, order_index: finalMainExercises.length + index }))];\n      if (exercisesToInsertPayload.length > 0) {\n        const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n        if (insertError) throw insertError;\n      }\n    }\n    return;\n  }\n  const { data: allExercises, error: fetchAllExercisesError } = await supabaseServiceRoleClient.from('exercise_definitions').select('*');\n  if (fetchAllExercisesError) throw fetchAllExercisesError;\n  const { data: allGymLinks, error: allGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id');\n  if (allGymLinksError) throw allGymLinksError;\n  const allLinkedExerciseIds = new Set((allGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n  const workoutSpecificPools: Record<string, ExerciseDefinition[]> = {};\n  if (workoutSplit === 'ulul') {\n    const UPPER_BODY_MUSCLES = new Set(['Pectorals', 'Deltoids', 'Lats', 'Traps', 'Biceps', 'Triceps', 'Abdominals', 'Core']);\n    const LOWER_BODY_MUSCLES = new Set(['Quadriceps', 'Hamstrings', 'Glutes', 'Calves']);\n    const upperPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, UPPER_BODY_MUSCLES));\n    const lowerPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, LOWER_BODY_MUSCLES));\n    workoutSpecificPools['Upper Body A'] = []; workoutSpecificPools['Upper Body B'] = [];\n    workoutSpecificPools['Lower Body A'] = []; workoutSpecificPools['Lower Body B'] = [];\n    sortExercises(upperPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Upper Body A' : 'Upper Body B'].push(ex));\n    sortExercises(lowerPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Lower Body A' : 'Lower Body B'].push(ex));\n  } else {\n    workoutSpecificPools['Push'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Push'));\n    workoutSpecificPools['Pull'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Pull'));\n    workoutSpecificPools['Legs'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Legs'));\n  }\n  for (const workoutName of workoutNames) {\n    const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n    if (createChildError) throw createChildError;\n    const childWorkoutId = newChildWorkout.id;\n    const candidatePool = workoutSpecificPools[workoutName] || [];\n    let activeGymExerciseIds = new Set<string>();\n    if (activeGymId) {\n      const { data: activeGymLinks, error: activeGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id').eq('gym_id', activeGymId);\n      if (activeGymLinksError) throw activeGymLinksError;\n      activeGymExerciseIds = new Set((activeGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n    }\n    \n    // --- START OF THE CHANGE ---\n    // Tier 1: User's custom exercises.\n    const tier1Pool = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === userId);\n    // Tier 2: Global exercises linked to the active gym.\n    const tier2Pool_gymLinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && activeGymExerciseIds.has(ex.id));\n    // Tier 3: Global exercises NOT linked to any gym (fallback).\n    const tier3Pool_unlinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && !allLinkedExerciseIds.has(ex.id));\n    \n    // Combine pools in the new priority order.\n    const finalPool = [...tier1Pool, ...tier2Pool_gymLinkedGlobal, ...tier3Pool_unlinkedGlobal];\n    // --- END OF THE CHANGE ---\n\n    const finalUniquePool = [...new Map(finalPool.map(item => [item.id, item])).values()];\n    const mainExercisesForWorkout = finalUniquePool.slice(0, maxMainExercises);\n    const bonusExercisesForWorkout = finalUniquePool.slice(maxMainExercises, maxMainExercises + maxBonusExercises);\n    const exercisesToInsertPayload = [...mainExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: index, is_bonus_exercise: false })), ...bonusExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: mainExercisesForWorkout.length + index, is_bonus_exercise: true }))];\n    if (exercisesToInsertPayload.length > 0) {\n      const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n      if (insertError) throw insertError;\n    }\n  }\n}\n// --- END INLINED CODE ---\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') return new Response(null, { headers: corsHeaders });\n\n  const supabaseServiceRoleClient = createClient(\n    // @ts-ignore\n    Deno.env.get('SUPABASE_URL') ?? '',\n    // @ts-ignore\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n  );\n\n  let userId: string | null = null;\n\n  try {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n    userId = user.id;\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'in_progress', t_path_generation_error: null }).eq('id', userId);\n\n    const { data: profile, error: profileError } = await supabaseServiceRoleClient\n      .from('profiles')\n      .select('programme_type, preferred_session_length, primary_goal, preferred_muscles, health_notes')\n      .eq('id', user.id)\n      .single();\n    if (profileError || !profile) throw new Error('User profile not found.');\n    if (!profile.programme_type) throw new Error('User has no core programme type set.');\n\n    const { data: userGyms, error: gymsError } = await supabaseServiceRoleClient\n      .from('gyms')\n      .select('id')\n      .eq('user_id', user.id);\n    if (gymsError) throw gymsError;\n\n    for (const gym of userGyms) {\n      const gymId = gym.id;\n\n      const { data: mainTPaths, error: fetchMainTPathsError } = await supabaseServiceRoleClient\n        .from('t_paths')\n        .select('id')\n        .eq('user_id', user.id)\n        .eq('gym_id', gymId)\n        .is('parent_t_path_id', null);\n      if (fetchMainTPathsError) throw fetchMainTPathsError;\n\n      if (mainTPaths && mainTPaths.length > 0) {\n        for (const mainTPath of mainTPaths) {\n          const { data: childWorkouts, error: fetchChildrenError } = await supabaseServiceRoleClient.from('t_paths').select('id').eq('parent_t_path_id', mainTPath.id);\n          if (fetchChildrenError) throw fetchChildrenError;\n          if (childWorkouts && childWorkouts.length > 0) {\n            const childIds = childWorkouts.map((w: { id: string }) => w.id);\n            await supabaseServiceRoleClient.from('t_path_exercises').delete().in('template_id', childIds);\n            await supabaseServiceRoleClient.from('t_paths').delete().in('id', childIds);\n          }\n          await supabaseServiceRoleClient.from('t_paths').delete().eq('id', mainTPath.id);\n        }\n      }\n\n      const newTPathTemplateName = profile.programme_type === 'ulul' ? '4-Day Upper/Lower' : '3-Day Push/Pull/Legs';\n      const { data: newTPath, error: newTPathError } = await supabaseServiceRoleClient\n        .from('t_paths')\n        .insert({\n          user_id: user.id,\n          gym_id: gymId,\n          template_name: newTPathTemplateName,\n          settings: {\n            tPathType: profile.programme_type,\n            experience: 'intermediate',\n            goalFocus: profile.primary_goal,\n            preferredMuscles: profile.preferred_muscles,\n            constraints: profile.health_notes,\n            equipmentMethod: 'skip'\n          },\n          is_bonus: false,\n          parent_t_path_id: null\n        })\n        .select('id')\n        .single();\n      if (newTPathError) throw newTPathError;\n\n      await generateWorkoutPlanForTPath(supabaseServiceRoleClient, user.id, newTPath.id, profile.preferred_session_length, gymId, true);\n\n      const { data: activeGymProfile, error: activeGymProfileError } = await supabaseServiceRoleClient.from('profiles').select('active_gym_id').eq('id', user.id).single();\n      if (activeGymProfileError) throw activeGymProfileError;\n      if (activeGymProfile && activeGymProfile.active_gym_id === gymId) {\n        await supabaseServiceRoleClient.from('profiles').update({ active_t_path_id: newTPath.id }).eq('id', user.id);\n      }\n    }\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'completed', t_path_generation_error: null }).eq('id', userId);\n\n    return new Response(JSON.stringify({ message: 'All workout plans regenerated successfully.' }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in regenerate-all-user-plans edge function:\", message);\n    if (userId) {\n      await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'failed', t_path_generation_error: message }).eq('id', userId);\n    }\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":16297},"supabase/functions/setup-default-gym/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// --- INLINED SHARED UTILITY CODE ---\n\n// Type Definitions\ninterface ExerciseDefinition {\n  id: string; name: string; user_id: string | null; library_id: string | null;\n  movement_type: string | null; movement_pattern: string | null; main_muscle: string;\n  type: string; category: string | null; description: string | null;\n  pro_tip: string | null; video_url: string | null; icon_url: string | null;\n}\ninterface WorkoutExerciseStructure {\n  exercise_library_id: string; workout_name: string;\n  min_session_minutes: number | null; bonus_for_time_group: number | null;\n}\n\n// Utility Functions\nfunction getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30; case '30-45': return 45;\n    case '45-60': return 60; case '60-90': return 90;\n    default: return 90;\n  }\n}\nfunction getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 }; case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 }; case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 };\n  }\n}\nfunction getWorkoutNamesForSplit(workoutSplit: string): string[] {\n  if (workoutSplit === 'ulul') return ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\n  if (workoutSplit === 'ppl') return ['Push', 'Pull', 'Legs'];\n  throw new Error('Unknown workout split type.');\n}\nconst sortExercises = (exercises: ExerciseDefinition[]) => {\n  return exercises.sort((a, b) => {\n    if (a.movement_type === 'compound' && b.movement_type !== 'compound') return -1;\n    if (a.movement_type !== 'compound' && b.movement_type === 'compound') return 1;\n    return a.name.localeCompare(b.name);\n  });\n};\nfunction musclesIntersect(muscleString: string, muscleSet: Set<string>): boolean {\n    if (!muscleString) return false;\n    const muscles = muscleString.split(',').map(m => m.trim());\n    return muscles.some(m => muscleSet.has(m));\n}\nasync function generateWorkoutPlanForTPath(\n  supabaseServiceRoleClient: any, userId: string, tPathId: string,\n  sessionLength: string | null, activeGymId: string | null, useStaticDefaults: boolean\n) {\n  const { data: tPathData, error: tPathError } = await supabaseServiceRoleClient.from('t_paths').select('id, settings, user_id').eq('id', tPathId).eq('user_id', userId).single();\n  if (tPathError || !tPathData) throw new Error(`Main T-Path not found for user ${userId} and tPathId ${tPathId}.`);\n  const { data: oldChildWorkouts, error: fetchOldError } = await supabaseServiceRoleClient.from('t_paths').select('id').eq('parent_t_path_id', tPathId).eq('user_id', userId);\n  if (fetchOldError) throw fetchOldError;\n  if (oldChildWorkouts && oldChildWorkouts.length > 0) {\n    const oldChildIds = oldChildWorkouts.map((w: { id: string }) => w.id);\n    await supabaseServiceRoleClient.from('t_path_exercises').delete().in('template_id', oldChildIds);\n    await supabaseServiceRoleClient.from('t_paths').delete().in('id', oldChildIds);\n  }\n  const tPathSettings = tPathData.settings as { tPathType?: string };\n  if (!tPathSettings?.tPathType) throw new Error('Invalid T-Path settings.');\n  const workoutSplit = tPathSettings.tPathType;\n  const { main: maxMainExercises, bonus: maxBonusExercises } = getExerciseCounts(sessionLength);\n  const workoutNames = getWorkoutNamesForSplit(workoutSplit);\n  const maxAllowedMinutes = getMaxMinutes(sessionLength);\n  if (useStaticDefaults) {\n    const { data: structureData, error: structureError } = await supabaseServiceRoleClient.from('workout_exercise_structure').select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group').eq('workout_split', workoutSplit);\n    if (structureError) throw structureError;\n    const { data: globalExercises, error: globalExError } = await supabaseServiceRoleClient.from('exercise_definitions').select('id, name, main_muscle, type, category, description, pro_tip, video_url, library_id, movement_type, movement_pattern, icon_url').is('user_id', null);\n    if (globalExError) throw globalExError;\n    const globalExerciseMap = new Map<string, ExerciseDefinition>();\n    (globalExercises || []).forEach((ex: ExerciseDefinition) => { if (ex.library_id) globalExerciseMap.set(ex.library_id, ex as ExerciseDefinition); });\n    for (const workoutName of workoutNames) {\n      const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n      if (createChildError) throw createChildError;\n      const childWorkoutId = newChildWorkout.id;\n      const exercisesForThisWorkout = (structureData || []).filter((s: WorkoutExerciseStructure) => s.workout_name === workoutName);\n      let mainExercisesToInsert: any[] = [], bonusExercisesToInsert: any[] = [];\n      exercisesForThisWorkout.forEach((s: WorkoutExerciseStructure) => {\n        const exerciseDef = globalExerciseMap.get(s.exercise_library_id);\n        if (exerciseDef) {\n          if (s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes) mainExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: false });\n          else if (s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group) bonusExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: true });\n        }\n      });\n      mainExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      bonusExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      const finalMainExercises = mainExercisesToInsert.slice(0, maxMainExercises);\n      const finalBonusExercises = bonusExercisesToInsert.slice(0, maxBonusExercises);\n      const exercisesToInsertPayload = [...finalMainExercises.map((ex, index) => ({ ...ex, order_index: index })), ...finalBonusExercises.map((ex, index) => ({ ...ex, order_index: finalMainExercises.length + index }))];\n      if (exercisesToInsertPayload.length > 0) {\n        const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n        if (insertError) throw insertError;\n      }\n    }\n    return;\n  }\n  const { data: allExercises, error: fetchAllExercisesError } = await supabaseServiceRoleClient.from('exercise_definitions').select('*');\n  if (fetchAllExercisesError) throw fetchAllExercisesError;\n  const { data: allGymLinks, error: allGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id');\n  if (allGymLinksError) throw allGymLinksError;\n  const allLinkedExerciseIds = new Set((allGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n  const workoutSpecificPools: Record<string, ExerciseDefinition[]> = {};\n  if (workoutSplit === 'ulul') {\n    const UPPER_BODY_MUSCLES = new Set(['Pectorals', 'Deltoids', 'Lats', 'Traps', 'Biceps', 'Triceps', 'Abdominals', 'Core']);\n    const LOWER_BODY_MUSCLES = new Set(['Quadriceps', 'Hamstrings', 'Glutes', 'Calves']);\n    const upperPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, UPPER_BODY_MUSCLES));\n    const lowerPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, LOWER_BODY_MUSCLES));\n    workoutSpecificPools['Upper Body A'] = []; workoutSpecificPools['Upper Body B'] = [];\n    workoutSpecificPools['Lower Body A'] = []; workoutSpecificPools['Lower Body B'] = [];\n    sortExercises(upperPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Upper Body A' : 'Upper Body B'].push(ex));\n    sortExercises(lowerPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Lower Body A' : 'Lower Body B'].push(ex));\n  } else {\n    workoutSpecificPools['Push'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Push'));\n    workoutSpecificPools['Pull'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Pull'));\n    workoutSpecificPools['Legs'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Legs'));\n  }\n  for (const workoutName of workoutNames) {\n    const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n    if (createChildError) throw createChildError;\n    const childWorkoutId = newChildWorkout.id;\n    const candidatePool = workoutSpecificPools[workoutName] || [];\n    let activeGymExerciseIds = new Set<string>();\n    if (activeGymId) {\n      const { data: activeGymLinks, error: activeGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id').eq('gym_id', activeGymId);\n      if (activeGymLinksError) throw activeGymLinksError;\n      activeGymExerciseIds = new Set((activeGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n    }\n    \n    // --- START OF THE CHANGE ---\n    // Tier 1: User's custom exercises.\n    const tier1Pool = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === userId);\n    // Tier 2: Global exercises linked to the active gym.\n    const tier2Pool_gymLinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && activeGymExerciseIds.has(ex.id));\n    // Tier 3: Global exercises NOT linked to any gym (fallback).\n    const tier3Pool_unlinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && !allLinkedExerciseIds.has(ex.id));\n    \n    // Combine pools in the new priority order.\n    const finalPool = [...tier1Pool, ...tier2Pool_gymLinkedGlobal, ...tier3Pool_unlinkedGlobal];\n    // --- END OF THE CHANGE ---\n\n    const finalUniquePool = [...new Map(finalPool.map(item => [item.id, item])).values()];\n    const mainExercisesForWorkout = finalUniquePool.slice(0, maxMainExercises);\n    const bonusExercisesForWorkout = finalUniquePool.slice(maxMainExercises, maxMainExercises + maxBonusExercises);\n    const exercisesToInsertPayload = [...mainExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: index, is_bonus_exercise: false })), ...bonusExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: mainExercisesForWorkout.length + index, is_bonus_exercise: true }))];\n    if (exercisesToInsertPayload.length > 0) {\n      const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n      if (insertError) throw insertError;\n    }\n  }\n}\n// --- END INLINED CODE ---\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  const supabaseServiceRoleClient = createClient(\n    // @ts-ignore\n    Deno.env.get('SUPABASE_URL') ?? '',\n    // @ts-ignore\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n  );\n\n  let userId: string | null = null;\n\n  try {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n    userId = user.id;\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'in_progress', t_path_generation_error: null }).eq('id', userId);\n\n    const { gymId } = await req.json();\n    if (!gymId) throw new Error('gymId is required.');\n\n    const { data: gym, error: gymError } = await supabaseServiceRoleClient.from('gyms').select('id').eq('id', gymId).eq('user_id', user.id).single();\n    if (gymError || !gym) throw new Error('Gym not found or user does not own it.');\n\n    const { data: profile, error: profileError } = await supabaseServiceRoleClient.from('profiles').select('programme_type, preferred_session_length, primary_goal, preferred_muscles, health_notes, active_gym_id').eq('id', user.id).single();\n    if (profileError || !profile) throw new Error('User profile not found.');\n    if (!profile.programme_type) throw new Error('User has no core programme type set.');\n\n    const tPathTemplateName = profile.programme_type === 'ulul' ? '4-Day Upper/Lower' : '3-Day Push/Pull/Legs';\n    const { data: newTPath, error: newTPathError } = await supabaseServiceRoleClient\n      .from('t_paths')\n      .insert({ user_id: user.id, gym_id: gymId, template_name: tPathTemplateName, settings: { tPathType: profile.programme_type, experience: 'intermediate', goalFocus: profile.primary_goal, preferredMuscles: profile.preferred_muscles, constraints: profile.health_notes, equipmentMethod: 'skip' }, is_bonus: false, parent_t_path_id: null })\n      .select('id').single();\n    if (newTPathError) throw newTPathError;\n\n    await generateWorkoutPlanForTPath(supabaseServiceRoleClient, user.id, newTPath.id, profile.preferred_session_length, gymId, true);\n\n    // If no gym is active, make this new one active.\n    // Or if this gym was already active, ensure its new T-Path is set as active.\n    if (profile.active_gym_id === null || profile.active_gym_id === gymId) {\n      await supabaseServiceRoleClient.from('profiles').update({ \n        active_gym_id: gymId,\n        active_t_path_id: newTPath.id \n      }).eq('id', user.id);\n    }\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'completed', t_path_generation_error: null }).eq('id', userId);\n\n    return new Response(JSON.stringify({ message: `Successfully initiated default workout plan generation for new gym.` }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n    });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in setup-default-gym edge function:\", message);\n    if (userId) {\n      await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'failed', t_path_generation_error: message }).eq('id', userId);\n    }\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":15082},"supabase/functions/setup-gym-with-ai/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\n// --- INLINED SHARED UTILITY CODE ---\n\n// Type Definitions\ninterface ExerciseDefinition {\n  id: string; name: string; user_id: string | null; library_id: string | null;\n  movement_type: string | null; movement_pattern: string | null; main_muscle: string;\n  type: string; category: string | null; description: string | null;\n  pro_tip: string | null; video_url: string | null; icon_url: string | null;\n}\ninterface WorkoutExerciseStructure {\n  exercise_library_id: string; workout_name: string;\n  min_session_minutes: number | null; bonus_for_time_group: number | null;\n}\n\n// Utility Functions\nfunction getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30; case '30-45': return 45;\n    case '45-60': return 60; case '60-90': return 90;\n    default: return 90;\n  }\n}\nfunction getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 }; case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 }; case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 };\n  }\n}\nfunction getWorkoutNamesForSplit(workoutSplit: string): string[] {\n  if (workoutSplit === 'ulul') return ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\n  if (workoutSplit === 'ppl') return ['Push', 'Pull', 'Legs'];\n  throw new Error('Unknown workout split type.');\n}\nconst sortExercises = (exercises: ExerciseDefinition[]) => {\n  return exercises.sort((a, b) => {\n    if (a.movement_type === 'compound' && b.movement_type !== 'compound') return -1;\n    if (a.movement_type !== 'compound' && b.movement_type === 'compound') return 1;\n    return a.name.localeCompare(b.name);\n  });\n};\nfunction musclesIntersect(muscleString: string, muscleSet: Set<string>): boolean {\n    if (!muscleString) return false;\n    const muscles = muscleString.split(',').map(m => m.trim());\n    return muscles.some(m => muscleSet.has(m));\n}\nasync function generateWorkoutPlanForTPath(\n  supabaseServiceRoleClient: any, userId: string, tPathId: string,\n  sessionLength: string | null, activeGymId: string | null, useStaticDefaults: boolean\n) {\n  const { data: tPathData, error: tPathError } = await supabaseServiceRoleClient.from('t_paths').select('id, settings, user_id').eq('id', tPathId).eq('user_id', userId).single();\n  if (tPathError || !tPathData) throw new Error(`Main T-Path not found for user ${userId} and tPathId ${tPathId}.`);\n  const { data: oldChildWorkouts, error: fetchOldError } = await supabaseServiceRoleClient.from('t_paths').select('id').eq('parent_t_path_id', tPathId).eq('user_id', userId);\n  if (fetchOldError) throw fetchOldError;\n  if (oldChildWorkouts && oldChildWorkouts.length > 0) {\n    const oldChildIds = oldChildWorkouts.map((w: { id: string }) => w.id);\n    await supabaseServiceRoleClient.from('t_path_exercises').delete().in('template_id', oldChildIds);\n    await supabaseServiceRoleClient.from('t_paths').delete().in('id', oldChildIds);\n  }\n  const tPathSettings = tPathData.settings as { tPathType?: string };\n  if (!tPathSettings?.tPathType) throw new Error('Invalid T-Path settings.');\n  const workoutSplit = tPathSettings.tPathType;\n  const { main: maxMainExercises, bonus: maxBonusExercises } = getExerciseCounts(sessionLength);\n  const workoutNames = getWorkoutNamesForSplit(workoutSplit);\n  const maxAllowedMinutes = getMaxMinutes(sessionLength);\n  if (useStaticDefaults) {\n    const { data: structureData, error: structureError } = await supabaseServiceRoleClient.from('workout_exercise_structure').select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group').eq('workout_split', workoutSplit);\n    if (structureError) throw structureError;\n    const { data: globalExercises, error: globalExError } = await supabaseServiceRoleClient.from('exercise_definitions').select('id, name, main_muscle, type, category, description, pro_tip, video_url, library_id, movement_type, movement_pattern, icon_url').is('user_id', null);\n    if (globalExError) throw globalExError;\n    const globalExerciseMap = new Map<string, ExerciseDefinition>();\n    (globalExercises || []).forEach((ex: ExerciseDefinition) => { if (ex.library_id) globalExerciseMap.set(ex.library_id, ex as ExerciseDefinition); });\n    for (const workoutName of workoutNames) {\n      const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n      if (createChildError) throw createChildError;\n      const childWorkoutId = newChildWorkout.id;\n      const exercisesForThisWorkout = (structureData || []).filter((s: WorkoutExerciseStructure) => s.workout_name === workoutName);\n      let mainExercisesToInsert: any[] = [], bonusExercisesToInsert: any[] = [];\n      exercisesForThisWorkout.forEach((s: WorkoutExerciseStructure) => {\n        const exerciseDef = globalExerciseMap.get(s.exercise_library_id);\n        if (exerciseDef) {\n          if (s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes) mainExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: false });\n          else if (s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group) bonusExercisesToInsert.push({ template_id: childWorkoutId, exercise_id: exerciseDef.id, order_index: 0, is_bonus_exercise: true });\n        }\n      });\n      mainExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      bonusExercisesToInsert.sort((a, b) => globalExerciseMap.get(a.exercise_id)?.name.localeCompare(globalExerciseMap.get(b.exercise_id)?.name || '') || 0);\n      const finalMainExercises = mainExercisesToInsert.slice(0, maxMainExercises);\n      const finalBonusExercises = bonusExercisesToInsert.slice(0, maxBonusExercises);\n      const exercisesToInsertPayload = [...finalMainExercises.map((ex, index) => ({ ...ex, order_index: index })), ...finalBonusExercises.map((ex, index) => ({ ...ex, order_index: finalMainExercises.length + index }))];\n      if (exercisesToInsertPayload.length > 0) {\n        const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n        if (insertError) throw insertError;\n      }\n    }\n    return;\n  }\n  const { data: allExercises, error: fetchAllExercisesError } = await supabaseServiceRoleClient.from('exercise_definitions').select('*');\n  if (fetchAllExercisesError) throw fetchAllExercisesError;\n  const { data: allGymLinks, error: allGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id');\n  if (allGymLinksError) throw allGymLinksError;\n  const allLinkedExerciseIds = new Set((allGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n  const workoutSpecificPools: Record<string, ExerciseDefinition[]> = {};\n  if (workoutSplit === 'ulul') {\n    const UPPER_BODY_MUSCLES = new Set(['Pectorals', 'Deltoids', 'Lats', 'Traps', 'Biceps', 'Triceps', 'Abdominals', 'Core']);\n    const LOWER_BODY_MUSCLES = new Set(['Quadriceps', 'Hamstrings', 'Glutes', 'Calves']);\n    const upperPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, UPPER_BODY_MUSCLES));\n    const lowerPool = (allExercises || []).filter((ex: ExerciseDefinition) => musclesIntersect(ex.main_muscle, LOWER_BODY_MUSCLES));\n    workoutSpecificPools['Upper Body A'] = []; workoutSpecificPools['Upper Body B'] = [];\n    workoutSpecificPools['Lower Body A'] = []; workoutSpecificPools['Lower Body B'] = [];\n    sortExercises(upperPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Upper Body A' : 'Upper Body B'].push(ex));\n    sortExercises(lowerPool).forEach((ex, i) => workoutSpecificPools[i % 2 === 0 ? 'Lower Body A' : 'Lower Body B'].push(ex));\n  } else {\n    workoutSpecificPools['Push'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Push'));\n    workoutSpecificPools['Pull'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Pull'));\n    workoutSpecificPools['Legs'] = sortExercises((allExercises || []).filter((ex: ExerciseDefinition) => ex.movement_pattern === 'Legs'));\n  }\n  for (const workoutName of workoutNames) {\n    const { data: newChildWorkout, error: createChildError } = await supabaseServiceRoleClient.from('t_paths').insert({ user_id: userId, parent_t_path_id: tPathId, template_name: workoutName, is_bonus: true, settings: tPathData.settings, gym_id: activeGymId }).select('id').single();\n    if (createChildError) throw createChildError;\n    const childWorkoutId = newChildWorkout.id;\n    const candidatePool = workoutSpecificPools[workoutName] || [];\n    let activeGymExerciseIds = new Set<string>();\n    if (activeGymId) {\n      const { data: activeGymLinks, error: activeGymLinksError } = await supabaseServiceRoleClient.from('gym_exercises').select('exercise_id').eq('gym_id', activeGymId);\n      if (activeGymLinksError) throw activeGymLinksError;\n      activeGymExerciseIds = new Set((activeGymLinks || []).map((l: { exercise_id: string }) => l.exercise_id));\n    }\n    \n    // --- START OF THE CHANGE ---\n    // Tier 1: User's custom exercises.\n    const tier1Pool = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === userId);\n    // Tier 2: Global exercises linked to the active gym.\n    const tier2Pool_gymLinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && activeGymExerciseIds.has(ex.id));\n    // Tier 3: Global exercises NOT linked to any gym (fallback).\n    const tier3Pool_unlinkedGlobal = candidatePool.filter((ex: ExerciseDefinition) => ex.user_id === null && !allLinkedExerciseIds.has(ex.id));\n    \n    // Combine pools in the new priority order.\n    const finalPool = [...tier1Pool, ...tier2Pool_gymLinkedGlobal, ...tier3Pool_unlinkedGlobal];\n    // --- END OF THE CHANGE ---\n\n    const finalUniquePool = [...new Map(finalPool.map(item => [item.id, item])).values()];\n    const mainExercisesForWorkout = finalUniquePool.slice(0, maxMainExercises);\n    const bonusExercisesForWorkout = finalUniquePool.slice(maxMainExercises, maxMainExercises + maxBonusExercises);\n    const exercisesToInsertPayload = [...mainExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: index, is_bonus_exercise: false })), ...bonusExercisesForWorkout.map((ex, index) => ({ template_id: childWorkoutId, exercise_id: ex.id, order_index: mainExercisesForWorkout.length + index, is_bonus_exercise: true }))];\n    if (exercisesToInsertPayload.length > 0) {\n      const { error: insertError } = await supabaseServiceRoleClient.from('t_path_exercises').insert(exercisesToInsertPayload);\n      if (insertError) throw insertError;\n    }\n  }\n}\n// --- END INLINED CODE ---\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  const supabaseServiceRoleClient = createClient(\n    // @ts-ignore\n    Deno.env.get('SUPABASE_URL') ?? '',\n    // @ts-ignore\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n  );\n\n  let userId: string | null = null;\n\n  try {\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) throw new Error('Authorization header missing');\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) throw new Error('Unauthorized');\n    userId = user.id;\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'in_progress', t_path_generation_error: null }).eq('id', userId);\n\n    const { gymId, confirmedExercises } = await req.json();\n    if (!gymId || !confirmedExercises) throw new Error('gymId and confirmedExercises are required.');\n\n    const { data: gym, error: gymError } = await supabaseServiceRoleClient.from('gyms').select('id').eq('id', gymId).eq('user_id', user.id).single();\n    if (gymError || !gym) throw new Error('Gym not found or user does not own it.');\n\n    const exerciseIdsToLinkToGym = new Set<string>();\n    const newExercisesToCreate = [];\n    for (const ex of (confirmedExercises || [])) {\n      if (ex.existing_id) {\n        exerciseIdsToLinkToGym.add(ex.existing_id);\n      } else {\n        newExercisesToCreate.push({\n          name: ex.name, main_muscle: ex.main_muscle, type: ex.type,\n          category: ex.category, description: ex.description, pro_tip: ex.pro_tip,\n          video_url: ex.video_url, user_id: user.id, library_id: null,\n          is_favorite: false, created_at: new Date().toISOString(),\n          movement_type: ex.movement_type, movement_pattern: ex.movement_pattern,\n        });\n      }\n    }\n\n    if (newExercisesToCreate.length > 0) {\n      const { data: insertedExercises, error: insertExError } = await supabaseServiceRoleClient.from('exercise_definitions').insert(newExercisesToCreate).select('id');\n      if (insertExError) throw insertExError;\n      insertedExercises.forEach((ex: any) => exerciseIdsToLinkToGym.add(ex.id));\n    }\n\n    if (exerciseIdsToLinkToGym.size > 0) {\n      const gymLinks = Array.from(exerciseIdsToLinkToGym).map(exId => ({ gym_id: gymId, exercise_id: exId }));\n      const { error: gymLinkError } = await supabaseServiceRoleClient.from('gym_exercises').insert(gymLinks);\n      if (gymLinkError) throw gymLinkError;\n    }\n\n    const { data: profile, error: profileError } = await supabaseServiceRoleClient.from('profiles').select('programme_type, preferred_session_length, primary_goal, preferred_muscles, health_notes, active_gym_id').eq('id', user.id).single();\n    if (profileError || !profile) throw new Error('User profile not found.');\n    if (!profile.programme_type) throw new Error('User has no core programme type set.');\n\n    const tPathTemplateName = profile.programme_type === 'ulul' ? '4-Day Upper/Lower' : '3-Day Push/Pull/Legs';\n    const { data: newTPath, error: newTPathError } = await supabaseServiceRoleClient\n      .from('t_paths')\n      .insert({ user_id: user.id, gym_id: gymId, template_name: tPathTemplateName, settings: { tPathType: profile.programme_type, experience: 'intermediate', goalFocus: profile.primary_goal, preferredMuscles: profile.preferred_muscles, constraints: profile.health_notes, equipmentMethod: 'photo' }, is_bonus: false, parent_t_path_id: null })\n      .select('id').single();\n    if (newTPathError) throw newTPathError;\n\n    await generateWorkoutPlanForTPath(supabaseServiceRoleClient, user.id, newTPath.id, profile.preferred_session_length, gymId, false);\n\n    if (profile.active_gym_id === gymId) {\n      await supabaseServiceRoleClient.from('profiles').update({ active_t_path_id: newTPath.id }).eq('id', user.id);\n    }\n\n    await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'completed', t_path_generation_error: null }).eq('id', userId);\n\n    return new Response(JSON.stringify({ message: `Successfully set up gym with AI.` }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n\n  } catch (error) {\n    const message = error instanceof Error ? error.message : \"An unknown error occurred\";\n    console.error(\"Error in setup-gym-with-ai edge function:\", message);\n    if (userId) {\n      await supabaseServiceRoleClient.from('profiles').update({ t_path_generation_status: 'failed', t_path_generation_error: message }).eq('id', userId);\n    }\n    return new Response(JSON.stringify({ error: message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n  }\n});","size_bytes":16222},"supabase/functions/switch-active-gym/index.ts":{"content":"// @ts-ignore\nimport { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\n// @ts-ignore\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req: Request) => {\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const supabaseServiceRoleClient = createClient(\n      // @ts-ignore\n      Deno.env.get('SUPABASE_URL') ?? '',\n      // @ts-ignore\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\n    );\n\n    const authHeader = req.headers.get('Authorization');\n    if (!authHeader) {\n      return new Response(JSON.stringify({ error: 'Authorization header missing' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } } );\n    }\n\n    const { data: { user }, error: userError } = await supabaseServiceRoleClient.auth.getUser(authHeader.split(' ')[1]);\n    if (userError || !user) {\n      console.error('Unauthorized: No user session found or user fetch error:', userError?.message);\n      return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    const { gymId } = await req.json();\n    if (!gymId) {\n      return new Response(JSON.stringify({ error: 'gymId is required' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });\n    }\n\n    // Find the main T-Path associated with the target gym for this user\n    // Using .limit(1) and checking the array is more robust than .single() in some edge cases.\n    const { data: tPaths, error: tPathError } = await supabaseServiceRoleClient\n      .from('t_paths')\n      .select('id')\n      .eq('gym_id', gymId)\n      .eq('user_id', user.id)\n      .is('parent_t_path_id', null) // Ensure it's a main plan\n      .limit(1);\n\n    if (tPathError) {\n      console.error(`Error finding T-Path for gym ${gymId}:`, tPathError.message);\n      throw tPathError;\n    }\n    \n    const newActiveTPathId = (tPaths && tPaths.length > 0) ? tPaths[0].id : null;\n    console.log(`[switch-active-gym] For gym ${gymId}, found new active T-Path ID: ${newActiveTPathId}`);\n\n\n    // Perform a single, safe update on the user's profile\n    const { error: updateProfileError } = await supabaseServiceRoleClient\n      .from('profiles')\n      .update({ \n        active_gym_id: gymId, \n        active_t_path_id: newActiveTPathId \n      })\n      .eq('id', user.id);\n\n    if (updateProfileError) {\n      console.error('Error updating user profile:', updateProfileError.message);\n      throw updateProfileError;\n    }\n\n    return new Response(\n      JSON.stringify({ message: 'Active gym switched successfully.' }),\n      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred during active gym switch.\";\n    console.error('Unhandled error in switch-active-gym edge function:', errorMessage);\n    return new Response(\n      JSON.stringify({ error: errorMessage }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n});","size_bytes":3324},"apps/mobile/app/components/SyncManagerInitializer.tsx":{"content":"import { useMobileSyncManager } from '@app/hooks/useSyncManager';\n\nexport const SyncManagerInitializer = () => {\n  useMobileSyncManager();\n  return null;\n};\n","size_bytes":157},"apps/mobile/app/hooks/useSyncManager.ts":{"content":"import { addEventListener as addNetInfoListener, fetch as fetchNetInfo } from '@react-native-community/netinfo';\nimport { AppState, type AppStateStatus } from 'react-native';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { useSupabaseAuth } from '@shared/features/auth';\nimport { useSyncQueueProcessor } from '@shared/data/hooks/use-sync-queue-processor';\nimport { mobileSyncQueueStore } from '@app/lib/sync-queue-store';\n\nexport const useMobileSyncManager = () => {\n  const { supabase } = useSupabaseAuth();\n  const [isOnline, setIsOnline] = useState(true);\n\n  useEffect(() => {\n    const networkUnsubscribe = addNetInfoListener((state) => {\n      setIsOnline(Boolean(state.isConnected && state.isInternetReachable));\n    });\n\n    const appStateListener = (state: AppStateStatus) => {\n      if (state === 'active') {\n        fetchNetInfo().then((info) => {\n          setIsOnline(Boolean(info.isConnected && info.isInternetReachable));\n        });\n      }\n    };\n\n    const appSubscription = AppState.addEventListener('change', appStateListener);\n\n    return () => {\n      networkUnsubscribe();\n      appSubscription.remove();\n    };\n  }, []);\n\n  const processor = useSyncQueueProcessor({\n    supabase,\n    store: mobileSyncQueueStore,\n    isOnline,\n    enabled: true,\n    intervalMs: 5000,\n    onError: (_, error) => {\n      console.error('[useMobileSyncManager] Sync error', error);\n    },\n  });\n\n  return useMemo(\n    () => ({\n      isOnline,\n      ...processor,\n    }),\n    [isOnline, processor],\n  );\n};\n","size_bytes":1525},"apps/web/src/hooks/use-sync-manager.ts":{"content":"\"use client\";\n\nimport * as React from 'react'; // Use React for useState, useEffect, useCallback, useRef\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { db } from '@/lib/db';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { SyncQueueItem } from '@/lib/db'; // Import SyncQueueItem type\n\nexport const useSyncManager = () => {\n  const { supabase } = useSession();\n  const [isOnline, setIsOnline] = React.useState(typeof navigator !== 'undefined' ? navigator.onLine : true);\n  const [isSyncing, setIsSyncing] = React.useState(false);\n\n  // Fetch syncQueue from IndexedDB using useLiveQuery, ordered by timestamp\n  const syncQueue = useLiveQuery(async () => {\n    return db.sync_queue.orderBy('timestamp').toArray();\n  }, []); // Empty dependency array means it runs once and then on any changes to sync_queue table\n\n  const handleOnline = () => {\n    setIsOnline(true);\n    console.log(\"[SyncManager] Browser is now ONLINE.\");\n  };\n  const handleOffline = () => {\n    setIsOnline(false);\n    console.log(\"[SyncManager] Browser is now OFFLINE.\");\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const processQueue = React.useCallback(async () => {\n    // Ensure syncQueue is loaded and not undefined before proceeding\n    if (!isOnline || isSyncing || !syncQueue || syncQueue.length === 0 || !supabase) {\n      if (!isOnline) console.log(\"[SyncManager] Not syncing: Offline.\");\n      if (isSyncing) console.log(\"[SyncManager] Not syncing: Already syncing.\");\n      if (!syncQueue || syncQueue.length === 0) console.log(\"[SyncManager] Not syncing: Sync queue is empty or not loaded.\");\n      if (!supabase) console.log(\"[SyncManager] Not syncing: Supabase client not available.\");\n      return;\n    }\n\n    setIsSyncing(true);\n    console.log(`[SyncManager] Starting queue processing. Queue size: ${syncQueue.length}`);\n\n    const item = syncQueue[0]; // Process one item at a time\n    console.log(`[SyncManager] Processing item ID: ${item.id}, Operation: ${item.operation}, Table: ${item.table}`);\n\n    try {\n      const { table, payload, operation } = item;\n      \n      if (operation === 'create' || operation === 'update') {\n        console.log(`[SyncManager] Attempting upsert to table '${table}' with payload:`, payload);\n        const { error } = await supabase.from(table).upsert(payload, { onConflict: 'id' });\n        if (error) throw error;\n        console.log(`[SyncManager] Successfully upserted item ID: ${item.id} to table '${table}'.`);\n      } else if (operation === 'delete') {\n        console.log(`[SyncManager] Attempting delete from table '${table}' for ID: ${payload.id}`);\n        const { error } = await supabase.from(table).delete().eq('id', payload.id);\n        // Ignore \"not found\" errors for deletes, as it might have been deleted already or never created\n        if (error && error.code !== 'PGRST204') {\n            throw error;\n        }\n        console.log(`[SyncManager] Successfully deleted item ID: ${item.id} from table '${table}'.`);\n      }\n\n      // If successful, remove from queue\n      await db.sync_queue.delete(item.id!);\n      console.log(`[SyncManager] Removed item ${item.id} from queue.`);\n\n    } catch (error: any) {\n      const errorMessage = error?.message || JSON.stringify(error) || \"An unknown error occurred during sync.\";\n      console.error(`[SyncManager] FAILED to sync item ${item.id}:`, errorMessage); // Use errorMessage here\n      // Increment attempt count and update error message\n      await db.sync_queue.update(item.id!, {\n        attempts: item.attempts + 1,\n        error: errorMessage, // Use the more robust error message\n      });\n      // Show an error toast if sync fails\n      toast.error(\"Background sync failed for some items. Check console for details.\");\n    } finally {\n      setIsSyncing(false);\n      console.log(\"[SyncManager] Finished queue processing for current item.\");\n    }\n  }, [isOnline, isSyncing, syncQueue, supabase]); // Added syncQueue to dependencies\n\n  React.useEffect(() => {\n    // Trigger processing whenever the queue changes or network status comes back online\n    const syncInterval = setInterval(() => {\n      processQueue();\n    }, 5000); // Attempt to sync every 5 seconds if there's something in the queue\n\n    return () => clearInterval(syncInterval);\n  }, [syncQueue, isOnline, processQueue]); // Added syncQueue to dependencies\n\n  return { isOnline }; // Expose isOnline\n};","size_bytes":4699},"packages/data/src/hooks/use-sync-queue-processor.ts":{"content":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { SupabaseClient } from '@supabase/supabase-js';\n\nimport type { SyncQueueItem, SyncQueueStore } from '../storage/sync-queue';\n\nexport interface UseSyncQueueProcessorOptions {\n  supabase: SupabaseClient | null;\n  store: SyncQueueStore;\n  isOnline?: boolean;\n  intervalMs?: number;\n  enabled?: boolean;\n  onError?: (item: SyncQueueItem, error: Error) => void;\n  onSuccess?: (item: SyncQueueItem) => void;\n}\n\nexport interface UseSyncQueueProcessorResult {\n  isSyncing: boolean;\n  queueLength: number;\n  lastError: Error | null;\n  processNext: () => Promise<void>;\n}\n\nconst DEFAULT_INTERVAL = 5000;\n\nexport const useSyncQueueProcessor = ({\n  supabase,\n  store,\n  isOnline = true,\n  intervalMs = DEFAULT_INTERVAL,\n  enabled = true,\n  onError,\n  onSuccess,\n}: UseSyncQueueProcessorOptions): UseSyncQueueProcessorResult => {\n  const [isSyncing, setIsSyncing] = useState(false);\n  const [queueLength, setQueueLength] = useState(0);\n  const [lastError, setLastError] = useState<Error | null>(null);\n\n  const processNext = useCallback(async () => {\n    if (!enabled || !isOnline || isSyncing || !supabase) {\n      return;\n    }\n\n    const queue = await store.getAll();\n    setQueueLength(queue.length);\n\n    if (queue.length === 0) {\n      return;\n    }\n\n    const item = queue[0];\n    setIsSyncing(true);\n\n    try {\n      const { table, payload, operation } = item;\n\n      if (operation === 'create' || operation === 'update') {\n        const { error } = await supabase.from(table).upsert(payload as any, { onConflict: 'id' });\n        if (error) throw error;\n      } else if (operation === 'delete') {\n        const { error } = await supabase.from(table).delete().eq('id', (payload as any).id);\n        if (error && error.code !== 'PGRST204') {\n          throw error;\n        }\n      }\n\n      if (typeof item.id === 'number') {\n        await store.remove(item.id);\n      }\n\n      setQueueLength(queue.length - 1);\n      setLastError(null);\n      onSuccess?.(item);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(String(err));\n      setLastError(error);\n      if (typeof item.id === 'number') {\n        await store.incrementAttempts(item.id, error.message);\n      }\n      onError?.(item, error);\n    } finally {\n      setIsSyncing(false);\n    }\n  }, [enabled, isOnline, isSyncing, supabase, store, onError, onSuccess]);\n\n  useEffect(() => {\n    if (!enabled) return;\n\n    const tick = () => {\n      processNext();\n    };\n\n    const interval = setInterval(tick, intervalMs);\n    tick();\n\n    return () => clearInterval(interval);\n  }, [enabled, intervalMs, processNext]);\n\n  return useMemo(\n    () => ({\n      isSyncing,\n      queueLength,\n      lastError,\n      processNext,\n    }),\n    [isSyncing, queueLength, lastError, processNext],\n  );\n};\n","size_bytes":2847},"apps/mobile/.expo/README.md":{"content":"> Why do I have a folder named \".expo\" in my project?\nThe \".expo\" folder is created when an Expo project is started using \"expo start\" command.\n> What do the files contain?\n- \"devices.json\": contains information about devices that have recently opened this project. This is used to populate the \"Development sessions\" list in your development builds.\n- \"settings.json\": contains the server configuration that is used to serve the application manifest.\n> Should I commit the \".expo\" folder?\nNo, you should not share the \".expo\" folder. It does not contain any information that is relevant for other developers working on the project, it is specific to your machine.\nUpon project creation, the \".expo\" folder is already added to your \".gitignore\" file.\n","size_bytes":751},"apps/mobile/app/index.tsx":{"content":"import { Redirect } from \"expo-router\";\n\nexport default function Index() {\n  return <Redirect href=\"/(tabs)/dashboard\" />;\n}\n","size_bytes":125},"apps/web/next.config.ts":{"content":"import type { NextConfig } from \"next\";\nimport withPWA from \"next-pwa\";\n\nconst nextConfig: NextConfig = {\n  transpilePackages: [\"@workspace/data\", \"@workspace/features\", \"@workspace/ui\"],\n  experimental: {\n    serverActions: {\n      allowedOrigins: [\"*\"],\n    },\n  },\n};\n\nexport default withPWA({\n  dest: \"public\",\n  register: true,\n  skipWaiting: true,\n  disable: process.env.NODE_ENV === \"development\",\n})(nextConfig);","size_bytes":420},"apps/web/src/app/(app)/activity-logs/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Bike, Activity, CalendarDays, Clock, Gauge, Trophy } from 'lucide-react'; // Replaced 'Run' with 'Activity'\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { convertDistance, formatDistance, KM_TO_MILES } from '@/lib/unit-conversions';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils; // Import cn for conditional classes\n\ntype ActivityLog = Tables<'activity_logs'>;\ntype Profile = Tables<'profiles'>;\n\n// Helper function to convert time string (e.g., \"1h 30m\", \"90m\", \"1m 30s\") to total seconds\nconst timeStringToTotalSeconds = (timeStr: string | null): number | null => {\n  if (!timeStr) return null;\n  let totalSeconds = 0;\n  const hoursMatch = timeStr.match(/(\\d+)h/);\n  const minutesMatch = timeStr.match(/(\\d+)m/);\n  const secondsMatch = timeStr.match(/(\\d+)s/);\n\n  if (hoursMatch) {\n    totalSeconds += parseInt(hoursMatch[1]) * 3600;\n  }\n  if (minutesMatch) {\n    totalSeconds += parseInt(minutesMatch[1]) * 60;\n  }\n  if (secondsMatch) {\n    totalSeconds += parseInt(secondsMatch[1]);\n  }\n  return totalSeconds;\n};\n\n// Helper to format total seconds into MM:SS\nconst formatSecondsToMMSS = (totalSeconds: number | null): string => {\n  if (totalSeconds === null || isNaN(totalSeconds)) return '-';\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\n// Helper to format average time (seconds per km/mile)\nconst formatAvgTime = (avgTimeSeconds: number | null, unit: 'km' | 'miles'): string => {\n  if (avgTimeSeconds === null || isNaN(avgTimeSeconds) || avgTimeSeconds === 0) return '-';\n  const minutes = Math.floor(avgTimeSeconds / 60);\n  const seconds = Math.round(avgTimeSeconds % 60);\n  return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} / ${unit}`;\n};\n\n\nexport default function ActivityLogsPage() {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const router = useRouter();\n  const [activityLogs, setActivityLogs] = useState<ActivityLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [preferredDistanceUnit, setPreferredDistanceUnit] = useState<Profile['preferred_distance_unit']>('km');\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!memoizedSessionUserId) return; // Use memoized ID\n      const { data: profileData, error: profileError } = await supabase\n        .from('profiles')\n        .select('preferred_distance_unit')\n        .eq('id', memoizedSessionUserId) // Use memoized ID\n        .single();\n\n      if (profileError && profileError.code !== 'PGRST116') {\n        console.error(\"Error fetching user profile for distance unit:\", profileError);\n        toast.error(\"Failed to load user preferences.\"); // Added toast.error\n      } else if (profileData) {\n        setPreferredDistanceUnit(profileData.preferred_distance_unit || 'km');\n      }\n    };\n    fetchUserProfile();\n  }, [memoizedSessionUserId, supabase]); // Depend on memoized ID\n\n  useEffect(() => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      router.push('/login');\n      return;\n    }\n\n    const fetchActivityLogs = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const { data, error } = await supabase\n          .from('activity_logs')\n          .select('id, activity_type, is_pb, log_date, distance, time, avg_time, created_at, user_id') // Specify all columns required by ActivityLog\n          .eq('user_id', memoizedSessionUserId) // Use memoized ID\n          .order('log_date', { ascending: false });\n\n        if (error) {\n          throw new Error(error.message);\n        }\n        setActivityLogs(data as ActivityLog[] || []); // Explicitly cast\n      } catch (err: any) {\n        console.error(\"Failed to fetch activity logs:\", err);\n        setError(err.message || \"Failed to load activity logs. Please try again.\");\n        toast.error(err.message || \"Failed to load activity logs.\"); // Changed to toast.error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchActivityLogs();\n  }, [memoizedSessionUserId, router, supabase]); // Depend on memoized ID\n\n  const filterLogs = (type: string) => activityLogs.filter(log => log.activity_type === type);\n\n  const renderLogCard = (log: ActivityLog) => {\n    let displayDistance = log.distance;\n    let displayAvgTime = '-';\n    let IconComponent: React.ElementType = Activity; // Default to generic Activity icon\n\n    if (log.activity_type === 'Cycling') {\n      IconComponent = Bike;\n      if (log.distance) {\n        const distanceMatch = log.distance.match(/^(\\d+(\\.\\d+)?) km$/);\n        if (distanceMatch) {\n          const distanceInKm = parseFloat(distanceMatch[1]);\n          displayDistance = formatDistance(convertDistance(distanceInKm, 'km', preferredDistanceUnit as 'km' | 'miles'), preferredDistanceUnit as 'km' | 'miles');\n        }\n      }\n      displayAvgTime = formatAvgTime(log.avg_time, preferredDistanceUnit as 'km' | 'miles');\n    } else if (log.activity_type === 'Running') {\n      IconComponent = Activity; // Using generic Activity icon for Running temporarily\n      if (log.distance) {\n        const distanceMatch = log.distance.match(/^(\\d+(\\.\\d+)?) km$/);\n        if (distanceMatch) {\n          const distanceInKm = parseFloat(distanceMatch[1]);\n          displayDistance = formatDistance(convertDistance(distanceInKm, 'km', preferredDistanceUnit as 'km' | 'miles'), preferredDistanceUnit as 'km' | 'miles');\n        }\n      }\n      displayAvgTime = formatAvgTime(log.avg_time, preferredDistanceUnit as 'km' | 'miles');\n    } else if (log.activity_type === 'Swimming') {\n      IconComponent = Activity; // Placeholder, could be a swim icon\n    } else if (log.activity_type === 'Tennis') {\n      IconComponent = Activity; // Placeholder, could be a tennis icon\n    }\n\n    const formattedTime = formatSecondsToMMSS(timeStringToTotalSeconds(log.time));\n\n    return (\n      <Card key={log.id} className=\"mb-3 p-4 flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\n        <div className=\"flex items-center gap-3 flex-grow\">\n          <IconComponent className=\"h-6 w-6 text-primary flex-shrink-0\" />\n          <div className=\"flex flex-col\">\n            <h3 className=\"font-semibold text-lg leading-tight flex items-center gap-2\">\n              {log.activity_type}\n              {log.is_pb && <Trophy className=\"h-4 w-4 text-yellow-500 fill-yellow-500\" />}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">{new Date(log.log_date).toLocaleDateString()}</p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-x-4 gap-y-2 text-sm sm:text-right sm:grid-cols-1\">\n          {displayDistance && displayDistance !== '-' && (\n            <div className=\"flex items-center gap-1 sm:justify-end\">\n              <Gauge className=\"h-4 w-4 text-muted-foreground\" />\n              <span>{displayDistance}</span>\n            </div>\n          )}\n          {log.time && formattedTime !== '-' && (\n            <div className=\"flex items-center gap-1 sm:justify-end\">\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n              <span>{formattedTime}</span>\n            </div>\n          )}\n          {(log.activity_type === 'Cycling' || log.activity_type === 'Running') && displayAvgTime !== '-' && (\n            <div className=\"flex items-center gap-1 sm:justify-end col-span-2 sm:col-span-1\">\n              <span className=\"font-medium text-primary\">{displayAvgTime}</span>\n            </div>\n          )}\n        </div>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground p-2 sm:p-4\">\n      <header className=\"mb-4 flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Activity Logs</h1>\n        <Button variant=\"ghost\" onClick={() => router.push('/dashboard')}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back\n        </Button>\n      </header>\n\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"all\">All</TabsTrigger>\n          <TabsTrigger value=\"Running\">Running</TabsTrigger>\n          <TabsTrigger value=\"Cycling\">Cycling</TabsTrigger>\n          <TabsTrigger value=\"Swimming\">Swimming</TabsTrigger>\n          {/* <TabsTrigger value=\"Tennis\">Tennis</TabsTrigger> Removed Tennis tab for space, can be re-added if needed */}\n        </TabsList>\n        <TabsContent value=\"all\" className=\"mt-4\">\n          {activityLogs.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No activities logged yet.</p>\n          ) : (\n            activityLogs.map(renderLogCard)\n          )}\n        </TabsContent>\n        <TabsContent value=\"Running\" className=\"mt-4\">\n          {filterLogs('Running').length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No running activities logged yet.</p>\n          ) : (\n            filterLogs('Running').map(renderLogCard)\n          )}\n        </TabsContent>\n        <TabsContent value=\"Cycling\" className=\"mt-4\">\n          {filterLogs('Cycling').length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No cycling activities logged yet.</p>\n          ) : (\n            filterLogs('Cycling').map(renderLogCard)\n          )}\n        </TabsContent>\n        <TabsContent value=\"Swimming\" className=\"mt-4\">\n          {filterLogs('Swimming').length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No swimming activities logged yet.</p>\n          ) : (\n            filterLogs('Swimming').map(renderLogCard)\n          )}\n        </TabsContent>\n        {/* <TabsContent value=\"Tennis\" className=\"mt-4\">\n          {filterLogs('Tennis').length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No tennis activities logged yet.</p>\n          ) : (\n            filterLogs('Tennis').map(renderLogCard)\n          )}\n        </TabsContent> */}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10561},"apps/web/src/app/(app)/admin/test-user/page.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { toast } from \"sonner\";\n\nexport default function TestUserPage() {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [loading, setLoading] = useState(false);\n\n  const handleTestUserCreation = async () => {\n    setLoading(true);\n    try {\n      // Create a test user\n      const { data, error } = await supabase.auth.signUp({\n        email: \"test@example.com\",\n        password: \"password123\",\n      });\n\n      if (error) {\n        console.error(\"Error creating test user:\", error.message);\n        toast.error(\"Error creating test user.\"); // Changed to toast.error\n        return;\n      }\n\n      toast.success(\"Test user created successfully!\"); // Changed to toast.success\n    } catch (error: any) {\n      console.error(\"Error:\", error.message);\n      toast.error(\"Error creating test user.\"); // Changed to toast.error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-2 sm:p-4\">\n      <header className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Admin Test User Creation</h1>\n      </header>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Create Test User</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"mb-4\">This page is for admin-only testing purposes.</p>\n          <Button onClick={handleTestUserCreation} disabled={loading}>\n            {loading ? \"Creating...\" : \"Create Test User\"}\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1805},"apps/web/src/app/(app)/dashboard/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useSession } from '@/components/session-context-provider';\nimport { ActionHub } from '@/components/dashboard/action-hub';\nimport { WeeklyVolumeChart } from '@/components/dashboard/weekly-volume-chart';\nimport { NextWorkoutCard } from '@/components/dashboard/next-workout-card';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { PreviousWorkoutsCard } from '@/components/dashboard/previous-workouts-card';\nimport { AllWorkoutsQuickStart } from '@/components/dashboard/all-workouts-quick-start';\nimport { WorkoutSummaryModal } from '@/components/workout-summary/workout-summary-modal';\nimport { GymToggle } from '@/components/dashboard/gym-toggle';\nimport { useGym } from '@/components/gym-context-provider';\nimport { useWorkoutDataFetcher } from '@/hooks/use-workout-data-fetcher';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { formatAthleteName } from '@/lib/utils'; // Keep web-specific utils;\nimport { WeeklyTargetWidget } from '@/components/dashboard/weekly-target-widget';\n\ntype Profile = Tables<'profiles'>;\n\nexport default function DashboardPage() {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const router = useRouter();\n  const { \n    groupedTPaths, \n    loadingData: loadingWorkoutData, \n    profile, \n    loadingData: loadingProfile, \n    workoutExercisesCache, \n    dataError,\n    refreshAllData,\n    weeklySummary,\n    loadingWeeklySummary\n  } = useWorkoutDataFetcher();\n  const { loadingGyms, userGyms, activeGym } = useGym();\n  \n  const [welcomeText, setWelcomeText] = useState<string>('');\n  const [athleteName, setAthleteName] = useState<string>('');\n\n  const [showSummaryModal, setShowSummaryModal] = useState(false);\n  const [summarySessionId, setSummarySessionId] = useState<string | null>(null);\n\n  const handleViewSummary = (sessionId: string) => {\n    setSummarySessionId(sessionId);\n    setShowSummaryModal(true);\n  };\n\n  useEffect(() => {\n    if (!memoizedSessionUserId) {\n      router.push('/login');\n      return;\n    }\n\n    if (profile) {\n      const formattedName = formatAthleteName(profile.full_name || profile.first_name);\n      setAthleteName(formattedName);\n\n      // Determine 'Welcome' vs 'Welcome Back'\n      const now = new Date();\n      const createdAt = new Date(profile.created_at!);\n      const fiveMinutes = 5 * 60 * 1000; // 5 minutes in milliseconds\n\n      if (now.getTime() - createdAt.getTime() < fiveMinutes) {\n        setWelcomeText('Welcome');\n      } else {\n        setWelcomeText('Welcome Back,');\n      }\n    } else if (!loadingProfile && !profile) {\n      router.push('/onboarding');\n    }\n  }, [memoizedSessionUserId, router, profile, loadingProfile]);\n\n  if (!memoizedSessionUserId) return null;\n\n  return (\n    <div className=\"flex flex-col gap-6 p-2 sm:p-4\">\n      <header className=\"animate-fade-in-slide-up\" style={{ animationDelay: '0s' }}>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-4xl font-bold tracking-tight\">{welcomeText} {athleteName}</h1>\n            <p className=\"text-muted-foreground mt-2\">Ready to Train? Let's get Started!</p>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"animate-fade-in-slide-up\" style={{ animationDelay: '0.1s' }}>\n        <WeeklyTargetWidget \n          onViewSummary={handleViewSummary} \n          summary={weeklySummary}\n          loading={loadingWeeklySummary}\n          error={dataError}\n          profile={profile}\n        />\n      </div>\n\n      <div className=\"animate-fade-in-slide-up\" style={{ animationDelay: '0.2s' }}>\n        <ActionHub />\n      </div>\n\n      {!loadingGyms && userGyms.length > 1 && (\n        <div className=\"flex justify-center animate-fade-in-slide-up\" style={{ animationDelay: '0.3s' }}>\n          <GymToggle />\n        </div>\n      )}\n\n      <div className=\"animate-fade-in\" style={{ animationDelay: '0.4s' }}>\n        <NextWorkoutCard \n          profile={profile}\n          groupedTPaths={groupedTPaths}\n          loadingPlans={loadingWorkoutData}\n          activeGym={activeGym}\n          loadingGyms={loadingGyms}\n        />\n      </div>\n      <div className=\"animate-fade-in-slide-up\" style={{ animationDelay: '0.5s' }}>\n        <AllWorkoutsQuickStart \n          profile={profile}\n          groupedTPaths={groupedTPaths}\n          loadingPlans={loadingWorkoutData}\n          activeGym={activeGym}\n          loadingGyms={loadingGyms}\n          workoutExercisesCache={workoutExercisesCache}\n          dataError={dataError}\n        />\n      </div>\n\n      <div className=\"animate-fade-in-slide-up\" style={{ animationDelay: '0.6s' }}>\n        <WeeklyVolumeChart />\n      </div>\n      <div className=\"animate-fade-in-slide-up\" style={{ animationDelay: '0.7s' }}>\n        <PreviousWorkoutsCard onViewSummary={handleViewSummary} />\n      </div>\n      <WorkoutSummaryModal\n        open={showSummaryModal}\n        onOpenChange={setShowSummaryModal}\n        sessionId={summarySessionId}\n      />\n    </div>\n  );\n}","size_bytes":5267},"apps/web/src/app/(app)/layout.tsx":{"content":"\"use client\";\n\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Header } from \"@/components/layout/header\";\nimport { MobileFooterNav } from \"@/components/layout/mobile-footer-nav\";\nimport { useWorkoutFlow } from \"@/components/workout-flow/workout-flow-context-provider\"; // Import the context hook\nimport { WorkoutFlowProvider } from \"@/components/workout-flow/workout-flow-context-provider\"; // Import the provider\nimport { useEffect } from \"react\";\nimport { UnsavedChangesDialog } from \"@/components/workout-flow/unsaved-changes-dialog\";\nimport { EditWorkoutExercisesDialog } from \"@/components/manage-t-paths/edit-workout-exercises-dialog\";\nimport { GymContextProvider } from \"@/components/gym-context-provider\";\nimport { useSession } from \"@/components/session-context-provider\"; // Import useSession\n\n// This component now consumes the context provided by WorkoutFlowProvider\nfunction AppLayoutContent({ children }: { children: React.ReactNode }) {\n  const workoutFlowManager = useWorkoutFlow(); // Use the context hook\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  // --- Browser-level warning (for page close/refresh/browser navigation) ---\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      if (workoutFlowManager.isWorkoutActive && workoutFlowManager.hasUnsavedChanges) {\n        event.preventDefault();\n        event.returnValue = ''; // Required for Chrome to show the prompt\n        return ''; // Standard for other browsers\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [workoutFlowManager.isWorkoutActive, workoutFlowManager.hasUnsavedChanges]);\n  // --- End Browser-level warning ---\n\n  return (\n    <>\n      <div className=\"flex min-h-screen w-full flex-col bg-muted/40\">\n        <Sidebar />\n        <div className=\"flex flex-col sm:gap-4 sm:py-4 sm:pl-14\">\n          <Header \n            isGeneratingPlan={workoutFlowManager.isGeneratingPlan} \n            tempStatusMessage={workoutFlowManager.tempStatusMessage} // NEW\n          />\n          <main className=\"flex-1 p-2 sm:px-4 sm:py-0 pb-20 sm:pb-2\">{children}</main>\n        </div>\n        <MobileFooterNav />\n      </div>\n      <UnsavedChangesDialog\n        open={workoutFlowManager.showUnsavedChangesDialog}\n        onOpenChange={workoutFlowManager.handleCancelLeave}\n        onConfirmLeave={workoutFlowManager.handleConfirmLeave}\n        onCancelLeave={workoutFlowManager.handleCancelLeave}\n        activeWorkout={workoutFlowManager.activeWorkout}\n        onOpenEditWorkoutDialog={workoutFlowManager.handleOpenEditWorkoutDialog}\n      />\n      {workoutFlowManager.selectedWorkoutToEdit && (\n        <EditWorkoutExercisesDialog\n          open={workoutFlowManager.isEditWorkoutDialogOpen}\n          onOpenChange={workoutFlowManager.setIsEditWorkoutDialogOpen}\n          workoutId={workoutFlowManager.selectedWorkoutToEdit.id}\n          workoutName={workoutFlowManager.selectedWorkoutToEdit.name}\n          onSaveSuccess={workoutFlowManager.handleEditWorkoutSaveSuccess}\n          setTempStatusMessage={workoutFlowManager.setTempStatusMessage} // NEW\n        />\n      )}\n    </>\n  );\n}\n\n// The main export now wraps everything in the correct provider order\nexport default function AppLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <GymContextProvider>\n      <WorkoutFlowProvider>\n        <AppLayoutContent>{children}</AppLayoutContent>\n      </WorkoutFlowProvider>\n    </GymContextProvider>\n  );\n}","size_bytes":3629},"apps/web/src/app/(app)/manage-exercises/page.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Filter, ChevronLeft, ChevronRight, Search } from \"lucide-react\"; // Added Search\nimport { Card } from \"@/components/ui/card\";\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\"; // Added Input\n\n// Import modular components\nimport { GlobalExerciseList } from \"@/components/manage-exercises/global-exercise-list\";\nimport { UserExerciseList } from \"@/components/manage-exercises/user-exercise-list\";\nimport { useManageExercisesData } from '@/hooks/use-manage-exercises-data';\n\n// AI-related imports\nimport { AnalyseGymButton } from \"@/components/manage-exercises/exercise-form/analyze-gym-button\";\nimport { AnalyseGymDialog } from \"@/components/manage-exercises/exercise-form/analyze-gym-dialog\";\nimport { SaveAiExercisePrompt } from \"@/components/workout-flow/save-ai-exercise-prompt\";\nimport { toast } from \"sonner\";\nimport { EditExerciseDialog } from \"@/components/manage-exercises/edit-exercise-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useWorkoutFlow } from \"@/components/workout-flow/workout-flow-context-provider\"; // NEW\n\nexport default function ManageExercisesPage() {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [isFilterSheetOpen, setIsFilterSheetOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"my-exercises\");\n\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: false });\n\n  const workoutFlowManager = useWorkoutFlow(); // NEW: Get workoutFlowManager\n\n  const {\n    globalExercises,\n    userExercises,\n    loading,\n    editingExercise,\n    handleEditClick,\n    handleCancelEdit,\n    handleSaveSuccess,\n    handleDeleteExercise,\n    selectedMuscleFilter,\n    setSelectedMuscleFilter,\n    availableMuscleGroups,\n    exerciseWorkoutsMap,\n    exerciseGymsMap,\n    userGyms,\n    selectedGymFilter,\n    setSelectedGymFilter,\n    handleToggleFavorite,\n    handleOptimisticAdd,\n    handleAddFailure,\n    handleRemoveFromWorkout,\n    refreshExercises,\n    refreshTPaths,\n    totalUserExercisesCount,\n    totalGlobalExercisesCount,\n    searchTerm, // NEW\n    setSearchTerm, // NEW\n    setTempStatusMessage, // NEW: Destructure setTempStatusMessage\n  } = useManageExercisesData({\n    sessionUserId: memoizedSessionUserId, // Use memoized ID\n    supabase,\n    setTempStatusMessage: workoutFlowManager.setTempStatusMessage,\n    // Removed props that are now fetched internally by useManageExercisesData\n  });\n\n  // AI-related states\n  const [showAnalyseGymDialog, setShowAnalyseGymDialog] = useState(false);\n  const [showSaveAiExercisePrompt, setShowSaveAiExercisePrompt] = useState(false);\n  const [aiIdentifiedExercise, setAiIdentifiedExercise] = useState<Partial<FetchedExerciseDefinition> | null>(null);\n  const [isAiSaving, setIsAiSaving] = useState(false);\n\n  const handleTabChange = useCallback((value: string) => {\n    setActiveTab(value);\n    if (emblaApi) {\n      const index = value === \"my-exercises\" ? 0 : 1;\n      emblaApi.scrollTo(index);\n    }\n  }, [emblaApi]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n\n    const onSelect = () => {\n      const selectedIndex = emblaApi.selectedScrollSnap();\n      setActiveTab(selectedIndex === 0 ? \"my-exercises\" : \"global-library\");\n    };\n\n    emblaApi.on(\"select\", onSelect);\n    onSelect();\n\n    return () => {\n      emblaApi.off(\"select\", onSelect);\n    };\n  }, [emblaApi]);\n\n  const scrollPrev = useCallback(() => {\n    emblaApi && emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    emblaApi && emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const handleExerciseIdentified = useCallback((exercises: Partial<FetchedExerciseDefinition>[], duplicate_status: 'none' | 'global' | 'my-exercises') => {\n    if (exercises.length > 0) {\n      setAiIdentifiedExercise(exercises[0]);\n      setShowSaveAiExercisePrompt(true);\n    } else {\n      toast.info(\"No exercises were identified from the photos.\");\n    }\n  }, []);\n\n  const handleSaveAiExerciseToMyExercises = useCallback(async (exercise: Partial<FetchedExerciseDefinition>) => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsAiSaving(true);\n    try {\n      const { error } = await supabase.from('exercise_definitions').insert([{\n        name: exercise.name!,\n        main_muscle: exercise.main_muscle!,\n        type: exercise.type!,\n        category: exercise.category,\n        description: exercise.description,\n        pro_tip: exercise.pro_tip,\n        video_url: exercise.video_url,\n        user_id: memoizedSessionUserId, // Use memoized ID\n        library_id: null,\n        is_favorite: false,\n        created_at: new Date().toISOString(),\n        movement_type: exercise.movement_type,\n        movement_pattern: exercise.movement_pattern,\n      }]).select('id').single();\n\n      if (error) {\n        if (error.code === '23505') {\n          setTempStatusMessage({ message: \"Duplicate!\", type: 'error' });\n        } else {\n          throw error;\n        }\n      } else {\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n        refreshExercises();\n        setShowSaveAiExercisePrompt(false);\n        setAiIdentifiedExercise(null);\n      }\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to save AI identified exercise:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsAiSaving(false);\n    }\n  }, [memoizedSessionUserId, supabase, refreshExercises, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleEditIdentifiedExercise = useCallback((exercise: Partial<FetchedExerciseDefinition>) => {\n    const exerciseToEdit: FetchedExerciseDefinition = {\n      ...exercise,\n      id: exercise.id || null,\n      user_id: memoizedSessionUserId, // Use memoized ID\n      is_favorite: false,\n      library_id: exercise.library_id || null,\n      created_at: exercise.created_at ?? null,\n      description: exercise.description ?? null,\n      pro_tip: exercise.pro_tip ?? null,\n      category: exercise.category ?? null,\n      video_url: exercise.video_url ?? null,\n      icon_url: exercise.icon_url ?? null,\n      name: exercise.name || '',\n      main_muscle: exercise.main_muscle || '',\n      type: exercise.type || 'weight',\n      movement_type: exercise.movement_type ?? null,\n      movement_pattern: exercise.movement_pattern ?? null,\n    };\n    handleEditClick(exerciseToEdit);\n    setShowSaveAiExercisePrompt(false);\n    setAiIdentifiedExercise(null);\n  }, [handleEditClick, memoizedSessionUserId]); // Depend on memoized ID\n\n\n  return (\n    <>\n      <div className=\"flex flex-col gap-4 p-2 sm:p-4\">\n        <header className=\"mb-4 text-center relative\">\n          <h1 className=\"text-3xl font-bold\">Manage Exercises</h1>\n        </header>\n        \n        <Card>\n          <Tabs value={activeTab} onValueChange={handleTabChange} className=\"w-full\">\n            <div className=\"flex items-center justify-between p-4 border-b\">\n              <TabsList className=\"grid grid-cols-2 h-9\">\n                <TabsTrigger value=\"my-exercises\">My Exercises</TabsTrigger>\n                <TabsTrigger value=\"global-library\">Global Library</TabsTrigger>\n              </TabsList>\n              <div className=\"flex items-center gap-2\">\n                <Sheet open={isFilterSheetOpen} onOpenChange={setIsFilterSheetOpen}>\n                  <SheetTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"h-8 gap-1\">\n                      <Filter className=\"h-4 w-4\" />\n                      <span className=\"sr-only sm:not-sr-only sm:whitespace-nowrap\">Filter</span>\n                    </Button>\n                  </SheetTrigger>\n                  <SheetContent side=\"bottom\" className=\"h-fit max-h-[80vh]\">\n                    <SheetHeader>\n                      <SheetTitle>Filter Exercises</SheetTitle>\n                    </SheetHeader>\n                    <div className=\"py-4 space-y-4\">\n                      <div>\n                        <Label>Filter by Muscle Group</Label>\n                        <Select onValueChange={setSelectedMuscleFilter} value={selectedMuscleFilter}>\n                          <SelectTrigger className=\"w-full\">\n                            <SelectValue placeholder=\"Filter by Muscle\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Muscle Groups</SelectItem>\n                            <SelectItem value=\"favorites\">Favourites</SelectItem>\n                            {availableMuscleGroups.map(muscle => (\n                              <SelectItem key={muscle} value={muscle}>\n                                {muscle}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label>Filter by Gym</Label>\n                        <Select onValueChange={setSelectedGymFilter} value={selectedGymFilter}>\n                          <SelectTrigger className=\"w-full\">\n                            <SelectValue placeholder=\"Filter by Gym\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Gyms</SelectItem>\n                            {userGyms.map(gym => (\n                              <SelectItem key={gym.id} value={gym.id}>\n                                {gym.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </SheetContent>\n                </Sheet>\n              </div>\n            </div>\n            \n            <div className=\"px-4 pt-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search exercises...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full rounded-lg bg-background pl-8\"\n                />\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"overflow-hidden\" ref={emblaRef}>\n                <div className=\"flex\">\n                  <div className=\"embla__slide flex-[0_0_100%] min-w-0 pt-0\">\n                    <TabsContent value=\"my-exercises\" className=\"mt-0 border-none p-0\">\n                      <div className=\"p-3\">\n                        <div className=\"mb-6\">\n                          <AnalyseGymButton onClick={() => setShowAnalyseGymDialog(true)} />\n                        </div>\n                        <UserExerciseList\n                          exercises={userExercises}\n                          loading={loading}\n                          onEdit={handleEditClick}\n                          onDelete={handleDeleteExercise}\n                          editingExercise={editingExercise}\n                          onCancelEdit={handleCancelEdit}\n                          onSaveSuccess={handleSaveSuccess}\n                          exerciseWorkoutsMap={exerciseWorkoutsMap}\n                          exerciseGymsMap={exerciseGymsMap}\n                          userGyms={userGyms}\n                          onRemoveFromWorkout={handleRemoveFromWorkout}\n                          onToggleFavorite={handleToggleFavorite}\n                          onAddSuccess={refreshExercises}\n                          onOptimisticAdd={handleOptimisticAdd}\n                          onAddFailure={handleAddFailure}\n                          totalCount={totalUserExercisesCount}\n                          setTempStatusMessage={setTempStatusMessage} // NEW\n                        />\n                      </div>\n                    </TabsContent>\n                  </div>\n                  <div className=\"embla__slide flex-[0_0_100%] min-w-0 pt-0\">\n                    <TabsContent value=\"global-library\" className=\"mt-0 border-none p-0\">\n                      <div className=\"p-3\">\n                        <GlobalExerciseList\n                          exercises={globalExercises}\n                          loading={loading}\n                          onEdit={handleEditClick}\n                          exerciseWorkoutsMap={exerciseWorkoutsMap}\n                          exerciseGymsMap={exerciseGymsMap}\n                          userGyms={userGyms}\n                          onRemoveFromWorkout={handleRemoveFromWorkout}\n                          onToggleFavorite={handleToggleFavorite}\n                          onAddSuccess={refreshExercises}\n                          onOptimisticAdd={handleOptimisticAdd}\n                          onAddFailure={handleAddFailure}\n                          totalCount={totalGlobalExercisesCount}\n                          setTempStatusMessage={setTempStatusMessage} // NEW\n                        />\n                      </div>\n                    </TabsContent>\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={scrollPrev}\n                className=\"absolute left-2 top-1/2 -translate-y-1/2 z-10 hidden sm:flex\"\n                disabled={activeTab === \"my-exercises\"}\n              >\n                <ChevronLeft className=\"h-6 w-6\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={scrollNext}\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 z-10 hidden sm:flex\"\n                disabled={activeTab === \"global-library\"}\n              >\n                <ChevronRight className=\"h-6 w-6\" />\n              </Button>\n            </div>\n          </Tabs>\n        </Card>\n      </div>\n\n      <AnalyseGymDialog\n        open={showAnalyseGymDialog}\n        onOpenChange={setShowAnalyseGymDialog}\n        onExerciseIdentified={handleExerciseIdentified}\n      />\n      <SaveAiExercisePrompt\n        open={showSaveAiExercisePrompt}\n        onOpenChange={setShowSaveAiExercisePrompt}\n        exercise={aiIdentifiedExercise}\n        onSaveToMyExercises={handleSaveAiExerciseToMyExercises}\n        context=\"manage-exercises\"\n        onEditExercise={handleEditIdentifiedExercise}\n        isSaving={isAiSaving}\n      />\n      {editingExercise && (\n        <EditExerciseDialog\n          open={!!editingExercise}\n          onOpenChange={handleCancelEdit}\n          exercise={editingExercise}\n          onSaveSuccess={handleSaveSuccess}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n    </>\n  );\n}","size_bytes":15763},"apps/web/src/app/(app)/manage-t-paths/page.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, WorkoutWithLastCompleted, GroupedTPath } from \"@/types/supabase\";\nimport { toast } from \"sonner\";\nimport { ActiveTPathWorkoutsList } from \"@/components/manage-t-paths/active-t-path-workouts-list\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { LoadingOverlay } from \"@/components/loading-overlay\";\nimport { EditWorkoutExercisesDialog } from \"@/components/manage-t-paths/edit-workout-exercises-dialog\";\nimport { useWorkoutDataFetcher } from \"@/hooks/use-workout-data-fetcher\";\nimport { useGym } from \"@/components/gym-context-provider\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { SetupGymPlanPrompt } from \"@/components/manage-t-paths/setup-gym-plan-prompt\"; // Corrected import\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ntype TPath = Tables<'t_paths'>;\n\nexport default function ManageTPathsPage() {\n  const { session, supabase } = useSession();\n  const router = useRouter();\n  const { userGyms, activeGym, switchActiveGym, loadingGyms } = useGym(); // Get gym context\n  const { groupedTPaths, loadingData, refreshAllData, profile, setTempStatusMessage } = useWorkoutDataFetcher(); // NEW: Destructure setTempStatusMessage\n\n  const [isEditWorkoutDialogOpen, setIsEditWorkoutDialogOpen] = useState(false);\n  const [selectedWorkoutToEdit, setSelectedWorkoutToEdit] = useState<{ id: string; name: string } | null>(null);\n\n  const activeTPathGroup = useMemo(() => {\n    if (!activeGym || groupedTPaths.length === 0) return null;\n    return groupedTPaths.find(group => group.mainTPath.gym_id === activeGym.id) || null;\n  }, [activeGym, groupedTPaths]);\n\n  const isGymConfigured = !!activeTPathGroup;\n\n  const handleEditWorkout = (workoutId: string, workoutName: string) => {\n    setSelectedWorkoutToEdit({ id: workoutId, name: workoutName });\n    setIsEditWorkoutDialogOpen(true);\n  };\n\n  const handleSaveSuccess = () => {\n    refreshAllData();\n    setIsEditWorkoutDialogOpen(false);\n  };\n\n  const handleGymSelectChange = async (gymId: string) => {\n    if (gymId !== activeGym?.id) {\n      await switchActiveGym(gymId);\n    }\n  };\n\n  if (loadingData || loadingGyms) {\n    return (\n      <div className=\"flex flex-col gap-4 p-2 sm:p-4\">\n        <header className=\"mb-4\"><Skeleton className=\"h-9 w-3/4\" /></header>\n        <Skeleton className=\"h-64 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col gap-4 p-2 sm:p-4\">\n      <header className=\"mb-4\">\n        <h1 className=\"text-3xl font-bold\">Manage Workout Plans</h1>\n        <p className=\"text-muted-foreground\">\n          Configure the workouts for your active gym: <span className=\"font-semibold text-primary\">{activeGym?.name || '...'}</span>\n        </p>\n        {userGyms.length > 1 && (\n          <div className=\"mt-4\">\n            <Select onValueChange={handleGymSelectChange} value={activeGym?.id || ''}>\n              <SelectTrigger className=\"w-full sm:w-[200px]\">\n                <SelectValue placeholder=\"Select a gym\" />\n              </SelectTrigger>\n              <SelectContent>\n                {userGyms.map(gym => (\n                  <SelectItem key={gym.id} value={gym.id}>\n                    {gym.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        )}\n      </header>\n      \n      {!activeGym ? (\n        <Card>\n          <CardHeader><CardTitle>No Active Gym</CardTitle></CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">Please add a gym in your profile settings to begin.</p>\n            <Button onClick={() => router.push('/profile')} className=\"mt-4\">Go to Profile Settings</Button>\n          </CardContent>\n        </Card>\n      ) : !isGymConfigured ? (\n        <SetupGymPlanPrompt gym={activeGym} onSetupSuccess={refreshAllData} profile={profile} setTempStatusMessage={setTempStatusMessage} />\n      ) : (\n        <ActiveTPathWorkoutsList\n          activeTPathName={activeTPathGroup.mainTPath.template_name}\n          childWorkouts={activeTPathGroup.childWorkouts}\n          loading={loadingData}\n          onEditWorkout={handleEditWorkout}\n        />\n      )}\n\n      {selectedWorkoutToEdit && (\n        <EditWorkoutExercisesDialog\n          open={isEditWorkoutDialogOpen}\n          onOpenChange={setIsEditWorkoutDialogOpen}\n          workoutId={selectedWorkoutToEdit.id}\n          workoutName={selectedWorkoutToEdit.name}\n          onSaveSuccess={handleSaveSuccess}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n    </div>\n  );\n}","size_bytes":4878},"apps/web/src/app/(app)/profile/page.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport *as z from \"zod\";\nimport { toast } from 'sonner';\nimport { Profile as ProfileType, ProfileUpdate, Tables, LocalUserAchievement } from '@/types/supabase';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { BarChart2, User, Settings, ChevronLeft, ChevronRight, Flame, Dumbbell, Trophy, Star, Footprints, ListChecks, Image, Camera, Film, Users } from 'lucide-react';\nimport { cn, getLevelFromPoints, formatAthleteName } from '@/lib/utils'; // Keep web-specific utils;\nimport { AchievementDetailDialog } from '@/components/profile/achievement-detail-dialog';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { db } from '@/lib/db';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\n\nimport { ProfileOverviewTab } from '@/components/profile/profile-overview-tab';\nimport { ProfileStatsTab } from '@/components/profile/profile-stats-tab';\nimport { ProfileSettingsTab } from '@/components/profile/profile-settings-tab';\nimport { PointsExplanationModal } from '@/components/profile/points-explanation-modal';\nimport { achievementsList } from '@/lib/achievements';\nimport { LoadingOverlay } from '@/components/loading-overlay';\nimport { useWorkoutFlow } from '@/components/workout-flow/workout-flow-context-provider';\nimport { PhotoJourneyTab } from '@/components/profile/photo-journey/photo-journey-tab';\nimport { UploadPhotoDialog } from '@/components/profile/photo-journey/upload-photo-dialog';\nimport { Button } from '@/components/ui/button';\nimport { PhotoCaptureFlow } from '@/components/profile/photo-journey/photo-capture-flow';\nimport { MobileNavigation } from '@/components/profile/mobile-navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { MediaFeedScreen } from '@/components/media/media-feed-screen';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'; // Import Tabs components\n\ntype Profile = ProfileType;\ntype TPath = Tables<'t_paths'>;\n\nconst profileSchema = z.object({\n  full_name: z.string().min(1, \"Your name is required.\"),\n  height_cm: z.coerce.number()\n    .int(\"Height must be a whole number.\")\n    .positive(\"Height must be positive.\")\n    .optional().nullable(),\n  weight_kg: z.coerce.number()\n    .int(\"Weight must be a whole number.\")\n    .positive(\"Weight must be positive.\")\n    .optional().nullable(),\n  body_fat_pct: z.coerce.number()\n    .int(\"Body Fat % must be a whole number.\")\n    .min(0, \"Cannot be negative.\")\n    .max(100, \"Cannot exceed 100.\")\n    .optional().nullable(),\n  primary_goal: z.string().optional().nullable(),\n  health_notes: z.string().optional().nullable(),\n  preferred_session_length: z.string().optional().nullable(),\n  preferred_muscles: z.array(z.string()).optional().nullable(),\n  programme_type: z.string().optional().nullable(),\n});\n\nconst mainMuscleGroups = [\n  \"Pectorals\", \"Deltoids\", \"Lats\", \"Traps\", \"Biceps\", \n  \"Triceps\", \"Quadriceps\", \"Hamstrings\", \"Glutes\", \"Calves\", \n  \"Abdominals\", \"Core\", \"Full Body\"\n];\n\nexport default function ProfilePage() {\n  const { session, supabase } = useSession();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const [isSaving, setIsSaving] = useState(false);\n  const [aiCoachUsageToday, setAiCoachUsageToday] = useState(0);\n  \n  const [isAchievementDetailOpen, setIsAchievementDetailOpen] = useState(false);\n  const [selectedAchievement, setSelectedAchievement] = useState<{ id: string; name: string; icon: string } | null>(null);\n  const [isPointsExplanationOpen, setIsPointsExplanationOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [photos, setPhotos] = useState<Tables<'progress_photos'>[]>([]);\n  const [loadingPhotos, setLoadingPhotos] = useState(true);\n  const [isCaptureFlowOpen, setIsCaptureFlowOpen] = useState(false);\n  const [capturedPhoto, setCapturedPhoto] = useState<File | null>(null);\n\n  const AI_COACH_DAILY_LIMIT = 2;\n\n  const form = useForm<z.infer<typeof profileSchema>>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: { \n      full_name: \"\", \n      height_cm: null, \n      weight_kg: null, \n      body_fat_pct: null, \n      primary_goal: null, \n      health_notes: null,\n      preferred_session_length: null, \n      preferred_muscles: [],\n      programme_type: null,\n    },\n  });\n\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: false });\n  const [viewportHeight, setViewportHeight] = useState<number | undefined>(undefined);\n\n  const updateViewportHeight = useCallback(() => {\n    if (emblaApi) {\n      const slide = emblaApi.slideNodes()[emblaApi.selectedScrollSnap()];\n      if (slide) {\n        // Use a timeout to ensure we get the height after any potential reflows\n        setTimeout(() => {\n          setViewportHeight(slide.offsetHeight);\n        }, 0);\n      }\n    }\n  }, [emblaApi]);\n\n  useEffect(() => {\n    if (emblaApi) {\n      emblaApi.on('select', updateViewportHeight);\n      emblaApi.on('resize', updateViewportHeight);\n      // Initial set\n      updateViewportHeight();\n    }\n    return () => {\n      if (emblaApi) {\n        emblaApi.off('select', updateViewportHeight);\n        emblaApi.off('resize', updateViewportHeight);\n      }\n    };\n  }, [emblaApi, updateViewportHeight]);\n\n  const { data: cachedProfile, loading: loadingProfile, error: profileError, refresh: refreshProfileCache } = useCacheAndRevalidate<Profile>({\n    cacheTable: 'profiles_cache',\n    supabaseQuery: useCallback(async (client) => {\n      if (!session?.user.id) return { data: [], error: null };\n      const { data, error } = await client.from('profiles').select('*').eq('id', session.user.id);\n      return { data: data || [], error };\n    }, [session?.user.id]),\n    queryKey: 'user_profile_page',\n    supabase,\n    sessionUserId: session?.user.id ?? null,\n  });\n  const profile = cachedProfile?.[0] || null;\n\n  const { data: cachedAchievements, loading: loadingAchievements, error: achievementsError, refresh: refreshAchievementsCache } = useCacheAndRevalidate<LocalUserAchievement>({\n    cacheTable: 'user_achievements_cache',\n    supabaseQuery: useCallback(async (client) => {\n      if (!session?.user.id) return { data: [], error: null };\n      const { data, error } = await client.from('user_achievements').select('id, user_id, achievement_id, unlocked_at').eq('user_id', session.user.id);\n      return { data: data as LocalUserAchievement[] || [], error };\n    }, [session?.user.id]),\n    queryKey: 'user_achievements_page',\n    supabase,\n    sessionUserId: session?.user.id ?? null,\n  });\n  const unlockedAchievements = useMemo(() => new Set((cachedAchievements || []).map(a => a.achievement_id)), [cachedAchievements]);\n\n  const { refresh: refreshTPathsCache } = useCacheAndRevalidate<TPath>({\n    cacheTable: 't_paths_cache',\n    supabaseQuery: useCallback(async (client) => {\n      if (!session?.user.id) return { data: [], error: null };\n      return client.from('t_paths').select('*').eq('user_id', session.user.id);\n    }, [session?.user.id]),\n    queryKey: 't_paths_profile_page',\n    supabase,\n    sessionUserId: session?.user.id ?? null,\n  });\n\n  const { refresh: refreshTPathExercisesCache } = useCacheAndRevalidate<Tables<'t_path_exercises'>>({\n    cacheTable: 't_path_exercises_cache',\n    supabaseQuery: useCallback(async (client) => {\n      if (!session?.user.id) return { data: [], error: null };\n      const { data: userTPaths, error: tPathsError } = await client.from('t_paths').select('id').eq('user_id', session.user.id);\n      if (tPathsError) throw tPathsError;\n      if (!userTPaths) return { data: [], error: null };\n      const tpathIds = userTPaths.map(p => p.id);\n      return client.from('t_path_exercises').select('*').in('template_id', tpathIds);\n    }, [session?.user.id]),\n    queryKey: 't_path_exercises_profile_page',\n    supabase,\n    sessionUserId: session?.user.id ?? null,\n  });\n\n  const totalWorkoutsCount = useLiveQuery(async () => {\n    if (!session?.user.id) return 0;\n    try {\n      const count = await db.workout_sessions\n        .where('user_id').equals(session.user.id)\n        .and(s => s.completed_at !== null)\n        .count();\n      return count;\n    } catch (error) {\n      console.error(\"[ProfilePage] Error fetching total workouts count from IndexedDB:\", error);\n      toast.error(\"Failed to load total workouts count.\");\n      return 0;\n    }\n  }, [session?.user.id]) || 0;\n\n  const totalExercisesCount = useLiveQuery(async () => {\n    if (!session?.user.id) return 0;\n    try {\n      const uniqueExerciseInstances = new Set<string>();\n      const setLogs = await db.set_logs.toArray();\n      const workoutSessions = await db.workout_sessions.toArray();\n      const userSessionIds = new Set(workoutSessions.filter(ws => ws.user_id === session.user.id && ws.completed_at !== null).map(ws => ws.id));\n\n      setLogs.forEach(sl => {\n        if (sl.session_id && userSessionIds.has(sl.session_id) && sl.exercise_id) {\n          uniqueExerciseInstances.add(`${sl.session_id}-${sl.exercise_id}`);\n        }\n      });\n      return uniqueExerciseInstances.size;\n    } catch (error) {\n      console.error(\"[ProfilePage] Error fetching total exercises count from IndexedDB:\", error);\n      toast.error(\"Failed to load total exercises count.\");\n      return 0;\n    }\n  }, [session?.user.id]) || 0;\n\n  const refreshProfileData = useCallback(async () => {\n    console.log(\"[ProfilePage] refreshProfileData called.\");\n    await refreshProfileCache();\n    await refreshAchievementsCache();\n    await refreshTPathsCache();\n    await refreshTPathExercisesCache();\n  }, [refreshProfileCache, refreshAchievementsCache, refreshTPathsCache, refreshTPathExercisesCache]);\n\n  const fetchPhotos = useCallback(async () => {\n    if (!session?.user.id) return;\n    setLoadingPhotos(true);\n    try {\n      const { data, error } = await supabase\n        .from('progress_photos')\n        .select('*')\n        .eq('user_id', session.user.id)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw error;\n      }\n      setPhotos(data);\n    } catch (error: any) {\n      console.error(\"Error fetching photos:\", error);\n      toast.error(\"Could not load your photos.\");\n    } finally {\n      setLoadingPhotos(false);\n    }\n  }, [session?.user.id, supabase]);\n\n  useEffect(() => {\n    if (activeTab === 'photo') {\n      fetchPhotos();\n    }\n  }, [activeTab, fetchPhotos]);\n\n  useEffect(() => {\n    if (!session?.user.id || loadingProfile) {\n      return;\n    }\n\n    if (profile) {\n      const profileFullName = [profile.first_name, profile.last_name].filter(Boolean).join(' ');\n      const profilePreferredMuscles = profile.preferred_muscles ? profile.preferred_muscles.split(',').map((m: string) => m.trim()) : [];\n\n      const currentFormValues = form.getValues();\n\n      const needsUpdate = \n        !form.formState.isDirty ||\n        currentFormValues.full_name !== profileFullName ||\n        currentFormValues.height_cm !== profile.height_cm ||\n        currentFormValues.weight_kg !== profile.weight_kg ||\n        currentFormValues.body_fat_pct !== profile.body_fat_pct ||\n        currentFormValues.primary_goal !== profile.primary_goal ||\n        currentFormValues.health_notes !== profile.health_notes ||\n        currentFormValues.preferred_session_length !== profile.preferred_session_length ||\n        currentFormValues.programme_type !== profile.programme_type ||\n        JSON.stringify(currentFormValues.preferred_muscles) !== JSON.stringify(profilePreferredMuscles);\n\n      if (needsUpdate) {\n        console.log(\"[ProfilePage] Profile data loaded and form needs update. Resetting form defaults:\", profile);\n        form.reset({\n          full_name: profileFullName,\n          height_cm: profile.height_cm,\n          weight_kg: profile.weight_kg,\n          body_fat_pct: profile.body_fat_pct,\n          primary_goal: profile.primary_goal,\n          health_notes: profile.health_notes,\n          preferred_session_length: profile.preferred_session_length,\n          preferred_muscles: profilePreferredMuscles,\n          programme_type: profile.programme_type,\n        });\n      } else {\n        console.log(\"[ProfilePage] Profile data loaded, and form values match. Skipping reset.\");\n      }\n\n      if (profile.last_ai_coach_use_at) {\n        const lastUsedDate = new Date(profile.last_ai_coach_use_at).toDateString();\n        const today = new Date().toDateString();\n        setAiCoachUsageToday(lastUsedDate === today ? 1 : 0);\n      } else {\n        setAiCoachUsageToday(0);\n      }\n    } else {\n      console.log(\"[ProfilePage] Profile is null or not yet loaded. Resetting form to initial defaults.\");\n      form.reset();\n      setAiCoachUsageToday(0);\n    }\n  }, [profile, loadingProfile, session?.user.id, form]);\n\n  useEffect(() => {\n    if (!session) {\n      router.push('/login');\n      return;\n    }\n    \n    refreshProfileData(); \n  }, [session, router, refreshProfileData]);\n\n  const { bmi, dailyCalories } = useMemo(() => {\n    const weight = profile?.weight_kg;\n    const height = profile?.height_cm;\n    if (!weight || !height) return { bmi: null, dailyCalories: null };\n    const heightInMeters = height / 100;\n    const bmiValue = (weight / (heightInMeters * heightInMeters)).toFixed(1);\n    const bmr = (10 * weight) + (6.25 * height) - (5 * 30) + 5;\n    const caloriesValue = Math.round(bmr * 1.375);\n    return { bmi: bmiValue, dailyCalories: caloriesValue.toLocaleString() };\n  }, [profile]);\n\n  const getFitnessLevel = useCallback(() => {\n    const totalPoints = profile?.total_points || 0;\n    const { level, color } = getLevelFromPoints(totalPoints);\n\n    let progress = 0;\n    let nextLevelPoints = 0;\n\n    if (level === 'Rookie') {\n      nextLevelPoints = 100;\n      progress = (totalPoints / nextLevelPoints) * 100;\n    } else if (level === 'Warrior') {\n      nextLevelPoints = 300;\n      progress = ((totalPoints - 100) / 200) * 100;\n    } else {\n      nextLevelPoints = 600;\n      progress = ((totalPoints - 300) / 300) * 100;\n      if (level === 'Legend') {\n        progress = 100;\n      }\n    }\n\n    let icon: React.ReactElement<React.SVGProps<SVGSVGElement>>;\n    switch (level) {\n      case 'Rookie': icon = <Footprints className=\"h-8 w-8\" />; break;\n      case 'Warrior': icon = <Dumbbell className=\"h-8 w-8\" />; break;\n      case 'Champion': icon = <Trophy className=\"h-8 w-8\" />; break;\n      case 'Legend': icon = <Star className=\"h-8 w-8\" />; break;\n      default: icon = <Footprints className=\"h-8 w-8\" />;\n    }\n\n    return { level, color, progress, icon, nextLevelPoints };\n  }, [profile?.total_points]);\n\n  const fitnessLevel = getFitnessLevel();\n\n  const handleAchievementClick = (achievement: { id: string; name: string; icon: string }) => {\n    setSelectedAchievement(achievement);\n    setIsAchievementDetailOpen(true);\n  };\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut();\n    router.push('/login');\n  };\n\n  const handleTabChange = useCallback((value: string) => {\n    setActiveTab(value);\n    localStorage.setItem('profileActiveTab', value);\n    router.replace(`/profile?tab=${value}`, { scroll: false });\n  }, [router]);\n\n  useEffect(() => {\n    if (emblaApi) {\n      const index = [\"overview\", \"stats\", \"photo\", \"media\", \"social\", \"settings\"].indexOf(activeTab);\n      if (index !== -1 && emblaApi.selectedScrollSnap() !== index) {\n        emblaApi.scrollTo(index);\n      }\n    }\n  }, [activeTab, emblaApi]);\n\n  useEffect(() => {\n    if (!emblaApi) return;\n    const onSelect = () => {\n      const selectedIndex = emblaApi.selectedScrollSnap();\n      const tabNames = [\"overview\", \"stats\", \"photo\", \"media\", \"social\", \"settings\"];\n      const newTab = tabNames[selectedIndex];\n      if (activeTab !== newTab) {\n        handleTabChange(newTab);\n      }\n    };\n    emblaApi.on(\"select\", onSelect);\n    return () => { emblaApi.off(\"select\", onSelect); };\n  }, [emblaApi, activeTab, handleTabChange]);\n\n  useEffect(() => {\n    const tabParam = searchParams.get('tab');\n    const lastTab = localStorage.getItem('profileActiveTab');\n    const initialTab = tabParam || lastTab || 'overview';\n    setActiveTab(initialTab);\n  }, []); // Only on mount\n\n  const scrollPrev = useCallback(() => {\n    emblaApi && emblaApi.scrollPrev();\n  }, [emblaApi]);\n\n  const scrollNext = useCallback(() => {\n    emblaApi && emblaApi.scrollNext();\n  }, [emblaApi]);\n\n  const { setTempStatusMessage } = useWorkoutFlow();\n\n  if (loadingProfile || loadingAchievements) return <div className=\"p-4\"><Skeleton className=\"h-screen w-full\" /></div>;\n  if (!profile) return <div className=\"p-4\">Could not load profile.</div>;\n\n  const userInitial = profile.first_name ? profile.first_name[0].toUpperCase() : (session?.user.email ? session.user.email[0].toUpperCase() : '?');\n\n  return (\n    <>\n      <div className=\"p-2 sm:p-4 max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <Avatar className=\"w-24 h-24 mx-auto mb-4 ring-4 ring-primary/20\">\n            <AvatarFallback className=\"text-4xl font-bold\">{userInitial}</AvatarFallback>\n          </Avatar>\n          <h1 className=\"text-3xl font-bold\">{profile.first_name} {profile.last_name}</h1>\n          <div className=\"flex items-center justify-center space-x-2 mt-2\">\n            <span className={cn(\"px-3 py-1 rounded-full text-xs font-bold !text-white\", fitnessLevel.color)}>{fitnessLevel.level}</span>\n            <span className=\"text-muted-foreground text-sm\">•</span>\n            <span className=\"text-muted-foreground text-sm\">Member since {new Date(profile.created_at!).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-full px-2 sm:px-4\">\n        <MobileNavigation currentPage={activeTab} onPageChange={handleTabChange} />\n      </div>\n      \n      <div className={cn(\n        \"transition-all duration-300\",\n        activeTab === 'media' \n          ? 'w-full' // Take full width for media tab\n          : 'p-2 sm:p-4 mx-auto max-w-4xl' // Constrain other tabs\n      )}>\n        <div className=\"relative\">\n          <div className=\"overflow-hidden\" ref={emblaRef} style={{ height: viewportHeight ? `${viewportHeight}px` : 'auto', transition: 'height 0.2s ease-out' }}>\n            <div className=\"flex items-start\"> {/* Apply items-start here */}\n              <div className=\"embla__slide flex-[0_0_100%] min-w-0 px-2 pt-0\"> {/* Added min-w-0 */}\n                <ProfileOverviewTab\n                  profile={profile}\n                  bmi={bmi}\n                  dailyCalories={dailyCalories}\n                  achievements={achievementsList}\n                  unlockedAchievements={unlockedAchievements}\n                  onAchievementClick={handleAchievementClick}\n                  onOpenPointsExplanation={() => setIsPointsExplanationOpen(true)}\n                  totalWorkoutsCount={totalWorkoutsCount}\n                  totalExercisesCount={totalExercisesCount}\n                />\n              </div>\n\n              <div className=\"embla__slide flex-[0_0_100%] min-w-0 px-2 pt-0\"> {/* Added min-w-0 */}\n                <ProfileStatsTab\n                  fitnessLevel={fitnessLevel}\n                  profile={profile}\n                />\n              </div>\n\n              <div className=\"embla__slide flex-[0_0_100%] min-w-0 px-2 pt-0\"> {/* Added min-w-0 */}\n                <PhotoJourneyTab photos={photos} loading={loadingPhotos} />\n              </div>\n\n              <div className=\"embla__slide flex-[0_0_100%] min-w-0 p-0\"> {/* Added min-w-0 */}\n                <MediaFeedScreen />\n              </div>\n\n              <div className=\"embla__slide flex-[0_0_100%] min-w-0 px-2 pt-0\"> {/* Added min-w-0 */}\n                <Card className=\"mt-6\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"h-5 w-5\" /> Social\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"text-center text-muted-foreground py-16\">\n                    <p>Social features coming soon!</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"embla__slide flex-[0_0_100%] min-w-0 px-2 pt-0\"> {/* Added min-w-0 */}\n                <FormProvider {...form}>\n                  <ProfileSettingsTab\n                    form={form}\n                    mainMuscleGroups={mainMuscleGroups}\n                    aiCoachUsageToday={aiCoachUsageToday}\n                    AI_COACH_DAILY_LIMIT={AI_COACH_DAILY_LIMIT}\n                    onSignOut={handleSignOut}\n                    profile={profile}\n                    onDataChange={refreshProfileData}\n                    setIsSaving={setIsSaving}\n                    setTempStatusMessage={setTempStatusMessage}\n                  />\n                </FormProvider>\n              </div>\n            </div>\n          </div>\n          \n          <button\n            onClick={scrollPrev}\n            className=\"absolute left-2 top-1/2 -translate-y-1/2 z-10 hidden sm:flex p-2 rounded-full bg-background/50 hover:bg-background/70 transition-colors\"\n            disabled={activeTab === \"overview\"}\n          >\n            <ChevronLeft className=\"h-6 w-6\" />\n          </button>\n          <button\n            onClick={scrollNext}\n            className=\"absolute right-2 top-1/2 -translate-y-1/2 z-10 hidden sm:flex p-2 rounded-full bg-background/50 hover:bg-background/70 transition-colors\"\n            disabled={activeTab === \"settings\"}\n          >\n            <ChevronRight className=\"h-6 w-6\" />\n          </button>\n        </div>\n      </div>\n\n      {activeTab === 'photo' && (\n        <Button\n          size=\"icon\"\n          className=\"fixed bottom-24 right-4 sm:bottom-8 sm:right-8 h-14 w-14 rounded-full shadow-lg z-20\"\n          onClick={() => setIsCaptureFlowOpen(true)}\n        >\n          <Camera className=\"h-6 w-6\" />\n          <span className=\"sr-only\">Upload Photo</span>\n        </Button>\n      )}\n\n      <AchievementDetailDialog\n        open={isAchievementDetailOpen}\n        onOpenChange={setIsAchievementDetailOpen}\n        achievementId={selectedAchievement?.id || null}\n        isUnlocked={selectedAchievement ? unlockedAchievements.has(selectedAchievement.id) : false}\n        profile={profile}\n        session={session}\n        supabase={supabase}\n        achievementInfo={selectedAchievement}\n      />\n      <PointsExplanationModal\n        open={isPointsExplanationOpen}\n        onOpenChange={setIsPointsExplanationOpen}\n      />\n      <LoadingOverlay \n        isOpen={isSaving} \n        title=\"Saving Profile\" \n        description=\"Please wait while we update your profile and workout plan.\" \n      />\n      <UploadPhotoDialog\n        open={isUploadDialogOpen}\n        onOpenChange={setIsUploadDialogOpen}\n        onUploadSuccess={() => {\n          fetchPhotos();\n          setCapturedPhoto(null);\n        }}\n        initialFile={capturedPhoto}\n      />\n      <PhotoCaptureFlow\n        open={isCaptureFlowOpen}\n        onOpenChange={setIsCaptureFlowOpen}\n        onPhotoCaptured={(file) => {\n          setCapturedPhoto(file);\n          setIsCaptureFlowOpen(false);\n          setIsUploadDialogOpen(true);\n        }}\n      />\n    </>\n  );\n}","size_bytes":23738},"apps/web/src/app/(app)/progress/page.tsx":{"content":"\"use client\";\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ActivityChart } from \"@/components/progress/activity-chart\";\nimport { WeeklyVolumeChart } from \"@/components/dashboard/weekly-volume-chart\";\nimport { PersonalRecordsCard } from \"@/components/progress/personal-records-card\";\n\nexport default function ProgressPage() {\n  return (\n    <div className=\"flex flex-col gap-4 p-2 sm:p-4\">\n      <header className=\"mb-4 text-center\">\n        <h1 className=\"text-3xl font-bold\">Your Progress</h1>\n        <p className=\"text-muted-foreground\">\n          Charts, records, and summaries to track your fitness journey.\n        </p>\n      </header>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Workout Volume</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <WeeklyVolumeChart />\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle>Activity Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ActivityChart />\n          </CardContent>\n        </Card>\n      </div>\n      \n      <PersonalRecordsCard />\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>More Progress Metrics Coming Soon!</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">\n            We're working on adding more detailed charts and personal records to help you visualize your achievements.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1626},"apps/web/src/app/(app)/workout-history/page.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useSession } from '@/components/session-context-provider';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Trash2, Dumbbell, Timer, ListChecks, Trophy, CalendarDays } from 'lucide-react';\nimport { Tables, WorkoutSessionWithAggregatedDetails } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { formatTimeAgo, getWorkoutColorClass, cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { WorkoutBadge } from '@/components/workout-badge';\nimport { WorkoutSummaryModal } from '@/components/workout-summary/workout-summary-modal';\nimport { ConsistencyCalendarModal } from '@/components/dashboard/consistency-calendar-modal';\nimport { useWorkoutHistory } from '@/hooks/data/useWorkoutHistory'; // Import the new centralized hook\n\nexport default function WorkoutHistoryPage() {\n  const { session, supabase } = useSession();\n  const router = useRouter();\n  \n  // Use the new centralized hook for all data and state management\n  const { sessions: workoutSessions, isLoading: loading, error, refresh: fetchWorkoutHistory } = useWorkoutHistory();\n\n  const [showSummaryModal, setShowSummaryModal] = useState(false);\n  const [summarySessionId, setSummarySessionId] = useState<string | null>(null);\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n\n  useEffect(() => {\n    if (!session) {\n      router.push('/login');\n    }\n  }, [session, router]);\n\n  const handleDeleteSession = async (sessionId: string, templateName: string | null) => {\n    if (!confirm(`Are you sure you want to delete the workout session \"${templateName || 'Ad Hoc Workout'}\"? This action cannot be undone.`)) {\n      return;\n    }\n\n    try {\n      const { error } = await supabase\n        .from('workout_sessions')\n        .delete()\n        .eq('id', sessionId)\n        .eq('user_id', session?.user?.id);\n\n      if (error) {\n        throw new Error(error.message);\n      }\n      toast.success(\"Workout session deleted successfully!\");\n      await fetchWorkoutHistory(); // Re-fetch history using the hook's refresh function\n    } catch (err: any) {\n      console.error(\"Failed to delete workout session:\", err);\n      toast.error(\"Failed to delete workout session.\"); // Changed to toast.error\n    }\n  };\n\n  const handleViewSummary = (sessionId: string) => {\n    setSummarySessionId(sessionId);\n    setShowSummaryModal(true);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-background text-foreground p-4\">\n        <p className=\"text-muted-foreground\">Loading workout history...</p>\n        <div className=\"space-y-4 mt-4 w-full max-w-md\">\n          <Skeleton className=\"h-24 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-background text-destructive p-4\">\n        <p>{error}</p>\n        <Button variant=\"ghost\" onClick={() => router.push('/dashboard')}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground p-2 sm:p-4\">\n      <header className=\"mb-4 flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Workout History</h1>\n        <Button variant=\"ghost\" onClick={() => router.push('/dashboard')}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back\n        </Button>\n      </header>\n\n      <div className=\"flex justify-between items-center mb-6\">\n        <p className=\"text-muted-foreground text-lg\">\n          Total Workouts: <span className=\"font-semibold text-primary\">{workoutSessions.length}</span>\n        </p>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsCalendarOpen(true)}\n        >\n          <CalendarDays className=\"h-4 w-4 mr-2\" /> Calendar\n        </Button>\n      </div>\n\n      <section className=\"mb-8\">\n        {workoutSessions.length === 0 ? (\n          <p className=\"text-muted-foreground text-center\">No workout sessions logged yet. Start a workout to see your history!</p>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {workoutSessions.map((sessionItem) => {\n              const workoutName = sessionItem.template_name || 'Ad Hoc Workout';\n              const workoutBorderClass = getWorkoutColorClass(workoutName, 'border');\n\n              return (\n                <Card key={sessionItem.id} className={cn(\"border-2\", workoutBorderClass, \"group hover:shadow-lg transition-shadow duration-200 ease-in-out\")}>\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <WorkoutBadge workoutName={workoutName} className=\"text-base px-3 py-1\">\n                      {workoutName}\n                    </WorkoutBadge>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => handleDeleteSession(sessionItem.id, sessionItem.template_name)}\n                      title=\"Delete Workout Session\"\n                      className=\"text-muted-foreground hover:text-destructive\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </CardHeader>\n                  <CardContent className=\"pt-0 pb-3 px-3\">\n                    <div className=\"grid grid-cols-2 gap-y-2 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <CalendarDays className=\"h-4 w-4 text-primary\" />\n                        <span>{new Date(sessionItem.session_date).toLocaleDateString()}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Timer className=\"h-4 w-4 text-primary\" />\n                        <span>{sessionItem.duration_string || 'Less than a minute'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <ListChecks className=\"h-4 w-4 text-primary\" />\n                        <span>{sessionItem.exercise_count} Exercises</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Dumbbell className=\"h-4 w-4 text-primary\" />\n                        <span>{sessionItem.total_volume_kg.toLocaleString()} kg Volume</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Trophy className={cn(\"h-4 w-4\", sessionItem.has_prs ? \"text-yellow-500 fill-yellow-500\" : \"text-muted-foreground\")} />\n                        <span>{sessionItem.has_prs ? 'PBs Achieved!' : 'No PBs'}</span>\n                      </div>\n                    </div>\n                    <Button\n                      onClick={() => handleViewSummary(sessionItem.id)}\n                      className=\"w-full mt-4\"\n                    >\n                      View Summary\n                    </Button>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </section>\n\n      <WorkoutSummaryModal\n        open={showSummaryModal}\n        onOpenChange={setShowSummaryModal}\n        sessionId={summarySessionId}\n      />\n\n      <ConsistencyCalendarModal\n        open={isCalendarOpen}\n        onOpenChange={setIsCalendarOpen}\n      />\n    </div>\n  );\n}","size_bytes":7813},"apps/web/src/app/(app)/workout/page.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useSession } from '@/components/session-context-provider';\nimport { useWorkoutFlow } from '@/components/workout-flow/workout-flow-context-provider'; // Import the context hook\nimport { WorkoutSelector } from '@/components/workout-flow/workout-selector';\nimport { WorkoutProgressBar } from '@/components/workout-flow/workout-progress-bar';\nimport { WorkoutSummaryModal } from '@/components/workout-summary/workout-summary-modal';\nimport { GymToggle } from '@/components/dashboard/gym-toggle';\nimport { useGym } from '@/components/gym-context-provider'; // NEW IMPORT\n\nexport default function WorkoutPage() {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const initialWorkoutId = searchParams.get('workoutId');\n  const isQuickStart = !!initialWorkoutId;\n\n  // Use the context hook to get the shared state and functions\n  const workoutFlowManager = useWorkoutFlow();\n  const initialSelectionAttempted = useRef(false); // Ref to track if we've tried to select the initial workout\n  const { userGyms, loadingGyms } = useGym(); // NEW: Consume useGym\n\n  const [showSummaryModal, setShowSummaryModal] = useState(false);\n  const [summarySessionId, setSummarySessionId] = useState<string | null>(null);\n\n  const handleFinishAndShowSummary = async (): Promise<string | null> => {\n    const finishedSessionId = await workoutFlowManager.finishWorkoutSession();\n    console.log(\"WorkoutPage: Finished workout session. Returned ID:\", finishedSessionId);\n    if (finishedSessionId) {\n      setSummarySessionId(finishedSessionId);\n      setShowSummaryModal(true);\n      // Trigger a full refresh of all data after workout completion\n      await workoutFlowManager.refreshAllData();\n    }\n    return finishedSessionId;\n  };\n\n  // Effect to handle the initial workout selection from URL parameters\n  useEffect(() => {\n    // This effect should only run once on mount if an initialWorkoutId is present.\n    // The ref prevents it from re-triggering on subsequent re-renders.\n    if (initialWorkoutId && !initialSelectionAttempted.current) {\n      initialSelectionAttempted.current = true;\n      workoutFlowManager.selectWorkout(initialWorkoutId);\n    }\n  }, [initialWorkoutId, workoutFlowManager.selectWorkout]);\n\n\n  return (\n    <div className=\"p-2 sm:p-4\">\n      <header className=\"mb-4\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <div className=\"w-24\" /> {/* Spacer */}\n          <h1 className=\"text-3xl font-bold text-center flex-1\">Workout Session</h1>\n          <div className=\"w-24 flex justify-end\">\n            {/* GymToggle is now moved out of here */}\n          </div>\n        </div>\n        <p className=\"text-muted-foreground text-center\">\n          Select a workout or start an ad-hoc session.\n        </p>\n      </header>\n\n      {/* NEW: GymToggle placement */}\n      {!loadingGyms && userGyms.length > 1 && (\n        <div className=\"flex justify-center mb-6\"> {/* Added mb-6 for spacing */}\n          <GymToggle />\n        </div>\n      )}\n\n      <WorkoutSelector\n        key={workoutFlowManager.activeWorkout?.id || 'no-workout'}\n        {...workoutFlowManager}\n        loadingWorkoutFlow={workoutFlowManager.loadingData}\n        createWorkoutSessionInDb={workoutFlowManager.createWorkoutSessionInDb}\n        finishWorkoutSession={handleFinishAndShowSummary}\n        isQuickStart={isQuickStart}\n        allAvailableExercises={workoutFlowManager.allAvailableExercises}\n        updateSessionStartTime={workoutFlowManager.updateSessionStartTime}\n        completedExercises={workoutFlowManager.completedExercises} // Explicitly pass as Set<string>\n        userGyms={workoutFlowManager.userGyms} // NEW\n        exerciseGymsMap={workoutFlowManager.exerciseGymsMap} // NEW\n        availableMuscleGroups={workoutFlowManager.availableMuscleGroups} // NEW\n        profile={workoutFlowManager.profile} // Pass profile prop\n        isWorkoutSessionStarted={workoutFlowManager.isWorkoutSessionStarted} // USE NEW PROP\n      />\n      <WorkoutProgressBar\n        exercisesForSession={workoutFlowManager.exercisesForSession}\n        completedExercises={workoutFlowManager.completedExercises} // Explicitly pass as Set<string>\n        isWorkoutSessionStarted={workoutFlowManager.isWorkoutSessionStarted} // USE NEW PROP\n        activeWorkout={workoutFlowManager.activeWorkout}\n      />\n      <WorkoutSummaryModal\n        open={showSummaryModal}\n        onOpenChange={setShowSummaryModal}\n        sessionId={summarySessionId}\n      />\n    </div>\n  );\n}","size_bytes":4757},"apps/web/src/app/api/complete-onboarding/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n    try {\n        const body = await request.json();\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader) {\n            return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n        }\n\n        const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti';\n        const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/complete-onboarding`;\n\n        const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': authHeader,\n            },\n            body: JSON.stringify(body),\n        });\n\n        const data = await edgeFunctionResponse.json();\n\n        if (!edgeFunctionResponse.ok) {\n            return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n        }\n\n        return NextResponse.json(data);\n    } catch (error: any) {\n        console.error('Error in /api/complete-onboarding route:', error);\n        return NextResponse.json({ error: error.message || 'Internal server error' }, { status: 500 });\n    }\n}","size_bytes":1293},"apps/web/src/app/api/copy-gym-setup/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const { sourceGymId, targetGymId } = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/copy-gym-setup`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify({ sourceGymId, targetGymId }),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error copying gym setup:', error);\n    return NextResponse.json(\n      { error: error.message },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1203},"apps/web/src/app/api/generate-t-path/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti';\n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/generate-t-path`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/generate-t-path route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1189},"apps/web/src/app/api/get-session-achievements/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const { userId, sessionId } = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti';\n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/process-achievements`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify({ user_id: userId, session_id: sessionId }),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error fetching session achievements:', error);\n    return NextResponse.json(\n      { error: error.message },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1227},"apps/web/src/app/api/get-weekly-workout-summary/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function GET(request: Request) {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/get-weekly-workout-summary`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'GET', // Changed to GET as per typical data fetching\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/get-weekly-workout-summary route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1184},"apps/web/src/app/api/identify-equipment/route.ts":{"content":"import { supabase } from '@/integrations/supabase/client';\nimport { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    // Expect an array of base64 images\n    const { base64Images } = await request.json();\n    \n    // Extract the Authorization header from the incoming request\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    // Call the Supabase Edge Function, passing the array of images\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/identify-equipment`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader, // Forward the user's JWT\n      },\n      body: JSON.stringify({ base64Images }), // Send the array of images\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      // Forward the error from the Edge Function\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/identify-equipment route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1562},"apps/web/src/app/api/media/route.ts":{"content":"// This is a temporary file to resolve a build cache issue.\n// It can be safely removed after the build succeeds.\nexport {};","size_bytes":124},"apps/web/src/app/api/photos/find-matching-pose/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const { source_photo_id } = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/find-matching-pose`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify({ source_photo_id }),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/photos/find-matching-pose route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1238},"apps/web/src/app/api/regenerate-all-plans/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti';\n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/regenerate-all-user-plans`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify({}), // No body needed, user is identified by JWT\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/regenerate-all-plans route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1208},"apps/web/src/app/api/setup-default-gym/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const { gymId } = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti';\n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/setup-default-gym`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify({ gymId }),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error setting up default gym:', error);\n    return NextResponse.json(\n      { error: error.message },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1172},"apps/web/src/app/api/setup-gym-with-ai/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/setup-gym-with-ai`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/setup-gym-with-ai route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1199},"apps/web/src/app/api/switch-active-gym/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const { gymId } = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/switch-active-gym`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify({ gymId }),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/switch-active-gym route:', error);\n    return NextResponse.json(\n      { error: error.message },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1182},"apps/web/src/app/api/test/route.ts":{"content":"// This log should appear if the file is even loaded by Next.js\nconsole.log('[API/test - FILE LOADED]');\n\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n  console.log('[API/test - GET FUNCTION ENTERED]');\n  return NextResponse.json({ message: 'Hello from test API!' });\n}","size_bytes":299},"apps/web/src/app/api/workouts/generate-adhoc/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader) {\n      return NextResponse.json({ error: 'Authorization header missing' }, { status: 401 });\n    }\n\n    const SUPABASE_PROJECT_ID = 'mgbfevrzrbjjiajkqpti'; \n    const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/generate-adhoc-workout`;\n\n    const edgeFunctionResponse = await fetch(EDGE_FUNCTION_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': authHeader,\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await edgeFunctionResponse.json();\n\n    if (!edgeFunctionResponse.ok) {\n      return NextResponse.json({ error: data.error || 'Edge function error' }, { status: edgeFunctionResponse.status });\n    }\n\n    return NextResponse.json(data);\n  } catch (error: any) {\n    console.error('Error in /api/workouts/generate-adhoc route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":1210},"apps/web/src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n\n    --background: 0 0% 98%; /* Softer off-white background */\n\n    --foreground: 0 0% 3.9%;\n\n    --card: 0 0% 100%; /* Base color for card */\n\n    --card-foreground: 0 0% 3.9%;\n\n    --popover: 0 0% 100%;\n\n    --popover-foreground: 0 0% 3.9%;\n\n    --primary: 0 0% 9%;\n\n    --primary-foreground: 0 0% 98%;\n\n    --secondary: 0 0% 96.1%;\n\n    --secondary-foreground: 0 0% 9%;\n\n    --muted: 0 0% 96.1%;\n\n    --muted-foreground: 0 0% 45.1%;\n\n    --accent: 0 0% 96.1%;\n\n    --accent-foreground: 0 0% 9%;\n\n    --destructive: 0 84.2% 60.2%;\n\n    --destructive-foreground: 0 0% 98%;\n\n    --action-primary: 217 91% 60%; /* New premium blue for primary actions */\n    --action-primary-light: 217 91% 70%; /* Lighter shade for gradient */\n    --action-primary-foreground: 0 0% 100%;\n\n    --success: 142.1 76.2% 36.3%; /* NEW: A green color for success states */\n    --success-foreground: 0 0% 98%; /* NEW: Foreground for success */\n\n    --border: 0 0% 89.8%;\n\n    --input: 0 0% 89.8%;\n\n    --ring: 0 0% 3.9%;\n\n    --chart-1: 12 76% 61%;\n\n    --chart-2: 173 58% 39%;\n\n    --chart-3: 197 37% 24%;\n\n    --chart-4: 43 74% 66%;\n\n    --chart-5: 27 87% 67%;\n\n    --radius: 0.75rem; /* Increased corner radius */\n  ;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n\n    /* New Onboarding Theme Colors */\n    --onboarding-primary: 220 68% 32%; /* Blue, matching workout-upper-body-a */\n    --onboarding-primary-light: 220 68% 42%; /* Lighter Blue */\n    --onboarding-primary-faint: 220 68% 98%; /* Faint Blue */\n\n    /* New Workout Pill Colors (from user's specific hex codes) */\n    --workout-upper-body-a: 220 68% 32%; /* #1e3a8a */\n    --workout-upper-body-a-light: 220 68% 42%;\n    --workout-upper-body-b: 0 84% 60%; /* #ef4444 */\n    --workout-upper-body-b-light: 0 84% 70%;\n    --workout-lower-body-a: 190 86% 36%; /* #0891b2 */\n    --workout-lower-body-a-light: 190 86% 46%;\n    --workout-lower-body-b: 270 67% 40%; /* #6b21a8 */\n    --workout-lower-body-b-light: 270 67% 50%;\n    --workout-push: 120 60% 45%; /* NEW: classic Adidas forest green */\n    --workout-push-light: 120 60% 55%;\n    --workout-pull: 35 85% 55%; /* NEW: vintage orange */\n    --workout-pull-light: 35 85% 65%;\n    --workout-legs: 280 55% 50%; /* NEW: brighter purple/magenta */\n    --workout-legs-light: 280 55% 60%;\n    --workout-bonus: 50 75% 60%; /* NEW: golden yellow */\n    --workout-bonus-light: 50 75% 70%;\n    --workout-ad-hoc: 50 75% 60%; /* NEW: same as bonus - golden yellow */\n    --workout-ad-hoc-light: 50 75% 70%;\n    --workout-activity: var(--chart-2); /* Generic activity color */\n    --workout-activity-light: 173 58% 49%;\n\n\n    /* NEW Activity Colors */\n    --activity-running: 25 80% 55%; /* coral/salmon */\n    --activity-running-light: 25 80% 65%;\n    --activity-swimming: 200 85% 45%; /* deeper aqua blue */\n    --activity-swimming-light: 200 85% 55%;\n    --activity-cycling: 160 70% 40%; /* sage green */\n    --activity-cycling-light: 160 70% 50%;\n    --activity-tennis: 300 70% 55%; /* bright magenta */\n    --activity-tennis-light: 300 70% 65%;\n\n\n    /* New Aurora Colors (Light Mode) - Adjusted to retro palette */\n    --aurora-blue: 200 100% 78%; /* Sky Blue */\n    --aurora-purple: 270 50% 32%; /* Deep Purple */\n    --aurora-orange: 58 98% 73%; /* Pale Yellow */\n    --aurora-green: 160 100% 43%; /* Vibrant Mint */\n    --aurora-pink: 324 100% 44%; /* Hot Magenta */\n    --aurora-yellow: 58 98% 73%; /* Pale Yellow */\n  }\n  .dark {\n\n    --background: 0 0% 3.9%;\n\n    --foreground: 0 0% 98%;\n\n    --card: 0 0% 3.9%; /* Base color for card */\n\n    --card-foreground: 0 0% 98%;\n\n    --popover: 0 0% 3.9%;\n\n    --popover-foreground: 0 0% 98%;\n\n    --primary: 0 0% 98%;\n\n    --primary-foreground: 0 0% 9%;\n\n    --secondary: 0 0% 14.9%;\n\n    --secondary-foreground: 0 0% 98%;\n\n    --muted: 0 0% 14.9%;\n\n    --muted-foreground: 0 0% 63.9%;\n\n    --accent: 0 0% 14.9%;\n\n    --accent-foreground: 0 0% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n\n    --destructive-foreground: 0 0% 98%;\n\n    --action-primary: 217 91% 60%;\n    --action-primary-light: 217 91% 70%;\n    --action-primary-foreground: 0 0% 100%;\n\n    --success: 142.1 76.2% 36.3%; /* NEW: A green color for success states */\n    --success-foreground: 0 0% 98%; /* NEW: Foreground for success */\n\n    --border: 0 0% 14.9%;\n\n    --input: 0 0% 14.9%;\n\n    --ring: 0 0% 83.1%;\n\n    --chart-1: 220 70% 50%;\n\n    --chart-2: 160 60% 45%;\n\n    --chart-3: 197 37% 24%;\n\n    --chart-4: 43 74% 66%;\n\n    --chart-5: 27 87% 67%;\n  ;\n\n    --sidebar-background: 240 5.9% 10%;\n\n    --sidebar-foreground: 240 4.8% 95.9%;\n\n    --sidebar-primary: 224.3 76.3% 48%;\n\n    --sidebar-primary-foreground: 0 0% 100%;\n\n    --sidebar-accent: 240 3.7% 15.9%;\n\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n\n    --sidebar-border: 240 3.7% 15.9%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n\n    /* Dark mode adjustments for new workout colors - Directly from 90s Retro Palette */\n    --workout-upper-body-a: 220 68% 32%; /* #1e3a8a */\n    --workout-upper-body-a-light: 220 68% 42%;\n    --workout-upper-body-b: 0 84% 60%; /* #ef4444 */\n    --workout-upper-body-b-light: 0 84% 70%;\n    --workout-lower-body-a: 190 86% 36%; /* #0891b2 */\n    --workout-lower-body-a-light: 190 86% 46%;\n    --workout-lower-body-b: 270 67% 40%; /* #6b21a8 */\n    --workout-lower-body-b-light: 270 67% 50%;\n    --workout-push: 120 60% 45%; /* NEW: classic Adidas forest green */\n    --workout-push-light: 120 60% 55%;\n    --workout-pull: 35 85% 55%; /* NEW: vintage orange */\n    --workout-pull-light: 35 85% 65%;\n    --workout-legs: 280 55% 50%; /* NEW: brighter purple/magenta */\n    --workout-legs-light: 280 55% 60%;\n    --workout-bonus: 50 75% 60%; /* NEW: golden yellow */\n    --workout-bonus-light: 50 75% 70%;\n    --workout-ad-hoc: 50 75% 60%; /* NEW: same as bonus - golden yellow */\n    --workout-ad-hoc-light: 50 75% 70%;\n    --workout-activity: var(--chart-2); /* Generic activity color */\n    --workout-activity-light: 173 58% 49%;\n\n\n    /* NEW Activity Colors */\n    --activity-running: 25 80% 55%; /* coral/salmon */\n    --activity-running-light: 25 80% 65%;\n    --activity-swimming: 200 85% 45%; /* deeper aqua blue */\n    --activity-swimming-light: 200 85% 55%;\n    --activity-cycling: 160 70% 40%; /* sage green */\n    --activity-cycling-light: 160 70% 50%;\n    --activity-tennis: 300 70% 55%; /* bright magenta */\n    --activity-tennis-light: 300 70% 65%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    overflow-x: hidden; /* Prevent horizontal scroll from large gradients */\n    position: relative; /* Needed for pseudo-elements to be positioned relative to body */\n  }\n  /* Aurora background effect */\n  body::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    /* Layered radial gradients for Aurora effect */\n    background-image:\n      radial-gradient(circle at 10% 10%, hsl(var(--aurora-blue) / 0.15), transparent 50%),\n      radial-gradient(circle at 90% 30%, hsl(var(--aurora-purple) / 0.15), transparent 50%),\n      radial-gradient(circle at 30% 80%, hsl(var(--aurora-orange) / 0.15), transparent 50%),\n      radial-gradient(circle at 70% 50%, hsl(var(--aurora-green) / 0.15), transparent 50%),\n      radial-gradient(circle at 50% 0%, hsl(var(--aurora-pink) / 0.15), transparent 50%);\n    filter: blur(100px); /* Apply blur to the gradients */\n    z-index: -1; /* Behind content, above noise */\n    pointer-events: none;\n    animation: aurora-pulse 15s infinite alternate ease-in-out;\n  }\n  /* The noise overlay */\n  body::after {\n    content: '';\n    position: fixed;\n    top: 0;\n  left: 0;\n    width: 100vw;\n    height: 100vh;\n    background-image: url(/noise.svg);\n    opacity: 0.02;\n    pointer-events: none;\n    z-index: -2; /* Keep it behind everything */\n  }\n}\n\n/* Custom class for backdrop blur */\n.backdrop-blur-md {\n  backdrop-filter: blur(12px); /* Updated blur to 12px */\n  -webkit-backdrop-filter: blur(12px); /* For Safari compatibility */\n}\n\n/* Keyframes for subtle aurora animation */\n@keyframes aurora-pulse {\n  0% {\n    transform: scale(1) translate(0, 0);\n    opacity: 1;\n  }\n  25% {\n    transform: scale(1.05) translate(5%, -5%);\n    opacity: 0.9;\n  }\n  50% {\n    transform: scale(1) translate(-5%, 5%);\n    opacity: 1;\n  }\n  75% {\n    transform: scale(1.05) translate(5%, 5%);\n    opacity: 0.9;\n  }\n  100% {\n    transform: scale(1) translate(0, 0);\n    opacity: 1;\n  }\n}\n\n/* Apply transparency and backdrop blur to cards */\n.card {\n  background-color: hsl(var(--card) / 0.7); /* Updated opacity to 0.7 */\n  backdrop-filter: blur(12px); /* Updated blur to 12px */\n  -webkit-backdrop-filter: blur(12px); /* For Safari compatibility */\n}\n\n/* Hide scrollbar for Chrome, Safari and Opera */\n.hide-scrollbar::-webkit-scrollbar {\n    display: none;\n}\n\n/* Hide scrollbar for IE, Edge and Firefox */\n.hide-scrollbar {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;  /* Firefox */\n}","size_bytes":9313},"apps/web/src/app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport { SessionContextProvider } from \"@/components/session-context-provider\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Poppins } from \"next/font/google\"; // Import Poppins\n\n// Configure Poppins font\nconst poppins = Poppins({\n  subsets: [\"latin\"],\n  weight: [\"100\", \"200\", \"300\", \"400\", \"500\", \"600\", \"700\", \"800\", \"900\"],\n  variable: \"--font-sans\", // Define as CSS variable\n});\n\nexport const metadata: Metadata = {\n  title: \"My Workout Tracker\",\n  description: \"Your personalised AI fitness coach.\",\n  viewport: {\n    width: 'device-width',\n    initialScale: 1,\n  },\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className={`${poppins.variable}`}><body>\n        <SessionContextProvider>\n          <TooltipProvider>\n            {children}\n          </TooltipProvider>\n        </SessionContextProvider>\n      </body></html>\n  );\n}","size_bytes":1007},"apps/web/src/app/login/page.tsx":{"content":"\"use client\";\n\nimport { Auth } from '@supabase/auth-ui-react';\nimport { ThemeSupa } from '@supabase/auth-ui-shared';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase'; // Import Tables type\n\ntype Profile = Tables<'profiles'>;\ntype TPath = Tables<'t_paths'>;\n\nexport default function LoginPage() {\n  const router = useRouter();\n  const { session, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  useEffect(() => {\n    const checkUserProfile = async () => {\n      if (memoizedSessionUserId) { // Use memoized ID\n        // Check if user has completed onboarding\n        const { data: profile } = await supabase\n          .from('profiles')\n          .select('id') // Specify columns\n          .eq('id', memoizedSessionUserId) // Use memoized ID\n          .single();\n\n        if (profile) {\n          // User has profile, check if they have *main* T-Paths\n          const { data: tPaths } = await supabase\n            .from('t_paths')\n            .select('id') // Specify columns\n            .eq('user_id', memoizedSessionUserId) // Use memoized ID\n            .is('parent_t_path_id', null) // Look for main T-Paths\n            .limit(1);\n\n          if (tPaths && tPaths.length > 0) {\n            router.push('/dashboard');\n          } else {\n            router.push('/onboarding');\n          }\n        } else {\n          router.push('/onboarding');\n        }\n      }\n    };\n\n    checkUserProfile();\n  }, [memoizedSessionUserId, router]); // Depend on memoized ID\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-background p-2\">\n      <div className=\"w-full max-w-md p-8 space-y-6 bg-card rounded-lg shadow-lg\">\n        <h2 className=\"text-2xl font-bold text-center text-foreground\">Welcome to My Workout Tracker</h2>\n        <p className=\"text-center text-muted-foreground\">Sign in or create an account to get started.</p>\n        <Auth\n          supabaseClient={supabase}\n          providers={[]} // No third-party providers unless specified\n          appearance={{\n            theme: ThemeSupa,\n            variables: {\n              default: {\n                colors: {\n                  brand: 'hsl(var(--primary))',\n                  brandAccent: 'hsl(var(--primary-foreground))',\n                  inputBackground: 'hsl(var(--input))',\n                  inputBorder: 'hsl(var(--border))',\n                  inputBorderFocus: 'hsl(var(--ring))',\n                  inputText: 'hsl(var(--foreground))',\n                  messageText: 'hsl(var(--destructive-foreground))',\n                  messageBackground: 'hsl(var(--destructive))',\n                },\n              },\n            }}\n          }\n          theme=\"light\" // Default to light theme\n          redirectTo={`${process.env.NEXT_PUBLIC_BASE_URL}/auth/callback`} // Ensure this matches your Supabase redirect URL\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":3087},"apps/web/src/app/onboarding/page.tsx":{"content":"\"use client\";\n\nimport React, { useState, useCallback } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { toast } from \"sonner\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LoadingOverlay } from \"@/components/loading-overlay\";\nimport { OnboardingSummaryModal } from \"@/components/onboarding/onboarding-summary-modal\";\nimport { OnboardingProgress } from \"@/components/onboarding/onboarding-progress\";\nimport OnboardingStep1, { FormData as OnboardingStep1FormData } from \"@/components/OnboardingStep1\"; // Import FormData from OnboardingStep1\nimport { OnboardingStep2_TrainingSetup } from \"@/components/onboarding/onboarding-step-2-training-setup\";\nimport { OnboardingStep3_GoalsAndPreferences } from \"@/components/onboarding/onboarding-step-3-goals-and-preferences\";\nimport { OnboardingStep4_GymSetupAndConsent } from \"@/components/onboarding/onboarding-step-4-gym-setup-and-consent\";\nimport { OnboardingStep5_GymPhotoUpload } from \"@/components/onboarding/onboarding-step-5-gym-photo-upload\";\n\ntype OnboardingSummaryData = {\n  profile: Tables<'profiles'>;\n  mainTPath: Tables<'t_paths'>;\n  childWorkouts: (Tables<'t_paths'> & { exercises: (Tables<'exercise_definitions'> & { is_bonus_exercise: boolean })[] })[];\n  identifiedExercises: Partial<FetchedExerciseDefinition>[];\n  confirmedExerciseNames: Set<string>;\n};\n\nexport default function OnboardingPage() {\n  const router = useRouter();\n  const { session, supabase, memoizedSessionUserId } = useSession();\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  \n  // Step 1 State (now stored after completion)\n  const [step1FormData, setStep1FormData] = useState<OnboardingStep1FormData | null>(null);\n\n  // Step 2 State\n  const [tPathType, setTPathType] = useState<\"ulul\" | \"ppl\" | null>(null);\n  const [experience, setExperience] = useState<\"beginner\" | \"intermediate\" | null>(null);\n\n  // Step 3 State\n  const [goalFocus, setGoalFocus] = useState<string>(\"\");\n  const [preferredMuscles, setPreferredMuscles] = useState<string>(\"\");\n  const [constraints, setConstraints] = useState<string>(\"\");\n  const [sessionLength, setSessionLength] = useState<string>(\"\");\n\n  // Step 4 State\n  const [gymName, setGymName] = useState<string>(\"\");\n  const [equipmentMethod, setEquipmentMethod] = useState<\"photo\" | \"skip\" | null>(null);\n  const [consentGiven, setConsentGiven] = useState(false);\n\n  // Step 5 State\n  const [identifiedExercises, setIdentifiedExercises] = useState<Partial<FetchedExerciseDefinition>[]>([]);\n  const [confirmedExercises, setConfirmedExercises] = useState<Set<string>>(new Set());\n\n  // Summary Modal State\n  const [summaryData, setSummaryData] = useState<OnboardingSummaryData | null>(null);\n  const [isSummaryModalOpen, setIsSummaryModalOpen] = useState(false);\n\n  const totalSteps = 5; // Moved declaration to the top\n\n  const addIdentifiedExercise = useCallback((exercise: Partial<FetchedExerciseDefinition>) => {\n    setIdentifiedExercises(prev => {\n      if (prev.some(e => e.name === exercise.name)) return prev;\n      setConfirmedExercises(prevConfirmed => new Set(prevConfirmed).add(exercise.name!));\n      return [...prev, exercise];\n    });\n  }, []);\n\n  const removeIdentifiedExercise = useCallback((exerciseName: string) => {\n    setIdentifiedExercises(prev => prev.filter(e => e.name !== exerciseName));\n    setConfirmedExercises(prevConfirmed => {\n      const newSet = new Set(prevConfirmed);\n      newSet.delete(exerciseName);\n      return newSet;\n    });\n  }, []);\n\n  const toggleConfirmedExercise = useCallback((exerciseName: string) => {\n    setConfirmedExercises(prevConfirmed => {\n      const newSet = new Set(prevConfirmed);\n      if (newSet.has(exerciseName)) newSet.delete(exerciseName);\n      else newSet.add(exerciseName);\n      return newSet;\n    });\n  }, []);\n\n  const handleSubmit = useCallback(async () => {\n    if (!memoizedSessionUserId || !step1FormData) { // Ensure step1FormData is available\n      toast.error(\"Personal information is missing. Please complete Step 1.\");\n      return;\n    }\n    setLoading(true);\n\n    try {\n      const payload = {\n        // Data from Step 1\n        fullName: step1FormData.fullName,\n        heightCm: step1FormData.heightCm,\n        weightKg: step1FormData.weight, // Use 'weight' from step1FormData\n        bodyFatPct: step1FormData.bodyFatPct,\n        // Data from other steps\n        tPathType, experience, goalFocus, preferredMuscles, constraints,\n        sessionLength, equipmentMethod, gymName,\n        confirmedExercises: identifiedExercises.filter(ex => confirmedExercises.has(ex.name!)),\n      };\n\n      const response = await fetch('/api/complete-onboarding', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session?.access_token}` },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Onboarding process failed.');\n\n      setSummaryData({ ...data, confirmedExerciseNames: confirmedExercises });\n      setIsSummaryModalOpen(true);\n\n    } catch (error: any) {\n      console.error(\"Onboarding failed:\", error.message);\n      toast.error(\"Onboarding failed: \" + error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    memoizedSessionUserId, session, router, tPathType, experience, goalFocus, preferredMuscles,\n    constraints, sessionLength, equipmentMethod, gymName, identifiedExercises, confirmedExercises,\n    step1FormData, totalSteps // Added totalSteps to dependencies\n  ]);\n\n  const handleNext = useCallback((data?: OnboardingStep1FormData) => {\n    window.scrollTo(0, 0);\n    if (currentStep === 1 && data) {\n      setStep1FormData(data);\n    }\n    if (currentStep < totalSteps) {\n      setCurrentStep(prev => prev + 1);\n    }\n  }, [currentStep, totalSteps]);\n\n  const handleBack = useCallback(() => {\n    window.scrollTo(0, 0); // Scroll to top on back step\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1);\n    }\n  }, [currentStep]);\n\n  const handleCloseSummaryModal = () => {\n    setIsSummaryModalOpen(false);\n    router.push('/dashboard');\n  };\n\n  if (!memoizedSessionUserId) {\n    return <div>Loading...</div>;\n  }\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <OnboardingStep1\n            onNext={handleNext}\n            onBack={handleBack}\n          />\n        );\n      case 2:\n        return (\n          <OnboardingStep2_TrainingSetup\n            tPathType={tPathType} setTPathType={setTPathType}\n            experience={experience} setExperience={setExperience}\n            handleNext={handleNext} handleBack={handleBack}\n          />\n        );\n      case 3:\n        return (\n          <OnboardingStep3_GoalsAndPreferences\n            goalFocus={goalFocus} setGoalFocus={setGoalFocus}\n            preferredMuscles={preferredMuscles} setPreferredMuscles={setPreferredMuscles}\n            constraints={constraints} setConstraints={setConstraints}\n            sessionLength={sessionLength} setSessionLength={setSessionLength}\n            handleNext={handleNext} handleBack={handleBack}\n          />\n        );\n      case 4:\n        return (\n          <OnboardingStep4_GymSetupAndConsent\n            equipmentMethod={equipmentMethod} setEquipmentMethod={setEquipmentMethod}\n            handleNext={handleNext} handleBack={handleBack}\n            handleSubmit={handleSubmit}\n            gymName={gymName} setGymName={setGymName}\n            consentGiven={consentGiven} setConsentGiven={setConsentGiven}\n            loading={loading}\n          />\n        );\n      case 5:\n        return (\n          <OnboardingStep5_GymPhotoUpload\n            identifiedExercises={identifiedExercises}\n            addIdentifiedExercise={addIdentifiedExercise}\n            removeIdentifiedExercise={removeIdentifiedExercise}\n            confirmedExercises={confirmedExercises}\n            toggleConfirmedExercise={toggleConfirmedExercise}\n            handleNext={handleSubmit}\n            handleBack={handleBack}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  const getStepTitle = () => {\n    switch (currentStep) {\n      case 1: return \"Let's Get to Know You\";\n      case 2: return \"Training Setup\";\n      case 3: return \"Goals & Session Preferences\";\n      case 4: return \"Gym Setup & Consent\";\n      case 5: return \"Analyse Your Gym\";\n      default: return \"\";\n    }\n  };\n\n  const getStepDescription = () => {\n    switch (currentStep) {\n      case 1: return \"Your personal details help us tailor your experience.\";\n      case 2: return \"Select the workout structure and your experience level.\";\n      case 3: return \"Tell us what you want to achieve and how long you like to train.\";\n      case 4: return \"Let's set up your gym equipment and confirm your consent.\";\n      case 5: return \"Upload photos of your gym equipment for the AI to analyse.\";\n      default: return \"\";\n    }\n  };\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-background p-2 sm:p-4\">\n        <div className=\"max-w-2xl mx-auto\">\n          {currentStep > 1 && ( // Only show OnboardingProgress for steps > 1\n            <header className=\"mb-8 text-center\">\n              <h1 className=\"text-3xl font-bold\">Welcome to Your Fitness Journey</h1>\n              <p className=\"text-muted-foreground mt-2\">\n                Let's set up your personalised Transformation Path\n              </p>\n            </header>\n          )}\n\n          {currentStep > 1 && <OnboardingProgress currentStep={currentStep} totalSteps={totalSteps} />}\n\n          {currentStep === 1 ? ( // Render OnboardingStep1 directly for step 1\n            renderStepContent()\n          ) : ( // Wrap other steps in Card\n            <Card>\n              <CardHeader>\n                <CardTitle>{getStepTitle()}</CardTitle>\n                <CardDescription>{getStepDescription()}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {renderStepContent()}\n              </CardContent>\n            </Card>\n          )}\n        </div>\n        <LoadingOverlay \n          isOpen={loading}\n          title=\"Completing Setup...\"\n          description=\"Finalising your profile details.\"\n        />\n      </div>\n      <OnboardingSummaryModal\n        open={isSummaryModalOpen}\n        onOpenChange={setIsSummaryModalOpen}\n        summaryData={summaryData}\n        onClose={handleCloseSummaryModal}\n      />\n    </>\n  );\n}","size_bytes":10679},"apps/web/src/app/page.tsx":{"content":"\"use client\";\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useSession } from '@/components/session-context-provider';\n\nexport default function HomePage() {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const router = useRouter();\n\n  useEffect(() => {\n    // Check if session is null (not logged in) or exists\n    if (session === null) {\n      router.push('/login');\n    } else if (memoizedSessionUserId) { // Use memoized ID\n      router.push('/dashboard');\n    }\n  }, [session, router, memoizedSessionUserId]); // Depend on memoized ID\n\n  // Render a loading state or nothing while redirecting\n  return (\n    <div className=\"grid grid-rows-[1fr_20px] items-center justify-items-center min-h-screen p-4 pb-10 sm:p-10\">\n      <main className=\"flex flex-col gap-8 row-start-1 items-center sm:items-start\">\n        <h1 className=\"text-2xl font-bold\">Loading...</h1>\n      </main>\n    </div>\n  );\n}","size_bytes":1001},"apps/web/src/components/OnboardingStep1.tsx":{"content":"'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { cn } from '@/lib/utils'; // Keep web-specific utils\nimport { z } from 'zod'\n\n// Zod Schema\nexport const onboardingStep1Schema = z.object({\n  fullName: z.string().min(1, \"Your name is required.\"),\n  heightCm: z.number().int().positive(\"Height must be positive.\").min(100, \"Height must be at least 100 cm.\").max(250, \"Height must be at most 250 cm.\").nullable(),\n  weight: z.number().int().positive(\"Weight must be positive.\").min(30, \"Weight must be at least 30 kg.\").max(150, \"Weight must be at most 150 kg.\").nullable(), // Adjusted max weight to 150kg\n  bodyFatPct: z.number().int().min(5, \"Body Fat % must be at least 5%.\").max(50, \"Body Fat % must be at most 50%.\").nullable(),\n  heightUnit: z.enum(['cm', 'ft']),\n  weightUnit: z.enum(['kg', 'lbs'])\n})\n\nexport type FormData = z.infer<typeof onboardingStep1Schema>\n\n// New type for state to allow null for weight, which is required for validation but can be empty in the input\ntype FormState = Omit<FormData, 'weight' | 'heightCm' | 'bodyFatPct'> & {\n  weight: number | null;\n  heightCm: number | null;\n  bodyFatPct: number | null;\n  heightFt: number | null;\n  heightIn: number | null;\n}\n\ninterface OnboardingStep1Props {\n  onNext: (data: FormData) => void\n  onBack?: () => void\n  className?: string\n}\n\nconst OnboardingStep1: React.FC<OnboardingStep1Props> = ({ onNext, onBack, className }) => {\n  const [formData, setFormData] = useState<FormState>({\n    fullName: '',\n    heightCm: null, // Start empty\n    heightFt: null, // Start empty\n    heightIn: null, // Start empty\n    weight: null, // Start empty\n    bodyFatPct: null, // Start empty\n    heightUnit: 'ft',\n    weightUnit: 'kg'\n  })\n\n  const [activeSlider, setActiveSlider] = useState<string | null>(null)\n  const [isValid, setIsValid] = useState(false)\n  const [errors, setErrors] = useState<Record<string, string>>({})\n  const [touched, setTouched] = useState<Record<string, boolean>>({})\n\n  // Form validation\n  useEffect(() => {\n    try {\n      onboardingStep1Schema.parse(formData)\n      setIsValid(true)\n      setErrors({})\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const fieldErrors: Record<string, string> = {}\n        error.errors.forEach(err => {\n          if (err.path[0]) {\n            fieldErrors[err.path[0] as string] = err.message\n          }\n        })\n        setErrors(fieldErrors)\n      }\n      setIsValid(false)\n    }\n  }, [formData])\n\n  // Conversion functions\n  const convertCmToFtIn = (cm: number) => {\n    const totalInches = cm / 2.54\n    const feet = Math.floor(totalInches / 12)\n    const inches = Math.round(totalInches % 12)\n    return { feet, inches }\n  }\n\n  const convertFtInToCm = (feet: number, inches: number) => {\n    return Math.round(((feet || 0) * 12 + (inches || 0)) * 2.54)\n  }\n\n  const convertKgToLbs = (kg: number) => Math.round(kg * 2.205)\n  const convertLbsToKg = (lbs: number) => Math.round(lbs / 2.205)\n  const convertKgToStLbs = (kg: number) => {\n    const totalLbs = kg * 2.20462;\n    const stone = Math.floor(totalLbs / 14);\n    const pounds = Math.round(totalLbs % 14);\n    return { stone, pounds };\n  }\n\n  // Handlers\n  const handleHeightCmChange = (value: number | null) => {\n    if (value === null || isNaN(value)) {\n      setFormData(prev => ({ ...prev, heightCm: null, heightFt: null, heightIn: null }));\n      return;\n    }\n    const { feet, inches } = convertCmToFtIn(value);\n    setFormData(prev => ({\n      ...prev,\n      heightCm: value,\n      heightFt: feet,\n      heightIn: inches\n    }));\n  }\n\n  const handleHeightFtInChange = (feet: number | null, inches: number | null) => {\n    const cm = convertFtInToCm(feet || 0, inches || 0);\n    setFormData(prev => ({\n      ...prev,\n      heightCm: cm > 0 ? cm : null,\n      heightFt: feet,\n      heightIn: inches\n    }));\n  }\n\n  const handleWeightChange = (value: string) => {\n    const num = parseInt(value, 10);\n    setFormData(prev => ({ ...prev, weight: isNaN(num) ? null : num }))\n  }\n\n  const handleBodyFatChange = (value: string) => {\n    const num = parseInt(value, 10);\n    setFormData(prev => ({ ...prev, bodyFatPct: isNaN(num) ? null : num }))\n  }\n\n  const handleHeightUnitChange = (unit: 'cm' | 'ft') => {\n    setFormData(prev => ({ ...prev, heightUnit: unit }))\n  }\n\n  const handleWeightUnitChange = (unit: 'kg' | 'lbs') => {\n    const currentWeight = formData.weight\n    let newWeight = currentWeight\n    \n    if (currentWeight !== null) {\n      if (unit === 'lbs' && formData.weightUnit === 'kg') {\n        newWeight = convertKgToLbs(currentWeight)\n      } else if (unit === 'kg' && formData.weightUnit === 'lbs') {\n        newWeight = convertLbsToKg(currentWeight)\n      }\n    }\n    \n    setFormData(prev => ({ \n      ...prev, \n      weightUnit: unit,\n      weight: newWeight\n    }))\n  }\n\n  const getBodyFatCategory = (percentage: number | null): string => {\n    if (percentage === null) return '-';\n    if (percentage < 10) return \"Essential fat\"\n    if (percentage < 15) return \"Athletic\"\n    if (percentage < 20) return \"Fitness\"\n    if (percentage < 25) return \"Average\"\n    return \"Average+\"\n  }\n\n  const getSliderProgress = (value: number, min: number, max: number): number => {\n    if (value === null || isNaN(value)) return 0;\n    return ((value - min) / (max - min)) * 100\n  }\n\n  const handleSubmit = () => {\n    setTouched({ fullName: true, heightCm: true, weight: true, bodyFatPct: true });\n    if (isValid) {\n      const submissionData = {\n        ...formData,\n        weight: formData.weightUnit === 'lbs' ? convertLbsToKg(formData.weight!) : formData.weight!,\n        heightCm: formData.heightCm!,\n        bodyFatPct: formData.bodyFatPct,\n      }\n      onNext(submissionData)\n    }\n  }\n\n  const handleTouch = (name: string) => {\n    setTouched(prev => ({ ...prev, [name]: true }));\n  };\n\n  const handleHeightFocus = () => {\n    setActiveSlider('height');\n  };\n\n  const handleWeightFocus = () => {\n    setActiveSlider('weight');\n  };\n\n  const handleBodyFatFocus = () => {\n    setActiveSlider('bodyFat');\n  };\n\n  return (\n    <div className={cn(\"max-w-md mx-auto p-6 space-y-8 bg-white\", className)}>\n      {/* Header */}\n      <div className=\"text-center space-y-3 pt-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 leading-tight\">\n          Welcome to Your Fitness Journey\n        </h1>\n        <p className=\"text-gray-600 text-base\">\n          Let's set up your personalised Transformation Path\n        </p>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"flex items-center justify-center\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-9 h-9 rounded-full bg-onboarding-primary text-white flex items-center justify-center font-semibold text-lg shadow-lg transition-all duration-300\">\n            1\n          </div>\n          <div className=\"w-6 h-1 bg-gray-200 rounded-full\"></div>\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 text-gray-500 flex items-center justify-center font-semibold border border-gray-300\">\n            2\n          </div>\n          <div className=\"w-6 h-1 bg-gray-200 rounded-full\"></div>\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 text-gray-500 flex items-center justify-center font-semibold border border-gray-300\">\n            3\n          </div>\n          <div className=\"w-6 h-1 bg-gray-200 rounded-full\"></div>\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 text-gray-500 flex items-center justify-center font-semibold border border-gray-300\">\n            4\n          </div>\n        </div>\n      </div>\n\n      {/* Form */}\n      <div className=\"space-y-6\">\n        {/* Name Field */}\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"fullName\" className=\"text-base font-semibold text-gray-900\">\n            What should we call you?\n          </Label>\n          <Input\n            id=\"fullName\"\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            value={formData.fullName}\n            onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}\n            onBlur={() => handleTouch('fullName')}\n            className={cn(\n              \"h-12 px-4 text-base border-2 rounded-xl transition-all duration-200\",\n              \"focus:ring-2 focus:ring-onboarding-primary/20 focus:border-onboarding-primary\",\n              \"hover:border-gray-400\",\n              errors.fullName && touched.fullName ? \"border-red-500\" : \"border-gray-300\"\n            )}\n          />\n          {errors.fullName && touched.fullName && (\n            <p className=\"text-sm text-red-500\">{errors.fullName}</p>\n          )}\n        </div>\n\n        {/* Height Field */}\n        <div className=\"space-y-2\">\n          <Label className=\"text-base font-semibold text-gray-900\">How tall are you?</Label>\n          <div className=\"relative\">\n            {formData.heightUnit === 'cm' ? (\n              <Input\n                type=\"number\"\n                inputMode=\"numeric\"\n                value={formData.heightCm ?? ''}\n                onChange={(e) => handleHeightCmChange(Number(e.target.value))}\n                onFocus={handleHeightFocus}\n                onBlur={() => handleTouch('heightCm')}\n                className={cn(\n                  \"h-12 px-4 pr-20 text-base border-2 rounded-xl transition-all duration-200\",\n                  \"focus:ring-2 focus:ring-onboarding-primary/20 focus:border-onboarding-primary\",\n                  \"hover:border-gray-400\",\n                  activeSlider === 'height' ? \"border-onboarding-primary bg-onboarding-primary-faint\" : \"border-gray-300\"\n                )}\n              />\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"number\"\n                  inputMode=\"numeric\"\n                  value={formData.heightFt ?? ''}\n                  onChange={(e) => handleHeightFtInChange(Number(e.target.value), formData.heightIn)}\n                  onFocus={handleHeightFocus}\n                  onBlur={() => handleTouch('heightCm')}\n                  className={cn(\n                    \"h-12 px-3 text-base border-2 rounded-xl transition-all duration-200 w-20 text-center\",\n                    \"focus:ring-2 focus:ring-onboarding-primary/20 focus:border-onboarding-primary\",\n                    activeSlider === 'height' ? \"border-onboarding-primary bg-onboarding-primary-faint\" : \"border-gray-300\"\n                  )}\n                />\n                <span className=\"text-gray-600 font-medium\">ft</span>\n                <Input\n                  type=\"number\"\n                  inputMode=\"numeric\"\n                  value={formData.heightIn ?? ''}\n                  onChange={(e) => handleHeightFtInChange(formData.heightFt, Number(e.target.value))}\n                  onFocus={handleHeightFocus}\n                  onBlur={() => handleTouch('heightCm')}\n                  className={cn(\n                    \"h-12 px-3 text-base border-2 rounded-xl transition-all duration-200 w-20 text-center\",\n                    \"focus:ring-2 focus:ring-onboarding-primary/20 focus:border-onboarding-primary\",\n                    activeSlider === 'height' ? \"border-onboarding-primary bg-onboarding-primary-faint\" : \"border-gray-300\"\n                  )}\n                />\n                <span className=\"text-gray-600 font-medium\">in</span>\n              </div>\n            )}\n            \n            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex space-x-1\">\n              <Button type=\"button\" variant=\"outline\" size=\"sm\" className={cn(\"h-7 px-2 text-xs font-medium border transition-all duration-200\", formData.heightUnit === 'ft' ? \"bg-onboarding-primary text-white border-onboarding-primary shadow-sm\" : \"bg-white text-gray-600 border-gray-300 hover:border-gray-400\")} onClick={() => handleHeightUnitChange('ft')}>ft</Button>\n              <Button type=\"button\" variant=\"outline\" size=\"sm\" className={cn(\"h-7 px-2 text-xs font-medium border transition-all duration-200\", formData.heightUnit === 'cm' ? \"bg-onboarding-primary text-white border-onboarding-primary shadow-sm\" : \"bg-white text-gray-600 border-gray-300 hover:border-gray-400\")} onClick={() => handleHeightUnitChange('cm')}>cm</Button>\n            </div>\n          </div>\n\n          {activeSlider === 'height' && (\n            <div className=\"mt-4 p-5 bg-onboarding-primary-faint border-2 border-onboarding-primary rounded-xl shadow-lg animate-in slide-in-from-top-2 duration-300\">\n              <div className=\"text-center mb-4\">\n                <div className=\"text-2xl font-bold text-onboarding-primary\">{formData.heightCm ? `${formData.heightCm} cm` : '-'}</div>\n                <div className=\"text-sm text-gray-600\">{formData.heightFt !== null && formData.heightIn !== null ? `${formData.heightFt} ft ${formData.heightIn} in` : '-'}</div>\n              </div>\n              <div className=\"relative h-8 flex items-center\">\n                <div className=\"relative w-full h-2 bg-gray-200 rounded-full\">\n                  <div className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-onboarding-primary to-onboarding-primary-light rounded-full\" style={{ width: `${getSliderProgress(formData.heightCm || 0, 100, 250)}%` }} />\n                  <div className=\"absolute top-1/2 w-8 h-8 rounded-full shadow-lg transform -translate-y-1/2 -translate-x-1/2 border-4 border-white cursor-pointer transition-transform duration-200 hover:scale-110\" style={{ left: `${getSliderProgress(formData.heightCm || 0, 100, 250)}%`, backgroundImage: 'radial-gradient(circle at 30% 30%, hsl(var(--onboarding-primary-light)), hsl(var(--onboarding-primary)))' }} />\n                </div>\n                <input type=\"range\" min=\"100\" max=\"250\" value={formData.heightCm || 0} onChange={(e) => handleHeightCmChange(Number(e.target.value))} className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\" />\n              </div>\n              <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n                <span>100 cm</span>\n                <span>250 cm</span>\n              </div>\n            </div>\n          )}\n          {errors.heightCm && touched.heightCm && <p className=\"text-sm text-red-500\">{errors.heightCm}</p>}\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-base font-semibold text-gray-900\">Current weight?</Label>\n            <div className=\"relative\">\n              <Input type=\"number\" inputMode=\"numeric\" value={formData.weight ?? ''} onChange={(e) => handleWeightChange(e.target.value)} onFocus={handleWeightFocus} onBlur={() => handleTouch('weight')} className={cn(\"h-12 px-4 pr-16 text-base border-2 rounded-xl transition-all duration-200\", \"focus:ring-2 focus:ring-onboarding-primary/20 focus:border-onboarding-primary\", \"hover:border-gray-400\", activeSlider === 'weight' ? \"border-onboarding-primary bg-onboarding-primary-faint\" : \"border-gray-300\")} />\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 flex space-x-1\">\n                <Button type=\"button\" variant=\"outline\" size=\"sm\" className={cn(\"h-7 px-2 text-xs font-medium border transition-all duration-200\", formData.weightUnit === 'kg' ? \"bg-onboarding-primary text-white border-onboarding-primary shadow-sm\" : \"bg-white text-gray-600 border-gray-300 hover:border-gray-400\")} onClick={() => handleWeightUnitChange('kg')}>kg</Button>\n                <Button type=\"button\" variant=\"outline\" size=\"sm\" className={cn(\"h-7 px-2 text-xs font-medium border transition-all duration-200\", formData.weightUnit === 'lbs' ? \"bg-onboarding-primary text-white border-onboarding-primary shadow-sm\" : \"bg-white text-gray-600 border-gray-300 hover:border-gray-400\")} onClick={() => handleWeightUnitChange('lbs')}>lbs</Button>\n              </div>\n            </div>\n            {activeSlider === 'weight' && (\n              <div className=\"mt-4 p-5 bg-onboarding-primary-faint border-2 border-onboarding-primary rounded-xl shadow-lg animate-in slide-in-from-top-2 duration-300\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-2xl font-bold text-onboarding-primary\">{formData.weight !== null ? `${formData.weight} ${formData.weightUnit}` : '-'}</div>\n                  <div className=\"text-sm text-gray-600\">\n                    {formData.weight !== null ? (\n                      <>\n                        {formData.weightUnit === 'kg' ? `${convertKgToLbs(formData.weight)} lbs` : `${convertLbsToKg(formData.weight)} kg`}\n                        {' / '}\n                        {`${convertKgToStLbs(formData.weightUnit === 'kg' ? formData.weight : convertLbsToKg(formData.weight)).stone}st ${convertKgToStLbs(formData.weightUnit === 'kg' ? formData.weight : convertLbsToKg(formData.weight)).pounds}lbs`}\n                      </>\n                    ) : (\n                      '-'\n                    )}\n                  </div>\n                </div>\n                <div className=\"relative h-8 flex items-center\">\n                  <div className=\"relative w-full h-2 bg-gray-200 rounded-full\">\n                    <div className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-onboarding-primary to-onboarding-primary-light rounded-full\" style={{ width: `${getSliderProgress(formData.weight || 0, formData.weightUnit === 'kg' ? 30 : 66, formData.weightUnit === 'kg' ? 150 : 330)}%` }} />\n                    <div className=\"absolute top-1/2 w-8 h-8 rounded-full shadow-lg transform -translate-y-1/2 -translate-x-1/2 border-4 border-white cursor-pointer transition-transform duration-200 hover:scale-110\" style={{ left: `${getSliderProgress(formData.weight || 0, formData.weightUnit === 'kg' ? 30 : 66, formData.weightUnit === 'kg' ? 150 : 330)}%`, backgroundImage: 'radial-gradient(circle at 30% 30%, hsl(var(--onboarding-primary-light)), hsl(var(--onboarding-primary)))' }} />\n                  </div>\n                  <input type=\"range\" min={formData.weightUnit === 'kg' ? 30 : 66} max={formData.weightUnit === 'kg' ? 150 : 330} value={formData.weight || 0} onChange={(e) => handleWeightChange(e.target.value)} className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\" />\n                </div>\n                <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n                  <span>{formData.weightUnit === 'kg' ? '30 kg' : '66 lbs'}</span>\n                  <span>{formData.weightUnit === 'kg' ? '150 kg' : '330 lbs'}</span>\n                </div>\n              </div>\n            )}\n            {errors.weight && touched.weight && <p className=\"text-sm text-red-500\">{errors.weight}</p>}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label className=\"text-base font-semibold text-gray-900\">Body fat %<span className=\"text-sm font-normal text-gray-500 ml-1\">(optional)</span><span className=\"inline-flex items-center justify-center w-4 h-4 ml-1 text-xs text-white bg-onboarding-primary rounded-full cursor-help\" title=\"If you don't know, you can skip this\">i</span></Label>\n            <Input type=\"number\" inputMode=\"numeric\" value={formData.bodyFatPct || ''} onChange={(e) => handleBodyFatChange(e.target.value)} onFocus={handleBodyFatFocus} onBlur={() => handleTouch('bodyFatPct')} className={cn(\"h-12 px-4 text-base border-2 rounded-xl transition-all duration-200\", \"focus:ring-2 focus:ring-onboarding-primary/20 focus:border-onboarding-primary\", \"hover:border-gray-400\", activeSlider === 'bodyFat' ? \"border-onboarding-primary bg-onboarding-primary-faint\" : \"border-gray-300\")} />\n            {activeSlider === 'bodyFat' && (\n              <div className=\"mt-4 p-5 bg-onboarding-primary-faint border-2 border-onboarding-primary rounded-xl shadow-lg animate-in slide-in-from-top-2 duration-300\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"text-2xl font-bold text-onboarding-primary\">{formData.bodyFatPct !== null ? `${formData.bodyFatPct}%` : '-'}</div>\n                  <div className=\"text-sm text-gray-600\">{getBodyFatCategory(formData.bodyFatPct)}</div>\n                </div>\n                <div className=\"relative h-8 flex items-center\">\n                  <div className=\"relative w-full h-2 bg-gray-200 rounded-full\">\n                    <div className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-onboarding-primary to-onboarding-primary-light rounded-full\" style={{ width: `${getSliderProgress(formData.bodyFatPct || 0, 5, 50)}%` }} />\n                    <div className=\"absolute top-1/2 w-8 h-8 rounded-full shadow-lg transform -translate-y-1/2 -translate-x-1/2 border-4 border-white cursor-pointer transition-transform duration-200 hover:scale-110\" style={{ left: `${getSliderProgress(formData.bodyFatPct || 0, 5, 50)}%`, backgroundImage: 'radial-gradient(circle at 30% 30%, hsl(var(--onboarding-primary-light)), hsl(var(--onboarding-primary)))' }} />\n                  </div>\n                  <input type=\"range\" min=\"5\" max=\"50\" value={formData.bodyFatPct || 0} onChange={(e) => handleBodyFatChange(e.target.value)} className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\" />\n                </div>\n                <div className=\"flex justify-between text-xs text-gray-500 mt-2\">\n                  <span>5%</span>\n                  <span>50%</span>\n                </div>\n              </div>\n            )}\n            {errors.bodyFatPct && touched.bodyFatPct && <p className=\"text-sm text-red-500\">{errors.bodyFatPct}</p>}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex gap-3 pt-8\">\n        <Button onClick={handleSubmit} disabled={!isValid} className={cn(\"flex-1 h-12 text-base font-semibold transition-all duration-200\", \"bg-gradient-to-r from-onboarding-primary to-onboarding-primary-light hover:from-onboarding-primary-light hover:to-onboarding-primary\", \"hover:shadow-lg hover:-translate-y-0.5 active:translate-y-0\", \"disabled:bg-gray-300 disabled:text-gray-500 disabled:hover:transform-none disabled:hover:shadow-none disabled:cursor-not-allowed\")}>Next</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default OnboardingStep1","size_bytes":22299},"apps/web/src/components/activity-logging-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { CalendarDays, Bike, Activity } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport *as z from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { TablesInsert, Tables } from \"@/types/supabase\";\nimport { convertDistance, KM_TO_MILES } from '@/lib/unit-conversions';\nimport { useWorkoutFlow } from \"./workout-flow/workout-flow-context-provider\";\n\ntype ActivityLog = Tables<'activity_logs'>;\ntype ActivityType = \"Cycling\" | \"Swimming\" | \"Tennis\" | \"Running\";\ntype Profile = Tables<'profiles'>;\n\ninterface ActivityLoggingDialogProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  initialActivity?: ActivityType | null;\n  trigger?: React.ReactNode;\n}\n\n// Helper function to convert time string (e.g., \"1h 30m\", \"90m\", \"1m 30s\") to total seconds\nconst timeStringToSeconds = (timeStr: string): number => {\n  let totalSeconds = 0;\n  const hoursMatch = timeStr.match(/(\\d+)h/);\n  const minutesMatch = timeStr.match(/(\\d+)m/);\n  const secondsMatch = timeStr.match(/(\\d+)s/);\n\n  if (hoursMatch) {\n    totalSeconds += parseInt(hoursMatch[1]) * 3600;\n  }\n  if (minutesMatch) {\n    totalSeconds += parseInt(minutesMatch[1]) * 60;\n  }\n  if (secondsMatch) {\n    totalSeconds += parseInt(secondsMatch[1]);\n  }\n  return totalSeconds;\n};\n\n// Helper to format minutes and seconds into a display string (e.g., \"1h 30m\" or \"90m\")\nconst formatMinutesAndSecondsForStorage = (minutes: number, seconds: number): string => {\n  const totalMinutes = minutes + Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n\n  if (totalMinutes === 0 && remainingSeconds === 0) return \"\";\n  if (totalMinutes === 0) return `${remainingSeconds}s`;\n  if (totalMinutes === 0) return `${totalMinutes}m`; // Corrected from remainingMinutes\n  return `${totalMinutes}m ${remainingSeconds}s`;\n};\n\n// Schemas for activity logging forms\nconst distanceTimeSchema = z.object({\n  distance: z.coerce.number().min(0.1, \"Distance is required and must be positive.\"),\n  minutes: z.coerce.number().min(0, \"Minutes cannot be negative.\").max(999, \"Minutes must be less than 1000.\"),\n  seconds: z.coerce.number().min(0, \"Seconds cannot be negative.\").max(59, \"Seconds must be between 0 and 59.\"),\n  log_date: z.string().min(1, \"Date is required.\"),\n}).refine(data => data.minutes > 0 || data.seconds > 0, {\n  message: \"Time (minutes or seconds) is required.\",\n  path: [\"minutes\"], // Attach error to minutes field\n});\n\nconst cyclingSchema = distanceTimeSchema;\nconst runningSchema = distanceTimeSchema; // Running uses the same schema\n\nconst swimmingSchema = z.object({\n  lengths: z.coerce.number().min(1, \"Lengths is required and must be positive.\"),\n  pool_size: z.coerce.number().min(1, \"Pool size is required and must be positive.\"),\n  log_date: z.string().min(1, \"Date is required.\"),\n});\n\nconst tennisSchema = z.object({\n  duration: z.string().min(1, \"Duration is required.\"),\n  log_date: z.string().min(1, \"Date is required.\"),\n});\n\nconst handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n  if (e.target.value === '0') e.target.value = '';\n};\nconst handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n  if (e.target.value === '') e.target.value = '0';\n};\n\nexport const LogCyclingForm = ({ onLogSuccess, setTempStatusMessage }: { onLogSuccess: (newLog: Tables<'activity_logs'>) => void; setTempStatusMessage: (message: any) => void; }) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [preferredDistanceUnit, setPreferredDistanceUnit] = useState<Profile['preferred_distance_unit']>('km');\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!memoizedSessionUserId) return;\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select('preferred_distance_unit')\n        .eq('id', memoizedSessionUserId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error(\"Error fetching user profile for distance unit:\", error);\n        toast.error(\"Failed to load user preferences.\");\n      } else if (profileData) {\n        setPreferredDistanceUnit(profileData.preferred_distance_unit || 'km');\n      }\n    };\n    fetchUserProfile();\n  }, [memoizedSessionUserId, supabase]);\n\n  const form = useForm<z.infer<typeof cyclingSchema>>({\n    resolver: zodResolver(cyclingSchema),\n    defaultValues: {\n      distance: 0,\n      minutes: 0,\n      seconds: 0,\n      log_date: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof cyclingSchema>) {\n    if (!memoizedSessionUserId) {\n      toast.error(\"You must be logged in to log activities.\");\n      return;\n    }\n\n    // Convert input distance to KM for storage and PB comparison\n    const distanceInKm = convertDistance(values.distance, preferredDistanceUnit as 'km' | 'miles', 'km');\n    if (distanceInKm === null) {\n      toast.error(\"Invalid distance value.\");\n      return;\n    }\n\n    const totalSeconds = (values.minutes * 60) + values.seconds;\n    const timeStringForStorage = formatMinutesAndSecondsForStorage(values.minutes, values.seconds);\n\n    let avgTimePerKm: number | null = null;\n    if (distanceInKm > 0) {\n      avgTimePerKm = totalSeconds / distanceInKm;\n    }\n\n    let isPB = false;\n    try {\n      const { data: previousLogs, error: fetchError } = await supabase\n        .from('activity_logs')\n        .select('avg_time')\n        .eq('user_id', memoizedSessionUserId)\n        .eq('activity_type', 'Cycling')\n        .order('log_date', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      if (avgTimePerKm !== null) {\n        // For average time, lower is better (faster)\n        isPB = previousLogs.every(log => log.avg_time === null || avgTimePerKm! < log.avg_time);\n      }\n    } catch (err) {\n      console.error(\"Error checking cycling PB:\", err);\n      toast.error(\"Failed to check personal best for cycling.\");\n    }\n\n    const newLog: TablesInsert<'activity_logs'> = {\n      user_id: memoizedSessionUserId,\n      activity_type: 'Cycling',\n      distance: `${distanceInKm} km`, // Store in KM\n      time: timeStringForStorage,\n      avg_time: avgTimePerKm,\n      is_pb: isPB,\n      log_date: values.log_date,\n    };\n\n    const { data: insertedData, error } = await supabase.from('activity_logs').insert([newLog]).select().single();\n\n    if (error) {\n      console.error(\"Failed to log cycling activity:\", error.message);\n      toast.error(\"Failed to log cycling activity.\");\n    } else {\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      form.reset();\n      onLogSuccess(insertedData);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField control={form.control} name=\"distance\" render={({ field }) => ( <FormItem> <FormLabel>Distance ({preferredDistanceUnit})</FormLabel> <FormControl><Input type=\"number\" step=\"0.1\" {...field} inputMode=\"decimal\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n        <div className=\"flex gap-2\">\n          <FormField control={form.control} name=\"minutes\" render={({ field }) => ( <FormItem className=\"flex-1\"> <FormLabel>Minutes</FormLabel> <FormControl><Input type=\"number\" {...field} inputMode=\"numeric\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n          <FormField control={form.control} name=\"seconds\" render={({ field }) => ( <FormItem className=\"flex-1\"> <FormLabel>Seconds</FormLabel> <FormControl><Input type=\"number\" {...field} inputMode=\"numeric\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n        </div>\n        <FormField control={form.control} name=\"log_date\" render={({ field }) => ( <FormItem> <FormLabel>Date</FormLabel> <FormControl><Input type=\"date\" {...field} className=\"w-full max-w-[180px]\" /></FormControl> <FormMessage /> </FormItem> )} />\n        <Button type=\"submit\" className=\"w-full\">Log Cycling</Button>\n      </form>\n    </Form>\n  );\n};\n\nexport const LogRunningForm = ({ onLogSuccess, setTempStatusMessage }: { onLogSuccess: (newLog: Tables<'activity_logs'>) => void; setTempStatusMessage: (message: any) => void; }) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [preferredDistanceUnit, setPreferredDistanceUnit] = useState<Profile['preferred_distance_unit']>('km');\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!memoizedSessionUserId) return;\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select('preferred_distance_unit')\n        .eq('id', memoizedSessionUserId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error(\"Error fetching user profile for distance unit:\", error);\n        toast.error(\"Failed to load user preferences.\");\n      } else if (profileData) {\n        setPreferredDistanceUnit(profileData.preferred_distance_unit || 'km');\n      }\n    };\n    fetchUserProfile();\n  }, [memoizedSessionUserId, supabase]);\n\n  const form = useForm<z.infer<typeof runningSchema>>({\n    resolver: zodResolver(runningSchema),\n    defaultValues: {\n      distance: 0,\n      minutes: 0,\n      seconds: 0,\n      log_date: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof runningSchema>) {\n    if (!memoizedSessionUserId) {\n      toast.error(\"You must be logged in to log activities.\");\n      return;\n    }\n\n    const distanceInKm = convertDistance(values.distance, preferredDistanceUnit as 'km' | 'miles', 'km');\n    if (distanceInKm === null) {\n      toast.error(\"Invalid distance value.\");\n      return;\n    }\n\n    const totalSeconds = (values.minutes * 60) + values.seconds;\n    const timeStringForStorage = formatMinutesAndSecondsForStorage(values.minutes, values.seconds);\n\n    let avgTimePerKm: number | null = null;\n    if (distanceInKm > 0) {\n      avgTimePerKm = totalSeconds / distanceInKm;\n    }\n\n    let isPB = false;\n    try {\n      const { data: previousLogs, error: fetchError } = await supabase\n        .from('activity_logs')\n        .select('avg_time')\n        .eq('user_id', memoizedSessionUserId)\n        .eq('activity_type', 'Running')\n        .order('log_date', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      if (avgTimePerKm !== null) {\n        isPB = previousLogs.every(log => log.avg_time === null || avgTimePerKm! < log.avg_time);\n      }\n    } catch (err) {\n      console.error(\"Error checking running PB:\", err);\n      toast.error(\"Failed to check personal best for running.\");\n    }\n\n    const newLog: TablesInsert<'activity_logs'> = {\n      user_id: memoizedSessionUserId,\n      activity_type: 'Running',\n      distance: `${distanceInKm} km`, // Store in KM\n      time: timeStringForStorage,\n      avg_time: avgTimePerKm,\n      is_pb: isPB,\n      log_date: values.log_date,\n    };\n\n    const { data: insertedData, error } = await supabase.from('activity_logs').insert([newLog]).select().single();\n\n    if (error) {\n      console.error(\"Failed to log running activity:\", error.message);\n      toast.error(\"Failed to log running activity.\");\n    } else {\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      form.reset();\n      onLogSuccess(insertedData);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField control={form.control} name=\"distance\" render={({ field }) => ( <FormItem> <FormLabel>Distance ({preferredDistanceUnit})</FormLabel> <FormControl><Input type=\"number\" step=\"0.1\" {...field} inputMode=\"decimal\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n        <div className=\"flex gap-2\">\n          <FormField control={form.control} name=\"minutes\" render={({ field }) => ( <FormItem className=\"flex-1\"> <FormLabel>Minutes</FormLabel> <FormControl><Input type=\"number\" {...field} inputMode=\"numeric\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n          <FormField control={form.control} name=\"seconds\" render={({ field }) => ( <FormItem className=\"flex-1\"> <FormLabel>Seconds</FormLabel> <FormControl><Input type=\"number\" {...field} inputMode=\"numeric\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n        </div>\n        <FormField control={form.control} name=\"log_date\" render={({ field }) => ( <FormItem> <FormLabel>Date</FormLabel> <FormControl><Input type=\"date\" {...field} className=\"w-full max-w-[180px]\" /></FormControl> <FormMessage /> </FormItem> )} />\n        <Button type=\"submit\" className=\"w-full\">Log Running</Button>\n      </form>\n    </Form>\n  );\n};\n\n\nexport const LogSwimmingForm = ({ onLogSuccess, setTempStatusMessage }: { onLogSuccess: (newLog: Tables<'activity_logs'>) => void; setTempStatusMessage: (message: any) => void; }) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const form = useForm<z.infer<typeof swimmingSchema>>({\n    resolver: zodResolver(swimmingSchema),\n    defaultValues: {\n      lengths: 0,\n      pool_size: 0,\n      log_date: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof swimmingSchema>) {\n    if (!memoizedSessionUserId) {\n      toast.error(\"You must be logged in to log activities.\");\n      return;\n    }\n\n    const totalLengths = values.lengths;\n    let isPB = false;\n    try {\n      const { data: previousLogs, error: fetchError } = await supabase\n        .from('activity_logs')\n        .select('distance')\n        .eq('user_id', memoizedSessionUserId)\n        .eq('activity_type', 'Swimming')\n        .order('log_date', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      const previousLengths = previousLogs.map(log => {\n        const match = log.distance?.match(/^(\\d+) lengths/);\n        return match ? parseInt(match[1]) : 0;\n      });\n\n      isPB = previousLengths.every(prevLen => totalLengths > prevLen);\n    } catch (err) {\n      console.error(\"Error checking swimming PB:\", err);\n      toast.error(\"Failed to check personal best for swimming.\");\n    }\n\n    const newLog: TablesInsert<'activity_logs'> = {\n      user_id: memoizedSessionUserId,\n      activity_type: 'Swimming',\n      distance: `${values.lengths} lengths (${values.pool_size}m pool)`,\n      time: null,\n      avg_time: null,\n      is_pb: isPB,\n      log_date: values.log_date,\n    };\n\n    const { data: insertedData, error } = await supabase.from('activity_logs').insert([newLog]).select().single();\n\n    if (error) {\n      console.error(\"Failed to log swimming activity:\", error.message);\n      toast.error(\"Failed to log swimming activity.\");\n    } else {\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      form.reset();\n      onLogSuccess(insertedData);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField control={form.control} name=\"lengths\" render={({ field }) => ( <FormItem> <FormLabel>Lengths</FormLabel> <FormControl><Input type=\"number\" {...field} inputMode=\"numeric\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n        <FormField control={form.control} name=\"pool_size\" render={({ field }) => ( <FormItem> <FormLabel>Pool Size (meters)</FormLabel> <FormControl><Input type=\"number\" {...field} inputMode=\"numeric\" onFocus={handleFocus} onBlur={handleBlur} /></FormControl> <FormMessage /> </FormItem> )} />\n        <FormField control={form.control} name=\"log_date\" render={({ field }) => ( <FormItem> <FormLabel>Date</FormLabel> <FormControl><Input type=\"date\" {...field} className=\"w-full max-w-[180px]\" /></FormControl> <FormMessage /> </FormItem> )} />\n        <Button type=\"submit\" className=\"w-full\">Log Swimming</Button>\n      </form>\n    </Form>\n  );\n};\n\nexport const LogTennisForm = ({ onLogSuccess, setTempStatusMessage }: { onLogSuccess: (newLog: Tables<'activity_logs'>) => void; setTempStatusMessage: (message: any) => void; }) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const form = useForm<z.infer<typeof tennisSchema>>({\n    resolver: zodResolver(tennisSchema),\n    defaultValues: {\n      duration: \"\",\n      log_date: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof tennisSchema>) {\n    if (!memoizedSessionUserId) {\n      toast.error(\"You must be logged in to log activities.\");\n      return;\n    }\n\n    const durationMinutes = timeStringToSeconds(values.duration) / 60; // Convert to minutes for PB check\n    let isPB = false;\n    try {\n      const { data: previousLogs, error: fetchError } = await supabase\n        .from('activity_logs')\n        .select('time')\n        .eq('user_id', memoizedSessionUserId)\n        .eq('activity_type', 'Tennis')\n        .order('log_date', { ascending: false });\n\n      if (fetchError) throw fetchError;\n\n      const previousDurations = previousLogs.map(log => timeStringToSeconds(log.time || '0m') / 60);\n      isPB = previousDurations.every(prevDur => durationMinutes > prevDur);\n    } catch (err) {\n      console.error(\"Error checking tennis PB:\", err);\n      toast.error(\"Failed to check personal best for tennis.\");\n    }\n\n    const newLog: TablesInsert<'activity_logs'> = {\n      user_id: memoizedSessionUserId,\n      activity_type: 'Tennis',\n      distance: null,\n      time: values.duration,\n      avg_time: null,\n      is_pb: isPB,\n      log_date: values.log_date,\n    };\n\n    const { data: insertedData, error } = await supabase.from('activity_logs').insert([newLog]).select().single();\n\n    if (error) {\n      console.error(\"Failed to log tennis activity:\", error.message);\n      toast.error(\"Failed to log tennis activity.\");\n    } else {\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      form.reset();\n      onLogSuccess(insertedData);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField control={form.control} name=\"duration\" render={({ field }) => ( <FormItem> <FormLabel>Duration (e.g., 1h 30m or 90m)</FormLabel> <FormControl><Input {...field} /></FormControl> <FormMessage /> </FormItem> )} />\n        <FormField control={form.control} name=\"log_date\" render={({ field }) => ( <FormItem> <FormLabel>Date</FormLabel> <FormControl><Input type=\"date\" {...field} className=\"w-full max-w-[180px]\" /></FormControl> <FormMessage /> </FormItem> )} />\n        <Button type=\"submit\" className=\"w-full\">Log Tennis</Button>\n      </form>\n    </Form>\n  );\n};\n\nexport const ActivityLoggingDialog = ({ open, onOpenChange, initialActivity, trigger }: ActivityLoggingDialogProps) => {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const [selectedActivity, setSelectedActivity] = useState<ActivityType | null>(initialActivity || null);\n  const { setTempStatusMessage, refreshAllData, addActivityToWeeklySummary } = useWorkoutFlow();\n\n  const isControlled = open !== undefined && onOpenChange !== undefined;\n  const currentOpen = isControlled ? open : internalOpen;\n  const setCurrentOpen = isControlled ? onOpenChange : setInternalOpen;\n\n  useEffect(() => {\n    if (currentOpen) {\n      setSelectedActivity(initialActivity || null);\n    }\n  }, [currentOpen, initialActivity]);\n\n  const handleActivitySelect = (activity: ActivityType) => {\n    setSelectedActivity(activity);\n  };\n\n  const handleLogSuccess = (newLog: Tables<'activity_logs'>) => {\n    setCurrentOpen(false);\n    setSelectedActivity(null);\n    addActivityToWeeklySummary(newLog); // Optimistic update\n    refreshAllData(); // Background revalidation\n  };\n\n  return (\n    <Dialog open={currentOpen} onOpenChange={setCurrentOpen}>\n      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Log New Activity</DialogTitle>\n        </DialogHeader>\n        {!selectedActivity ? (\n          <div className=\"grid gap-4 py-4\">\n            <Button variant=\"outline\" onClick={() => handleActivitySelect(\"Running\")}> <Activity className=\"h-4 w-4 mr-2\" /> Log Running </Button>\n            <Button variant=\"outline\" onClick={() => handleActivitySelect(\"Cycling\")}> <Bike className=\"h-4 w-4 mr-2\" /> Log Cycling </Button>\n            <Button variant=\"outline\" onClick={() => handleActivitySelect(\"Swimming\")}> <Activity className=\"h-4 w-4 mr-2\" /> Log Swimming </Button>\n            <Button variant=\"outline\" onClick={() => handleActivitySelect(\"Tennis\")}> <Activity className=\"h-4 w-4 mr-2\" /> Log Tennis </Button>\n          </div>\n        ) : (\n          <div className=\"py-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">Log {selectedActivity}</h3>\n            <Button variant=\"outline\" className=\"mb-4 w-full\" onClick={() => setSelectedActivity(null)}> Back to Activity Types </Button>\n            {selectedActivity === \"Running\" && <LogRunningForm onLogSuccess={handleLogSuccess} setTempStatusMessage={setTempStatusMessage} />}\n            {selectedActivity === \"Cycling\" && <LogCyclingForm onLogSuccess={handleLogSuccess} setTempStatusMessage={setTempStatusMessage} />}\n            {selectedActivity === \"Swimming\" && <LogSwimmingForm onLogSuccess={handleLogSuccess} setTempStatusMessage={setTempStatusMessage} />}\n            {selectedActivity === \"Tennis\" && <LogTennisForm onLogSuccess={handleLogSuccess} setTempStatusMessage={setTempStatusMessage} />}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":22427},"apps/web/src/components/dashboard/action-button.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { Button } from '@/components/ui/button';\n\ninterface ActionButtonProps {\n  title: string;\n  icon: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n}\n\nexport const ActionButton = ({ title, icon, onClick, className }: ActionButtonProps) => {\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={onClick}\n      className={cn(\n        \"h-full w-full p-2 flex flex-col items-center justify-center text-center whitespace-normal gap-1\",\n        \"font-semibold text-sm leading-tight\",\n        \"border-0 shadow-sm hover:shadow-md transition-all duration-100 ease-out\", // Added transition\n        \"active:scale-[0.98] active:shadow-sm\", // Added active state for press effect\n        className\n      )}\n    >\n      {icon}\n      <span>{title}</span>\n    </Button>\n  );\n};","size_bytes":895},"apps/web/src/components/dashboard/action-hub.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport {\n  Activity,\n  Sparkles,\n  History,\n  CalendarDays,\n  ChevronDown,\n  ChevronUp,\n  Dumbbell,\n  LayoutTemplate,\n  Settings\n} from 'lucide-react';\nimport { AiCoachDialog } from './ai-coach-dialog';\nimport { ActivityLoggingDialog } from '../activity-logging-dialog';\nimport { ActionButton } from './action-button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from '@/components/ui/button';\nimport { WorkoutPerformanceModal } from './workout-performance-modal';\nimport { ConsistencyCalendarModal } from './consistency-calendar-modal';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport const ActionHub = () => {\n  const router = useRouter();\n  const [isActivityLogOpen, setIsActivityLogOpen] = useState(false);\n  const [isAiCoachOpen, setIsAiCoachOpen] = useState(false);\n  const [isWorkoutPerformanceOpen, setIsWorkoutPerformanceOpen] = useState(false);\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\n\n  return (\n    <>\n      <Card className=\"p-0 border rounded-xl bg-card\">\n        <CardHeader className=\"pb-2 text-center\">\n          <CardTitle className=\"text-xl font-semibold\">Quick Links</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-3 grid-rows-2 gap-3 p-4 pt-2\">\n          <ActionButton\n            title=\"Log Activity\"\n            icon={<Activity className=\"h-5 w-5 text-chart-2\" strokeWidth={2.5} />}\n            onClick={() => setIsActivityLogOpen(true)}\n          />\n          <ActionButton\n            title=\"AI Coach\"\n            icon={<Sparkles className=\"h-5 w-5 text-chart-4\" strokeWidth={2.5} />}\n            onClick={() => setIsAiCoachOpen(true)}\n          />\n          <ActionButton\n            title=\"Workout Log\"\n            icon={<History className=\"h-5 w-5 text-chart-1\" strokeWidth={2.5} />}\n            onClick={() => setIsWorkoutPerformanceOpen(true)}\n          />\n          <ActionButton\n            title=\"Consistency Calendar\"\n            icon={<CalendarDays className=\"h-5 w-5 text-chart-5\" strokeWidth={2.5} />}\n            onClick={() => setIsCalendarOpen(true)}\n            className=\"col-span-2\"\n          />\n          \n          <DropdownMenu onOpenChange={setIsMoreMenuOpen}>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"outline\"\n                className=\"h-full w-full p-2 flex flex-col items-center justify-center text-center whitespace-normal gap-1 font-semibold text-sm leading-tight border-0 shadow-sm hover:shadow-md transition-shadow bg-card\"\n              >\n                <span>\n                  {isMoreMenuOpen ? <ChevronUp className=\"h-5 w-5\" strokeWidth={2.5} /> : <ChevronDown className=\"h-5 w-5\" strokeWidth={2.5} />}\n                  <span>More</span>\n                </span>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onSelect={() => router.push('/workout')}>\n                <Dumbbell className=\"mr-2 h-4 w-4\" strokeWidth={2.5} />\n                <span>Start Workout</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem onSelect={() => router.push('/manage-exercises')}>\n                <Dumbbell className=\"mr-2 h-4 w-4\" strokeWidth={2.5} />\n                <span>Manage Exercises</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem onSelect={() => router.push('/manage-t-paths')}>\n                <LayoutTemplate className=\"mr-2 h-4 w-4\" strokeWidth={2.5} />\n                <span>Manage T-Paths</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem onSelect={() => router.push('/profile?tab=settings&edit=true')}>\n                <Settings className=\"mr-2 h-4 w-4\" strokeWidth={2.5} />\n                <span>Profile Settings (Edit)</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </CardContent>\n      </Card>\n\n      <ActivityLoggingDialog open={isActivityLogOpen} onOpenChange={setIsActivityLogOpen} />\n      <AiCoachDialog open={isAiCoachOpen} onOpenChange={setIsAiCoachOpen} />\n      <WorkoutPerformanceModal open={isWorkoutPerformanceOpen} onOpenChange={setIsWorkoutPerformanceOpen} />\n      <ConsistencyCalendarModal open={isCalendarOpen} onOpenChange={setIsCalendarOpen} />\n    </>\n  );\n};","size_bytes":4575},"apps/web/src/components/dashboard/ai-coach-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Bot, AlertCircle, Info } from \"lucide-react\";\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { LoadingOverlay } from '../loading-overlay';\nimport { Tables } from '@/types/supabase';\nimport { Tooltip, TooltipProvider, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ntype AiCoachUsageLog = Tables<'ai_coach_usage_logs'>;\n\ninterface AiCoachDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const AiCoachDialog = ({ open, onOpenChange }: AiCoachDialogProps) => {\n  const { supabase, session, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [analysis, setAnalysis] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [usageCount, setUsageCount] = useState(0);\n  const AI_COACH_DAILY_LIMIT = 2;\n\n  const fetchUsageData = useCallback(async () => {\n    if (!memoizedSessionUserId) return; // Use memoized ID\n    \n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(today.getDate() + 1);\n\n      const { count, error } = await supabase\n        .from('ai_coach_usage_logs')\n        .select('*', { count: 'exact', head: true })\n        .eq('user_id', memoizedSessionUserId) // Use memoized ID\n        .gte('used_at', today.toISOString())\n        .lt('used_at', tomorrow.toISOString());\n\n      if (error) throw error;\n      \n      setUsageCount(count || 0);\n      \n    } catch (err: any) {\n      console.error(\"Failed to fetch AI coach usage data:\", err);\n      toast.error(\"Failed to load AI coach usage data.\"); // Added toast.error\n    }\n  }, [memoizedSessionUserId, supabase]); // Depend on memoized ID\n\n  useEffect(() => {\n    if (open) {\n      fetchUsageData();\n    }\n  }, [open, fetchUsageData]);\n\n  const handleAnalyse = async () => {\n    if (usageCount >= AI_COACH_DAILY_LIMIT) {\n      toast.error(`You've reached the limit of ${AI_COACH_DAILY_LIMIT} AI coach uses per day.`); // Changed to toast.error\n      return;\n    }\n\n    setLoading(true);\n    setAnalysis(\"\");\n    try {\n      const { data, error } = await supabase.functions.invoke('ai-coach');\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      setAnalysis(data.analysis);\n      \n      await fetchUsageData(); // Re-fetch the count from the database\n      \n    } catch (err: any) {\n      console.error(\"AI Coach error:\", err);\n      toast.error(\"Failed to get AI analysis.\"); // Changed to toast.error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!open) {\n      setAnalysis(\"\");\n      setLoading(false);\n    }\n  }, [open]);\n\n  const canUseAiCoach = usageCount < AI_COACH_DAILY_LIMIT;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <Bot className=\"mr-2 h-5 w-5\" /> AI Fitness Coach\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"ml-2 h-6 w-6\">\n                    <Info className=\"h-4 w-4 text-muted-foreground\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent className=\"max-w-xs\">\n                  <p className=\"text-sm\">\n                    The AI Coach now uses your workout ratings (1-5 stars) to provide more nuanced feedback,\n                    understanding not just what you did, but how you felt about it.\n                  </p>\n                </TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"py-4 flex-grow overflow-hidden\">\n          {!analysis && !loading && (\n            <div className=\"text-center space-y-4\">\n              {canUseAiCoach ? (\n                <>\n                  <p>Get personalised feedback on your workout history from the last month.</p>\n                  <Button onClick={handleAnalyse}>Analyse My Performance</Button>\n                  <p className=\"text-sm text-muted-foreground\">\n                    You have {AI_COACH_DAILY_LIMIT - usageCount} uses remaining today.\n                  </p>\n                </>\n              ) : (\n                <div className=\"space-y-4\">\n                  <AlertCircle className=\"h-12 w-12 text-yellow-500 mx-auto\" />\n                  <p className=\"text-muted-foreground\">\n                    You've reached the limit of {AI_COACH_DAILY_LIMIT} AI coach uses per day. \n                    The AI Coach needs at least 3 workouts in the last 30 days to provide advice.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n          {loading && (\n            <div className=\"text-center text-muted-foreground\">\n              <p>Analysing your performance... This may take a moment.</p>\n            </div>\n          )}\n          {analysis && (\n            <ScrollArea className=\"h-full w-full rounded-md border p-4\">\n              <div\n                className=\"prose prose-sm dark:prose-invert max-w-none\"\n                dangerouslySetInnerHTML={{ __html: analysis.replace(/\\n/g, '<br />') }}\n              />\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n      <LoadingOverlay \n        isOpen={loading} \n        title=\"Generating AI Analysis\" \n        description=\"Please wait while the AI coach analyses your workout performance.\" \n      />\n    </Dialog>\n  );\n};","size_bytes":5980},"apps/web/src/components/dashboard/all-workouts-quick-start.tsx":{"content":"\"use client\";\n\nimport React, { useMemo } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Dumbbell, Play } from 'lucide-react';\nimport { Tables, WorkoutWithLastCompleted, Profile, GroupedTPath, WorkoutExercise } from '@/types/supabase'; // Import Profile and GroupedTPath\nimport { WorkoutPill, WorkoutPillProps } from '@/components/workout-flow/workout-pill';\nimport { useUserProfile } from '@/hooks/data/useUserProfile';\nimport { useWorkoutPlans } from '@/hooks/data/useWorkoutPlans';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useGym } from '@/components/gym-context-provider'; // Import useGym\nimport Link from 'next/link'; // Import Link\n\ntype TPath = Tables<'t_paths'>;\ntype Gym = Tables<'gyms'>; // Import Gym type\n\nconst mapWorkoutToPillProps = (workout: WorkoutWithLastCompleted, mainTPathName: string): Omit<WorkoutPillProps, 'isSelected' | 'onClick'> => {\n  const lowerTitle = workout.template_name.toLowerCase();\n  const isUpperLowerSplit = mainTPathName.toLowerCase().includes('upper/lower');\n  const workoutType: WorkoutPillProps['workoutType'] = isUpperLowerSplit ? 'upper-lower' : 'push-pull-legs';\n  \n  let category: WorkoutPillProps['category'];\n  let variant: WorkoutPillProps['variant'] = undefined;\n\n  if (isUpperLowerSplit) {\n    if (lowerTitle.includes('upper')) category = 'upper';\n    else if (lowerTitle.includes('lower')) category = 'lower';\n    else category = 'upper'; // Default if neither, though should not happen with current data\n    \n    if (lowerTitle.includes(' a')) variant = 'a';\n    else if (lowerTitle.includes(' b')) variant = 'b';\n  } else { // push-pull-legs\n    if (lowerTitle.includes('push')) category = 'push';\n    else if (lowerTitle.includes('pull')) category = 'pull';\n    else if (lowerTitle.includes('legs')) category = 'legs';\n    else category = 'push'; // Default if neither, though should not happen with current data\n  }\n\n  return {\n    id: workout.id,\n    title: workout.template_name,\n    workoutType,\n    category,\n    variant,\n    completedAt: workout.last_completed_at ? new Date(workout.last_completed_at) : null,\n  };\n};\n\ninterface AllWorkoutsQuickStartProps {\n  profile: Profile | null;\n  groupedTPaths: GroupedTPath[];\n  loadingPlans: boolean;\n  activeGym: Gym | null;\n  loadingGyms: boolean;\n  workoutExercisesCache: Record<string, WorkoutExercise[]>; // NEW: Add workoutExercisesCache prop\n  dataError: string | null; // NEW: Add dataError prop\n}\n\nexport const AllWorkoutsQuickStart = ({\n  profile,\n  groupedTPaths,\n  loadingPlans,\n  activeGym,\n  loadingGyms,\n  workoutExercisesCache, // NEW: Destructure\n  dataError, // NEW: Destructure\n}: AllWorkoutsQuickStartProps) => {\n  const router = useRouter();\n  const isLoading = loadingPlans || loadingGyms;\n\n  const activeTPathGroup = useMemo(() => {\n    if (!profile || !profile.active_t_path_id || groupedTPaths.length === 0) {\n      return null;\n    }\n    return groupedTPaths.find(group => group.mainTPath.id === profile.active_t_path_id);\n  }, [profile, groupedTPaths]);\n\n  const activeMainTPath = activeTPathGroup?.mainTPath;\n  const childWorkouts = activeTPathGroup?.childWorkouts || [];\n\n  // Determine if the active gym is configured\n  const isGymConfigured = useMemo(() => {\n    if (!activeGym || !groupedTPaths) return false;\n    return groupedTPaths.some(group => group.mainTPath.gym_id === activeGym.id);\n  }, [activeGym, groupedTPaths]);\n\n  const handleStartWorkout = (workoutId: string) => {\n    router.push(`/workout?workoutId=${workoutId}`);\n  };\n\n  const isTrulyEmptyState = !activeMainTPath || childWorkouts.length === 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-center text-xl\">\n          <Dumbbell className=\"h-5 w-5\" />\n          All Workouts\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"min-h-[120px] flex flex-col justify-center\">\n        {isLoading ? (\n          // Render blank space during loading, matching the min-height of CardContent\n          <div className=\"h-[120px] w-full\" />\n        ) : dataError ? (\n          <p className=\"text-destructive\">Error loading workouts: {dataError}</p>\n        ) : !activeGym ? (\n          <p className=\"text-muted-foreground text-center py-4 animate-fade-in-fast\">No active gym selected. Please set one in your profile.</p>\n        ) : !isGymConfigured ? (\n          <p className=\"text-muted-foreground text-center py-4 animate-fade-in-fast\">Your active gym \"{activeGym.name}\" has no workout plan. Go to <Link href=\"/manage-t-paths\" className=\"text-primary underline\">Manage T-Paths</Link> to set one up.</p>\n        ) : isTrulyEmptyState ? (\n          <p className=\"text-muted-foreground text-center py-4 animate-fade-in-fast\">No workouts found for your active Transformation Path. This might happen if your session length is too short for any workouts.</p>\n        ) : (\n          <div className=\"animate-fade-in-fast\"> {/* Apply fast fade-in here */}\n            <h3 className=\"text-lg font-semibold mb-3\">{activeMainTPath?.template_name}</h3>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              {childWorkouts.map((workout: WorkoutWithLastCompleted) => {\n                const pillProps = mapWorkoutToPillProps(workout, activeMainTPath!.template_name); // Non-null assertion as isTrulyEmptyState handles null\n                return (\n                  <div key={workout.id} className=\"flex items-center gap-2\">\n                    <WorkoutPill\n                      {...pillProps}\n                      isSelected={false}\n                      onClick={() => {}}\n                      className=\"flex-1\"\n                    />\n                    <Button \n                      size=\"icon\"\n                      onClick={() => handleStartWorkout(workout.id)}\n                      className=\"flex-shrink-0\"\n                    >\n                      <Play className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":6291},"apps/web/src/components/dashboard/consistency-calendar-modal.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar } from '@/components/ui/calendar';\nimport { toast } from 'sonner';\nimport { getCalendarItemColorCssVar, getCalendarItemDisplayName } from '@/lib/utils'; // Keep web-specific utils;\nimport { db } from '@/lib/db';\nimport { Tables } from '@/types/supabase';\n\ntype Profile = Tables<'profiles'>;\n\ninterface CalendarEvent {\n  type: 'workout' | 'activity' | 'ad-hoc';\n  name: string | null;\n  logged_at: Date;\n  date: Date;\n}\n\nexport const ConsistencyCalendarModal = ({ open, onOpenChange }: { open: boolean; onOpenChange: (open: boolean) => void; }) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [loading, setLoading] = useState(true);\n  const [activityMap, setActivityMap] = useState<Map<string, CalendarEvent[]>>(new Map());\n  const [uniqueActivityTypes, setUniqueActivityTypes] = useState<Set<string>>(new Set());\n  const [currentStreak, setCurrentStreak] = useState<number>(0);\n\n  useEffect(() => {\n    if (open && memoizedSessionUserId) {\n      const fetchActivityDates = async () => {\n        setLoading(true);\n        try {\n          const { data: workoutSessions, error: workoutError } = await supabase\n            .from('workout_sessions')\n            .select('session_date, template_name, created_at')\n            .eq('user_id', memoizedSessionUserId)\n            .not('completed_at', 'is', null);\n          if (workoutError) throw workoutError;\n\n          const { data: activityLogs, error: activityError } = await supabase\n            .from('activity_logs')\n            .select('log_date, activity_type, created_at')\n            .eq('user_id', memoizedSessionUserId);\n          if (activityError) throw activityError;\n\n          const { data: profileData, error: profileError } = await supabase\n            .from('profiles')\n            .select('current_streak')\n            .eq('id', memoizedSessionUserId)\n            .single();\n          if (profileError && profileError.code !== 'PGRST116') {\n            console.error(\"Error fetching profile for streak:\", profileError);\n            toast.error(\"Failed to load user streak data.\");\n          } else if (profileData) {\n            setCurrentStreak(profileData.current_streak || 0);\n          }\n\n          const newActivityMap = new Map<string, CalendarEvent[]>();\n          const newUniqueActivityTypes = new Set<string>();\n\n          (workoutSessions || []).forEach(ws => {\n            const date = new Date(ws.session_date);\n            const dateKey = date.toLocaleDateString('en-CA', { year: 'numeric', month: '2-digit', day: '2-digit' });\n            const workoutName = ws.template_name || 'Ad Hoc Workout';\n            \n            if (!newActivityMap.has(dateKey)) {\n              newActivityMap.set(dateKey, []);\n            }\n            newActivityMap.get(dateKey)?.push({ \n              date, \n              type: workoutName === 'Ad Hoc Workout' ? 'ad-hoc' : 'workout', \n              name: workoutName,\n              logged_at: new Date(ws.created_at || ws.session_date)\n            });\n            newUniqueActivityTypes.add(getCalendarItemDisplayName(workoutName, workoutName === 'Ad Hoc Workout' ? 'ad-hoc' : 'workout'));\n          });\n\n          (activityLogs || []).forEach(al => {\n            const date = new Date(al.log_date);\n            const dateKey = date.toLocaleDateString('en-CA', { year: 'numeric', month: '2-digit', day: '2-digit' });\n            const activityName = al.activity_type;\n\n            if (!newActivityMap.has(dateKey)) {\n              newActivityMap.set(dateKey, []);\n            }\n            newActivityMap.get(dateKey)?.push({ \n              date, \n              type: 'activity', \n              name: activityName,\n              logged_at: new Date(al.created_at || al.log_date)\n            });\n            newUniqueActivityTypes.add(getCalendarItemDisplayName(activityName, 'activity'));\n          });\n\n          newActivityMap.forEach((events, dateKey) => {\n            events.sort((a, b) => a.logged_at.getTime() - b.logged_at.getTime());\n            newActivityMap.set(dateKey, events);\n          });\n\n          setActivityMap(newActivityMap);\n          setUniqueActivityTypes(newUniqueActivityTypes);\n\n        } catch (err: any) {\n          console.error(\"Failed to fetch activity dates:\", err);\n          toast.error(\"Failed to load activity data: \" + err.message);\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchActivityDates();\n    }\n  }, [open, memoizedSessionUserId, supabase]);\n\n  const { modifiers, modifiersStyles } = useMemo(() => {\n    const mods: Record<string, Date[]> = {};\n    const styles: Record<string, React.CSSProperties> = {};\n\n    activityMap.forEach((events, dateKey) => {\n      const date = new Date(dateKey);\n      const primaryEvent = events[0];\n      const secondaryEvent = events[1];\n\n      if (primaryEvent) {\n        const primaryModName = `primary-${dateKey}`;\n        mods[primaryModName] = [date];\n        styles[primaryModName] = {\n          backgroundColor: getCalendarItemColorCssVar(primaryEvent.name, primaryEvent.type),\n          color: 'hsl(0 0% 100%)', // white text\n        };\n      }\n      if (secondaryEvent) {\n        const secondaryModName = `secondary-${dateKey}`;\n        mods[secondaryModName] = [date];\n        styles[secondaryModName] = {\n          border: `2px solid ${getCalendarItemColorCssVar(secondaryEvent.name, secondaryEvent.type)}`,\n        };\n      }\n    });\n\n    return { modifiers: mods, modifiersStyles: styles };\n  }, [activityMap]);\n\n  const sortedUniqueActivityTypes = useMemo(() => {\n    const allEventTypes = new Set<string>();\n    activityMap.forEach(events => {\n      events.forEach(event => {\n        allEventTypes.add(getCalendarItemDisplayName(event.name, event.type));\n      });\n    });\n    return Array.from(allEventTypes).sort();\n  }, [activityMap]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"p-2 sm:p-4\">\n        <DialogHeader>\n        </DialogHeader>\n        <div className=\"py-4 flex flex-col items-center\">\n          {loading ? (\n            <p>Loading calendar...</p>\n          ) : (\n            <>\n              <p className=\"text-lg font-semibold mb-4\">Consistency Calendar</p>\n              <Calendar\n                mode=\"multiple\"\n                selected={Array.from(activityMap.values()).flatMap(events => events.map(e => e.date))}\n                className=\"rounded-md border w-full\"\n                modifiers={modifiers}\n                modifiersStyles={modifiersStyles}\n              />\n              <div className=\"mt-6 w-full px-4\">\n                <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                  {sortedUniqueActivityTypes.map(typeDisplayName => {\n                    const originalEvent = Array.from(activityMap.values()).flatMap(events => events).find(event => \n                      getCalendarItemDisplayName(event.name, event.type) === typeDisplayName\n                    );\n                    if (!originalEvent) return null;\n\n                    return (\n                      <div key={typeDisplayName} className=\"flex items-center gap-2\">\n                        <div\n                          className=\"h-4 w-4 rounded-sm flex-shrink-0\"\n                          style={{ backgroundColor: getCalendarItemColorCssVar(originalEvent.name, originalEvent.type) }}\n                        ></div>\n                        <span>{typeDisplayName}</span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":7868},"apps/web/src/components/dashboard/gym-toggle.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { useGym } from '@/components/gym-context-provider';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ChevronLeft, ChevronRight, Home } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useWorkoutDataFetcher } from '@/hooks/use-workout-data-fetcher';\n\nexport const GymToggle = () => {\n  const { userGyms, activeGym, switchActiveGym, loadingGyms } = useGym();\n  const { refreshProfile } = useWorkoutDataFetcher(); // Get the refresh function\n\n  if (loadingGyms) {\n    return <Skeleton className=\"h-12 w-48\" />;\n  }\n\n  if (!activeGym || userGyms.length <= 1) {\n    return null; // Don't show if only one or zero gyms\n  }\n\n  const currentIndex = userGyms.findIndex(g => g.id === activeGym.id);\n\n  const handleSwitch = async (newIndex: number) => {\n    const success = await switchActiveGym(userGyms[newIndex].id);\n    if (success) {\n      // On successful switch, manually trigger a profile refresh.\n      // This ensures useWorkoutDataFetcher gets the new active_t_path_id immediately.\n      refreshProfile();\n    }\n  };\n\n  const handlePrev = () => {\n    const prevIndex = (currentIndex - 1 + userGyms.length) % userGyms.length;\n    handleSwitch(prevIndex);\n  };\n\n  const handleNext = () => {\n    const nextIndex = (currentIndex + 1) % userGyms.length;\n    handleSwitch(nextIndex);\n  };\n\n  return (\n    <Card className=\"p-0 border rounded-xl bg-card shadow-sm w-full max-w-xs mx-auto\"> {/* Added w-full max-w-xs mx-auto for mobile centering */}\n      <CardContent className=\"p-2 flex items-center justify-between gap-2\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={handlePrev} className=\"h-8 w-8\">\n          <ChevronLeft className=\"h-5 w-5\" />\n        </Button>\n        <div className=\"flex flex-col items-center text-center\">\n          <p className=\"text-xs text-muted-foreground\">Active Gym</p>\n          <p className=\"font-semibold text-sm flex items-center gap-1\">\n            <Home className=\"h-4 w-4\" />\n            {activeGym.name}\n          </p>\n        </div>\n        <Button variant=\"ghost\" size=\"icon\" onClick={handleNext} className=\"h-8 w-8\">\n          <ChevronRight className=\"h-5 w-5\" />\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2316},"apps/web/src/components/dashboard/next-workout-card.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Dumbbell, Clock } from 'lucide-react';\nimport { Tables, WorkoutWithLastCompleted, Profile, GroupedTPath } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useRouter } from 'next/navigation';\nimport { cn, getWorkoutColorClass, getExerciseCounts } from '@/lib/utils'; // Keep web-specific utils;\nimport { useUserProfile } from '@/hooks/data/useUserProfile';\nimport { useWorkoutPlans } from '@/hooks/data/useWorkoutPlans';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useGym } from '@/components/gym-context-provider'; // Import useGym\nimport Link from 'next/link'; // Import Link\n\ntype TPath = Tables<'t_paths'>;\ntype Gym = Tables<'gyms'>; // Import Gym type\n\n// Define the workout orders\nconst ULUL_ORDER = ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\nconst PPL_ORDER = ['Push', 'Pull', 'Legs'];\n\ninterface NextWorkoutCardProps {\n  profile: Profile | null;\n  groupedTPaths: GroupedTPath[];\n  loadingPlans: boolean;\n  activeGym: Gym | null;\n  loadingGyms: boolean;\n}\n\nexport const NextWorkoutCard = ({\n  profile,\n  groupedTPaths,\n  loadingPlans,\n  activeGym,\n  loadingGyms,\n}: NextWorkoutCardProps) => {\n  const router = useRouter();\n  const { session } = useSession();\n  const { workoutExercisesCache, error: plansError } = useWorkoutPlans();\n  \n  const isLoading = loadingPlans || loadingGyms;\n  const dataError = plansError;\n\n  // Derive nextWorkout, estimatedDuration, lastWorkoutName, and mainTPath using useMemo\n  const { nextWorkout, derivedEstimatedDuration, derivedLastWorkoutName, derivedMainTPath } = useMemo(() => {\n    let currentNextWorkout: WorkoutWithLastCompleted | null = null;\n    let currentEstimatedDuration: string | null = null;\n    let currentLastWorkoutName: string | null = null;\n    let currentMainTPath: TPath | null = null; // Now deriving mainTPath here\n\n    if (dataError || !session || !profile || !groupedTPaths || !activeGym) {\n      // If any critical data is missing or loading, return nulls\n      return { nextWorkout: null, derivedEstimatedDuration: null, derivedLastWorkoutName: null, derivedMainTPath: null };\n    }\n\n    const activeMainTPathId = profile?.active_t_path_id;\n    if (!activeMainTPathId) {\n      return { nextWorkout: null, derivedEstimatedDuration: null, derivedLastWorkoutName: null, derivedMainTPath: null };\n    }\n\n    const foundGroup = groupedTPaths.find((group: GroupedTPath) => group.mainTPath.id === activeMainTPathId);\n    if (!foundGroup || foundGroup.childWorkouts.length === 0) {\n      return { nextWorkout: null, derivedEstimatedDuration: null, derivedLastWorkoutName: null, derivedMainTPath: null };\n    }\n\n    currentMainTPath = foundGroup.mainTPath; // Set mainTPath here\n\n    const childWorkouts = foundGroup.childWorkouts;\n    const workoutOrder = foundGroup.mainTPath.template_name.includes('Upper/Lower') ? ULUL_ORDER : PPL_ORDER;\n\n    let lastCompletedWorkout: WorkoutWithLastCompleted | null = null;\n    let mostRecentCompletionDate: Date | null = null;\n\n    childWorkouts.forEach((workout: WorkoutWithLastCompleted) => {\n      if (workout.last_completed_at) {\n        const completionDate = new Date(workout.last_completed_at);\n        if (!mostRecentCompletionDate || completionDate > mostRecentCompletionDate) {\n          mostRecentCompletionDate = completionDate;\n          lastCompletedWorkout = workout;\n        }\n      }\n    });\n\n    if (lastCompletedWorkout) {\n      currentLastWorkoutName = (lastCompletedWorkout as WorkoutWithLastCompleted).template_name;\n      const currentIndex = workoutOrder.indexOf(currentLastWorkoutName);\n      if (currentIndex !== -1) {\n        const nextIndex = (currentIndex + 1) % workoutOrder.length;\n        const nextWorkoutName = workoutOrder[nextIndex];\n        currentNextWorkout = childWorkouts.find((w: WorkoutWithLastCompleted) => w.template_name === nextWorkoutName) || null;\n      } else {\n        currentNextWorkout = childWorkouts.find((w: WorkoutWithLastCompleted) => w.template_name === workoutOrder[0]) || null;\n      }\n    } else {\n      currentNextWorkout = childWorkouts.find((w: WorkoutWithLastCompleted) => w.template_name === workoutOrder[0]) || null;\n      currentLastWorkoutName = \"No previous workout\";\n    }\n\n    // Calculate estimatedDuration only if currentNextWorkout and profile.preferred_session_length are available\n    // AND the specific workout's exercises are available in the cache\n    if (currentNextWorkout && profile?.preferred_session_length) {\n      const exercisesInWorkout = workoutExercisesCache[currentNextWorkout.id];\n      \n      // CRITICAL: Check if exercisesInWorkout is actually populated and not empty\n      if (exercisesInWorkout && exercisesInWorkout.length > 0) {\n        const preferredSessionLength = profile.preferred_session_length;\n        const [minTimeStr, maxTimeStr] = preferredSessionLength.split('-');\n        const minTime = parseInt(minTimeStr, 10);\n        const maxTime = parseInt(maxTimeStr, 10);\n\n        const defaultCounts = getExerciseCounts(preferredSessionLength);\n        const defaultMainExerciseCount = defaultCounts.main;\n\n        const currentMainExerciseCount = exercisesInWorkout.filter(ex => !ex.is_bonus_exercise).length;\n\n        const countDifference = currentMainExerciseCount - defaultMainExerciseCount;\n        const timeAdjustment = countDifference * 5;\n\n        const newMinTime = Math.max(5, minTime + timeAdjustment);\n        const newMaxTime = Math.max(10, maxTime + timeAdjustment);\n\n        currentEstimatedDuration = `${newMinTime}-${newMaxTime} minutes`;\n      }\n    }\n\n    return { nextWorkout: currentNextWorkout, derivedEstimatedDuration: currentEstimatedDuration, derivedLastWorkoutName: currentLastWorkoutName, derivedMainTPath: currentMainTPath };\n  }, [session, groupedTPaths, dataError, profile, workoutExercisesCache, activeGym]);\n\n  const isGymConfigured = useMemo(() => {\n    if (!activeGym || !groupedTPaths) return false;\n    return groupedTPaths.some(group => group.mainTPath.gym_id === activeGym.id);\n  }, [activeGym, groupedTPaths]);\n\n  const isTrulyEmptyState = !derivedMainTPath || !nextWorkout;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-center text-xl\">\n          <Dumbbell className=\"h-5 w-5\" />\n          Your Next Workout\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"min-h-[120px] flex flex-col justify-center\">\n        {isLoading ? (\n          // Render blank space during loading, matching the min-height of CardContent\n          <div className=\"h-[120px] w-full\" />\n        ) : dataError ? (\n          <p className=\"text-destructive\">Error loading next workout: {dataError}</p>\n        ) : !activeGym ? (\n          <div className=\"text-muted-foreground text-center py-4 animate-fade-in-fast\">\n            <p className=\"mb-4\">No active gym selected. Please set one in your profile.</p>\n            <Button onClick={() => router.push('/profile')} size=\"sm\">Go to Profile Settings</Button>\n          </div>\n        ) : !isGymConfigured ? (\n          <div className=\"text-muted-foreground text-center py-4 animate-fade-in-fast\">\n            <p className=\"mb-4\">Your active gym \"{activeGym.name}\" has no workout plan. Go to <Link href=\"/manage-t-paths\" className=\"text-primary underline\">Manage T-Paths</Link> to set one up.</p>\n          </div>\n        ) : isTrulyEmptyState ? (\n          <div className=\"text-muted-foreground text-center py-4 animate-fade-in-fast\">\n            <p>No active Transformation Path found or no workouts defined for your current session length. Complete onboarding or set one in your profile to get started.</p>\n          </div>\n        ) : (\n          <div className=\"animate-fade-in-fast\"> {/* Apply fast fade-in here */}\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <div className=\"flex flex-col space-y-1\">\n                <h3 className=\"text-lg font-semibold min-h-[1.75rem]\">{nextWorkout?.template_name}</h3>\n                <div className=\"flex items-center gap-1 text-muted-foreground min-h-[1.25rem]\">\n                  {derivedEstimatedDuration && <Clock className=\"h-4 w-4\" />}\n                  {derivedEstimatedDuration && <span>Estimated {derivedEstimatedDuration}</span>}\n                </div>\n                <p className=\"text-xs text-muted-foreground min-h-[1rem]\">\n                  {derivedLastWorkoutName && `Last workout: ${derivedLastWorkoutName}`}\n                </p>\n              </div>\n              <Button \n                onClick={() => router.push(`/workout?workoutId=${nextWorkout?.id}`)} \n                className={cn(\"text-white\", getWorkoutColorClass(nextWorkout?.template_name || '', 'bg'))}\n                size=\"lg\"\n              >\n                Start Workout\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":9176},"apps/web/src/components/dashboard/previous-workouts-card.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { History, ArrowRight, Eye, Dumbbell, Timer } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { formatTimeAgo, getWorkoutColorClass, cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { useWorkoutHistory } from '@/hooks/data/useWorkoutHistory'; // Import the new hook\n\ninterface PreviousWorkoutsCardProps {\n  onViewSummary: (sessionId: string) => void;\n}\n\nexport const PreviousWorkoutsCard = ({ onViewSummary }: PreviousWorkoutsCardProps) => {\n  const router = useRouter();\n  const { sessions, isLoading, error } = useWorkoutHistory(); // Use the new centralized hook\n\n  const recentSessions = sessions.slice(0, 3);\n\n  const handleViewSummaryClick = (sessionId: string) => {\n    onViewSummary(sessionId);\n  };\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-center text-xl\">\n            <History className=\"h-5 w-5\" />\n            Previous Workouts\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-destructive text-center\">Error: {error}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-center text-xl\">\n          <History className=\"h-5 w-5\" />\n          Previous Workouts\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          // Render blank space during loading, matching the min-height of CardContent\n          <div className=\"h-[300px] w-full\" />\n        ) : recentSessions.length === 0 ? (\n          <p className=\"text-muted-foreground animate-fade-in-fast\">No previous workouts found. Complete a workout to see it here!</p>\n        ) : (\n          <div className=\"space-y-3 animate-fade-in-fast\"> {/* Apply fast fade-in here */}\n            {recentSessions.map((sessionItem) => {\n              const workoutName = sessionItem.template_name || 'Ad Hoc Workout';\n              const workoutBorderClass = getWorkoutColorClass(workoutName, 'border');\n              const workoutTextClass = getWorkoutColorClass(workoutName, 'text');\n\n              return (\n                <Card key={sessionItem.id} className={cn(\"border-2\", workoutBorderClass)}>\n                  <div className=\"flex items-center justify-between p-3\">\n                    <div className=\"flex flex-col\">\n                      <CardTitle className={cn(\"text-base font-semibold leading-tight text-center\", workoutTextClass)}>{workoutName}</CardTitle>\n                      <p className=\"text-xs text-muted-foreground leading-tight\">\n                        {sessionItem.completed_at ? formatTimeAgo(new Date(sessionItem.completed_at)) : 'N/A'}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => handleViewSummaryClick(sessionItem.id)}\n                      title=\"View Summary\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <CardContent className=\"pt-0 pb-3 px-3\">\n                    <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                      <span className=\"flex items-center gap-1\">\n                        <Dumbbell className=\"h-3 w-3\" /> {sessionItem.exercise_count} Exercises\n                      </span>\n                      <span className=\"flex items-center gap-1\">\n                        <Timer className=\"h-3 w-3\" /> {sessionItem.duration_string || 'N/A'}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-center text-primary hover:text-primary/90\"\n              onClick={() => router.push('/workout-history')}\n            >\n              View All History <ArrowRight className=\"h-4 w-4 ml-2\" />\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":4368},"apps/web/src/components/dashboard/weekly-activity-summary-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Bike, Activity } from 'lucide-react';\n\ninterface Activity {\n  id: string;\n  type: string;\n  distance: string | null;\n  time: string | null;\n  date: string;\n}\n\ninterface WeeklyActivitySummaryDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  activities: Activity[];\n}\n\nconst getActivityIcon = (type: string) => {\n  switch (type) {\n    case 'Cycling':\n      return <Bike className=\"h-5 w-5 text-primary\" />;\n    // Add cases for other activities like Running, Swimming, etc.\n    default:\n      return <Activity className=\"h-5 w-5 text-primary\" />;\n  }\n};\n\nexport const WeeklyActivitySummaryDialog = ({ open, onOpenChange, activities }: WeeklyActivitySummaryDialogProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>This Week's Activities</DialogTitle>\n          <DialogDescription>\n            A summary of your logged activities for the current week.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"max-h-96 py-4\">\n          {activities.length === 0 ? (\n            <p className=\"text-muted-foreground text-center\">No activities logged this week.</p>\n          ) : (\n            <div className=\"space-y-3\">\n              {activities.map(activity => (\n                <Card key={activity.id}>\n                  <CardContent className=\"p-3 flex items-center gap-4\">\n                    {getActivityIcon(activity.type)}\n                    <div className=\"flex-grow\">\n                      <p className=\"font-semibold\">{activity.type}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {new Date(activity.date).toLocaleDateString('en-US', { weekday: 'long' })}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      {activity.distance && <p className=\"text-sm\">{activity.distance}</p>}\n                      {activity.time && <p className=\"text-sm\">{activity.time}</p>}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":2535},"apps/web/src/components/dashboard/weekly-target-widget.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dumbbell, CheckCircle, Loader2, AlertCircle, CalendarDays } from 'lucide-react';\nimport { cn, getWorkoutColorClass } from '@/lib/utils'; // Keep web-specific utils;\nimport { useSession } from '@/components/session-context-provider';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Button } from '@/components/ui/button';\nimport { ConsistencyCalendarModal } from '@/components/dashboard/consistency-calendar-modal';\nimport { WeeklyActivitySummaryDialog } from './weekly-activity-summary-dialog';\nimport { Tables } from '@/types/supabase';\n\ninterface Activity {\n  id: string;\n  type: string;\n  distance: string | null;\n  time: string | null;\n  date: string;\n}\n\ninterface WeeklySummary {\n  completed_workouts: { id: string; name: string }[];\n  goal_total: number;\n  programme_type: 'ulul' | 'ppl';\n  completed_activities: Activity[];\n}\n\ninterface WeeklyTargetWidgetProps {\n  onViewSummary: (sessionId: string) => void;\n  summary: WeeklySummary | null;\n  loading: boolean;\n  error: string | null;\n  profile: Tables<'profiles'> | null;\n}\n\nexport const WeeklyTargetWidget = ({ onViewSummary, summary, loading, error, profile }: WeeklyTargetWidgetProps) => {\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [isActivitySummaryOpen, setIsActivitySummaryOpen] = useState(false);\n\n  const programmeType = profile?.programme_type;\n\n  const { displayItems, completedCount, goalTotal, completedActivities } = useMemo(() => {\n    if (!summary || !programmeType) {\n      return { displayItems: [], completedCount: 0, goalTotal: programmeType === 'ulul' ? 4 : 3, completedActivities: [] };\n    }\n\n    const goalWorkouts = programmeType === 'ulul'\n      ? ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B']\n      : ['Push', 'Pull', 'Legs'];\n\n    const completed = summary.completed_workouts;\n    const completedCount = completed.length;\n    const goalTotal = summary.goal_total;\n    const displayCount = Math.max(goalTotal, completedCount);\n\n    const items = [];\n    for (let i = 0; i < displayCount; i++) {\n      const isCompleted = i < completedCount;\n      const workoutName = isCompleted ? completed[i].name : goalWorkouts[i];\n      const sessionId = isCompleted ? completed[i].id : null;\n      items.push({\n        id: sessionId,\n        name: workoutName,\n        isCompleted: isCompleted,\n      });\n    }\n    return { displayItems: items, completedCount, goalTotal, completedActivities: summary.completed_activities || [] };\n  }, [summary, programmeType]);\n\n  if (loading) {\n    return (\n      <Card className=\"animate-fade-in-slide-up\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Dumbbell className=\"h-5 w-5 text-primary\" /> Weekly Target\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-20\">\n          <Skeleton className=\"h-10 w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"animate-fade-in-slide-up\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Dumbbell className=\"h-5 w-5 text-primary\" /> Weekly Target\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-20 text-destructive\">\n          <AlertCircle className=\"h-5 w-5 mr-2\" /> Failed to load weekly target.\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!programmeType) {\n    return (\n      <Card className=\"animate-fade-in-slide-up\">\n        <CardHeader className=\"pb-2\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Dumbbell className=\"h-5 w-5 text-primary\" /> Weekly Target\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex items-center justify-center h-20 text-muted-foreground text-center\">\n          No programme type set. Complete onboarding or set one in your profile.\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className=\"animate-fade-in-slide-up\">\n        <CardHeader className=\"pb-1 flex flex-row items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Dumbbell className=\"h-5 w-5 text-primary\" /> Weekly Target\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsCalendarOpen(true)}>\n            <CalendarDays className=\"h-4 w-4 text-muted-foreground\" />\n          </Button>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center justify-center gap-2 pt-1\">\n          <div className=\"flex space-x-2\">\n            <TooltipProvider>\n              {displayItems.map((item, index) => {\n                const label = item.name.includes('Upper') ? 'U' : item.name.includes('Lower') ? 'L' : item.name[0];\n                const colorClass = getWorkoutColorClass(item.name, 'bg');\n                const borderColorClass = getWorkoutColorClass(item.name, 'border');\n                const textColorClass = getWorkoutColorClass(item.name, 'text');\n                return (\n                  <Tooltip key={index}>\n                    <TooltipTrigger asChild>\n                      <div\n                        className={cn(\n                          \"h-10 w-10 rounded-full flex items-center justify-center text-sm font-semibold transition-all duration-200\",\n                          item.isCompleted\n                            ? `${colorClass} text-white`\n                            : `bg-card border ${borderColorClass} ${textColorClass}`,\n                          item.isCompleted && item.id && 'cursor-pointer hover:scale-110'\n                        )}\n                        onClick={() => item.isCompleted && item.id && onViewSummary(item.id)}\n                      >\n                        {item.isCompleted ? <CheckCircle className=\"h-5 w-5\" /> : label}\n                      </div>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>{item.name} - {item.isCompleted ? 'Completed (Click to view)' : 'Pending'}</p>\n                    </TooltipContent>\n                  </Tooltip>\n                );\n              })}\n            </TooltipProvider>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            {completedCount} / {goalTotal} Workouts Completed This Week\n          </p>\n          {completedActivities.length > 0 && (\n            <Button\n              variant=\"link\"\n              className=\"text-sm text-muted-foreground h-auto p-0\"\n              onClick={() => setIsActivitySummaryOpen(true)}\n            >\n              {completedActivities.length} Activit{completedActivities.length > 1 ? 'ies' : 'y'} Completed This Week\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n      <ConsistencyCalendarModal open={isCalendarOpen} onOpenChange={setIsCalendarOpen} />\n      <WeeklyActivitySummaryDialog\n        open={isActivitySummaryOpen}\n        onOpenChange={setIsActivitySummaryOpen}\n        activities={completedActivities}\n      />\n    </>\n  );\n};","size_bytes":7410},"apps/web/src/components/dashboard/weekly-volume-chart.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { formatWeight } from '@/lib/unit-conversions';\nimport { useWeeklyVolumeData } from '@/hooks/data/useWeeklyVolumeData';\nimport { Skeleton } from '@/components/ui/skeleton'; // Import Skeleton\n\nexport const WeeklyVolumeChart = () => {\n  const { chartData, isLoading, error } = useWeeklyVolumeData();\n\n  if (error) {\n    return (\n      <Card className=\"h-[350px] flex items-center justify-center\">\n        <p className=\"text-destructive\">Error: {error}</p>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-center text-xl\">\n          Weekly Workout Volume\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          // Render blank space during loading, matching the min-height of CardContent\n          <div className=\"h-[250px] w-full\" />\n        ) : chartData.length === 0 ? (\n          <div className=\"h-[250px] flex items-center justify-center text-muted-foreground animate-fade-in-fast\">\n            No workout volume data available. Log some workouts to see your progress!\n          </div>\n        ) : (\n          <div className=\"h-[250px] animate-fade-in-fast\"> {/* Apply fast fade-in here */}\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={chartData}\n                margin={{\n                  top: 5,\n                  right: 10,\n                  left: 10,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={(tick) => new Date(tick).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} />\n                <YAxis\n                  tickFormatter={(value) => {\n                    if (value >= 1000) {\n                      return `${Math.round(value / 1000)}k`;\n                    }\n                    return value.toLocaleString();\n                  }}\n                  label={{ value: 'Volume (kg)', angle: -90, position: 'left', offset: -10, style: { textAnchor: 'middle', fontSize: 12 } }}\n                />\n                <Tooltip formatter={(value: number) => [`${value.toLocaleString()} kg`, 'Volume']} />\n                <Legend />\n                <Bar dataKey=\"volume\" fill=\"hsl(var(--primary))\" name=\"Volume\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2682},"apps/web/src/components/dashboard/workout-performance-modal.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { ScrollArea } from '../ui/scroll-area';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\nimport { Dumbbell, History, Trash2, CalendarDays, Timer, ListChecks } from 'lucide-react';\nimport { formatTimeAgo, getWorkoutColorClass, cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { formatTime } from '@/lib/unit-conversions';\nimport { useWorkoutPerformanceData } from '@/hooks/data/useWorkoutPerformanceData'; // Import the new hook\n\ntype WorkoutSession = Tables<'workout_sessions'>;\n\ninterface WorkoutPerformanceModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst WeeklyBodyPartVolumeChart = ({ bodyPart, data, totalVolume, loading }: { bodyPart: 'upper' | 'lower', data: any[], totalVolume: number, loading: boolean }) => {\n  if (loading) {\n    return <p className=\"text-muted-foreground text-center py-4\">Loading volume data...</p>;\n  }\n  const hasData = data.some(d => d.volume > 0);\n\n  return (\n    <Card className=\"mb-4\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">This Week's {bodyPart === 'upper' ? 'Upper Body' : 'Lower Body'} Performance</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!hasData ? (\n          <div className=\"h-[150px] flex items-center justify-center text-muted-foreground\">\n            No {bodyPart} body workouts this week.\n          </div>\n        ) : (\n          <div className=\"h-[150px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={data} margin={{ top: 5, right: 10, left: 10, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={(tick) => new Date(tick).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} />\n                <YAxis hide domain={['auto', 'auto']} />\n                <Tooltip formatter={(value: number) => [`${value.toLocaleString()} kg`, 'Volume']} />\n                <Bar dataKey=\"volume\" name=\"Volume\">\n                  {data.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.isCurrentWeek ? 'hsl(var(--action-primary))' : 'hsl(var(--primary))'} />\n                  ))}\n                </Bar>\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n        <p className=\"text-center text-3xl font-bold text-action mt-2\">{totalVolume.toLocaleString()} kg</p>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst WeeklyMuscleBreakdownChart = ({ bodyPart, data, loading }: { bodyPart: 'upper' | 'lower', data: any[], loading: boolean }) => {\n  if (loading) {\n    return <p className=\"text-muted-foreground text-center py-4\">Loading muscle breakdown...</p>;\n  }\n  const hasData = data.length > 0;\n\n  return (\n    <Card className=\"mb-4\">\n      <CardHeader>\n        <CardTitle className=\"text-lg\">This Week's Muscle Breakdown (Sets)</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!hasData ? (\n          <div className=\"h-[150px] flex items-center justify-center text-muted-foreground\">\n            No {bodyPart} body workouts this week.\n          </div>\n        ) : (\n          <div className=\"h-[150px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart layout=\"vertical\" data={data} margin={{ top: 5, right: 10, left: 10, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" hide domain={[0, 'auto']} />\n                <YAxis type=\"category\" dataKey=\"muscle\" width={80} tick={{ fontSize: 12 }} />\n                <Tooltip formatter={(value: number) => [`${value} sets`, 'Sets']} />\n                <Bar dataKey=\"sets\" fill=\"hsl(var(--chart-3))\" name=\"Sets\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nconst RecentWorkoutSessionsList = ({ sessions, onDeleteSession, loading }: { sessions: WorkoutSession[], onDeleteSession: (sessionId: string, templateName: string | null) => void, loading: boolean }) => {\n  if (loading) {\n    return <p className=\"text-muted-foreground text-center py-4\">Loading recent sessions...</p>;\n  }\n  const hasSessions = sessions.length > 0;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-lg\">Recent Sessions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!hasSessions ? (\n          <p className=\"text-muted-foreground\">No recent workouts found.</p>\n        ) : (\n          <div className=\"space-y-3\">\n            {sessions.map((sessionItem) => {\n              const workoutName = sessionItem.template_name || 'Ad Hoc Workout';\n              const workoutBorderClass = getWorkoutColorClass(workoutName, 'border');\n              return (\n                <Card key={sessionItem.id} className={cn(\"border-2\", workoutBorderClass)}>\n                  <div className=\"flex items-center justify-between p-3\">\n                    <div className=\"flex flex-col\">\n                      <p className=\"text-sm font-semibold\">\n                        {new Date(sessionItem.session_date).toLocaleDateString()}\n                        , {new Date(sessionItem.session_date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                        ({sessionItem.duration_string || 'N/A'})\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">{workoutName}</p>\n                    </div>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"icon\"\n                      onClick={() => onDeleteSession(sessionItem.id, sessionItem.template_name)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport const WorkoutPerformanceModal = ({ open, onOpenChange }: WorkoutPerformanceModalProps) => {\n  const { session, supabase } = useSession();\n  const [activeTab, setActiveTab] = useState<'upper' | 'lower'>('upper');\n  \n  // Use the new centralized hook for all data and state\n  const {\n    weeklyVolumeData,\n    weeklyMuscleBreakdown,\n    recentSessions,\n    totalUpperVolume,\n    totalLowerVolume,\n    loading,\n    error,\n    refresh,\n  } = useWorkoutPerformanceData();\n\n  useEffect(() => {\n    if (error) {\n      toast.error(\"Failed to load workout performance data: \" + error);\n    }\n  }, [error]);\n\n  const handleDeleteSession = async (sessionId: string, templateName: string | null) => {\n    if (!confirm(`Are you sure you want to delete the workout session \"${templateName || 'Ad Hoc Workout'}\"? This action cannot be undone.`)) {\n      return;\n    }\n\n    try {\n      const { error } = await supabase\n        .from('workout_sessions')\n        .delete()\n        .eq('id', sessionId)\n        .eq('user_id', session?.user?.id);\n\n      if (error) {\n        throw new Error(error.message);\n      }\n      toast.success(\"Workout session deleted successfully!\");\n      refresh(); // Re-fetch data after deletion using the hook's refresh function\n    } catch (err: any) {\n      console.error(\"Failed to delete workout session:\", err);\n      toast.error(\"Failed to delete workout session: \" + err.message);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-6 pb-4 border-b\">\n          <DialogTitle className=\"text-2xl font-bold\">Workout Log & Performance</DialogTitle>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'upper' | 'lower')} className=\"flex-grow flex flex-col overflow-hidden\">\n          <TabsList className=\"grid w-full grid-cols-2 rounded-none border-b\">\n            <TabsTrigger value=\"upper\">Upper Body</TabsTrigger>\n            <TabsTrigger value=\"lower\">Lower Body</TabsTrigger>\n          </TabsList>\n          <ScrollArea className=\"flex-grow overflow-y-auto px-6 pb-6\">\n            <TabsContent value=\"upper\" className=\"mt-0 border-none p-0\">\n              <WeeklyBodyPartVolumeChart\n                bodyPart=\"upper\"\n                data={weeklyVolumeData.upper}\n                totalVolume={totalUpperVolume}\n                loading={loading}\n              />\n              <WeeklyMuscleBreakdownChart\n                bodyPart=\"upper\"\n                data={weeklyMuscleBreakdown.upper}\n                loading={loading}\n              />\n            </TabsContent>\n            <TabsContent value=\"lower\" className=\"mt-0 border-none p-0\">\n              <WeeklyBodyPartVolumeChart\n                bodyPart=\"lower\"\n                data={weeklyVolumeData.lower}\n                totalVolume={totalLowerVolume}\n                loading={loading}\n              />\n              <WeeklyMuscleBreakdownChart\n                bodyPart=\"lower\"\n                data={weeklyMuscleBreakdown.lower}\n                loading={loading}\n              />\n            </TabsContent>\n            <RecentWorkoutSessionsList\n              sessions={recentSessions}\n              onDeleteSession={handleDeleteSession}\n              loading={loading}\n            />\n          </ScrollArea>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9974},"apps/web/src/components/exercise-history-dialog.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tables } from '@/types/supabase';\nimport { convertWeight, formatWeight } from '@/lib/unit-conversions';\nimport { useExerciseHistory } from '@/hooks/data/useExerciseHistory';\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ExerciseHistoryDialogProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  exerciseId: string;\n  exerciseName: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  trigger?: React.ReactNode;\n}\n\nexport const ExerciseHistoryDialog = ({ open, onOpenChange, exerciseId, exerciseName, exerciseType, exerciseCategory, trigger }: ExerciseHistoryDialogProps) => {\n  const [internalOpen, setInternalOpen] = React.useState(false);\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  \n  const isControlled = open !== undefined && onOpenChange !== undefined;\n  const currentOpen = isControlled ? open : internalOpen;\n  const setCurrentOpen = isControlled ? onOpenChange : setInternalOpen;\n\n  const { historyLogs, loading, error, preferredWeightUnit } = useExerciseHistory({\n    exerciseId: currentOpen ? exerciseId : '',\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  return (\n    <Dialog open={currentOpen} onOpenChange={setCurrentOpen}>\n      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle>History for {exerciseName}</DialogTitle>\n        </DialogHeader>\n        <div className=\"py-4 flex-grow overflow-hidden\">\n          {loading ? (\n            <p className=\"text-muted-foreground text-center\">Loading history...</p>\n          ) : error ? (\n            <p className=\"text-destructive text-center\">{error}</p>\n          ) : historyLogs.length === 0 ? (\n            <p className=\"text-muted-foreground text-center\">No history found for this exercise.</p>\n          ) : (\n            <ScrollArea className=\"h-full w-full rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date</TableHead>\n                    {exerciseType === 'weight' && <TableHead>Weight ({preferredWeightUnit})</TableHead>}\n                    {exerciseType === 'weight' && <TableHead>Reps</TableHead>}\n                    {exerciseType === 'timed' && <TableHead>Time (s)</TableHead>}\n                    {exerciseCategory === 'Unilateral' && (\n                      <>\n                        <TableHead>Reps (L)</TableHead>\n                        <TableHead>Reps (R)</TableHead>\n                      </>\n                    )}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {historyLogs.map((log) => (\n                    <TableRow key={log.id}>\n                      <TableCell>\n                        {log.workout_sessions?.session_date\n                          ? new Date(log.workout_sessions.session_date).toLocaleDateString()\n                          : (log.created_at ? new Date(log.created_at).toLocaleDateString() : '-')}\n                      </TableCell>\n                      {exerciseType === 'weight' && (\n                        <TableCell>\n                          {formatWeight(convertWeight(log.weight_kg, 'kg', preferredWeightUnit as 'kg' | 'lbs'), preferredWeightUnit as 'kg' | 'lbs')}\n                        </TableCell>\n                      )}\n                      {exerciseType === 'weight' && <TableCell>{log.reps ?? '-'}</TableCell>}\n                      {exerciseType === 'timed' && <TableCell>{log.time_seconds ?? '-'}</TableCell>}\n                      {exerciseCategory === 'Unilateral' && (\n                        <>\n                          <TableCell>{log.reps_l ?? '-'}</TableCell>\n                          <TableCell>{log.reps_r ?? '-'}</TableCell>\n                        </>\n                      )}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </ScrollArea>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4582},"apps/web/src/components/exercise-info-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info, Youtube, Search, Trash2 } from \"lucide-react\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase'; // Import FetchedExerciseDefinition\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { WorkoutBadge } from './workout-badge'; // Import WorkoutBadge\n\n// Removed local ExerciseDefinition definition\n\ninterface ExerciseInfoDialogProps {\n  open?: boolean; // Make open prop optional for controlled/uncontrolled usage\n  onOpenChange?: (open: boolean) => void; // Make onOpenChange prop optional\n  exercise: FetchedExerciseDefinition; // Use FetchedExerciseDefinition\n  trigger?: React.ReactNode;\n  exerciseWorkouts?: { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]; // Added isBonus\n  onRemoveFromWorkout?: (workoutId: string, exerciseId: string) => void;\n  onDeleteExercise?: (exercise: FetchedExerciseDefinition) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\n// Helper function to get YouTube embed URL\nconst getYouTubeEmbedUrl = (url: string | null | undefined): string | null => {\n  if (!url) return null;\n  const regExp = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([\\w-]{11})(?:\\S+)?/;\n  const match = url.match(regExp);\n  return match && match[1] ? `https://www.youtube.com/embed/${match[1]}` : null;\n};\n\nexport const ExerciseInfoDialog = ({ open, onOpenChange, exercise, trigger, exerciseWorkouts = [], onRemoveFromWorkout, onDeleteExercise, setTempStatusMessage }: ExerciseInfoDialogProps) => {\n  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);\n  const { session, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  // Determine if the dialog is controlled or uncontrolled\n  const isControlled = open !== undefined && onOpenChange !== undefined;\n  const currentOpen = isControlled ? open : useState(false)[0]; // Use internal state if uncontrolled\n  const setCurrentOpen = isControlled ? onOpenChange : useState(false)[1]; // Use internal state if uncontrolled\n\n  const handleGoogleSearch = () => {\n    const searchQuery = encodeURIComponent(`${exercise.name} exercise`);\n    window.open(`https://www.google.com/search?q=${searchQuery}`, '_blank');\n  };\n\n  const handleRemoveFromWorkoutClick = async (workoutId: string) => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (onRemoveFromWorkout) {\n      if (exercise.id === null) {\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return;\n      }\n      onRemoveFromWorkout(workoutId, exercise.id);\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  };\n\n  const handleDeleteExerciseClick = () => {\n    setIsDeleteConfirmOpen(true);\n  };\n\n  const confirmDeleteExercise = () => {\n    if (onDeleteExercise) {\n      onDeleteExercise(exercise);\n      setCurrentOpen(false); // Close info dialog after deletion\n    }\n    setIsDeleteConfirmOpen(false);\n  };\n\n  const embedVideoUrl = getYouTubeEmbedUrl(exercise.video_url);\n  // Only allow deletion if the exercise is user-created and not a global one\n  const canDeleteExercise = memoizedSessionUserId && exercise.user_id === memoizedSessionUserId && exercise.library_id === null && onDeleteExercise; // Use memoized ID\n\n  return (\n    <Dialog open={currentOpen} onOpenChange={setCurrentOpen}>\n      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>} {/* Only render trigger if provided */}\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-6 pb-4\">\n          <DialogTitle>{exercise.name} Information</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-grow overflow-y-auto px-6 pb-6 space-y-4\">\n          {embedVideoUrl && (\n            <div className=\"pb-4\">\n              <div className=\"relative w-full rounded-md overflow-hidden\" style={{ paddingBottom: '56.25%' }}>\n                <iframe\n                  className=\"absolute top-0 left-0 w-full h-full\"\n                  src={embedVideoUrl}\n                  title={`${exercise.name} video`}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <h4 className=\"font-semibold text-sm mb-1\">Main Muscle:</h4>\n            <p className=\"text-sm text-muted-foreground\">{exercise.main_muscle}</p>\n          </div>\n          {exercise.category && (\n            <div>\n              <h4 className=\"font-semibold text-sm mb-1\">Category:</h4>\n              <p className=\"text-sm text-muted-foreground\">{exercise.category}</p>\n            </div>\n          )}\n          {exercise.description && (\n            <div>\n              <h4 className=\"font-semibold text-sm mb-1\">Description:</h4>\n              <p className=\"text-sm text-muted-foreground\">{exercise.description}</p>\n            </div>\n          )}\n          {exercise.pro_tip && (\n            <div>\n              <h4 className=\"font-semibold text-sm mb-1\">Pro Tip:</h4>\n              <p className=\"text-sm text-muted-foreground\">{exercise.pro_tip}</p>\n            </div>\n          )}\n\n          {exerciseWorkouts.length > 0 && (\n            <div>\n              <h4 className=\"font-semibold text-sm mb-2\">Included in Workouts:</h4>\n              <ul className=\"space-y-1\">\n                {exerciseWorkouts.map(workout => (\n                  <li key={workout.id} className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <WorkoutBadge workoutName={workout.name}>{workout.name}</WorkoutBadge>\n                      {workout.isBonus && <WorkoutBadge workoutName=\"Bonus\">Bonus</WorkoutBadge>}\n                    </div>\n                    {workout.isUserOwned && onRemoveFromWorkout && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleRemoveFromWorkoutClick(workout.id)}\n                        className=\"h-auto p-1 text-destructive hover:text-destructive\"\n                        title={`Remove from ${workout.name}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          <Button variant=\"outline\" onClick={handleGoogleSearch} className=\"w-full\">\n            <Search className=\"h-4 w-4 mr-2\" /> Google Search\n          </Button>\n\n          {canDeleteExercise && (\n            <Button variant=\"destructive\" onClick={handleDeleteExerciseClick} className=\"w-full mt-4\">\n              <Trash2 className=\"h-4 w-4 mr-2\" /> Delete Exercise\n            </Button>\n          )}\n        </div>\n      </DialogContent>\n\n      <AlertDialog open={isDeleteConfirmOpen} onOpenChange={setIsDeleteConfirmOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the exercise \"{exercise.name}\" from your custom library.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setIsDeleteConfirmOpen(false)}>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmDeleteExercise}>Continue</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </Dialog>\n  );\n};","size_bytes":8557},"apps/web/src/components/exercise-swap-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"; // Add DialogTrigger\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables } from '@/types/supabase';\nimport { RefreshCcw, Sparkles } from \"lucide-react\";\nimport { LoadingOverlay } from '@/components/loading-overlay'; // Corrected import path\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ExerciseSwapDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  currentExercise: ExerciseDefinition;\n  onSwap: (newExercise: ExerciseDefinition) => void;\n}\n\nexport const ExerciseSwapDialog = ({ open, onOpenChange, currentExercise, onSwap }: ExerciseSwapDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [availableExercises, setAvailableExercises] = useState<ExerciseDefinition[]>([]);\n  const [selectedNewExerciseId, setSelectedNewExerciseId] = useState<string>(\"\");\n  const [loading, setLoading] = useState(true);\n  const [generatingAi, setGeneratingAi] = useState(false);\n\n  const fetchAvailableExercises = async () => {\n    if (!memoizedSessionUserId || !open) return; // Use memoized ID\n\n    setLoading(true);\n    try {\n      const { data: allMatchingExercises, error: fetchError } = await supabase\n        .from('exercise_definitions')\n        .select('id, name, main_muscle, type, category, description, pro_tip, video_url, user_id, library_id, created_at, is_favorite, icon_url, movement_type, movement_pattern') // Include new fields\n        .or(`user_id.eq.${memoizedSessionUserId},user_id.is.null`) // Use memoized ID\n        .eq('main_muscle', currentExercise.main_muscle)\n        .eq('type', currentExercise.type)\n        .neq('id', currentExercise.id)\n        .order('name', { ascending: true });\n\n      if (fetchError) throw fetchError;\n\n      // Filter out global exercises if a user-owned copy already exists\n      const userOwnedExerciseLibraryIds = new Set(\n        allMatchingExercises\n          .filter(ex => ex.user_id === memoizedSessionUserId && ex.library_id) // Use memoized ID\n          .map(ex => ex.library_id)\n      );\n\n      const filteredExercises = (allMatchingExercises as ExerciseDefinition[]).filter(ex => {\n        if (ex.user_id === null && ex.library_id && userOwnedExerciseLibraryIds.has(ex.library_id)) {\n          return false;\n        }\n        return true;\n      });\n\n      setAvailableExercises(filteredExercises || []);\n    } catch (err: any) {\n      console.error(\"Failed to fetch available exercises for swap:\", err);\n      toast.error(\"Failed to load swap options.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (open) {\n      fetchAvailableExercises();\n      setSelectedNewExerciseId(\"\");\n    }\n  }, [open, memoizedSessionUserId, supabase, currentExercise]); // Depend on memoized ID\n\n  // Removed adoptExercise function as per new requirements\n\n  const handleConfirmSwap = async () => {\n    const newExercise = availableExercises.find(ex => ex.id === selectedNewExerciseId);\n    if (!newExercise) {\n      toast.error(\"Please select an exercise to swap with.\");\n      return;\n    }\n\n    try {\n      // Directly use the newExercise, no adoption needed.\n      onSwap(newExercise);\n      onOpenChange(false);\n      toast.success(`Swapped with ${newExercise.name}`);\n    } catch (err: any) {\n      console.error(\"Failed to swap exercise:\", err);\n      toast.error(\"Failed to swap exercise.\");\n    }\n  };\n\n  const handleGenerateAiSuggestion = async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      toast.error(\"You must be logged in to generate AI suggestions.\");\n      return;\n    }\n    setGeneratingAi(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('generate-exercise-suggestion', {\n        body: {\n          main_muscle: currentExercise.main_muscle,\n          type: currentExercise.type,\n          category: currentExercise.category,\n          saveScope: 'user', // Save as a user-owned exercise\n        },\n        headers: {\n          Authorization: `Bearer ${session?.access_token}`, // Use session?.access_token\n        },\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      const newAiExercise = data.newExercise;\n      if (newAiExercise) {\n        setAvailableExercises(prev => [...prev, newAiExercise]);\n        toast.success(\"AI generated a new exercise suggestion!\");\n      } else {\n        toast.error(\"AI did not return a valid exercise.\");\n      }\n    } catch (err: any) {\n      console.error(\"Failed to generate AI suggestion:\", err);\n      toast.error(\"Failed to generate AI suggestion.\");\n    } finally {\n      setGeneratingAi(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Swap Exercise: {currentExercise.name}</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Select an alternative exercise for the same muscle group and type.\n          </p>\n          {loading ? (\n            <p className=\"text-muted-foreground text-center\">Loading exercises...</p>\n          ) : availableExercises.length === 0 && !generatingAi ? (\n            <div className=\"text-center space-y-4\">\n              <p className=\"text-muted-foreground\">\n                No suitable alternative exercises found in your library or global defaults.\n              </p>\n              <Button onClick={handleGenerateAiSuggestion} disabled={generatingAi}>\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                {generatingAi ? \"Generating...\" : \"Generate AI Suggestion\"}\n              </Button>\n            </div>\n          ) : (\n            <>\n              <Select onValueChange={setSelectedNewExerciseId} value={selectedNewExerciseId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a new exercise\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableExercises.map(ex => (\n                    <SelectItem key={ex.id} value={ex.id}>\n                      {ex.name} ({ex.main_muscle})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button onClick={handleConfirmSwap} disabled={!selectedNewExerciseId || loading || generatingAi}>\n                <RefreshCcw className=\"h-4 w-4 mr-2\" /> Confirm Swap\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleGenerateAiSuggestion}\n                disabled={generatingAi}\n              >\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                {generatingAi ? \"Generating...\" : \"Generate More Suggestions\"}\n              </Button>\n            </>\n          )}\n        </div>\n      </DialogContent>\n      <LoadingOverlay\n        isOpen={generatingAi}\n        title=\"Generating AI Suggestion\"\n        description=\"Please wait while the AI suggests a new exercise.\"\n      />\n    </Dialog>\n  );\n};","size_bytes":7532},"apps/web/src/components/gym-context-provider.tsx":{"content":"\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { Session, SupabaseClient } from '@supabase/supabase-js';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables, Profile } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { db, LocalGym } from '@/lib/db';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\n\ntype Gym = Tables<'gyms'>;\n\ninterface GymContextType {\n  userGyms: Gym[];\n  activeGym: Gym | null;\n  switchActiveGym: (gymId: string) => Promise<boolean>; // Returns success status\n  loadingGyms: boolean;\n  refreshGyms: () => void;\n}\n\nconst GymContext = createContext<GymContextType | undefined>(undefined);\n\nexport const GymContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const { session, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [activeGym, setActiveGym] = useState<Gym | null>(null);\n\n  const { data: cachedGyms, loading: loadingGymsFromCache, error: gymsError, refresh: refreshGyms } = useCacheAndRevalidate<LocalGym>({\n    cacheTable: 'gyms_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('gyms').select('*').eq('user_id', memoizedSessionUserId); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'user_gyms',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedProfile, loading: loadingProfileFromCache, error: profileError, refresh: refreshProfile } = useCacheAndRevalidate<Profile>({\n    cacheTable: 'profiles_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('profiles').select('*').eq('id', memoizedSessionUserId); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'user_profile_for_gym_context',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  // Combine loading states to prevent flicker\n  const loadingGyms = loadingGymsFromCache || loadingProfileFromCache;\n\n  useEffect(() => {\n    const combinedError = gymsError || profileError;\n    if (combinedError) {\n      toast.error(\"Failed to load gym or profile data.\");\n      console.error(\"GymContext Error:\", combinedError);\n    }\n  }, [gymsError, profileError]);\n\n  useEffect(() => {\n    // Only process if not loading and all data is available\n    if (loadingGyms || !cachedProfile || !cachedGyms) {\n      return;\n    }\n\n    const profile = cachedProfile?.[0];\n    const gyms = cachedGyms || [];\n    if (profile && gyms.length > 0) {\n      const activeGymId = profile.active_gym_id;\n      let newActiveGym = activeGymId ? gyms.find(g => g.id === activeGymId) : null;\n      // If no active gym is set in profile, or the set one doesn't exist, default to the first gym\n      if (!newActiveGym) {\n        newActiveGym = gyms[0];\n      }\n      setActiveGym(newActiveGym || null);\n    } else {\n      setActiveGym(null);\n    }\n  }, [cachedGyms, cachedProfile, loadingGyms]);\n\n  const switchActiveGym = useCallback(async (gymId: string): Promise<boolean> => {\n    if (!session) {\n      console.error(\"Error: User not authenticated when trying to switch active gym.\");\n      toast.error(\"You must be logged in to switch active gym.\");\n      return false;\n    }\n    const newActiveGym = (cachedGyms || []).find(g => g.id === gymId);\n    if (!newActiveGym) {\n      console.error(\"Error: New active gym not found in cached gyms.\");\n      toast.error(\"Selected gym not found.\");\n      return false;\n    }\n\n    const previousActiveGym = activeGym;\n    setActiveGym(newActiveGym); // Optimistic update\n\n    try {\n      const response = await fetch('/api/switch-active-gym', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session.access_token}` },\n        body: JSON.stringify({ gymId }),\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Failed to switch active gym.');\n      \n      // Refreshing the profile is enough to trigger downstream updates\n      await refreshProfile();\n\n      return true;\n    } catch (error: any) {\n      console.error(\"Error switching active gym:\", error.message);\n      toast.error(error.message || \"Failed to switch active gym.\");\n      setActiveGym(previousActiveGym); // Rollback\n      return false;\n    }\n  }, [session, cachedGyms, activeGym, refreshProfile]);\n\n  const contextValue = useMemo(() => ({\n    userGyms: cachedGyms || [],\n    activeGym,\n    switchActiveGym,\n    loadingGyms, // This is now the combined loading state\n    refreshGyms,\n  }), [cachedGyms, activeGym, switchActiveGym, loadingGyms, refreshGyms]);\n\n  return (\n    <GymContext.Provider value={contextValue}>\n      {children}\n    </GymContext.Provider>\n  );\n};\n\nexport const useGym = () => {\n  const context = useContext(GymContext);\n  if (context === undefined) {\n    throw new Error('useGym must be used within a GymContextProvider');\n  }\n  return context;\n};","size_bytes":5354},"apps/web/src/components/layout/header.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport { Home, Dumbbell, LayoutTemplate, History, User, BarChart3, PanelLeft, Plus } from \"lucide-react\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { UserNav } from \"./user-nav\";\nimport { NotificationBell } from \"./notification-bell\";\nimport { ActivityLoggingDialog } from \"../activity-logging-dialog\";\nimport { useScrollPosition } from \"@/hooks/use-scroll-position\";\nimport { cn } from \"@/lib/utils\";\nimport { RollingStatusBadge } from \"./rolling-status-badge\";\nimport { WorkoutAwareLink } from \"../workout-flow/workout-aware-link\"; // Import WorkoutAwareLink\nimport { usePathname } from \"next/navigation\"; // Import usePathname to check active link\n\nconst mobileNavLinks = [\n  { href: \"/dashboard\", label: \"Dashboard\", icon: Home }, // Reverted to Dashboard\n  { href: \"/workout-history\", label: \"History\", icon: History },\n  { href: \"/activity-logs\", label: \"Activities\", icon: BarChart3 },\n  { href: \"/manage-exercises\", label: \"Exercises\", icon: Dumbbell },\n  { href: \"/manage-t-paths\", label: \"Management\", icon: LayoutTemplate }, // CHANGED LABEL\n  { href: \"/profile\", label: \"Profile\", icon: User },\n  { href: \"/workout\", label: \"Workout\", icon: Dumbbell }, // Moved workout here for consistent styling\n];\n\ninterface HeaderProps {\n  isGeneratingPlan: boolean;\n  tempStatusMessage: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null; // NEW\n}\n\nexport function Header({ isGeneratingPlan, tempStatusMessage }: HeaderProps) { // NEW PROP\n  const [isActivityLogOpen, setIsActivityLogOpen] = useState(false);\n  const [isSheetOpen, setIsSheetOpen] = useState(false); // NEW: State for sheet\n  const isScrolled = useScrollPosition();\n  const pathname = usePathname(); // Get current pathname\n\n  return (\n    <>\n      <header className={cn(\n        \"sticky top-0 z-30 flex h-14 items-center gap-4 border-b px-4 sm:static sm:h-auto sm:border-0 sm:px-6\",\n        \"transition-all duration-300 ease-in-out\",\n        isScrolled ? \"bg-background/80 backdrop-blur-md border-b-transparent\" : \"bg-background border-b\"\n      )}>\n        <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}> {/* Bind state */}\n          <SheetTrigger asChild>\n            <Button size=\"icon\" variant=\"outline\" className=\"sm:hidden\">\n              <span>\n                <PanelLeft className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Toggle Menu</span>\n              </span>\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"sm:max-w-xs\">\n            <nav className=\"grid gap-1 text-lg font-medium overflow-y-auto h-full py-1\"> {/* Reduced gap, py */}\n              {mobileNavLinks.map(link => {\n                const isActive = pathname === link.href;\n                const Icon = link.icon;\n                return (\n                  <WorkoutAwareLink\n                    key={link.href}\n                    href={link.href}\n                    className={cn(\n                      \"flex items-center gap-2 px-2 py-1.5 rounded-lg transition-colors\", // Adjusted px, py, gap\n                      isActive \n                        ? \"bg-action text-action-foreground font-semibold shadow-md\" \n                        : \"text-foreground hover:bg-muted\"\n                    )}\n                    onClick={() => setIsSheetOpen(false)} // NEW: Close sheet on click\n                  >\n                    <Icon className={cn(\"h-4 w-4\", isActive ? \"text-action-foreground\" : \"text-primary\")} /> {/* Reduced h/w */}\n                    {link.label}\n                  </WorkoutAwareLink>\n                );\n              })}\n              <hr className=\"my-2\" />\n              <Button \n                variant=\"default\" \n                className=\"flex items-center gap-2 px-2 py-1.5 rounded-lg justify-start text-lg font-medium bg-primary text-primary-foreground hover:bg-primary/90\" // Styled as a primary button\n                onClick={() => {\n                  setIsActivityLogOpen(true);\n                  setIsSheetOpen(false); // NEW: Close sheet on click\n                }}\n              >\n                <Plus className=\"h-4 w-4 text-primary-foreground\" /> {/* Reduced h/w */}\n                Log Activity\n              </Button>\n            </nav>\n          </SheetContent>\n        </Sheet>\n        <div className=\"relative ml-auto flex flex-1 items-center justify-end gap-2 md:grow-0\">\n          <RollingStatusBadge \n            isGeneratingPlan={isGeneratingPlan} \n            tempStatusMessage={tempStatusMessage} // NEW\n          />\n          <NotificationBell />\n          <UserNav />\n        </div>\n      </header>\n\n      <ActivityLoggingDialog open={isActivityLogOpen} onOpenChange={setIsActivityLogOpen} />\n    </>\n  );\n}","size_bytes":4892},"apps/web/src/components/layout/mobile-footer-nav.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { Home, Dumbbell, BookOpen, BarChart3, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { WorkoutAwareLink } from \"../workout-flow/workout-aware-link\"; // Import WorkoutAwareLink\n\nconst navLinks = [\n  { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n  { href: \"/workout\", label: \"Workout\", icon: Dumbbell },\n  { href: \"/manage-exercises\", label: \"Exercises\", icon: BookOpen },\n  { href: \"/progress\", label: \"Progress\", icon: BarChart3 },\n  { href: \"/profile\", label: \"Profile\", icon: User },\n];\n\nexport function MobileFooterNav() {\n  const pathname = usePathname();\n\n  return (\n    <footer className=\"fixed bottom-0 left-0 z-10 w-full border-t bg-background sm:hidden\">\n      <nav className=\"grid h-16 grid-cols-5\">\n        {navLinks.map((link) => {\n          const isActive = pathname === link.href;\n          const Icon = link.icon;\n          return (\n            <WorkoutAwareLink\n              key={link.href}\n              href={link.href}\n              className={cn(\n                \"flex flex-col items-center justify-center gap-1 pt-2 text-xs font-medium transition-colors\",\n                isActive ? \"text-action\" : \"text-muted-foreground hover:text-foreground/80\"\n              )}\n            >\n              <Icon className=\"h-5 w-5\" strokeWidth={2.5} />\n              {/* Removed the text label from here */}\n            </WorkoutAwareLink>\n          );\n        })}\n      </nav>\n    </footer>\n  );\n}","size_bytes":1539},"apps/web/src/components/layout/notification-bell.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bell, CheckCheck, AlertCircle } from \"lucide-react\"; // Added AlertCircle\nimport { toast } from \"sonner\";\nimport { ScrollArea } from '../ui/scroll-area';\nimport { Badge } from '../ui/badge';\nimport { Tables } from '@/types/supabase'; // Import Tables\n\ninterface Notification {\n  id: string;\n  title: string;\n  message: string;\n  created_at: string;\n  is_read: boolean;\n  type: string; // Added type\n}\n\ninterface UserAlert {\n  id: string;\n  title: string;\n  message: string;\n  created_at: string;\n  is_read: boolean;\n  type: string;\n}\n\nexport function NotificationBell() {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [userAlerts, setUserAlerts] = useState<UserAlert[]>([]); // New state for user alerts\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [open, setOpen] = useState(false);\n\n  const fetchNotifications = useCallback(async () => {\n    if (!memoizedSessionUserId) return; // Use memoized ID\n    setLoading(true);\n    try {\n      // Fetch global notifications\n      const { data: globalNotifications, error: globalError } = await supabase.rpc('get_notifications_with_read_status');\n      if (globalError) throw globalError;\n\n      // Fetch user-specific alerts\n      const { data: fetchedUserAlerts, error: userAlertsError } = await supabase\n        .from('user_alerts')\n        .select('id, title, message, created_at, is_read, type')\n        .eq('user_id', memoizedSessionUserId) // Use memoized ID\n        .order('created_at', { ascending: false });\n      if (userAlertsError) throw userAlertsError;\n\n      const allNotifications: (Notification | UserAlert)[] = [\n        ...(globalNotifications as Notification[] || []),\n        ...(fetchedUserAlerts as UserAlert[] || []),\n      ];\n\n      // Sort all notifications by creation date descending\n      allNotifications.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n\n      setNotifications(allNotifications as Notification[]); // Cast back to Notification[] for combined list\n      setUnreadCount(allNotifications.filter(n => !n.is_read).length);\n    } catch (error: any) {\n      console.error(\"Error fetching notifications:\", error);\n      toast.error(\"Failed to fetch notifications: \" + error.message); // Changed to toast.error\n    } finally {\n      setLoading(false);\n    }\n  }, [memoizedSessionUserId, supabase]); // Depend on memoized ID\n\n  useEffect(() => {\n    if (memoizedSessionUserId) { // Use memoized ID\n      fetchNotifications();\n    }\n  }, [memoizedSessionUserId, fetchNotifications]); // Depend on memoized ID\n\n  const handleMarkAllAsRead = async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      toast.error(\"You must be logged in to mark notifications as read.\"); // Added toast.error\n      return;\n    }\n\n    const unreadGlobalNotifications = notifications.filter(n => !n.is_read && n.type !== 'system_error' && n.type !== 'achievement_error');\n    const unreadUserAlerts = notifications.filter(n => !n.is_read && (n.type === 'system_error' || n.type === 'achievement_error'));\n\n    if (unreadGlobalNotifications.length === 0 && unreadUserAlerts.length === 0) {\n      toast.info(\"No unread notifications.\");\n      return;\n    }\n\n    let hasError = false;\n\n    // Mark global notifications as read\n    if (unreadGlobalNotifications.length > 0) {\n      const recordsToInsert = unreadGlobalNotifications.map(n => ({\n        user_id: memoizedSessionUserId, // Use memoized ID\n        notification_id: n.id,\n        read_at: new Date().toISOString(),\n      }));\n      const { error } = await supabase.from('user_notifications').insert(recordsToInsert);\n      if (error) {\n        console.error(\"Error marking global notifications as read:\", error);\n        hasError = true;\n      }\n    }\n\n    // Mark user alerts as read\n    if (unreadUserAlerts.length > 0) {\n      const alertIdsToUpdate = unreadUserAlerts.map(a => a.id);\n      const { error } = await supabase.from('user_alerts').update({ is_read: true }).in('id', alertIdsToUpdate);\n      if (error) {\n        console.error(\"Error marking user alerts as read:\", error);\n        hasError = true;\n      }\n    }\n\n    if (hasError) {\n      toast.error(\"Failed to mark some notifications as read.\"); // Changed to toast.error\n    } else {\n      toast.success(\"All notifications marked as read.\");\n      fetchNotifications(); // Refresh the list\n      setOpen(false);\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"relative\">\n          <span>\n            <Bell className=\"h-4 w-4\" />\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 justify-center rounded-full p-0 text-xs\">\n                {unreadCount}\n              </Badge>\n            )}\n          </span>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\" align=\"end\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h4 className=\"font-medium text-sm\">Notifications</h4>\n          {unreadCount > 0 && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleMarkAllAsRead}>\n              <CheckCheck className=\"h-4 w-4 mr-2\" /> Mark all as read\n            </Button>\n          )}\n        </div>\n        <ScrollArea className=\"h-72\">\n          {loading ? (\n            <p className=\"text-sm text-muted-foreground text-center\">Loading...</p>\n          ) : notifications.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground text-center\">No notifications yet.</p>\n          ) : (\n            <div className=\"space-y-2\">\n              {notifications.map(n => (\n                <div key={n.id} className={`p-2 rounded-md ${!n.is_read ? 'bg-accent' : ''}`}>\n                  <p className=\"font-semibold text-sm flex items-center gap-2\">\n                    {n.type === 'system_error' || n.type === 'achievement_error' ? (\n                      <AlertCircle className=\"h-4 w-4 text-destructive\" />\n                    ) : null}\n                    {n.title}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">{n.message}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">{new Date(n.created_at).toLocaleString()}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6904},"apps/web/src/components/layout/rolling-status-badge.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Badge } from \"@/components/ui/badge\";\nimport { Flame, Dumbbell, CheckCircle, Clock, AlertCircle, WifiOff, Loader2, Heart } from \"lucide-react\"; // Added WifiOff, Loader2, Heart\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { useSyncManager } from '@/hooks/use-sync-manager'; // Import useSyncManager\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog'; // Import Dialog components\nimport { ScrollArea } from '@/components/ui/scroll-area'; // Import ScrollArea\n\nconst StatusInfoModal = () => (\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Workout Status Explained</DialogTitle>\n      <DialogDescription>\n        Your status reflects your workout consistency over time. It also provides temporary updates and shows your connection status.\n      </DialogDescription>\n    </DialogHeader>\n    <ScrollArea className=\"max-h-[70vh] pr-4\"> {/* Added ScrollArea here */}\n      <div className=\"space-y-4 py-4\">\n        <div className=\"flex items-start gap-3\">\n          <Dumbbell className=\"h-5 w-5 text-gray-500 flex-shrink-0 mt-1\" />\n          <div>\n            <h4 className=\"font-semibold\">Getting into it</h4>\n            <p className=\"text-sm text-muted-foreground\">You're just getting started or have had a break of more than a week. Keep it up!</p>\n          </div>\n        </div>\n        <div className=\"flex items-start gap-3\">\n          <CheckCircle className=\"h-5 w-5 text-blue-500 flex-shrink-0 mt-1\" />\n          <div>\n            <h4 className=\"font-semibold\">Building Momentum</h4>\n            <p className=\"text-sm text-muted-foreground\">You've been working out consistently for 1-3 weeks.</p>\n          </div>\n        </div>\n        <div className=\"flex items-start gap-3\">\n          <Flame className=\"h-5 w-5 text-orange-500 flex-shrink-0 mt-1\" />\n          <div>\n            <h4 className=\"font-semibold\">In the Zone</h4>\n            <p className=\"text-sm text-muted-foreground\">You've maintained your workout habit for 4-7 consecutive weeks.</p>\n          </div>\n        </div>\n        <div className=\"flex items-start gap-3\">\n          <Flame className=\"h-5 w-5 text-red-500 fill-red-500 flex-shrink-0 mt-1\" />\n          <div>\n            <h4 className=\"font-semibold\">On Fire</h4>\n            <p className=\"text-sm text-muted-foreground\">Incredible consistency! You've been working out for 8+ weeks straight.</p>\n          </div>\n        </div>\n        <div className=\"flex items-start gap-3\">\n          <WifiOff className=\"h-5 w-5 text-red-500 flex-shrink-0 mt-1\" />\n          <div>\n            <h4 className=\"font-semibold\">Offline</h4>\n            <p className=\"text-sm text-muted-foreground\">You are currently offline. Your progress is being saved locally and will sync when you reconnect.</p>\n          </div>\n        </div>\n      </div>\n    </ScrollArea>\n  </DialogContent>\n);\n\ninterface RollingStatusBadgeProps {\n  isGeneratingPlan: boolean;\n  tempStatusMessage: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null; // NEW\n}\n\nexport function RollingStatusBadge({ isGeneratingPlan, tempStatusMessage }: RollingStatusBadgeProps) { // NEW PROP\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const { isOnline } = useSyncManager(); // Get isOnline status\n  const [status, setStatus] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchStatusData = async () => {\n      if (!memoizedSessionUserId) { // Use memoized ID\n        setLoading(false);\n        return;\n      }\n      setLoading(true);\n      try {\n        const { data: profileData, error } = await supabase\n          .from('profiles')\n          .select('rolling_workout_status')\n          .eq('id', memoizedSessionUserId) // Use memoized ID\n          .single();\n\n        if (error && error.code !== 'PGRST116') { // PGRST116 means no rows found\n          throw error;\n        }\n\n        const fetchedStatus = profileData?.rolling_workout_status || 'Getting into it';\n        console.log(\"Fetched rolling_workout_status:\", fetchedStatus); // Debugging log\n        setStatus(fetchedStatus);\n      } catch (error) {\n        console.error(\"Failed to fetch rolling status data:\", error);\n        setStatus('Error'); // Indicate an error state\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Only fetch status if online, otherwise immediately show offline\n    if (isOnline) {\n      fetchStatusData();\n    } else {\n      setStatus('Offline');\n      setLoading(false);\n    }\n  }, [memoizedSessionUserId, supabase, isOnline]); // Added memoized ID to dependencies\n\n  // NEW: Prioritize tempStatusMessage\n  if (tempStatusMessage) {\n    const isSuccess = tempStatusMessage.type === 'success';\n    const isAdded = tempStatusMessage.type === 'added';\n    return (\n      <Badge\n        className={cn(\n          \"flex items-center gap-1 px-3 py-1 text-sm font-semibold transition-opacity duration-300\",\n          isSuccess || isAdded ? 'bg-green-500 text-white' : 'bg-red-500 text-white'\n        )}\n      >\n        {isSuccess ? <CheckCircle className=\"h-4 w-4\" /> : <Heart className=\"h-4 w-4\" />}\n        <span>{tempStatusMessage.message}</span>\n      </Badge>\n    );\n  }\n\n  if (isGeneratingPlan) {\n    return (\n      <Badge variant=\"secondary\" className=\"flex items-center gap-1 px-3 py-1 text-sm font-semibold bg-blue-100 text-blue-700 border-blue-300 dark:bg-blue-800 dark:text-blue-300 dark:border-blue-700\">\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n        <span>Updating Plan...</span>\n      </Badge>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n        <span className=\"font-semibold text-muted-foreground\">Loading Status...</span>\n      </Badge>\n    );\n  }\n\n  if (!isOnline) {\n    return (\n      <Dialog>\n        <DialogTrigger asChild>\n          <Badge variant=\"destructive\" className=\"flex items-center gap-1 px-3 py-1 text-sm font-semibold bg-red-100 text-red-700 border-red-300 dark:bg-red-800 dark:text-red-300 dark:border-red-700 cursor-pointer\">\n            <WifiOff className=\"h-4 w-4 text-red-500\" />\n            <span>Offline</span>\n          </Badge>\n        </DialogTrigger>\n        <StatusInfoModal />\n      </Dialog>\n    );\n  }\n\n  let badgeIcon: React.ReactNode;\n  let badgeColorClass: string;\n  let displayText = status; // Default to fetched status\n\n  switch (status) {\n    case 'Ready to Start':\n      displayText = 'Getting into it'; // Force display to new text\n      badgeIcon = <Dumbbell className=\"h-4 w-4 text-gray-400\" />;\n      badgeColorClass = 'bg-gray-100 text-gray-700 border-gray-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n      break;\n    case 'Getting into it':\n      badgeIcon = <Dumbbell className=\"h-4 w-4 text-gray-400\" />;\n      badgeColorClass = 'bg-gray-100 text-gray-700 border-gray-300 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n      break;\n    case 'Building Momentum':\n      badgeIcon = <CheckCircle className=\"h-4 w-4 text-blue-500\" />;\n      badgeColorClass = 'bg-blue-100 text-blue-700 border-blue-300 dark:bg-blue-800 dark:text-blue-300 dark:border-blue-700';\n      break;\n    case 'In the Zone':\n      badgeIcon = <Flame className=\"h-4 w-4 text-orange-500\" />;\n      badgeColorClass = 'bg-orange-100 text-orange-700 border-orange-300 dark:bg-orange-800 dark:text-orange-300 dark:border-orange-700';\n      break;\n    case 'On Fire':\n      badgeIcon = <Flame className=\"h-4 w-4 text-red-500 fill-red-500\" />;\n      badgeColorClass = 'bg-red-100 text-red-700 border-red-300 dark:bg-red-800 dark:text-red-300 dark:border-red-700';\n      break;\n    default:\n      badgeIcon = <AlertCircle className=\"h-4 w-4 text-destructive\" />;\n      badgeColorClass = 'bg-destructive/10 text-destructive border-destructive/30';\n      displayText = status; // Use the error status directly\n      break;\n  }\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Badge variant=\"outline\" className={cn(\"flex items-center gap-1 px-3 py-1 text-sm font-semibold cursor-pointer\", badgeColorClass)}>\n          {badgeIcon}\n          <span>{displayText}</span>\n        </Badge>\n      </DialogTrigger>\n      <StatusInfoModal />\n    </Dialog>\n  );\n}","size_bytes":8535},"apps/web/src/components/layout/sidebar.tsx":{"content":"\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { Home, History, User, BarChart3, Dumbbell, LayoutTemplate, Plus } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { WorkoutAwareLink } from \"../workout-flow/workout-aware-link\";\nimport { ActivityLoggingDialog } from \"../activity-logging-dialog\";\nimport { useState } from \"react\";\n\nconst mainNavLinks = [\n  { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n  { href: \"/workout\", label: \"Workout\", icon: Dumbbell },\n  { href: \"/workout-history\", label: \"Workout History\", icon: History },\n  { href: \"/activity-logs\", label: \"Activity Logs\", icon: BarChart3 },\n  { href: \"/manage-exercises\", label: \"Manage Exercises\", icon: Dumbbell },\n  { href: \"/manage-t-paths\", label: \"Management\", icon: LayoutTemplate },\n  { href: \"/profile\", label: \"My Profile\", icon: User },\n];\n\nexport function Sidebar() {\n  const pathname = usePathname();\n  const [isActivityLogOpen, setIsActivityLogOpen] = useState(false);\n\n  return (\n    <>\n      <aside className=\"fixed inset-y-0 left-0 z-10 hidden w-14 flex-col border-r bg-background sm:flex\">\n        <nav className=\"flex flex-col items-center gap-1 px-2 sm:py-3\">\n          {mainNavLinks.map((link) => {\n            const isActive = pathname === link.href;\n            const Icon = link.icon;\n            return (\n              <Tooltip key={link.href}>\n                <TooltipTrigger asChild>\n                  <WorkoutAwareLink\n                    href={link.href}\n                    className={cn(\n                      \"flex h-7 w-7 items-center justify-center rounded-lg transition-colors\",\n                      isActive ? \"bg-accent text-accent-foreground\" : \"text-muted-foreground hover:text-foreground\"\n                    )}\n                  >\n                    <span>\n                      <Icon className=\"h-3.5 w-3.5\" />\n                      <span className=\"sr-only\">{link.label}</span>\n                    </span>\n                  </WorkoutAwareLink>\n                </TooltipTrigger>\n                <TooltipContent side=\"right\">{link.label}</TooltipContent>\n              </Tooltip>\n            );\n          })}\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"flex h-7 w-7 items-center justify-center rounded-lg transition-colors text-muted-foreground hover:text-foreground\"\n                onClick={() => setIsActivityLogOpen(true)}\n              >\n                <Plus className=\"h-3.5 w-3.5\" />\n                <span className=\"sr-only\">Log Activity</span>\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\">Log Activity</TooltipContent>\n          </Tooltip>\n        </nav>\n      </aside>\n      <ActivityLoggingDialog open={isActivityLogOpen} onOpenChange={setIsActivityLogOpen} />\n    </>\n  );\n};","size_bytes":3083},"apps/web/src/components/layout/user-nav.tsx":{"content":"\"use client\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { useRouter } from \"next/navigation\";\nimport { LogOut, User } from \"lucide-react\";\nimport Link from \"next/link\";\n\nexport function UserNav() {\n  const { session, supabase } = useSession();\n  const router = useRouter();\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut();\n    router.push('/login');\n  };\n\n  if (!session) {\n    return null;\n  }\n\n  // Access user_metadata directly from session.user\n  const user = session.user;\n  const userInitial = user.email ? user.email[0].toUpperCase() : '?';\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src={user.user_metadata?.avatar_url} alt=\"User avatar\" />\n            <AvatarFallback>{userInitial}</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">\n              {user.user_metadata?.first_name || 'Athlete'}\n            </p>\n            <p className=\"text-xs leading-none text-muted-foreground\">\n              {user.email}\n            </p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <Link href=\"/profile\">\n            <DropdownMenuItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </DropdownMenuItem>\n          </Link>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem onClick={handleSignOut}>\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>Log out</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":2326},"apps/web/src/components/loading-overlay.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface LoadingOverlayProps {\n  isOpen: boolean;\n  title?: string;\n  description?: string;\n}\n\nexport const LoadingOverlay = ({ isOpen, title = \"Processing...\", description = \"Please wait while we update your data.\" }: LoadingOverlayProps) => {\n  return (\n    <Dialog open={isOpen}>\n      <DialogContent className=\"max-w-sm flex flex-col items-center justify-center text-center p-8\">\n        <Loader2 className=\"h-10 w-10 animate-spin text-primary mb-4\" />\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>{description}</DialogDescription>\n        </DialogHeader>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":850},"apps/web/src/components/manage-exercises/add-exercise-to-tpath-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase'; // Import FetchedExerciseDefinition\nimport { PlusCircle } from \"lucide-react\";\n\n// Removed local ExerciseDefinition definition\n\ntype TPath = Tables<'t_paths'>;\ntype Profile = Tables<'profiles'>;\n\ninterface AddExerciseToTPathDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exercise: FetchedExerciseDefinition; // Use FetchedExerciseDefinition\n  onAddSuccess: () => void;\n  onOptimisticAdd: (exerciseId: string, workoutId: string, workoutName: string, isBonus: boolean) => void; // Updated type\n  onAddFailure: (exerciseId: string, workoutId: string) => void; // Updated type\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const AddExerciseToTPathDialog = ({ open, onOpenChange, exercise, onAddSuccess, onOptimisticAdd, onAddFailure, setTempStatusMessage }: AddExerciseToTPathDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [userWorkouts, setUserWorkouts] = useState<TPath[]>([]);\n  const [selectedWorkoutId, setSelectedWorkoutId] = useState<string>(\"\");\n  const [loading, setLoading] = useState(true);\n  const [isAdding, setIsAdding] = useState(false);\n\n  useEffect(() => {\n    const fetchUserWorkouts = async () => {\n      if (!memoizedSessionUserId) return; // Use memoized ID\n\n      setLoading(true);\n      try {\n        // First, get the user's active_t_path_id from their profile\n        const { data: profileData, error: profileError } = await supabase\n          .from('profiles')\n          .select('active_t_path_id')\n          .eq('id', memoizedSessionUserId) // Use memoized ID\n          .single();\n\n        if (profileError && profileError.code !== 'PGRST116') {\n          throw profileError;\n        }\n\n        const activeTPathId = profileData?.active_t_path_id;\n\n        if (!activeTPathId) {\n          setUserWorkouts([]);\n          setTempStatusMessage({ message: \"No active plan!\", type: 'error' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n          setLoading(false);\n          return;\n        }\n\n        // Then, fetch only the child T-Paths (workouts) that belong to the active T-Path\n        const { data, error } = await supabase\n          .from('t_paths')\n          .select('id, template_name, created_at, is_bonus, user_id, version, settings, progression_settings, parent_t_path_id') // Specify all columns required by TPath\n          .eq('user_id', memoizedSessionUserId) // Use memoized ID\n          .eq('is_bonus', true) // These are the individual workouts within a main T-Path\n          .eq('parent_t_path_id', activeTPathId) // Filter by the active parent T-Path\n          .order('template_name', { ascending: true });\n\n        if (error) throw error;\n        setUserWorkouts(data as TPath[] || []); // Explicitly cast\n      } catch (err: any) {\n        console.error(\"Failed to fetch user workouts:\", err);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (open) {\n      fetchUserWorkouts();\n      setSelectedWorkoutId(\"\"); // Reset selection when opening\n    }\n  }, [open, memoizedSessionUserId, supabase, setTempStatusMessage]); // Depend on memoized ID\n\n  // Removed adoptExercise function as per new requirements\n\n  const handleAddToWorkout = async () => {\n    if (!memoizedSessionUserId || !selectedWorkoutId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Select workout!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsAdding(true);\n    let workoutName = userWorkouts.find(w => w.id === selectedWorkoutId)?.template_name || 'Unknown Workout';\n\n    try {\n      // Optimistic update: Update UI immediately\n      // We use the original exercise.id directly, as no adoption is happening.\n      if (exercise.id === null) {\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        setIsAdding(false);\n        return;\n      }\n      onOptimisticAdd(exercise.id, selectedWorkoutId, workoutName, false); // Assuming not bonus for now\n\n      // 2. Determine the next order_index for the selected workout\n      const { data: existingExercises, error: fetchExistingError } = await supabase\n        .from('t_path_exercises')\n        .select('order_index')\n        .eq('template_id', selectedWorkoutId)\n        .order('order_index', { ascending: false })\n        .limit(1);\n\n      if (fetchExistingError) throw fetchExistingError;\n\n      const nextOrderIndex = (existingExercises && existingExercises.length > 0)\n        ? (existingExercises[0].order_index || 0) + 1\n        : 0;\n\n      // 3. Insert into t_path_exercises, directly linking to the exercise.id\n      const { error: insertError } = await supabase\n        .from('t_path_exercises')\n        .insert({\n          template_id: selectedWorkoutId,\n          exercise_id: exercise.id, // Use the original exercise ID\n          order_index: nextOrderIndex,\n        });\n\n      if (insertError) {\n        if (insertError.code === '23505') { // Unique violation code\n          setTempStatusMessage({ message: \"Duplicate!\", type: 'error' });\n        } else {\n          throw insertError;\n        }\n        onAddFailure(exercise.id, selectedWorkoutId); // Rollback on error\n      } else {\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n        onAddSuccess(); // Notify parent to refresh data\n        onOpenChange(false);\n      }\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to add exercise to workout:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      if (exercise.id) { // Only call onAddFailure if exercise.id is not null\n        onAddFailure(exercise.id, selectedWorkoutId); // Rollback on error\n      }\n    } finally {\n      setIsAdding(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add \"{exercise.name}\" to a Workout</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Select one of your personalised workouts to add this exercise to.\n            This will permanently add it to the workout template.\n          </p>\n          {loading ? (\n            <p className=\"text-center text-muted-foreground\">Loading your workouts...</p>\n          ) : userWorkouts.length === 0 ? (\n            <p className=\"text-center text-muted-foreground\">\n              You don't have any workouts in your active Transformation Path.\n            </p>\n          ) : (\n            <Select onValueChange={setSelectedWorkoutId} value={selectedWorkoutId}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a workout\" />\n              </SelectTrigger>\n              <SelectContent>\n                {userWorkouts.map(workout => (\n                  <SelectItem key={workout.id} value={workout.id}>\n                    {workout.template_name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          )}\n          <Button onClick={handleAddToWorkout} disabled={!selectedWorkoutId || isAdding || loading}>\n            <PlusCircle className=\"h-4 w-4 mr-2\" />\n            {isAdding ? \"Adding...\" : \"Add to Workout\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":8235},"apps/web/src/components/manage-exercises/duplicate-exercise-confirm-dialog.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle } from \"lucide-react\";\n\ninterface DuplicateExerciseConfirmDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exerciseName: string;\n  duplicateLocation: 'My Exercises' | 'Global Library'; // New prop for dynamic text\n  onConfirmAddAnyway: () => void;\n}\n\nexport const DuplicateExerciseConfirmDialog = ({\n  open,\n  onOpenChange,\n  exerciseName,\n  duplicateLocation,\n  onConfirmAddAnyway,\n}: DuplicateExerciseConfirmDialogProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-yellow-600\">\n            <AlertTriangle className=\"h-5 w-5 mr-2\" /> Exercise Already Exists!\n          </DialogTitle>\n          <DialogDescription>\n            It looks like \"<span className=\"font-semibold\">{exerciseName}</span>\" is already a saved exercise within {duplicateLocation}.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"py-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Adding it again will create a duplicate.\n          </p>\n        </div>\n        <DialogFooter className=\"flex flex-col sm:flex-row gap-2\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)} className=\"flex-1\">\n            Cancel\n          </Button>\n          <Button onClick={onConfirmAddAnyway} className=\"flex-1\">\n            Add Anyway\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":1773},"apps/web/src/components/manage-exercises/edit-exercise-dialog.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ExerciseForm } from \"@/components/manage-exercises/exercise-form\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\"; // Import FetchedExerciseDefinition\n\n// Removed local ExerciseDefinition definition\n\ninterface EditExerciseDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exercise: FetchedExerciseDefinition | null;\n  onSaveSuccess: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const EditExerciseDialog = ({\n  open,\n  onOpenChange,\n  exercise,\n  onSaveSuccess,\n  setTempStatusMessage, // NEW\n}: EditExerciseDialogProps) => {\n  const handleCancelEdit = () => {\n    onOpenChange(false); // Close the dialog\n  };\n\n  const handleSaveSuccessAndClose = () => {\n    onSaveSuccess(); // Trigger parent refresh\n    onOpenChange(false); // Close the dialog\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-6 pb-4 border-b\">\n          <DialogTitle className=\"text-2xl font-bold\">\n            {exercise ? `Edit \"${exercise.name}\"` : \"Add New Exercise\"}\n          </DialogTitle>\n        </DialogHeader>\n        <div className=\"flex-grow overflow-y-auto p-6\">\n          <ExerciseForm\n            editingExercise={exercise}\n            onCancelEdit={handleCancelEdit}\n            onSaveSuccess={handleSaveSuccessAndClose}\n            setTempStatusMessage={setTempStatusMessage} // NEW\n            // Removed isExpandedInDialog prop\n          />\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":1819},"apps/web/src/components/manage-exercises/exercise-form.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\";\nimport { toast } from \"sonner\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport *as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PlusCircle, Edit, XCircle, ChevronDown, ChevronUp, Info, Dumbbell, Timer } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Command, CommandInput, CommandEmpty, CommandGroup, CommandItem } from \"@/components/ui/command\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn, getYouTubeEmbedUrl } from '@/lib/utils'; // Keep web-specific utils;\nimport { Badge } from \"@/components/ui/badge\";\n\n// Import new modular components with corrected paths\nimport { ExerciseNameInput } from \"@/components/manage-exercises/exercise-form/exercise-name-input\";\nimport { MainMuscleSelect } from \"@/components/manage-exercises/exercise-form/main-muscle-select\";\nimport { ExerciseTypeSelector } from \"@/components/manage-exercises/exercise-form/exercise-type-selector\";\nimport { ExerciseCategorySelect } from \"@/components/manage-exercises/exercise-form/exercise-category-select\";\nimport { ExerciseDetailsTextareas } from \"@/components/manage-exercises/exercise-form/exercise-details-textareas\";\nimport { ExerciseVideoUrlInput } from \"@/components/manage-exercises/exercise-form/exercise-video-url-input\";\nimport { ExerciseFormActions } from \"@/components/manage-exercises/exercise-form/exercise-form-actions\";\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\nconst exerciseSchema = z.object({\n  name: z.string().min(1, \"Exercise name is required.\"),\n  main_muscles: z.array(z.string()).min(1, \"At least one main muscle group is required.\"),\n  type: z.array(z.enum([\"weight\", \"timed\", \"bodyweight\"])).min(1, \"At least one exercise type is required.\"),\n  category: z.string().optional().nullable(),\n  description: z.string().optional().nullable(),\n  pro_tip: z.string().optional().nullable(),\n  video_url: z.string().url(\"Must be a valid URL.\").optional().or(z.literal('')).nullable(),\n  movement_type: z.enum([\"compound\", \"isolation\"]).optional().nullable(),\n  movement_pattern: z.enum([\"Push\", \"Pull\", \"Legs\", \"Core\"]).optional().nullable(),\n});\n\ninterface ExerciseFormProps {\n  editingExercise: FetchedExerciseDefinition | null;\n  onCancelEdit: () => void;\n  onSaveSuccess: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ExerciseForm = React.forwardRef<HTMLDivElement, ExerciseFormProps>(({ editingExercise, onCancelEdit, onSaveSuccess, setTempStatusMessage }, ref) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);\n  const [selectedMuscles, setSelectedMuscles] = useState<string[]>([]);\n\n  const mainMuscleGroups = [\n    \"Pectorals\", \"Deltoids\", \"Lats\", \"Traps\", \"Biceps\", \n    \"Triceps\", \"Quadriceps\", \"Hamstrings\", \"Glutes\", \"Calves\", \n    \"Abdominals\", \"Core\", \"Full Body\"\n  ];\n\n  const categoryOptions = [\n    { \n      value: \"Unilateral\", \n      label: \"Unilateral\",\n      description: \"Movement performed with one arm or leg at a time\"\n    },\n    { \n      value: \"Bilateral\", \n      label: \"Bilateral\",\n      description: \"Both arms or legs move together\"\n    }\n  ];\n\n  const form = useForm<z.infer<typeof exerciseSchema>>({\n    resolver: zodResolver(exerciseSchema),\n    defaultValues: {\n      name: \"\",\n      main_muscles: [],\n      type: [],\n      category: null,\n      description: null,\n      pro_tip: null,\n      video_url: null,\n      movement_type: null,\n      movement_pattern: null,\n    },\n  });\n\n  useEffect(() => {\n    if (editingExercise) {\n      const muscleGroups = editingExercise.main_muscle ? editingExercise.main_muscle.split(',').map((m: string) => m.trim()) : [];\n      \n      form.reset({\n        name: editingExercise.name,\n        main_muscles: muscleGroups,\n        type: editingExercise.type ? [editingExercise.type] as (\"weight\" | \"timed\" | \"bodyweight\")[] : [],\n        category: editingExercise.category || null,\n        description: editingExercise.description || null,\n        pro_tip: editingExercise.pro_tip || null,\n        video_url: editingExercise.video_url || null,\n        movement_type: (editingExercise.movement_type as \"compound\" | \"isolation\" | null) || null, // Explicit cast\n        movement_pattern: (editingExercise.movement_pattern as \"Push\" | \"Pull\" | \"Legs\" | \"Core\" | null) || null, // Explicit cast\n      });\n      setSelectedMuscles(muscleGroups);\n      setSelectedTypes(editingExercise.type ? [editingExercise.type] as (\"weight\" | \"timed\" | \"bodyweight\")[] : []);\n      setIsExpanded(true);\n    } else {\n      form.reset();\n      setSelectedMuscles([]);\n      setSelectedTypes([]);\n      setIsExpanded(false);\n    }\n  }, [editingExercise, form]);\n\n  const handleTypeChange = (type: \"weight\" | \"timed\" | \"bodyweight\") => {\n    form.setValue(\"type\", [type], { shouldValidate: true, shouldDirty: true }); // Trigger validation and dirty state\n    setSelectedTypes([type]);\n  };\n\n  const handleMuscleToggle = (muscle: string) => {\n    const currentMuscles = form.getValues(\"main_muscles\") || [];\n    let newMuscles;\n    \n    if (currentMuscles.includes(muscle)) {\n      newMuscles = currentMuscles.filter((m) => m !== muscle);\n    } else {\n      newMuscles = [...currentMuscles, muscle];\n    }\n    \n    form.setValue(\"main_muscles\", newMuscles, { shouldValidate: true, shouldDirty: true }); // Trigger validation and dirty state\n    setSelectedMuscles(newMuscles);\n  };\n\n  async function onSubmit(values: z.infer<typeof exerciseSchema>) {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    // Removed redundant checks for values.type and values.main_muscles.\n    // Zod resolver now handles these and displays messages via FormMessage.\n\n    const exerciseData = {\n      name: values.name,\n      main_muscle: values.main_muscles.join(', '),\n      type: values.type[0],\n      category: values.category,\n      description: values.description,\n      pro_tip: values.pro_tip,\n      video_url: getYouTubeEmbedUrl(values.video_url),\n      movement_type: values.movement_type,\n      movement_pattern: values.movement_pattern,\n    };\n\n    const isEditingUserOwned = editingExercise && editingExercise.user_id === memoizedSessionUserId && editingExercise.library_id === null && editingExercise.id !== null; // Use memoized ID\n\n    if (isEditingUserOwned) {\n      const { error } = await supabase\n        .from('exercise_definitions')\n        .update(exerciseData)\n        .eq('id', editingExercise.id);\n\n      if (error) {\n        console.error(\"Failed to update exercise:\", error.message);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      } else {\n        setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n        onCancelEdit();\n        onSaveSuccess();\n        setIsExpanded(false);\n      }\n    } else {\n      const { error } = await supabase.from('exercise_definitions').insert([{ \n        ...exerciseData, \n        user_id: memoizedSessionUserId, // Use memoized ID\n        library_id: null,\n        is_favorite: false,\n        created_at: new Date().toISOString(),\n      }]).select('id').single();\n      if (error) {\n        console.error(\"Failed to add exercise:\", error.message);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      } else {\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n        form.reset();\n        setSelectedMuscles([]);\n        setSelectedTypes([]);\n        onSaveSuccess();\n        setIsExpanded(false);\n      }\n    }\n    setTimeout(() => setTempStatusMessage(null), 3000);\n  }\n\n  const toggleExpand = () => {\n    if (isExpanded) {\n      form.reset();\n      setSelectedMuscles([]);\n      setSelectedTypes([]);\n      if (editingExercise) {\n        onCancelEdit();\n      }\n    }\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <>\n      <Card ref={ref} className=\"w-full\">\n        <CardHeader \n          className=\"flex flex-row items-center justify-between cursor-pointer\"\n          onClick={toggleExpand}\n          role=\"button\"\n          tabIndex={0}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              toggleExpand();\n            }\n          }}\n        >\n          <CardTitle className=\"flex-1 text-base\">\n            {editingExercise && editingExercise.user_id === memoizedSessionUserId && editingExercise.library_id === null ? \"Edit Exercise\" : \"Add New Exercise\"}\n          </CardTitle>\n          <span className=\"ml-2\">\n            {isExpanded ? (\n              <ChevronUp className=\"h-4 w-4\" />\n            ) : (\n              <ChevronDown className=\"h-4 w-4\" />\n            )}\n          </span>\n        </CardHeader>\n        {isExpanded && (\n          <CardContent className=\"px-4 py-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <ExerciseNameInput form={form} />\n                \n                <MainMuscleSelect\n                  form={form}\n                  mainMuscleGroups={mainMuscleGroups}\n                  selectedMuscles={selectedMuscles}\n                  handleMuscleToggle={handleMuscleToggle}\n                />\n                \n                <FormField \n                  control={form.control} \n                  name=\"type\" \n                  render={({ field }) => (\n                    <FormItem>\n                      <ExerciseTypeSelector\n                        form={form}\n                        selectedTypes={selectedTypes}\n                        handleTypeChange={handleTypeChange}\n                      />\n                      <FormMessage />\n                    </FormItem>\n                  )} \n                />\n                \n                <ExerciseCategorySelect\n                  form={form}\n                  categoryOptions={categoryOptions}\n                />\n                \n                <FormField \n                  control={form.control} \n                  name=\"movement_type\" \n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-bold\">Movement Type <span className=\"font-normal text-sm\">(Optional)</span></FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || ''}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select movement type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"compound\">Compound</SelectItem>\n                          <SelectItem value=\"isolation\">Isolation</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )} \n                />\n\n                <FormField \n                  control={form.control} \n                  name=\"movement_pattern\" \n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"font-bold\">Movement Pattern <span className=\"font-normal text-sm\">(Optional)</span></FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value || ''}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select movement pattern\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Push\">Push</SelectItem>\n                          <SelectItem value=\"Pull\">Pull</SelectItem>\n                          <SelectItem value=\"Legs\">Legs</SelectItem>\n                          <SelectItem value=\"Core\">Core</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )} \n                />\n                \n                <ExerciseDetailsTextareas form={form} />\n                \n                <ExerciseVideoUrlInput form={form} />\n                \n                <ExerciseFormActions\n                  editingExercise={editingExercise}\n                  onCancelEdit={onCancelEdit}\n                  toggleExpand={toggleExpand}\n                  setTempStatusMessage={setTempStatusMessage} // NEW\n                />\n              </form>\n            </Form>\n          </CardContent>\n        )}\n      </Card>\n    </>\n  );\n});","size_bytes":13682},"apps/web/src/components/manage-exercises/exercise-form/analyze-gym-button.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Camera } from \"lucide-react\";\n\ninterface AnalyseGymButtonProps { \n  onClick: () => void;\n}\n\nexport const AnalyseGymButton = ({ onClick }: AnalyseGymButtonProps) => { \n  return (\n    <Button type=\"button\" variant=\"outline\" onClick={onClick} className=\"w-full\">\n      <Camera className=\"h-4 w-4 mr-2\" /> Analyse Gym Photo\n    </Button>\n  );\n};","size_bytes":441},"apps/web/src/components/manage-exercises/exercise-form/analyze-gym-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useRef } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Camera, Upload, Loader2, ImageOff, Sparkles, XCircle } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\";\nimport { LoadingOverlay } from \"@/components/loading-overlay\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface AnalyseGymDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onExerciseIdentified: (exercises: Partial<FetchedExerciseDefinition>[], duplicate_status: 'none' | 'global' | 'my-exercises') => void;\n}\n\nexport const AnalyseGymDialog = ({ open, onOpenChange, onExerciseIdentified }: AnalyseGymDialogProps) => {\n  const { session, memoizedSessionUserId } = useSession();\n  const [imagePreviews, setImagePreviews] = useState<string[]>([]\n);\n  const [base64Images, setBase64Images] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    const newImagePreviews: string[] = [];\n    const newBase64Images: string[] = [];\n    let hasError = false;\n\n    files.forEach(file => {\n      if (!file.type.startsWith('image/')) {\n        toast.error(`File '${file.name}' is not an image.`);\n        hasError = true;\n        return;\n      }\n      if (file.size > 5 * 1024 * 1024) { // 5MB limit\n        toast.error(`File '${file.name}' exceeds 5MB limit.`);\n        hasError = true;\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const base64 = (reader.result as string).split(',')[1];\n        newImagePreviews.push(reader.result as string);\n        newBase64Images.push(base64);\n\n        // Only update state once all files are processed\n        if (newImagePreviews.length === files.length) {\n          setImagePreviews(prev => [...prev, ...newImagePreviews]);\n          setBase64Images(prev => [...prev, ...newBase64Images]);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n\n    if (hasError) {\n      // Clear the file input if there was an error with any file\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleRemoveImage = (indexToRemove: number) => {\n    setImagePreviews(prev => prev.filter((_, index) => index !== indexToRemove));\n    setBase64Images(prev => prev.filter((_, index) => index !== indexToRemove));\n  };\n\n  const handleAnalyseImage = async () => {\n    if (base64Images.length === 0) {\n      toast.error(\"Please upload at least one image first.\");\n      return;\n    }\n    if (!memoizedSessionUserId) {\n      toast.error(\"You must be logged in to use this feature.\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/identify-equipment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session?.access_token}`,\n        },\n        body: JSON.stringify({ base64Images }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to analyse images.');\n      }\n\n      const identifiedExercises = data.identifiedExercises;\n      if (identifiedExercises && identifiedExercises.length > 0) {\n        const firstExerciseDuplicateStatus = identifiedExercises[0].duplicate_status || 'none';\n        onExerciseIdentified(identifiedExercises, firstExerciseDuplicateStatus);\n      } else {\n        toast.info(\"The AI couldn't identify any specific exercises from the uploaded images. Please try different angles or add them manually.\");\n      }\n\n      onOpenChange(false);\n      resetForm();\n    } catch (err: any) {\n      console.error(\"Error analysing images:\", err);\n      toast.error(\"Image analysis failed.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setImagePreviews([]);\n    setBase64Images([]);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  React.useEffect(() => {\n    if (!open) {\n      resetForm();\n    }\n  }, [open]);\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] flex flex-col\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Camera className=\"h-5 w-5\" /> Analyse Gym Photos\n            </DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              Upload photos of your gym equipment, and our AI will try to identify exercises.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex-grow overflow-y-auto py-4 space-y-4\">\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              multiple\n              ref={fileInputRef}\n              onChange={handleFileChange}\n              className=\"hidden\"\n              id=\"image-upload\"\n            />\n            <label\n              htmlFor=\"image-upload\"\n              className=\"flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-lg cursor-pointer bg-muted hover:bg-muted/80 transition-colors\"\n            >\n              {imagePreviews.length > 0 ? (\n                <ScrollArea className=\"w-full h-full p-2\">\n                  <div className=\"flex flex-wrap justify-center gap-2\">\n                    {imagePreviews.map((src, index) => (\n                      <div key={index} className=\"relative w-24 h-24 rounded-md overflow-hidden border\">\n                        <img src={src} alt={`Preview ${index + 1}`} className=\"w-full h-full object-cover\" />\n                        <Button\n                          variant=\"destructive\"\n                          size=\"icon\"\n                          className=\"absolute top-0 right-0 h-6 w-6 rounded-full p-0\"\n                          onClick={(e) => { e.stopPropagation(); handleRemoveImage(index); }}\n                        >\n                          <XCircle className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              ) : (\n                <div className=\"flex flex-col items-center justify-center pt-5 pb-6 text-center\">\n                  <Upload className=\"w-8 h-8 mb-3 text-muted-foreground\" />\n                  <p className=\"mb-2 text-sm text-muted-foreground\">\n                    <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">JPEG, PNG, GIF (MAX. 5MB per image)</p>\n                </div>\n              )}\n            </label>\n            {imagePreviews.length > 0 && (\n              <Button variant=\"outline\" onClick={resetForm} className=\"w-full h-8 text-sm\">\n                <ImageOff className=\"h-4 w-4 mr-2\" /> Remove All Images\n              </Button>\n            )}\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={loading}>\n              Cancel\n            </Button>\n            <Button onClick={handleAnalyseImage} disabled={base64Images.length === 0 || loading}>\n              {loading ? (\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n              )}\n              {loading ? \"Analysing...\" : `Analyse ${base64Images.length} Image(s)`}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      <LoadingOverlay\n        isOpen={loading}\n        title=\"Analysing Images\"\n        description=\"Please wait while the AI identifies equipment in your photos.\"\n      />\n    </>\n  );\n};","size_bytes":8263},"apps/web/src/components/manage-exercises/exercise-form/exercise-category-select.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Info } from \"lucide-react\";\n\ninterface ExerciseCategorySelectProps {\n  form: UseFormReturn<any>; // Use any for now, schema is in parent\n  categoryOptions: { value: string; label: string; description: string }[];\n}\n\nexport const ExerciseCategorySelect = ({ form, categoryOptions }: ExerciseCategorySelectProps) => {\n  return (\n    <FormField \n      control={form.control} \n      name=\"category\" \n      render={({ field }) => (\n        <FormItem>\n          <div className=\"flex items-center justify-between\">\n            <FormLabel className=\"font-bold\">Category</FormLabel>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8\">\n                  <Info className=\"h-4 w-4 text-muted-foreground\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80 max-w-[90vw]\">\n                <div className=\"space-y-2\">\n                  <p className=\"font-semibold\">Category Information</p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li><span className=\"font-medium\">Unilateral:</span> Movement performed with one arm or leg at a time</li>\n                    <li><span className=\"font-medium\">Bilateral:</span> Both arms or legs move together</li>\n                  </ul>\n                </div>\n              </PopoverContent>\n            </Popover>\n          </div>\n          <Select onValueChange={field.onChange} value={field.value || ''}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {categoryOptions.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <FormMessage />\n        </FormItem>\n      )} \n    />\n  );\n};","size_bytes":2445},"apps/web/src/components/manage-exercises/exercise-form/exercise-details-textareas.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\n\ninterface ExerciseDetailsTextareasProps {\n  form: UseFormReturn<any>; // Use any for now, schema is in parent\n}\n\nexport const ExerciseDetailsTextareas = ({ form }: ExerciseDetailsTextareasProps) => {\n  return (\n    <>\n      <FormField \n        control={form.control} \n        name=\"description\" \n        render={({ field }) => (\n          <FormItem>\n            <FormLabel className=\"font-bold\">Description <span className=\"font-normal text-sm\">(Optional)</span></FormLabel> {/* Reduced text size */}\n            <FormControl>\n              <Textarea {...field} value={field.value ?? ''} className=\"text-sm\" rows={4} />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )} \n      />\n      \n      <FormField \n        control={form.control} \n        name=\"pro_tip\" \n        render={({ field }) => (\n          <FormItem>\n            <FormLabel className=\"font-bold\">Pro Tip <span className=\"font-normal text-sm\">(Optional)</span></FormLabel> {/* Reduced text size */}\n            <FormControl>\n              <Textarea {...field} value={field.value ?? ''} className=\"text-sm\" rows={4} />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )} \n      />\n    </>\n  );\n};","size_bytes":1474},"apps/web/src/components/manage-exercises/exercise-form/exercise-form-actions.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle, Edit, XCircle } from \"lucide-react\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\"; // Import FetchedExerciseDefinition\nimport { useSession } from \"@/components/session-context-provider\"; // Import useSession\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ExerciseFormActionsProps {\n  editingExercise: FetchedExerciseDefinition | null; // Changed type to FetchedExerciseDefinition\n  onCancelEdit: () => void;\n  toggleExpand: () => void; // This prop is now used to close the dialog if not in dialog mode\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ExerciseFormActions = ({\n  editingExercise,\n  onCancelEdit,\n  toggleExpand,\n  setTempStatusMessage, // NEW\n}: ExerciseFormActionsProps) => {\n  const { session } = useSession();\n  // Determine if we are editing an existing user-owned exercise (not a global one being \"copied\")\n  const isUserOwnedEditing = editingExercise && editingExercise.user_id === session?.user.id && editingExercise.library_id === null;\n\n  return (\n    <div className=\"flex gap-2 pt-2\">\n      <Button type=\"submit\" className=\"flex-1\">\n        {isUserOwnedEditing ? (\n          <>\n            <Edit className=\"h-4 w-4 mr-2\" /> Update\n          </>\n        ) : (\n          <>\n            <PlusCircle className=\"h-4 w-4 mr-2\" /> Add\n          </>\n        )}\n      </Button>\n      {/* The cancel button now always calls onCancelEdit, which will close the dialog */}\n      <Button \n        type=\"button\" \n        variant=\"outline\" \n        onClick={onCancelEdit}\n      >\n        <XCircle className=\"h-4 w-4 mr-2\" /> Cancel\n      </Button>\n    </div>\n  );\n};","size_bytes":1829},"apps/web/src/components/manage-exercises/exercise-form/exercise-name-input.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Input } from \"@/components/ui/input\";\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport * as z from \"zod\";\n\ninterface ExerciseNameInputProps {\n  form: UseFormReturn<any>; // Use any for now, schema is in parent\n}\n\nexport const ExerciseNameInput = ({ form }: ExerciseNameInputProps) => {\n  return (\n    <FormField \n      control={form.control} \n      name=\"name\" \n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className=\"font-bold\">Exercise Name</FormLabel>\n          <FormControl><Input {...field} /></FormControl>\n          <FormMessage />\n        </FormItem>\n      )} \n    />\n  );\n};","size_bytes":764},"apps/web/src/components/manage-exercises/exercise-form/exercise-type-selector.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Dumbbell, Timer, Footprints } from \"lucide-react\"; // Import Footprints for Bodyweight\nimport { FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface ExerciseTypeSelectorProps {\n  form: UseFormReturn<any>; // Use any for now, schema is in parent\n  selectedTypes: string[];\n  handleTypeChange: (type: \"weight\" | \"timed\" | \"bodyweight\") => void; // Updated type\n}\n\nexport const ExerciseTypeSelector = ({\n  form,\n  selectedTypes,\n  handleTypeChange,\n}: ExerciseTypeSelectorProps) => {\n  return (\n    <div className=\"space-y-3\">\n      <FormLabel className=\"font-bold\">Exercise Type</FormLabel>\n      <div className=\"grid grid-cols-3 gap-3\"> {/* Changed to grid-cols-3 */}\n        <div \n          className={cn(\n            \"flex flex-col items-center justify-center p-3 border-2 rounded-lg cursor-pointer transition-all\",\n            selectedTypes.includes(\"weight\") ? \"border-primary bg-primary text-primary-foreground shadow-md\" : \"border-input bg-card hover:border-primary/50\"\n          )}\n          onClick={() => handleTypeChange(\"weight\")}\n        >\n          <Dumbbell className={cn(\"h-6 w-6 mb-1\", selectedTypes.includes(\"weight\") ? \"text-primary-foreground\" : \"text-action\")} /> {/* Changed to text-action */}\n          <span className={cn(\"font-medium text-sm text-center leading-tight\", selectedTypes.includes(\"weight\") ? \"text-primary-foreground\" : \"text-foreground\")}>\n            Weight Training\n          </span>\n        </div>\n        <div \n          className={cn(\n            \"flex flex-col items-center justify-center p-3 border-2 rounded-lg cursor-pointer transition-all\",\n            selectedTypes.includes(\"timed\") ? \"border-primary bg-primary text-primary-foreground shadow-md\" : \"border-input bg-card hover:border-primary/50\"\n          )}\n          onClick={() => handleTypeChange(\"timed\")}\n        >\n          <Timer className={cn(\"h-6 w-6 mb-1\", selectedTypes.includes(\"timed\") ? \"text-primary-foreground\" : \"text-action\")} /> {/* Changed to text-action */}\n          <span className={cn(\"font-medium text-sm text-center leading-tight\", selectedTypes.includes(\"timed\") ? \"text-primary-foreground\" : \"text-foreground\")}>\n            Timed <span className=\"text-[0.65rem]\">(e.g. Plank)</span> {/* Extra small text */}\n          </span>\n        </div>\n        <div \n          className={cn(\n            \"flex flex-col items-center justify-center p-3 border-2 rounded-lg cursor-pointer transition-all\",\n            selectedTypes.includes(\"bodyweight\") ? \"border-primary bg-primary text-primary-foreground shadow-md\" : \"border-input bg-card hover:border-primary/50\"\n          )}\n          onClick={() => handleTypeChange(\"bodyweight\")}\n        >\n          <Footprints className={cn(\"h-6 w-6 mb-1\", selectedTypes.includes(\"bodyweight\") ? \"text-primary-foreground\" : \"text-action\")} /> {/* Changed to text-action */}\n          <span className={cn(\"font-medium text-sm text-center leading-tight\", selectedTypes.includes(\"bodyweight\") ? \"text-primary-foreground\" : \"text-foreground\")}>\n            Body Weight <span className=\"text-[0.65rem]\">(e.g. Press Ups)</span> {/* New text and extra small */}\n          </span>\n        </div>\n      </div>\n      {/* Removed FormMessage from here */}\n    </div>\n  );\n};","size_bytes":3394},"apps/web/src/components/manage-exercises/exercise-form/exercise-video-url-input.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Input } from \"@/components/ui/input\";\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info } from \"lucide-react\";\nimport { YoutubeEmbedInfoDialog } from \"./youtube-embed-info-dialog\"; // Import the new dialog\n\ninterface ExerciseVideoUrlInputProps {\n  form: UseFormReturn<any>; // Use any for now, schema is in parent\n}\n\nexport const ExerciseVideoUrlInput = ({ form }: ExerciseVideoUrlInputProps) => {\n  const [isYoutubeInfoModalOpen, setIsYoutubeInfoModalOpen] = useState(false);\n\n  return (\n    <>\n      <FormField \n        control={form.control} \n        name=\"video_url\" \n        render={({ field }) => (\n          <FormItem>\n            <div className=\"flex items-center gap-2 mb-1\">\n              <FormLabel className=\"font-bold\">Video URL <span className=\"font-normal text-sm\">(Optional)</span></FormLabel> {/* Reduced text size */}\n              <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => setIsYoutubeInfoModalOpen(true)}>\n                <Info className=\"h-4 w-4 text-muted-foreground\" />\n              </Button>\n            </div>\n            <FormControl>\n              <Input {...field} value={field.value ?? ''} />\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )} \n      />\n      <YoutubeEmbedInfoDialog\n        open={isYoutubeInfoModalOpen}\n        onOpenChange={setIsYoutubeInfoModalOpen}\n      />\n    </>\n  );\n};","size_bytes":1615},"apps/web/src/components/manage-exercises/exercise-form/main-muscle-select.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { UseFormReturn } from \"react-hook-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Command, CommandInput, CommandEmpty, CommandGroup, CommandItem } from \"@/components/ui/command\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { ChevronDown, XCircle } from \"lucide-react\";\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface MainMuscleSelectProps {\n  form: UseFormReturn<any>; // Use any for now, schema is in parent\n  mainMuscleGroups: string[];\n  selectedMuscles: string[];\n  handleMuscleToggle: (muscle: string) => void;\n}\n\nexport const MainMuscleSelect = ({\n  form,\n  mainMuscleGroups,\n  selectedMuscles,\n  handleMuscleToggle,\n}: MainMuscleSelectProps) => {\n  return (\n    <FormField control={form.control} name=\"main_muscles\" render={({ field }) => (\n      <FormItem>\n        <FormLabel className=\"font-bold\">Main Muscle Group(s)</FormLabel> {/* Removed (Optional) */}\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              role=\"combobox\"\n              className={cn(\n                \"w-full justify-between\",\n                !field.value?.length && \"text-muted-foreground\"\n              )}\n            >\n              {/* This span now correctly wraps all children of the Button */}\n              <span className=\"flex items-center justify-between w-full\">\n                <div className=\"flex flex-wrap gap-1\">\n                  {field.value && field.value.length > 0 ? (\n                    field.value.map((muscle: string) => (\n                      <Badge key={muscle} variant=\"secondary\" className=\"flex items-center gap-1\">\n                        {muscle}\n                        <XCircle className=\"h-3 w-3 cursor-pointer\" onClick={(e) => {\n                          e.stopPropagation();\n                          const newSelection = field.value?.filter((m: string) => m !== muscle);\n                          field.onChange(newSelection);\n                        }} />\n                      </Badge>\n                    ))\n                  ) : (\n                    <span>Select muscles...</span>\n                  )}\n                </div>\n                <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n              </span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] p-0\">\n            <div className=\"grid grid-cols-2 gap-2 p-2\">\n              {mainMuscleGroups.map((muscle) => (\n                <Button\n                  key={muscle}\n                  type=\"button\"\n                  variant={selectedMuscles.includes(muscle) ? \"default\" : \"outline\"}\n                  onClick={() => handleMuscleToggle(muscle)}\n                  className={cn(\n                    \"flex-1\",\n                    selectedMuscles.includes(muscle) ? \"bg-primary text-primary-foreground\" : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n                  )}\n                >\n                  {muscle}\n                </Button>\n              ))}\n            </div>\n          </PopoverContent>\n        </Popover>\n        <FormMessage />\n      </FormItem>\n    )} />\n  );\n};","size_bytes":3470},"apps/web/src/components/manage-exercises/exercise-form/youtube-embed-info-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info, Youtube } from 'lucide-react';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface YoutubeEmbedInfoDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const YoutubeEmbedInfoDialog = ({ open, onOpenChange }: YoutubeEmbedInfoDialogProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Youtube className=\"h-5 w-5 text-red-500\" /> YouTube Embed Link Info\n          </DialogTitle>\n          <DialogDescription>\n            To ensure videos play correctly within the app, please use a YouTube **embed link**.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"flex-grow overflow-y-auto py-4 pr-4\">\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold text-sm mb-1\">What is an embed link?</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                An embed link is a special URL format that allows a YouTube video to be displayed directly on another website. It looks different from the regular video link you see in your browser's address bar.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-sm mb-1\">How to get a YouTube embed link:</h4>\n              <ol className=\"list-decimal list-inside text-sm text-muted-foreground space-y-2\">\n                <li>Go to the YouTube video you want to use.</li>\n                <li>Click the \"<span className=\"font-medium\">Share</span>\" button below the video.</li>\n                <li>Click the \"<span className=\"font-medium\">Embed</span>\" option.</li>\n                <li>A code snippet will appear. Look for the `src` attribute within the `&lt;iframe&gt;` tag.</li>\n                <li>Copy only the URL inside the `src` attribute. It usually starts with `https://www.youtube.com/embed/` followed by the video ID.</li>\n                <li>Paste this copied embed URL into the \"Video URL\" field.</li>\n              </ol>\n            </div>\n            <div>\n              <h4 className=\"font-semibold text-sm mb-1\">Example:</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                <span className=\"font-medium\">Regular Link:</span> `https://www.youtube.com/watch?v=dQw4w9WgXcQ`\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                <span className=\"font-medium\">Embed Link:</span> `https://www.youtube.com/embed/dQw4w9WgXcQ`\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n        <div className=\"flex justify-center pt-4\">\n          <Button onClick={() => onOpenChange(false)}>Got It!</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":3096},"apps/web/src/components/manage-exercises/exercise-list-info-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Info, PlusCircle, Heart, Home, LayoutTemplate, Edit, Trash2, Filter } from 'lucide-react'; // Added Filter icon\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface ExerciseListInfoDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  type: 'my-exercises' | 'global-library';\n}\n\nexport const ExerciseListInfoDialog = ({ open, onOpenChange, type }: ExerciseListInfoDialogProps) => {\n  const title = type === 'my-exercises' ? \"Getting the Most from My Exercises\" : \"Getting the Most from the Global Library\";\n  const description = type === 'my-exercises' ?\n    \"This section displays exercises you've created. Here's how to use it:\" : // Corrected text\n    \"This section contains a comprehensive library of exercises. Here's how to use it:\";\n\n  const content = type === 'my-exercises' ? (\n    <div className=\"space-y-4\">\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Add New Exercises:</h4>\n        <p className=\"text-sm text-muted-foreground\">\n          Use the \"Add New Exercise\" form at the top to create your own custom exercises.\n        </p>\n      </div>\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Manage Your Exercises:</h4>\n        <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n          <li className=\"flex items-center\"><Info className=\"h-4 w-4 mr-2 flex-shrink-0\" /> View detailed information about an exercise.</li>\n          <li className=\"flex items-center\"><Heart className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Mark/unmark as a favourite.</li>\n          <li className=\"flex items-center\"><PlusCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Add to one of your workout templates (T-Paths).</li>\n          <li className=\"flex items-center\"><Home className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Manage which of your gyms this exercise is available in.</li>\n          <li className=\"flex items-center\"><Edit className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Edit the exercise details.</li>\n          <li className=\"flex items-center\"><Trash2 className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Delete your custom exercise.</li>\n        </ul>\n      </div>\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Filter Exercises:</h4> {/* NEW POINT */}\n        <p className=\"text-sm text-muted-foreground\">\n          Use the <Filter className=\"inline-block h-4 w-4 align-text-bottom\" /> button at the top to filter exercises by muscle group or gym.\n        </p>\n      </div>\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">AI Gym Analysis:</h4>\n        <p className=\"text-sm text-muted-foreground\">\n          Use the \"Analyse Gym Photo\" button to upload pictures of your gym. Our AI will identify equipment and suggest exercises you can add to your custom list.\n        </p>\n      </div>\n    </div>\n  ) : (\n    <div className=\"space-y-4\">\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Explore Exercises:</h4>\n        <p className=\"text-sm text-muted-foreground\">\n          Browse a wide range of exercises, including bodyweight, timed, and weight training.\n        </p>\n      </div>\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Utilise Global Exercises:</h4> {/* English spelling */}\n        <ul className=\"list-disc list-inside text-sm text-muted-foreground space-y-1\">\n          <li className=\"flex items-center\"><Info className=\"h-4 w-4 mr-2 flex-shrink-0\" /> View detailed information about an exercise.</li>\n          <li className=\"flex items-center\"><Heart className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Mark/unmark as a favourite.</li>\n          <li className=\"flex items-center\"><PlusCircle className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Add to one of your workout templates (T-Paths).</li>\n          <li className=\"flex items-center\"><Home className=\"h-4 w-4 mr-2 flex-shrink-0\" /> Manage which of your gyms this exercise is available in.</li>\n        </ul>\n      </div>\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Customisation:</h4> {/* English spelling */}\n        <p className=\"text-sm text-muted-foreground\">\n          You cannot directly edit or delete global exercises. If you want to customise a global exercise, create a new copy in My Exercises using the 'Add New Exercise' feature.\n        </p>\n      </div>\n      <div>\n        <h4 className=\"font-semibold text-sm mb-1\">Filter Exercises:</h4> {/* NEW POINT */}\n        <p className=\"text-sm text-muted-foreground\">\n          Use the <Filter className=\"inline-block h-4 w-4 align-text-bottom\" /> button at the top to filter exercises by muscle group or gym.\n        </p>\n      </div>\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 mb-2\"> {/* Increased line spacing */}\n            <Info className=\"h-5 w-5\" /> {title}\n          </DialogTitle>\n          <DialogDescription className=\"mb-2\">{description}</DialogDescription> {/* Increased line spacing */}\n        </DialogHeader>\n        <ScrollArea className=\"flex-grow overflow-y-auto py-4 pr-4\">\n          {content}\n        </ScrollArea>\n        <div className=\"flex justify-center pt-4\">\n          <Button onClick={() => onOpenChange(false)}>Got It!</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":5591},"apps/web/src/components/manage-exercises/global-exercise-list.tsx":{"content":"\"use client\";\n\nimport React, { useState, useMemo } from \"react\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\"; // Import FetchedExerciseDefinition\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { PlusCircle, Heart, Info, Menu, Home } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ExerciseInfoDialog } from \"@/components/exercise-info-dialog\";\nimport { AddExerciseToTPathDialog } from \"./add-exercise-to-tpath-dialog\";\nimport { cn, getWorkoutColorClass } from \"@/lib/utils\";\nimport { WorkoutBadge } from \"@/components/workout-badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ManageExerciseGymsDialog } from \"./manage-exercise-gyms-dialog\";\nimport { ExerciseListInfoDialog } from \"./exercise-list-info-dialog\"; // NEW IMPORT\nimport { toast } from \"sonner\"; // Import toast\n\n// Removed local FetchedExerciseDefinition definition\n\ninterface GlobalExerciseListProps {\n  exercises: FetchedExerciseDefinition[];\n  loading: boolean;\n  onEdit: (exercise: FetchedExerciseDefinition) => void;\n  exerciseWorkoutsMap: Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]>;\n  exerciseGymsMap: Record<string, string[]>;\n  userGyms: Tables<'gyms'>[];\n  onRemoveFromWorkout: (workoutId: string, exerciseId: string) => void;\n  onToggleFavorite: (exercise: FetchedExerciseDefinition) => void;\n  onAddSuccess: () => void;\n  onOptimisticAdd: (exerciseId: string, workoutId: string, workoutName: string, isBonus: boolean) => void; // Added\n  onAddFailure: (exerciseId: string, workoutId: string) => void; // Added\n  totalCount: number; // NEW PROP\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const GlobalExerciseList = ({\n  exercises,\n  loading,\n  onEdit,\n  exerciseWorkoutsMap,\n  exerciseGymsMap,\n  userGyms,\n  onRemoveFromWorkout,\n  onToggleFavorite,\n  onAddSuccess,\n  onOptimisticAdd, // Destructured\n  onAddFailure, // Destructured\n  totalCount, // NEW\n  setTempStatusMessage, // NEW\n}: GlobalExerciseListProps) => {\n  const [isAddTPathDialogOpen, setIsAddTPathDialogOpen] = useState(false);\n  const [selectedExerciseForTPath, setSelectedExerciseForTPath] = useState<FetchedExerciseDefinition | null>(null);\n  const [isInfoDialogOpen, setIsInfoDialogOpen] = useState(false);\n  const [selectedExerciseForInfo, setSelectedExerciseForInfo] = useState<FetchedExerciseDefinition | null>(null);\n  const [isManageGymsDialogOpen, setIsManageGymsDialogOpen] = useState(false);\n  const [selectedExerciseForGyms, setSelectedExerciseForGyms] = useState<FetchedExerciseDefinition | null>(null);\n\n  // NEW: State for the explainer dialog\n  const [isExplainerDialogOpen, setIsExplainerDialogOpen] = useState(false);\n\n  const initialSelectedGymIdsForDialog = useMemo(() => {\n    if (!selectedExerciseForGyms) return new Set<string>();\n    const gymNamesForExercise = exerciseGymsMap[selectedExerciseForGyms.id as string] || [];\n    const gymIds = userGyms\n        .filter(gym => gymNamesForExercise.includes(gym.name))\n        .map(gym => gym.id);\n    return new Set(gymIds);\n  }, [selectedExerciseForGyms, exerciseGymsMap, userGyms]);\n\n  const handleOpenAddTPathDialog = (exercise: FetchedExerciseDefinition) => {\n    setSelectedExerciseForTPath(exercise);\n    setIsAddTPathDialogOpen(true);\n  };\n\n  const handleToggleFavoriteClick = (exercise: FetchedExerciseDefinition, e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    onToggleFavorite(exercise);\n  };\n\n  const handleOpenInfoDialog = (exercise: FetchedExerciseDefinition, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSelectedExerciseForInfo(exercise);\n    setIsInfoDialogOpen(true);\n  };\n\n  const handleOpenManageGymsDialog = (exercise: FetchedExerciseDefinition) => {\n    setSelectedExerciseForGyms(exercise);\n    setIsManageGymsDialogOpen(true);\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-3\"> {/* Removed CardHeader, moved content here */}\n        {loading ? (\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-10 w-full\" />\n            <Skeleton className=\"h-10 w-full\" />\n            <Skeleton className=\"h-10 w-full\" />\n          </div>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between mb-4\"> {/* NEW: Flex container for text and button */}\n              <p className=\"text-sm text-muted-foreground\">\n                Showing {exercises.length} of {totalCount} exercises\n              </p>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsExplainerDialogOpen(true)} title=\"How to use this page\">\n                <Info className=\"h-4 w-4 text-muted-foreground\" />\n              </Button>\n            </div>\n            {exercises.length === 0 ? (\n              <p className=\"text-muted-foreground\">No global exercises found matching the filter.</p>\n            ) : (\n              <ScrollArea>\n                <ul className=\"space-y-2 w-full\">\n                  {exercises.map((ex) => (\n                    <li key={ex.id!} className=\"flex flex-col py-1 px-2 border rounded-md w-full\"> {/* Changed to flex-col */}\n                      <div className=\"flex justify-between items-start w-full\"> {/* Row 1: Exercise Name */}\n                        <p className=\"font-medium text-base whitespace-normal flex-grow min-w-0\">{ex.name}</p>\n                      </div>\n                      <div className=\"flex justify-between items-center w-full mt-1\"> {/* Row 2: Muscle Group | Buttons */}\n                        <p className=\"text-sm text-muted-foreground whitespace-normal flex-grow min-w-0\">{ex.main_muscle}</p>\n                        <div className=\"flex gap-1 flex-shrink-0\">\n                          <Button variant=\"ghost\" size=\"icon\" title=\"More Info\" onClick={(e) => handleOpenInfoDialog(ex, e)}>\n                            <Info className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            onClick={(e) => handleToggleFavoriteClick(ex, e)} \n                            title={ex.is_favorited_by_current_user ? \"Unfavourite\" : \"Favourite\"}\n                          >\n                            <Heart className={cn(\"h-4 w-4\", ex.is_favorited_by_current_user ? \"fill-red-500 text-red-500\" : \"text-muted-foreground\")} />\n                          </Button>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" title=\"More Options\">\n                                <Menu className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onSelect={() => handleOpenAddTPathDialog(ex)}>\n                                <PlusCircle className=\"h-4 w-4 mr-2\" /> Add to T-Path\n                              </DropdownMenuItem>\n                              {userGyms.length > 0 && (\n                                <DropdownMenuItem onSelect={() => handleOpenManageGymsDialog(ex)}>\n                                  <Home className=\"h-4 w-4 mr-2\" /> Manage Gyms\n                                </DropdownMenuItem>\n                              )}\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n                      <div className=\"mt-2 flex flex-wrap gap-2 w-full\"> {/* Row 3: Badges */}\n                        {exerciseGymsMap[ex.id as string]?.length > 0 && (\n                          exerciseGymsMap[ex.id as string].map(gymName => (\n                            <Badge key={gymName} variant=\"secondary\" className=\"text-xs\">\n                              <Home className=\"h-3 w-3 mr-1\" />\n                              {gymName}\n                            </Badge>\n                          ))\n                        )}\n                        {exerciseWorkoutsMap[ex.id as string]?.length > 0 && (\n                          exerciseWorkoutsMap[ex.id as string].map(workout => (\n                            <div key={workout.id} className=\"flex items-center gap-1\">\n                              <WorkoutBadge \n                                workoutName={workout.name}\n                              >\n                                {workout.name}\n                              </WorkoutBadge>\n                              {workout.isBonus && (\n                                <WorkoutBadge workoutName=\"Bonus\">\n                                  Bonus\n                                </WorkoutBadge>\n                              )}\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </ScrollArea>\n            )}\n          </>\n        )}\n      </CardContent>\n\n      {selectedExerciseForTPath && (\n        <AddExerciseToTPathDialog\n          key={selectedExerciseForTPath.id!}\n          open={isAddTPathDialogOpen}\n          onOpenChange={setIsAddTPathDialogOpen}\n          exercise={selectedExerciseForTPath}\n          onAddSuccess={onAddSuccess}\n          onOptimisticAdd={onOptimisticAdd}\n          onAddFailure={onAddFailure}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      {selectedExerciseForInfo && (\n        <ExerciseInfoDialog\n          open={isInfoDialogOpen}\n          onOpenChange={setIsInfoDialogOpen}\n          exercise={selectedExerciseForInfo}\n          exerciseWorkouts={exerciseWorkoutsMap[selectedExerciseForInfo.id as string] || []}\n          onRemoveFromWorkout={onRemoveFromWorkout}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      {selectedExerciseForGyms && (\n        <ManageExerciseGymsDialog\n            open={isManageGymsDialogOpen}\n            onOpenChange={setIsManageGymsDialogOpen}\n            exercise={selectedExerciseForGyms}\n            userGyms={userGyms}\n            initialSelectedGymIds={initialSelectedGymIdsForDialog}\n            onSaveSuccess={onAddSuccess}\n            setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      {/* NEW: Explainer Dialog */}\n      <ExerciseListInfoDialog\n        open={isExplainerDialogOpen}\n        onOpenChange={setIsExplainerDialogOpen}\n        type=\"global-library\"\n      />\n    </Card>\n  );\n};","size_bytes":10900},"apps/web/src/components/manage-exercises/manage-exercise-gyms-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ntype Gym = Tables<'gyms'>;\n\ninterface ManageExerciseGymsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exercise: FetchedExerciseDefinition;\n  userGyms: Tables<'gyms'>[]; // NEW: Receive userGyms as a prop\n  initialSelectedGymIds: Set<string>;\n  onSaveSuccess: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ManageExerciseGymsDialog = ({\n  open,\n  onOpenChange,\n  exercise,\n  userGyms, // Use the prop\n  initialSelectedGymIds,\n  onSaveSuccess,\n  setTempStatusMessage, // NEW\n}: ManageExerciseGymsDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [selectedGymIds, setSelectedGymIds] = useState<Set<string>>(initialSelectedGymIds);\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    setSelectedGymIds(initialSelectedGymIds);\n  }, [initialSelectedGymIds, open]);\n\n  const handleToggleGym = (gymId: string) => {\n    setSelectedGymIds(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(gymId)) {\n        newSet.delete(gymId);\n      } else {\n        newSet.add(gymId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleSaveChanges = async () => {\n    if (!memoizedSessionUserId || !exercise.id) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsSaving(true);\n\n    const gymsToAdd = [...selectedGymIds].filter(id => !initialSelectedGymIds.has(id));\n    const gymsToRemove = [...initialSelectedGymIds].filter(id => !selectedGymIds.has(id));\n\n    try {\n      if (gymsToRemove.length > 0) {\n        const { error } = await supabase\n          .from('gym_exercises')\n          .delete()\n          .eq('exercise_id', exercise.id)\n          .in('gym_id', gymsToRemove);\n        if (error) throw error;\n      }\n\n      if (gymsToAdd.length > 0) {\n        const linksToAdd = gymsToAdd.map(gymId => ({\n          gym_id: gymId,\n          exercise_id: exercise.id!,\n        }));\n        const { error } = await supabase.from('gym_exercises').insert(linksToAdd);\n        if (error) throw error;\n      }\n\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSaveSuccess(); // This will trigger the refresh in the parent.\n      onOpenChange(false);\n    } catch (err: any) {\n      console.error(\"Failed to update gym associations:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Manage Gyms for \"{exercise.name}\"</DialogTitle>\n          <DialogDescription>\n            Select the gyms where this exercise is available.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"max-h-64 py-4\">\n          <div className=\"space-y-3\">\n            {userGyms.length === 0 ? (\n              <p className=\"text-muted-foreground text-sm\">You haven't created any gyms yet. Go to your profile settings to add one.</p>\n            ) : (\n              userGyms.map(gym => (\n                <div key={gym.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`gym-${gym.id}`}\n                    checked={selectedGymIds.has(gym.id)}\n                    onCheckedChange={() => handleToggleGym(gym.id)}\n                  />\n                  <Label htmlFor={`gym-${gym.id}`} className=\"font-normal\">\n                    {gym.name}\n                  </Label>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n          <Button onClick={handleSaveChanges} disabled={isSaving || userGyms.length === 0}>\n            {isSaving ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4782},"apps/web/src/components/manage-exercises/user-exercise-list.tsx":{"content":"\"use client\";\n\nimport React, { useState, useRef, useEffect, useMemo } from \"react\"; // Import useMemo\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\"; // Import FetchedExerciseDefinition\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Edit, Trash2, Heart, Info, PlusCircle, Menu, Home } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ExerciseForm } from \"@/components/manage-exercises/exercise-form\";\nimport { ExerciseInfoDialog } from \"@/components/exercise-info-dialog\";\nimport { cn, getWorkoutColorClass } from \"@/lib/utils\";\nimport { WorkoutBadge } from \"@/components/workout-badge\";\nimport { AddExerciseToTPathDialog } from \"./add-exercise-to-tpath-dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { EditExerciseDialog } from \"./edit-exercise-dialog\"; // Import the new dialog\nimport { Badge } from \"@/components/ui/badge\";\nimport { ManageExerciseGymsDialog } from \"./manage-exercise-gyms-dialog\";\nimport { ExerciseListInfoDialog } from \"./exercise-list-info-dialog\"; // NEW IMPORT\nimport { toast } from \"sonner\"; // Import toast\n\n// Removed local FetchedExerciseDefinition definition\n\ninterface UserExerciseListProps {\n  exercises: FetchedExerciseDefinition[];\n  loading: boolean;\n  onEdit: (exercise: FetchedExerciseDefinition) => void;\n  onDelete: (exercise: FetchedExerciseDefinition) => void;\n  editingExercise: FetchedExerciseDefinition | null;\n  onCancelEdit: () => void;\n  onSaveSuccess: () => void;\n  exerciseWorkoutsMap: Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]>;\n  exerciseGymsMap: Record<string, string[]>;\n  userGyms: Tables<'gyms'>[];\n  onRemoveFromWorkout: (workoutId: string, exerciseId: string) => void;\n  onToggleFavorite: (exercise: FetchedExerciseDefinition) => void;\n  onAddSuccess: () => void;\n  onOptimisticAdd: (exerciseId: string, workoutId: string, workoutName: string, isBonus: boolean) => void; // Added\n  onAddFailure: (exerciseId: string, workoutId: string) => void; // Added\n  totalCount: number; // NEW PROP\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const UserExerciseList = ({\n  exercises,\n  loading,\n  onEdit,\n  onDelete,\n  editingExercise,\n  onCancelEdit,\n  onSaveSuccess,\n  exerciseWorkoutsMap,\n  exerciseGymsMap,\n  userGyms,\n  onRemoveFromWorkout,\n  onToggleFavorite,\n  onAddSuccess,\n  onOptimisticAdd, // Destructured\n  onAddFailure, // Destructured\n  totalCount, // NEW\n  setTempStatusMessage, // NEW\n}: UserExerciseListProps) => {\n  const [isAddTPathDialogOpen, setIsAddTPathDialogOpen] = useState(false);\n  const [selectedExerciseForTPath, setSelectedExerciseForTPath] = useState<FetchedExerciseDefinition | null>(null);\n  const [isInfoDialogOpen, setIsInfoDialogOpen] = useState(false);\n  const [selectedExerciseForInfo, setSelectedExerciseForInfo] = useState<FetchedExerciseDefinition | null>(null);\n  const [isManageGymsDialogOpen, setIsManageGymsDialogOpen] = useState(false);\n  const [selectedExerciseForGyms, setSelectedExerciseForGyms] = useState<FetchedExerciseDefinition | null>(null);\n\n  // NEW: State for the explainer dialog\n  const [isExplainerDialogOpen, setIsExplainerDialogOpen] = useState(false);\n\n  const initialSelectedGymIdsForDialog = useMemo(() => {\n    if (!selectedExerciseForGyms) return new Set<string>();\n    const gymNamesForExercise = exerciseGymsMap[selectedExerciseForGyms.id as string] || [];\n    const gymIds = userGyms\n        .filter(gym => gymNamesForExercise.includes(gym.name))\n        .map(gym => gym.id);\n    return new Set(gymIds);\n  }, [selectedExerciseForGyms, exerciseGymsMap, userGyms]);\n\n  const handleOpenAddTPathDialog = (exercise: FetchedExerciseDefinition, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSelectedExerciseForTPath(exercise);\n    setIsAddTPathDialogOpen(true);\n  };\n\n  const handleToggleFavoriteClick = (exercise: FetchedExerciseDefinition, e: React.MouseEvent<HTMLButtonElement>) => {\n    e.stopPropagation();\n    onToggleFavorite(exercise);\n  };\n\n  const handleOpenInfoDialog = (exercise: FetchedExerciseDefinition, e: React.MouseEvent) => {\n    e.stopPropagation();\n    setSelectedExerciseForInfo(exercise);\n    setIsInfoDialogOpen(true);\n  };\n\n  const handleOpenEditDialog = (exercise: FetchedExerciseDefinition) => {\n    onEdit(exercise); // Call the parent's onEdit prop\n  };\n\n  // This function is no longer needed here as editing state is managed by parent\n  // const handleEditDialogClose = () => {\n  //   onCancelEdit(); // Ensure parent state is reset\n  // };\n\n  // This function is no longer needed here as editing state is managed by parent\n  // const handleEditDialogSaveSuccess = () => {\n  //   onSaveSuccess(); // Trigger parent refresh\n  //   handleEditDialogClose(); // Close dialog and reset state\n  // };\n\n  const handleOpenManageGymsDialog = (exercise: FetchedExerciseDefinition) => {\n    setSelectedExerciseForGyms(exercise);\n    setIsManageGymsDialogOpen(true);\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-3\"> {/* Removed CardHeader, moved ExerciseForm here */}\n        <div className=\"mb-6\">\n          <ExerciseForm\n            editingExercise={null} // Always null for adding new\n            onCancelEdit={() => {}} // No specific cancel logic needed here for add form\n            onSaveSuccess={onAddSuccess} // Use onAddSuccess for new exercises\n            setTempStatusMessage={setTempStatusMessage} // NEW\n          />\n        </div>\n\n        {loading ? (\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-10 w-full\" />\n            <Skeleton className=\"h-10 w-full\" />\n            <Skeleton className=\"h-10 w-full\" />\n          </div>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between mb-4\"> {/* NEW: Flex container for text and button */}\n              <p className=\"text-sm text-muted-foreground\">\n                Showing {exercises.length} of {totalCount} exercises\n              </p>\n              <Button variant=\"ghost\" size=\"icon\" onClick={() => setIsExplainerDialogOpen(true)} title=\"How to use this page\">\n                <Info className=\"h-4 w-4 text-muted-foreground\" />\n              </Button>\n            </div>\n            {exercises.length === 0 ? (\n              <p className=\"text-muted-foreground\">You haven't created any custom exercises yet.</p>\n            ) : (\n              <ScrollArea>\n                <ul className=\"space-y-2 w-full\">\n                  {exercises.map((ex) => (\n                    <li key={ex.id!} className=\"flex flex-col py-1 px-2 border rounded-md w-full\"> {/* Changed to flex-col */}\n                      <div className=\"flex justify-between items-start w-full\"> {/* Row 1: Exercise Name */}\n                        <p className=\"font-medium text-base whitespace-normal flex-grow min-w-0\">{ex.name}</p>\n                      </div>\n                      <div className=\"flex justify-between items-center w-full mt-1\"> {/* Row 2: Muscle Group | Buttons */}\n                        <p className=\"text-sm text-muted-foreground whitespace-normal flex-grow min-w-0\">{ex.main_muscle}</p>\n                        <div className=\"flex gap-1 flex-shrink-0\">\n                          <Button variant=\"ghost\" size=\"icon\" title=\"More Info\" onClick={(e) => handleOpenInfoDialog(ex, e)}>\n                            <Info className=\"h-4 w-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"icon\" \n                            onClick={(e) => handleToggleFavoriteClick(ex, e)} \n                            title={ex.is_favorite ? \"Unfavourite\" : \"Favourite\"}\n                          >\n                            <Heart className={cn(\"h-4 w-4\", ex.is_favorite ? \"fill-red-500 text-red-500\" : \"text-muted-foreground\")} />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"icon\" onClick={(e) => handleOpenAddTPathDialog(ex, e)} title=\"Add to T-Path\">\n                            <PlusCircle className=\"h-4 w-4\" />\n                          </Button>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon\" title=\"More Options\">\n                                <Menu className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onSelect={() => handleOpenEditDialog(ex)}>\n                                <Edit className=\"h-4 w-4 mr-2\" /> Edit Exercise\n                              </DropdownMenuItem>\n                              {userGyms.length > 0 && (\n                                <DropdownMenuItem onSelect={() => handleOpenManageGymsDialog(ex)}>\n                                  <Home className=\"h-4 w-4 mr-2\" /> Manage Gyms\n                                </DropdownMenuItem>\n                              )}\n                              <DropdownMenuItem onSelect={() => onDelete(ex)} className=\"text-destructive\">\n                                <Trash2 className=\"h-4 w-4 mr-2\" /> Delete Exercise\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n                      <div className=\"mt-2 flex flex-wrap gap-2 w-full\"> {/* Row 3: Badges */}\n                        {exerciseGymsMap[ex.id as string]?.length > 0 && (\n                          exerciseGymsMap[ex.id as string].map(gymName => (\n                            <Badge key={gymName} variant=\"secondary\" className=\"text-xs\">\n                              <Home className=\"h-3 w-3 mr-1\" />\n                              {gymName}\n                            </Badge>\n                          ))\n                        )}\n                        {exerciseWorkoutsMap[ex.id as string]?.length > 0 && (\n                          exerciseWorkoutsMap[ex.id as string].map(workout => (\n                            <div key={workout.id} className=\"flex items-center gap-1\">\n                              <WorkoutBadge \n                                workoutName={workout.name}\n                              >\n                                {workout.name}\n                              </WorkoutBadge>\n                              {workout.isBonus && (\n                                <WorkoutBadge workoutName=\"Bonus\">\n                                  Bonus\n                                </WorkoutBadge>\n                              )}\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </ScrollArea>\n            )}\n          </>\n        )}\n      </CardContent>\n\n      {selectedExerciseForTPath && (\n        <AddExerciseToTPathDialog\n          key={selectedExerciseForTPath.id!}\n          open={isAddTPathDialogOpen}\n          onOpenChange={setIsAddTPathDialogOpen}\n          exercise={selectedExerciseForTPath}\n          onAddSuccess={onAddSuccess}\n          onOptimisticAdd={onOptimisticAdd}\n          onAddFailure={onAddFailure}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      {selectedExerciseForInfo && (\n        <ExerciseInfoDialog\n          open={isInfoDialogOpen}\n          onOpenChange={setIsInfoDialogOpen}\n          exercise={selectedExerciseForInfo}\n          exerciseWorkouts={exerciseWorkoutsMap[selectedExerciseForInfo.id as string] || []}\n          onRemoveFromWorkout={onRemoveFromWorkout}\n          onDeleteExercise={onDelete}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      {selectedExerciseForGyms && (\n        <ManageExerciseGymsDialog\n            open={isManageGymsDialogOpen}\n            onOpenChange={setIsManageGymsDialogOpen}\n            exercise={selectedExerciseForGyms}\n            userGyms={userGyms}\n            initialSelectedGymIds={initialSelectedGymIdsForDialog}\n            onSaveSuccess={onAddSuccess}\n            setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      {/* New Edit Exercise Dialog is now managed by the parent ManageExercisesPage */}\n      {/* {editingExercise && (\n        <EditExerciseDialog\n          open={!!editingExercise}\n          onOpenChange={handleEditDialogClose}\n          exercise={editingExercise}\n          onSaveSuccess={handleEditDialogSaveSuccess}\n        />\n      )} */}\n\n      {/* NEW: Explainer Dialog */}\n      <ExerciseListInfoDialog\n        open={isExplainerDialogOpen}\n        onOpenChange={setIsExplainerDialogOpen}\n        type=\"my-exercises\"\n      />\n    </Card>\n  );\n};","size_bytes":13355},"apps/web/src/components/manage-t-paths/active-t-path-workouts-list.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Tables, WorkoutWithLastCompleted } from \"@/types/supabase\"; // Import WorkoutWithLastCompleted\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Edit, Clock } from \"lucide-react\";\nimport { WorkoutBadge } from \"@/components/workout-badge\";\nimport { formatTimeAgo } from \"@/lib/utils\";\n\ntype TPath = Tables<'t_paths'>;\n\n// Removed local WorkoutWithLastCompleted definition, now using centralized type\n\ninterface ActiveTPathWorkoutsListProps {\n  activeTPathName: string;\n  childWorkouts: WorkoutWithLastCompleted[];\n  loading: boolean;\n  onEditWorkout: (workoutId: string, workoutName: string) => void; // Updated signature\n}\n\nexport const ActiveTPathWorkoutsList = ({\n  activeTPathName,\n  childWorkouts,\n  loading,\n  onEditWorkout,\n}: ActiveTPathWorkoutsListProps) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Workouts in \"{activeTPathName}\"</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {loading ? <p>Loading workouts...</p> : (\n          <ScrollArea className=\"pr-4\">\n            <ul className=\"space-y-3\"> {/* Increased space-y for bigger badges */}\n              {childWorkouts.length === 0 ? (\n                <p className=\"text-muted-foreground\">No workouts found for this Transformation Path. This may happen if your session length is too short for any workouts.</p>\n              ) : (\n                childWorkouts.map(workout => (\n                  <li key={workout.id} className=\"flex items-center justify-between p-3 border rounded-md group hover:bg-accent transition-colors\"> {/* Added group and hover:bg-accent */}\n                    <div className=\"flex flex-col\">\n                      <WorkoutBadge workoutName={workout.template_name} className=\"text-base px-3 py-1\"> {/* Made badge bigger */}\n                        {workout.template_name}\n                      </WorkoutBadge>\n                      {/* Removed the bonus badge from here */}\n                      <span className=\"text-sm text-muted-foreground flex items-center gap-1 mt-1\"> {/* Increased text size */}\n                        <Clock className=\"h-4 w-4\" /> Last completed: {formatTimeAgo(workout.last_completed_at ? new Date(workout.last_completed_at) : null)}\n                      </span>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => onEditWorkout(workout.id, workout.template_name)} title=\"Edit Workout Exercises\"> {/* Passed workout.template_name */}\n                        <Edit className=\"h-5 w-5\" /> {/* Made icon bigger */}\n                      </Button>\n                    </div>\n                  </li>\n                ))\n              )}\n            </ul>\n          </ScrollArea>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2970},"apps/web/src/components/manage-t-paths/edit-workout-exercises-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { toast } from \"sonner\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { LoadingOverlay } from \"@/components/loading-overlay\";\nimport { ExerciseInfoDialog } from \"@/components/exercise-info-dialog\";\nimport { WorkoutBadge } from \"@/components/workout-badge\";\n\n// Import new modular components and hook\nimport { useEditWorkoutExercises, WorkoutExerciseWithDetails } from \"@/hooks/use-edit-workout-exercises\";\nimport { AddExerciseSection } from \"@/components/manage-t-paths/edit-workout-exercises/add-exercise-section\";\nimport { SortableExerciseList } from \"@/components/manage-t-paths/edit-workout-exercises/sortable-exercise-list\";\nimport { WorkoutActionButtons } from \"@/components/manage-t-paths/edit-workout-exercises/workout-action-buttons\";\nimport { ConfirmRemoveExerciseDialog } from \"@/components/manage-t-paths/edit-workout-exercises/confirm-remove-exercise-dialog\";\nimport { AddAsBonusDialog } from \"@/components/manage-t-paths/edit-workout-exercises/add-as-bonus-dialog\";\nimport { ConfirmResetDialog } from \"@/components/manage-t-paths/edit-workout-exercises/confirm-reset-dialog\";\nimport { FetchedExerciseDefinition, ExerciseDefinition } from \"@/types/supabase\"; // Import FetchedExerciseDefinition and ExerciseDefinition\n\ninterface EditWorkoutExercisesDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  workoutId: string;\n  workoutName: string;\n  onSaveSuccess: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const EditWorkoutExercisesDialog = ({\n  open,\n  onOpenChange,\n  workoutId,\n  workoutName,\n  onSaveSuccess,\n  setTempStatusMessage, // NEW\n}: EditWorkoutExercisesDialogProps) => {\n  const {\n    exercises,\n    filteredExercisesForDropdown,\n    selectedExerciseToAdd,\n    setSelectedExerciseToAdd,\n    loading,\n    isSaving,\n    addExerciseFilter,\n    setAddExerciseFilter,\n    mainMuscleGroups, // NEW: Now comes from useEditWorkoutExercises\n    selectedMuscleFilter,\n    setSelectedMuscleFilter,\n    userGyms, // NEW: Now comes from useEditWorkoutExercises\n    selectedGymFilter,\n    setSelectedGymFilter,\n    showConfirmRemoveDialog,\n    setShowConfirmRemoveDialog,\n    exerciseToRemove,\n    showAddAsBonusDialog,\n    setShowAddAsBonusDialog,\n    exerciseToAddDetails,\n    showConfirmResetDialog,\n    setShowConfirmResetDialog,\n    handleDragEnd,\n    handleAddExerciseWithBonusStatus,\n    handleSelectAndPromptBonus,\n    handleRemoveExerciseClick,\n    confirmRemoveExercise,\n    handleToggleBonusStatus,\n    handleResetToDefaults,\n    handleSaveOrder,\n  } = useEditWorkoutExercises({ workoutId, onSaveSuccess, open, setTempStatusMessage }); // NEW: Pass setTempStatusMessage\n\n  const [isInfoDialogOpen, setIsInfoDialogOpen] = useState(false);\n  const [selectedExerciseForInfo, setSelectedExerciseForInfo] = useState<FetchedExerciseDefinition | null>(null);\n\n  const handleOpenInfoDialog = (exercise: WorkoutExerciseWithDetails) => {\n    // Cast WorkoutExerciseWithDetails to FetchedExerciseDefinition for ExerciseInfoDialog\n    setSelectedExerciseForInfo(exercise as FetchedExerciseDefinition);\n    setIsInfoDialogOpen(true);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[900px] max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-4 pb-2 border-b\">\n          <DialogTitle className=\"text-2xl font-bold flex items-center gap-2\">\n            Manage Exercises for <WorkoutBadge workoutName={workoutName} className=\"text-xl px-3 py-1\" />\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-grow overflow-y-auto p-4 space-y-4\">\n          {loading ? (\n            <p className=\"text-muted-foreground\">Loading exercises...</p>\n          ) : (\n            <div className=\"space-y-6 w-full\">\n              <AddExerciseSection\n                allAvailableExercises={filteredExercisesForDropdown as ExerciseDefinition[]} // Cast with non-null assertion\n                exercisesInWorkout={exercises}\n                selectedExerciseToAdd={selectedExerciseToAdd}\n                setSelectedExerciseToAdd={setSelectedExerciseToAdd}\n                addExerciseFilter={addExerciseFilter}\n                setAddExerciseFilter={setAddExerciseFilter}\n                handleSelectAndPromptBonus={handleSelectAndPromptBonus}\n                isSaving={isSaving}\n                mainMuscleGroups={mainMuscleGroups}\n                selectedMuscleFilter={selectedMuscleFilter}\n                setSelectedMuscleFilter={setSelectedMuscleFilter}\n                userGyms={userGyms}\n                selectedGymFilter={selectedGymFilter}\n                setSelectedGymFilter={setSelectedGymFilter}\n                setTempStatusMessage={setTempStatusMessage} // NEW\n              />\n\n              <SortableExerciseList\n                exercises={exercises}\n                handleDragEnd={handleDragEnd}\n                handleRemoveExerciseClick={handleRemoveExerciseClick}\n                handleOpenInfoDialog={handleOpenInfoDialog}\n                handleToggleBonusStatus={handleToggleBonusStatus}\n              />\n\n              <WorkoutActionButtons\n                handleSaveOrder={handleSaveOrder}\n                handleResetToDefaults={handleResetToDefaults}\n                isSaving={isSaving}\n                setShowConfirmResetDialog={setShowConfirmResetDialog}\n              />\n            </div>\n          )}\n        </div>\n      </DialogContent>\n\n      <LoadingOverlay\n        isOpen={isSaving}\n        title=\"Updating Workout\"\n        description=\"Please wait while your workout exercises are being saved.\"\n      />\n\n      {selectedExerciseForInfo && (\n        <ExerciseInfoDialog\n          open={isInfoDialogOpen}\n          onOpenChange={setIsInfoDialogOpen}\n          exercise={selectedExerciseForInfo}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      <ConfirmRemoveExerciseDialog\n        open={showConfirmRemoveDialog}\n        onOpenChange={setShowConfirmRemoveDialog}\n        exerciseToRemove={exerciseToRemove}\n        onConfirm={confirmRemoveExercise}\n      />\n\n      <AddAsBonusDialog\n        open={showAddAsBonusDialog}\n        onOpenChange={setShowAddAsBonusDialog}\n        exerciseToAddDetails={exerciseToAddDetails}\n        handleAddExerciseWithBonusStatus={handleAddExerciseWithBonusStatus}\n        isSaving={isSaving}\n      />\n\n      <ConfirmResetDialog\n        open={showConfirmResetDialog}\n        onOpenChange={setShowConfirmResetDialog}\n        workoutName={workoutName}\n        onConfirm={handleResetToDefaults}\n      />\n    </Dialog>\n  );\n};","size_bytes":6752},"apps/web/src/components/manage-t-paths/edit-workout-exercises/add-as-bonus-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, CheckCircle2 } from \"lucide-react\";\nimport { Tables } from \"@/types/supabase\";\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface AddAsBonusDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exerciseToAddDetails: ExerciseDefinition | null;\n  handleAddExerciseWithBonusStatus: (isBonus: boolean) => Promise<void>;\n  isSaving: boolean;\n}\n\nexport const AddAsBonusDialog = ({\n  open,\n  onOpenChange,\n  exerciseToAddDetails,\n  handleAddExerciseWithBonusStatus,\n  isSaving,\n}: AddAsBonusDialogProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Add \"{exerciseToAddDetails?.name}\" as?</DialogTitle>\n          <DialogDescription>\n            Choose whether to add this exercise as a core part of your workout or as an optional bonus.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <Button onClick={() => handleAddExerciseWithBonusStatus(false)} disabled={isSaving}>\n            <CheckCircle2 className=\"h-4 w-4 mr-2\" /> Add as Core Exercise\n          </Button>\n          <Button variant=\"outline\" onClick={() => handleAddExerciseWithBonusStatus(true)} disabled={isSaving}>\n            <Sparkles className=\"h-4 w-4 mr-2\" /> Add as Bonus Exercise\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":1659},"apps/web/src/components/manage-t-paths/edit-workout-exercises/add-exercise-section.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle } from \"lucide-react\";\nimport { Tables } from \"@/types/supabase\";\nimport { WorkoutExerciseWithDetails } from \"@/hooks/use-edit-workout-exercises\";\nimport { ExerciseSelectionDropdown } from '@/components/shared/exercise-selection-dropdown';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from 'sonner'; // Import toast\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Gym = Tables<'gyms'>;\n\ninterface AddExerciseSectionProps {\n  allAvailableExercises: ExerciseDefinition[];\n  exercisesInWorkout: WorkoutExerciseWithDetails[];\n  selectedExerciseToAdd: string;\n  setSelectedExerciseToAdd: (id: string) => void;\n  addExerciseFilter: 'my-exercises' | 'global-library';\n  setAddExerciseFilter: (filter: 'my-exercises' | 'global-library') => void;\n  handleSelectAndPromptBonus: () => void;\n  isSaving: boolean;\n  mainMuscleGroups: string[];\n  selectedMuscleFilter: string;\n  setSelectedMuscleFilter: (filter: string) => void;\n  userGyms: Gym[];\n  selectedGymFilter: string;\n  setSelectedGymFilter: (filter: string) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const AddExerciseSection = ({\n  allAvailableExercises,\n  exercisesInWorkout,\n  selectedExerciseToAdd,\n  setSelectedExerciseToAdd,\n  addExerciseFilter,\n  setAddExerciseFilter,\n  handleSelectAndPromptBonus,\n  isSaving,\n  mainMuscleGroups,\n  selectedMuscleFilter,\n  setSelectedMuscleFilter,\n  userGyms,\n  selectedGymFilter,\n  setSelectedGymFilter,\n  setTempStatusMessage, // NEW\n}: AddExerciseSectionProps) => {\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2\">\n        <div className=\"flex sm:col-span-1\">\n          <Button\n            variant={addExerciseFilter === 'my-exercises' ? 'secondary' : 'ghost'}\n            onClick={() => setAddExerciseFilter('my-exercises')}\n            className=\"flex-1 h-9 text-xs\"\n          >\n            My Exercises\n          </Button>\n          <Button\n            variant={addExerciseFilter === 'global-library' ? 'secondary' : 'ghost'}\n            onClick={() => setAddExerciseFilter('global-library')}\n            className=\"flex-1 h-9 text-xs\"\n          >\n            Global\n          </Button>\n        </div>\n        <Select onValueChange={setSelectedMuscleFilter} value={selectedMuscleFilter}>\n          <SelectTrigger className=\"w-full h-9 text-xs\">\n            <SelectValue placeholder=\"Filter by muscle\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Muscle Groups</SelectItem>\n            {mainMuscleGroups.map(muscle => (\n              <SelectItem key={muscle} value={muscle}>\n                {muscle}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <Select onValueChange={setSelectedGymFilter} value={selectedGymFilter} disabled={userGyms.length === 0}>\n          <SelectTrigger className=\"w-full h-9 text-xs\">\n            <SelectValue placeholder=\"Filter by gym\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Gyms</SelectItem>\n            {userGyms.map(gym => (\n              <SelectItem key={gym.id} value={gym.id}>\n                {gym.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n      <div className=\"flex gap-2 w-full\">\n        <ExerciseSelectionDropdown\n          exercises={allAvailableExercises}\n          selectedExerciseId={selectedExerciseToAdd}\n          setSelectedExerciseId={setSelectedExerciseToAdd}\n          placeholder=\"Select exercise to add\"\n        />\n        <Button type=\"button\" onClick={handleSelectAndPromptBonus} disabled={!selectedExerciseToAdd || isSaving}>\n          <PlusCircle className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n};","size_bytes":4227},"apps/web/src/components/manage-t-paths/edit-workout-exercises/confirm-remove-exercise-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConfirmRemoveExerciseDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exerciseToRemove: { name: string } | null;\n  onConfirm: () => void;\n}\n\nexport const ConfirmRemoveExerciseDialog = ({\n  open,\n  onOpenChange,\n  exerciseToRemove,\n  onConfirm,\n}: ConfirmRemoveExerciseDialogProps) => {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Confirm Removal</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to remove \"<span className=\"font-semibold\">{exerciseToRemove?.name}</span>\" from this workout? This action cannot be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={() => onOpenChange(false)}>Cancel</AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm}>Remove</AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};","size_bytes":1304},"apps/web/src/components/manage-t-paths/edit-workout-exercises/confirm-reset-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConfirmResetDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  workoutName: string;\n  onConfirm: () => void;\n}\n\nexport const ConfirmResetDialog = ({\n  open,\n  onOpenChange,\n  workoutName,\n  onConfirm,\n}: ConfirmResetDialogProps) => {\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>Confirm Reset to Defaults</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to reset the exercises for \"<span className=\"font-semibold\">{workoutName}</span>\" to its default configuration? This will remove all custom exercises and reintroduce the original set based on your preferred session length. This action cannot be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={() => onOpenChange(false)}>Cancel</AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm}>Reset to Defaults</AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};","size_bytes":1399},"apps/web/src/components/manage-t-paths/edit-workout-exercises/sortable-exercise-list.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, sortableKeyboardCoordinates, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { GripVertical, Info, XCircle, Sparkles, CheckCircle2, Menu } from \"lucide-react\"; // Import Menu\nimport { cn } from \"@/lib/utils\";\nimport { WorkoutExerciseWithDetails } from \"@/hooks/use-edit-workout-exercises\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface SortableExerciseListProps {\n  exercises: WorkoutExerciseWithDetails[];\n  handleDragEnd: (event: any) => void;\n  handleRemoveExerciseClick: (exerciseId: string, tPathExerciseId: string, name: string) => void;\n  handleOpenInfoDialog: (exercise: WorkoutExerciseWithDetails) => void;\n  handleToggleBonusStatus: (exercise: WorkoutExerciseWithDetails) => void;\n}\n\nexport const SortableExerciseList = ({\n  exercises,\n  handleDragEnd,\n  handleRemoveExerciseClick,\n  handleOpenInfoDialog,\n  handleToggleBonusStatus,\n}: SortableExerciseListProps) => {\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates }));\n\n  return (\n    <ScrollArea className=\"h-96 border rounded-md p-2 w-full\">\n      <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n        <SortableContext items={exercises.map(e => e.id)} strategy={verticalListSortingStrategy}>\n          <ul className=\"space-y-2\">\n            {exercises.map(exercise => (\n              <SortableExerciseItem\n                key={exercise.id}\n                exercise={exercise}\n                onRemove={handleRemoveExerciseClick}\n                onOpenInfo={handleOpenInfoDialog}\n                onToggleBonus={handleToggleBonusStatus}\n              />\n            ))}\n          </ul>\n        </SortableContext>\n      </DndContext>\n    </ScrollArea>\n  );\n};\n\n// Helper component for sortable items\nfunction SortableExerciseItem({ exercise, onRemove, onOpenInfo, onToggleBonus }: {\n  exercise: WorkoutExerciseWithDetails;\n  onRemove: (exerciseId: string, tPathExerciseId: string, name: string) => void;\n  onOpenInfo: (exercise: WorkoutExerciseWithDetails) => void;\n  onToggleBonus: (exercise: WorkoutExerciseWithDetails) => void;\n}) {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: exercise.id });\n  const style = { transform: CSS.Transform.toString(transform), transition };\n  return (\n    <li\n      ref={setNodeRef}\n      style={style}\n      className={cn(\n        \"flex items-center justify-between py-1 px-2 border-2 rounded-md bg-card group hover:bg-accent transition-colors\", // Added group and hover:bg-accent\n        exercise.is_bonus_exercise ? \"border-workout-bonus\" : \"border-border\"\n      )}\n    >\n      <div className=\"flex items-center gap-2 flex-grow min-w-0\">\n        <button {...listeners} {...attributes} className=\"cursor-grab p-1\"><GripVertical className=\"h-4 w-4 text-muted-foreground\" /></button>\n        <div className=\"flex flex-col flex-grow min-w-0\">\n          <span className=\"font-medium text-sm text-foreground leading-tight\">{exercise.name}</span>\n        </div>\n      </div>\n      <div className=\"flex gap-1 flex-shrink-0\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => onOpenInfo(exercise)} title=\"Exercise Info\">\n          <Info className=\"h-4 w-4\" />\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" title=\"More Options\">\n              <Menu className=\"h-4 w-4\" /> {/* CHANGED ICON HERE */}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onSelect={() => onToggleBonus(exercise)}>\n              {exercise.is_bonus_exercise ? (\n                <>\n                  <CheckCircle2 className=\"h-4 w-4 mr-2\" /> Make Core\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"h-4 w-4 mr-2\" /> Make Bonus\n                </>\n              )}\n            </DropdownMenuItem>\n            <DropdownMenuItem onSelect={() => onRemove(exercise.id, exercise.t_path_exercise_id, exercise.name)} className=\"text-destructive\">\n              <XCircle className=\"h-4 w-4 mr-2\" /> Remove\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </li>\n  );\n}","size_bytes":4723},"apps/web/src/components/manage-t-paths/edit-workout-exercises/workout-action-buttons.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCcw } from \"lucide-react\";\n\ninterface WorkoutActionButtonsProps {\n  handleSaveOrder: () => Promise<void>;\n  handleResetToDefaults: () => Promise<void>;\n  isSaving: boolean;\n  setShowConfirmResetDialog: (show: boolean) => void;\n}\n\nexport const WorkoutActionButtons = ({\n  handleSaveOrder,\n  handleResetToDefaults,\n  isSaving,\n  setShowConfirmResetDialog,\n}: WorkoutActionButtonsProps) => {\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <Button onClick={handleSaveOrder} className=\"w-full\" disabled={isSaving}>\n        {isSaving ? \"Saving Order...\" : \"Save Exercise Order\"}\n      </Button>\n      <Button variant=\"outline\" onClick={() => setShowConfirmResetDialog(true)} className=\"w-full\" disabled={isSaving}>\n        <RefreshCcw className=\"h-4 w-4 mr-2\" /> Reset to Defaults\n      </Button>\n    </div>\n  );\n};","size_bytes":928},"apps/web/src/components/manage-t-paths/setup-gym-plan-prompt.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle, Copy, Sparkles } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables, Profile } from '@/types/supabase'; // Import Profile type\nimport { CopyGymSetupDialog } from '@/components/profile/copy-gym-setup-dialog';\n\ntype Gym = Tables<'gyms'>;\n\ninterface SetupGymPlanPromptProps {\n  gym: Gym;\n  onSetupSuccess: () => void;\n  profile: Profile | null; // NEW: Added profile prop\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const SetupGymPlanPrompt = ({ gym, onSetupSuccess, profile, setTempStatusMessage }: SetupGymPlanPromptProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [isCopyDialogOpen, setIsCopyDialogOpen] = useState(false);\n  const [sourceGyms, setSourceGyms] = useState<Gym[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchOtherGyms = async () => {\n      if (!memoizedSessionUserId) return; // Use memoized ID\n      const { data, error } = await supabase\n        .from('gyms')\n        .select('*')\n        .eq('user_id', memoizedSessionUserId) // Use memoized ID\n        .neq('id', gym.id);\n\n      if (error) {\n        console.error(\"Failed to fetch other gyms for copying:\", error);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      } else {\n        setSourceGyms(data || []);\n      }\n    };\n    fetchOtherGyms();\n  }, [memoizedSessionUserId, supabase, gym.id, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleSetupDefaults = async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('/api/setup-default-gym', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session?.access_token}` }, // Use session?.access_token\n        body: JSON.stringify({ gymId: gym.id }),\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Failed to set up default gym.');\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSetupSuccess();\n    } catch (err: any) {\n      console.error(\"Failed to set up default gym:\", err.message);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Card className=\"border-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/20 mt-4\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-yellow-700 dark:text-yellow-400\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            Setup Required for \"{gym.name}\"\n          </CardTitle>\n          <CardDescription className=\"text-yellow-800 dark:text-yellow-300\">\n            This gym has no workout plan. Choose an option below to get started.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"flex flex-col sm:flex-row gap-4\">\n          <Button onClick={handleSetupDefaults} disabled={loading}>\n            <Sparkles className=\"h-4 w-4 mr-2\" /> Use App Defaults\n          </Button>\n          <Button variant=\"outline\" onClick={() => setIsCopyDialogOpen(true)} disabled={sourceGyms.length === 0 || loading}>\n            <Copy className=\"h-4 w-4 mr-2\" /> Copy from another Gym\n          </Button>\n        </CardContent>\n      </Card>\n      <CopyGymSetupDialog\n        open={isCopyDialogOpen}\n        onOpenChange={setIsCopyDialogOpen}\n        targetGym={gym}\n        sourceGyms={sourceGyms}\n        onCopySuccess={async () => onSetupSuccess()}\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n    </>\n  );\n};","size_bytes":4352},"apps/web/src/components/media/media-feed-screen.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';\nimport { Loader2, Film, RefreshCw, Filter } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { MediaPost } from '@/types/supabase';\nimport { MediaPostCard } from './media-post-card';\nimport { VideoPlayerScreen } from './video-player-screen';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\ninterface MediaFeedScreenProps {\n  // No props needed now\n}\n\nexport const MediaFeedScreen = ({}: MediaFeedScreenProps) => {\n  const { session, supabase } = useSession();\n  const [mediaPosts, setMediaPosts] = useState<MediaPost[]>([]);\n  const [categories, setCategories] = useState<string[]>(['All']);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [activeCategory, setActiveCategory] = useState<string>('All');\n  const [isFilterSheetOpen, setIsFilterSheetOpen] = useState(false);\n\n  const [isVideoPlayerOpen, setIsVideoPlayerOpen] = useState(false);\n  const [selectedVideo, setSelectedVideo] = useState<{ youtubeVideoId: string; title: string } | null>(null);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      if (!session) return;\n      try {\n        const { data, error } = await supabase\n          .from('media_posts')\n          .select('category');\n\n        if (error) throw error;\n\n        const uniqueCategories = ['All', ...Array.from(new Set((data || []).map(p => p.category).filter(Boolean) as string[])).sort()];\n        setCategories(uniqueCategories);\n      } catch (err) {\n        console.error(\"Failed to fetch categories:\", err);\n      }\n    };\n    fetchCategories();\n  }, [session, supabase]);\n\n  const fetchMediaPosts = useCallback(async () => {\n    if (!session) {\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      let query = supabase\n        .from('media_posts')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (activeCategory !== 'All') {\n        query = query.eq('category', activeCategory);\n      }\n\n      const { data, error: fetchError } = await query;\n\n      if (fetchError) {\n        throw new Error(fetchError.message || 'Failed to fetch media posts.');\n      }\n\n      setMediaPosts((data as MediaPost[]) || []);\n    } catch (err: any) {\n      console.error(\"[MediaFeedScreen] Error fetching media posts:\", err);\n      setError(err.message || \"Failed to load media library.\");\n      toast.error(err.message || \"Failed to load media library.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [session, supabase, activeCategory]);\n\n  useEffect(() => {\n    fetchMediaPosts();\n  }, [fetchMediaPosts]);\n\n  const handlePostClick = (post: MediaPost) => {\n    setSelectedVideo({ youtubeVideoId: post.video_url, title: post.title });\n    setIsVideoPlayerOpen(true);\n  };\n\n  const handleCategorySelect = (category: string) => {\n    setActiveCategory(category);\n    setIsFilterSheetOpen(false); // Close sheet after selection\n  };\n\n  return (\n    <>\n      <Card className=\"mt-6 border-x-0 rounded-none shadow-none sm:border-x sm:rounded-lg sm:shadow-sm\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Film className=\"h-5 w-5\" /> Media Library\n          </CardTitle>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button variant=\"outline\" size=\"icon\" onClick={fetchMediaPosts} disabled={loading}>\n                  <RefreshCw className={loading ? \"h-4 w-4 animate-spin\" : \"h-4 w-4\"} />\n                  <span className=\"sr-only\">Refresh</span>\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Refresh Feed</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </CardHeader>\n        <CardContent className=\"p-0 sm:p-6\">\n          {loading ? (\n            <div className=\"flex justify-center items-center h-64\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            </div>\n          ) : error ? (\n            <div className=\"text-center text-destructive py-16\">\n              <p>Error: {error}</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"p-4 sm:p-0\">\n                <div className=\"flex items-center justify-end gap-2 mb-4\">\n                  <Sheet open={isFilterSheetOpen} onOpenChange={setIsFilterSheetOpen}>\n                    <SheetTrigger asChild>\n                      <Button variant=\"outline\" size=\"sm\" className=\"h-8 gap-1\">\n                        <Filter className=\"h-4 w-4\" />\n                        <span className=\"sr-only sm:not-sr-only sm:whitespace-nowrap\">Filter</span>\n                      </Button>\n                    </SheetTrigger>\n                    <SheetContent side=\"bottom\" className=\"h-fit max-h-[80vh]\">\n                      <SheetHeader>\n                        <SheetTitle>Filter by Category</SheetTitle>\n                      </SheetHeader>\n                      <div className=\"py-4 flex flex-col space-y-2\">\n                        {categories.map(category => (\n                          <Button\n                            key={category}\n                            variant={activeCategory === category ? \"default\" : \"outline\"}\n                            onClick={() => handleCategorySelect(category)}\n                            className=\"justify-start\"\n                          >\n                            {category}\n                          </Button>\n                        ))}\n                      </div>\n                    </SheetContent>\n                  </Sheet>\n                </div>\n              </div>\n\n              {mediaPosts.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-16\">\n                  <p>No video posts available for this category.</p>\n                </div>\n              ) : (\n                <ScrollArea className=\"h-[500px] px-4 sm:px-0 sm:pr-4\">\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                    {mediaPosts.map((post: MediaPost) => (\n                      <MediaPostCard key={post.id} post={post} onClick={handlePostClick} />\n                    ))}\n                  </div>\n                </ScrollArea>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {selectedVideo && (\n        <VideoPlayerScreen\n          open={isVideoPlayerOpen}\n          onOpenChange={setIsVideoPlayerOpen}\n          youtubeVideoId={selectedVideo.youtubeVideoId}\n          title={selectedVideo.title}\n        />\n      )}\n    </>\n  );\n};","size_bytes":7237},"apps/web/src/components/media/media-post-card.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Tables } from '@/types/supabase';\nimport { PlayCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ntype MediaPost = Tables<'media_posts'>;\n\ninterface MediaPostCardProps {\n  post: MediaPost;\n  onClick: (post: MediaPost) => void;\n  className?: string;\n}\n\n// Helper function to extract YouTube video ID from various URL formats, or return if it's already just the ID\nconst getYouTubeVideoId = (url: string | null | undefined): string | null => {\n  if (!url) return null;\n\n  // Check if it's already just an 11-character YouTube ID\n  if (url.length === 11 && /^[a-zA-Z0-9_-]{11}$/.test(url)) {\n    return url;\n  }\n\n  // Otherwise, try to extract from a full URL\n  const match = url.match(/(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([a-zA-Z0-9_-]{11})(?:\\S+)?/);\n  \n  return (match && match[1]) ? match[1] : null;\n};\n\nexport const MediaPostCard = ({ post, onClick, className }: MediaPostCardProps) => {\n  const youtubeVideoId = getYouTubeVideoId(post.video_url);\n  const thumbnailUrl = youtubeVideoId ? `https://img.youtube.com/vi/${youtubeVideoId}/0.jpg` : \"/placeholder-video.jpg\";\n\n  return (\n    <Card\n      className={cn(\n        \"cursor-pointer overflow-hidden transition-all duration-200 ease-in-out hover:scale-[1.02] hover:shadow-lg\",\n        className\n      )}\n      onClick={() => onClick(post)}\n    >\n      <CardContent className=\"p-0\">\n        <div className=\"relative aspect-video w-full bg-muted flex items-center justify-center\">\n          {/* YouTube Thumbnail */}\n          <img\n            src={thumbnailUrl}\n            alt={post.title}\n            className=\"w-full h-full object-cover\"\n            loading=\"lazy\" // Added lazy loading attribute\n            onError={(e) => {\n              e.currentTarget.src = \"/placeholder-video.jpg\"; // Fallback image\n              e.currentTarget.onerror = null;\n            }}\n          />\n          {/* Play icon overlay */}\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black/30 group-hover:bg-black/40 transition-colors\">\n            <PlayCircle className=\"h-12 w-12 text-white opacity-80 group-hover:opacity-100 transition-opacity\" />\n          </div>\n        </div>\n        <div className=\"p-4\">\n          <h3 className=\"font-bold text-lg leading-tight mb-1\">{post.title}</h3>\n          {post.description && (\n            <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">{post.description}</p>\n          )}\n          <p className=\"text-xs text-muted-foreground\">By {post.creator_name || 'Unknown'}</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2753},"apps/web/src/components/media/video-player-screen.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport YouTube, { YouTubeProps } from 'react-youtube';\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface VideoPlayerScreenProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  youtubeVideoId: string; // This will now receive the full video_url\n  title: string;\n}\n\n// Helper function to extract YouTube video ID from various URL formats, or return if it's already just the ID\nconst getYouTubeVideoId = (url: string | null | undefined): string | null => {\n  if (!url) return null;\n\n  // Check if it's already just an 11-character YouTube ID\n  if (url.length === 11 && /^[a-zA-Z0-9_-]{11}$/.test(url)) {\n    return url;\n  }\n\n  // Otherwise, try to extract from a full URL\n  const match = url.match(/(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([a-zA-Z0-9_-]{11})(?:\\S+)?/);\n  \n  return (match && match[1]) ? match[1] : null;\n};\n\nexport const VideoPlayerScreen = ({ open, onOpenChange, youtubeVideoId, title }: VideoPlayerScreenProps) => {\n  const videoIdToPlay = getYouTubeVideoId(youtubeVideoId); // Extract the actual video ID here\n\n  const opts: YouTubeProps['opts'] = {\n    height: '390',\n    width: '640',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n\n  // Responsive options for the YouTube player\n  const responsiveOpts: YouTubeProps['opts'] = {\n    ...opts,\n    width: '100%',\n    height: 'auto', // Will be adjusted by aspect-ratio container\n  };\n\n  if (!videoIdToPlay) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[90vh] flex flex-col p-0\">\n          <DialogHeader className=\"p-4 pb-2 border-b\">\n            <DialogTitle className=\"text-xl font-bold line-clamp-2\">Error Playing Video</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4 text-center text-destructive\">\n            Could not extract a valid YouTube video ID from the provided URL.\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-4 pb-2 border-b\">\n          <DialogTitle className=\"text-xl font-bold line-clamp-2\">{title}</DialogTitle>\n        </DialogHeader>\n        <ScrollArea className=\"flex-grow overflow-y-auto\">\n          <div className=\"p-4\">\n            <div className=\"relative w-full\" style={{ paddingBottom: '56.25%' /* 16:9 Aspect Ratio */ }}>\n              <YouTube\n                videoId={videoIdToPlay} // Use the extracted video ID\n                opts={responsiveOpts}\n                className=\"absolute top-0 left-0 w-full h-full\"\n                iframeClassName=\"w-full h-full\"\n              />\n            </div>\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":3055},"apps/web/src/components/onboarding/body-fat-info-modal.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Info, Image } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables } from '@/types/supabase';\n\ntype BodyFatReferenceImage = Tables<'body_fat_reference_images'>;\n\ninterface BodyFatInfoModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const BodyFatInfoModal = ({ open, onOpenChange }: BodyFatInfoModalProps) => {\n  const { supabase } = useSession();\n  const [referenceImages, setReferenceImages] = useState<BodyFatReferenceImage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchReferenceImages = async () => {\n      if (!open) return;\n\n      setLoading(true);\n      setError(null);\n      try {\n        const { data, error } = await supabase\n          .from('body_fat_reference_images')\n          .select('*')\n          .order('percentage', { ascending: true });\n\n        if (error) throw error;\n        setReferenceImages(data || []);\n      } catch (err: any) {\n        console.error(\"Failed to fetch body fat reference images:\", err);\n        setError(err.message || \"Failed to load body fat reference images.\");\n        toast.error(err.message || \"Failed to load body fat reference images.\"); // Changed to toast.error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReferenceImages();\n  }, [open, supabase]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Info className=\"h-5 w-5\" /> Body Fat % Reference\n          </DialogTitle>\n          <DialogDescription>\n            Visual guide to help estimate body fat percentages.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"flex-grow overflow-y-auto py-4 pr-4\">\n          {loading ? (\n            <p className=\"text-center text-muted-foreground\">Loading images...</p>\n          ) : error ? (\n            <p className=\"text-destructive text-center\">Error: {error}</p>\n          ) : referenceImages.length === 0 ? (\n            <p className=\"text-center text-muted-foreground\">No reference images available.</p>\n          ) : (\n            <div className=\"space-y-6\">\n              {referenceImages.map((ref) => (\n                <div key={ref.id} className=\"flex flex-col items-center text-center\">\n                  <h3 className=\"text-xl font-bold mb-2\">{ref.percentage}% Body Fat</h3>\n                  {ref.image_url ? (\n                    <img\n                      src={ref.image_url}\n                      alt={`${ref.percentage}% Body Fat`}\n                      className=\"w-full max-w-xs rounded-lg shadow-md object-cover mb-3\"\n                      style={{ aspectRatio: '1/1' }} // Ensure square aspect ratio\n                    />\n                  ) : (\n                    <div className=\"w-full max-w-xs h-48 bg-muted flex items-center justify-center rounded-lg mb-3\">\n                      <Image className=\"h-12 w-12 text-muted-foreground\" />\n                    </div>\n                  )}\n                  {ref.description && (\n                    <p className=\"text-sm text-muted-foreground\">{ref.description}</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n        <div className=\"flex justify-center pt-4\">\n          <Button onClick={() => onOpenChange(false)}>Close</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":3937},"apps/web/src/components/onboarding/onboarding-progress.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface OnboardingProgressProps {\n  currentStep: number;\n  totalSteps: number;\n}\n\nexport const OnboardingProgress = ({ currentStep, totalSteps }: OnboardingProgressProps) => {\n  const stepColors = [\n    'bg-workout-upper-body-a',\n    'bg-workout-lower-body-a',\n    'bg-workout-upper-body-b',\n    'bg-workout-lower-body-b',\n    'bg-workout-push', // Fallback for step 5+\n  ];\n\n  return (\n    <div className=\"mb-10\">\n      <div className=\"flex items-center justify-center\">\n        {Array.from({ length: totalSteps }).map((_, i) => {\n          const step = i + 1;\n          const isCompleted = currentStep > step;\n          const isActive = currentStep === step;\n          const colorClass = stepColors[i % stepColors.length];\n\n          return (\n            <React.Fragment key={step}>\n              <div\n                className={cn(\n                  \"w-8 h-8 rounded-full flex items-center justify-center font-semibold transition-all duration-300 ease-in-out\",\n                  isActive && \"w-9 h-9 ring-4 ring-primary/20\",\n                  isCompleted || isActive ? `${colorClass} text-primary-foreground` : \"bg-muted text-muted-foreground\"\n                )}\n              >\n                {step}\n              </div>\n              {step < totalSteps && (\n                <div className={cn(\"flex-grow h-1 transition-colors duration-300\", isCompleted ? colorClass : \"bg-muted\")} />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n};","size_bytes":1600},"apps/web/src/components/onboarding/onboarding-step-2-training-setup.tsx":{"content":"'use client'\n\nimport React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, XCircle } from \"lucide-react\";\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface OnboardingStep2Props {\n  tPathType: \"ulul\" | \"ppl\" | null;\n  setTPathType: (type: \"ulul\" | \"ppl\") => void;\n  experience: \"beginner\" | \"intermediate\" | null;\n  setExperience: (value: \"beginner\" | \"intermediate\") => void;\n  handleNext: () => void;\n  handleBack: () => void;\n}\n\nexport const OnboardingStep2_TrainingSetup = ({\n  tPathType,\n  setTPathType,\n  experience,\n  setExperience,\n  handleNext,\n  handleBack,\n}: OnboardingStep2Props) => {\n  const isValid = tPathType && experience;\n\n  const pathOptions = [\n    {\n      id: 'ulul' as const,\n      title: '4-Day Upper/Lower',\n      subtitle: '(ULUL)',\n      frequency: '4 days per week',\n      pros: [\n        'Higher training frequency',\n        'Excellent for muscle growth', \n        'Flexible scheduling'\n      ],\n      cons: [\n        'Longer sessions',\n        'More time commitment',\n        'Can cause fatigue'\n      ]\n    },\n    {\n      id: 'ppl' as const,\n      title: '3-Day Push/Pull/Legs',\n      subtitle: '(PPL)',\n      frequency: '3 days per week',\n      pros: [\n        'Time efficient',\n        'Better recovery',\n        'Logical grouping'\n      ],\n      cons: [\n        'Lower frequency',\n        'Less overall volume',\n        'Needs consistency'\n      ]\n    }\n  ];\n\n  const experienceOptions = [\n    {\n      id: 'beginner' as const,\n      title: 'Beginner',\n      description: 'New to structured training or returning after a long break.'\n    },\n    {\n      id: 'intermediate' as const,\n      title: 'Intermediate', \n      description: 'Some experience with structured training programs.'\n    }\n  ];\n\n  return (\n    <div className={cn(\"space-y-8\")}>\n      {/* Section Header */}\n      {/* Removed duplicate header as per user request */}\n      {/* <div className=\"text-center space-y-2\">\n        <h2 className=\"text-2xl font-bold text-foreground\">Training Setup</h2>\n        <p className=\"text-muted-foreground\">\n          Select the workout structure and your experience level.\n        </p>\n      </div> */}\n\n      {/* Transformation Path */}\n      <div className=\"space-y-6\">\n        <h3 className=\"text-lg font-bold text-foreground\">\n          1. Choose Your Transformation Path\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {pathOptions.map((option) => (\n            <Card\n              key={option.id}\n              className={cn(\n                \"cursor-pointer transition-all duration-200 hover:shadow-md border-2 relative overflow-hidden\",\n                \"before:content-[''] before:absolute before:top-0 before:left-0 before:right-0 before:h-1 before:bg-workout-lower-body-a before:scale-x-0 before:origin-left before:transition-transform before:duration-300\", // Use workout-lower-body-a\n                \"hover:before:scale-x-100\",\n                tPathType === option.id\n                  ? \"border-workout-lower-body-a shadow-lg before:scale-x-100\" // Use workout-lower-body-a\n                  : \"border-border hover:border-workout-lower-body-a/50\" // Use workout-lower-body-a\n              )}\n              onClick={() => setTPathType(option.id)}\n            >\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"text-lg font-bold text-foreground\">\n                      {option.title}\n                    </h4>\n                    <p className=\"text-sm text-workout-lower-body-a font-semibold uppercase tracking-wide\"> {/* Use workout-lower-body-a */}\n                      {option.subtitle}\n                    </p>\n                  </div>\n                  <div\n                    className={cn(\n                      \"w-5 h-5 rounded-full border-2 flex items-center justify-center\",\n                      tPathType === option.id\n                        ? \"border-workout-lower-body-a bg-workout-lower-body-a\" // Use workout-lower-body-a\n                        : \"border-gray-300 bg-card\"\n                    )}\n                  >\n                    {tPathType === option.id && (\n                      <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <Badge \n                  variant=\"secondary\" \n                  className=\"bg-workout-lower-body-a-light/20 text-workout-lower-body-a hover:bg-workout-lower-body-a-light/20\" // Use workout-lower-body-a\n                >\n                  {option.frequency}\n                </Badge>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <h5 className=\"text-sm font-semibold text-success flex items-center gap-1\">\n                      <CheckCircle className=\"w-4 h-4\" />\n                      Pros\n                    </h5>\n                    <ul className=\"space-y-1\">\n                      {option.pros.map((pro, index) => (\n                        <li key={index} className=\"flex items-start gap-2 text-sm\">\n                          <CheckCircle className=\"w-3 h-3 text-success mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-muted-foreground\">{pro}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <h5 className=\"text-sm font-semibold text-destructive flex items-center gap-1\">\n                      <XCircle className=\"w-4 h-4\" />\n                      Cons\n                    </h5>\n                    <ul className=\"space-y-1\">\n                      {option.cons.map((con, index) => (\n                        <li key={index} className=\"flex items-start gap-2 text-sm\">\n                          <XCircle className=\"w-3 h-3 text-destructive mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-muted-foreground\">{con}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Experience Level */}\n      <div className=\"space-y-6\">\n        <h3 className=\"text-lg font-bold text-foreground\">\n          2. Your Experience Level\n        </h3>\n        \n        <div className=\"space-y-4\">\n          {experienceOptions.map((option) => (\n            <Card\n              key={option.id}\n              className={cn(\n                \"cursor-pointer transition-all duration-200 hover:shadow-md border-2 relative overflow-hidden\",\n                \"before:content-[''] before:absolute before:top-0 before:left-0 before:right-0 before:h-1 before:bg-workout-lower-body-a before:scale-x-0 before:origin-left before:transition-transform before:duration-300\", // Use workout-lower-body-a\n                \"hover:before:scale-x-100\",\n                experience === option.id\n                  ? \"border-workout-lower-body-a shadow-lg before:scale-x-100\" // Use workout-lower-body-a\n                  : \"border-border hover:border-workout-lower-body-a/50\" // Use workout-lower-body-a\n              )}\n              onClick={() => setExperience(option.id)}\n            >\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"text-lg font-bold text-foreground\">\n                    {option.title}\n                  </h4>\n                  <div\n                    className={cn(\n                      \"w-5 h-5 rounded-full border-2 flex items-center justify-center\",\n                      experience === option.id\n                        ? \"border-workout-lower-body-a bg-workout-lower-body-a\" // Use workout-lower-body-a\n                        : \"border-gray-300 bg-card\"\n                    )}\n                  >\n                    {experience === option.id && (\n                      <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <p className=\"text-muted-foreground text-sm\">\n                  {option.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex gap-3 pt-8 pb-8\">\n        <Button\n          variant=\"outline\"\n          onClick={handleBack}\n          className=\"flex-1 h-12 text-base font-semibold border-2\"\n        >\n          Back\n        </Button>\n        <Button\n          onClick={handleNext}\n          disabled={!isValid}\n          className={cn(\n            \"flex-1 h-12 text-base font-semibold\",\n            \"bg-gradient-to-r from-workout-lower-body-a to-workout-lower-body-a-light hover:from-workout-lower-body-a-light hover:to-workout-lower-body-a\", // Use workout-lower-body-a\n            \"disabled:bg-gray-300 disabled:text-gray-500\"\n          )}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n};","size_bytes":9476},"apps/web/src/components/onboarding/onboarding-step-3-goals-and-preferences.tsx":{"content":"'use client'\n\nimport React, { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronDown, X, Bot, Clock, CheckCircle, XCircle } from \"lucide-react\"; // Added CheckCircle, XCircle\n\ninterface OnboardingStep3Props {\n  goalFocus: string;\n  setGoalFocus: (value: string) => void;\n  preferredMuscles: string; // Comma-separated string\n  setPreferredMuscles: (value: string) => void;\n  constraints: string;\n  setConstraints: (value: string) => void;\n  sessionLength: string;\n  setSessionLength: (value: string) => void;\n  handleNext: () => void; // This is the submit action\n  handleBack: () => void;\n}\n\nexport const OnboardingStep3_GoalsAndPreferences = ({\n  goalFocus,\n  setGoalFocus,\n  preferredMuscles,\n  setPreferredMuscles,\n  constraints,\n  setConstraints,\n  sessionLength,\n  setSessionLength,\n  handleNext, // This is the submit action\n  handleBack,\n}: OnboardingStep3Props) => {\n  // Removed showTyping state as it's no longer needed for the \"Next\" button\n  // const [showTyping, setShowTyping] = useState(false);\n\n  // Convert preferredMuscles string to array for multi-select logic\n  const selectedMusclesArray = preferredMuscles ? preferredMuscles.split(',').map(m => m.trim()) : [];\n\n  const goals = [\n    { id: 'muscle_gain', icon: '💪', text: 'Muscle Gain' },\n    { id: 'fat_loss', icon: '🏃', text: 'Fat Loss' },\n    { id: 'strength_increase', icon: '🏋️', text: 'Strength Increase' },\n  ];\n\n  const muscles = [\n    'Arms', 'Chest', 'Legs', 'Core', 'Back', 'Shoulders'\n  ];\n\n  const timeOptions = [\n    { id: '15-30', label: 'Quick Sessions', desc: 'Short & efficient', fill: 25 },\n    { id: '30-45', label: 'Balanced', desc: 'Perfect middle ground', fill: 50 },\n    { id: '45-60', label: 'Full Workouts', desc: 'Complete training', fill: 75 }, // Changed to 'Complete training'\n    { id: '60-90', label: 'Extended', desc: 'Maximum dedication', fill: 100 }\n  ];\n\n  const handleGoalSelect = (goalId: string) => {\n    setGoalFocus(goalId);\n  };\n\n  const handleMuscleToggle = (muscle: string) => {\n    const currentSelection = new Set(selectedMusclesArray);\n    if (currentSelection.has(muscle)) {\n      currentSelection.delete(muscle);\n    } else {\n      currentSelection.add(muscle);\n    }\n    setPreferredMuscles(Array.from(currentSelection).join(', '));\n  };\n\n  const handleTimeSelect = (timeId: string) => {\n    setSessionLength(timeId);\n  };\n\n  const isValid = !!goalFocus && !!sessionLength;\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white rounded-3xl shadow-lg min-h-screen flex flex-col\">\n      {/* Header - Removed introductory text */}\n      <div className=\"p-6 text-center\">\n        {/* Removed: <h1 className=\"text-xl font-bold text-slate-900 mb-2\">Let's personalise your plan</h1> */}\n        {/* Removed: <p className=\"text-sm text-slate-500\">Just a few quick questions</p> */}\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 px-6 pb-6 overflow-y-auto\">\n        \n        {/* Question 1: Goals */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-bold text-slate-900 mb-5 leading-tight\">\n            What's your main fitness goal right now?\n          </h2>\n          <div className=\"grid grid-cols-2 gap-3\">\n            {goals.map((goal) => (\n              <div\n                key={goal.id}\n                onClick={() => handleGoalSelect(goal.id)}\n                className={cn(\n                  `relative bg-white border-2 rounded-2xl cursor-pointer transition-all duration-300`,\n                  `flex flex-col items-center justify-center text-center p-5 min-h-20 overflow-hidden`,\n                  `hover:border-red-500 hover:-translate-y-0.5 hover:shadow-md`,\n                  goalFocus === goal.id \n                    ? 'border-red-500 -translate-y-1 shadow-lg border-[3px]' \n                    : 'border-slate-200'\n                )}\n              >\n                {/* Top border fill animation */}\n                <div className={cn(\n                  `absolute top-0 left-0 w-full h-1 bg-red-500 transition-transform duration-400 ease-out`,\n                  goalFocus === goal.id ? 'translate-x-0' : '-translate-x-full'\n                )} />\n                \n                {/* Icon - only appears when selected */}\n                <div className={cn(\n                  `text-2xl mb-2 transition-all duration-300 ease-out`,\n                  goalFocus === goal.id \n                    ? 'opacity-100 scale-100' \n                    : 'opacity-0 scale-50'\n                )}>\n                  {goal.icon}\n                </div>\n                \n                <div className=\"text-sm font-bold leading-tight text-slate-900\">\n                  {goal.text}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Question 2: Muscle Focus */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-bold text-slate-900 mb-5 leading-tight\">\n            Any specific muscle groups you want to focus on?\n          </h2>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {muscles.map((muscle) => (\n              <div\n                key={muscle}\n                onClick={() => handleMuscleToggle(muscle)}\n                className={cn(\n                  `relative bg-white border-2 border-slate-200 rounded-xl cursor-pointer`,\n                  `transition-all duration-300 p-3 text-sm font-medium text-center`,\n                  `hover:-translate-y-0.5 overflow-hidden`,\n                  selectedMusclesArray.includes(muscle) \n                    ? 'text-red-500 font-semibold -translate-y-0.5' \n                    : 'text-slate-600'\n                )}\n              >\n                {/* Animated red border overlay */}\n                <div className={`\n                  absolute inset-0 border-[3px] border-red-500 rounded-xl pointer-events-none\n                  transition-all duration-400 ease-out\n                  ${selectedMusclesArray.includes(muscle)\n                    ? 'opacity-100 scale-100'\n                    : 'opacity-0 scale-75'\n                  }\n                `} style={{\n                  transitionTimingFunction: 'cubic-bezier(0.68, -0.55, 0.265, 1.55)'\n                }} />\n                \n                <div className=\"relative z-10\">{muscle}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"text-xs text-slate-500 italic mt-2 text-left\"> {/* Left aligned */}\n            This helps our AI tailor exercise suggestions\n          </div>\n          <div className=\"text-xs text-slate-500 italic text-left mt-3\"> {/* Left aligned */}\n            You can change this later in your Profile\n          </div>\n        </div>\n\n        {/* Question 3: Time */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-bold text-slate-900 mb-5 leading-tight\">\n            How much time do you usually have for workouts?\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4 mb-5\">\n            {timeOptions.map((option) => (\n              <div\n                key={option.id}\n                onClick={() => handleTimeSelect(option.id)}\n                className={cn(\n                  `relative bg-white border-2 rounded-2xl cursor-pointer transition-all duration-300`,\n                  `p-5 text-center overflow-hidden`,\n                  `hover:border-red-500 hover:-translate-y-0.5 hover:shadow-md`,\n                  sessionLength === option.id \n                    ? 'border-red-500 -translate-y-1 shadow-lg border-[3px]' \n                    : 'border-slate-200'\n                )}\n              >\n                {/* Background fill */}\n                <div className={cn(\n                  `absolute bottom-0 left-0 w-full transition-all duration-400 ease-out`,\n                  sessionLength === option.id \n                    ? 'h-full bg-gradient-to-t from-red-500/80 to-red-500/90' \n                    : 'h-0 bg-gradient-to-t from-red-500/10 to-red-500/20'\n                )} />\n                \n                {/* Clock Visual */}\n                <div className=\"relative z-10 mb-3\">\n                  <div className=\"w-15 h-15 mx-auto mb-3 relative flex items-center justify-center\">\n                    <div className={cn(\n                      `w-full h-full relative transition-all duration-300`,\n                      sessionLength === option.id \n                        ? 'text-white' \n                        : 'text-slate-500'\n                    )}>\n                      <Clock className=\"absolute inset-0 w-full h-full opacity-20\" /> {/* Clock icon behind text */}\n                    </div>\n                    \n                    {/* Time text */}\n                    <div className={cn(\n                      `absolute text-xs font-bold transition-colors duration-300`,\n                      sessionLength === option.id ? 'text-white' : 'text-slate-500'\n                    )}>\n                      {option.id}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className={cn(\n                  `relative z-10 text-sm font-semibold mb-1 transition-colors duration-300`,\n                  sessionLength === option.id ? 'text-white' : 'text-slate-900'\n                )}>\n                  {option.label}\n                </div>\n                <div className={cn(\n                  `relative z-10 text-xs font-medium transition-colors duration-300`,\n                  sessionLength === option.id ? 'text-white' : 'text-slate-500',\n                  option.id === '45-60' && 'text-center' // Centered for 'Complete training'\n                )}>\n                  {option.desc}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"text-xs text-slate-500 italic text-left mt-3\"> {/* Left aligned */}\n            You can change this later in your Profile\n          </div>\n        </div>\n\n        {/* Question 4: Constraints */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-lg font-bold text-slate-900 mb-5 leading-tight\">\n            Anything I should know about? Injuries, limitations, etc.\n          </h2>\n          <textarea\n            value={constraints}\n            onChange={(e) => setConstraints(e.target.value)}\n            className=\"w-full border-2 border-slate-200 rounded-xl p-3 text-sm text-slate-600 \n                       transition-all duration-200 outline-none resize-none\n                       focus:border-red-500 focus:bg-red-50/50\"\n            placeholder=\"Type here or leave blank if nothing comes to mind...\"\n            rows={3}\n          />\n          <div className=\"text-xs text-slate-500 italic mt-2\">\n            This helps me keep your workouts safe and effective\n          </div>\n        </div>\n\n        {/* Typing Indicator - Removed as per user request */}\n        {/* {showTyping && (\n          <div className=\"flex items-center gap-1 text-slate-500 text-sm mb-4\">\n            <span>AI is thinking</span>\n            <div className=\"flex gap-0.5\">\n              {[0, 0.2, 0.4].map((delay, i) => (\n                <div\n                  key={i}\n                  className=\"w-1 h-1 bg-slate-500 rounded-full animate-bounce\"\n                  style={{ animationDelay: `${delay}s`, animationDuration: '1.5s' }}\n                />\n              ))}\n            </div>\n          </div>\n        )} */}\n      </div>\n\n      {/* Navigation */}\n      <div className=\"p-6 border-t border-slate-100 flex gap-3\">\n        <button \n          onClick={handleBack}\n          className=\"flex-1 h-12 bg-slate-50 text-slate-600 border border-slate-200 \n                           rounded-xl font-semibold transition-colors duration-200\n                           hover:bg-slate-100\"\n        >\n          Back\n        </button>\n        <button \n          onClick={handleNext} // Call the handleNext prop for submission\n          // Removed onMouseEnter and onMouseLeave props\n          disabled={!isValid}\n          className={cn(\n            `flex-1 h-12 bg-gradient-to-r from-red-500 to-red-600 text-white`, \n            `rounded-xl font-semibold transition-all duration-200`,\n            `hover:-translate-y-0.5 hover:shadow-md`,\n            `disabled:bg-gray-300 disabled:text-gray-500 disabled:hover:transform-none disabled:hover:shadow-none disabled:cursor-not-allowed`\n          )}\n        >\n          Next {/* Changed button text to 'Next' */}\n        </button>\n      </div>\n    </div>\n  );\n};","size_bytes":12779},"apps/web/src/components/onboarding/onboarding-step-4-gym-setup-and-consent.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Camera, SkipForward } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface OnboardingStep4Props {\n  equipmentMethod: \"photo\" | \"skip\" | null;\n  setEquipmentMethod: (value: \"photo\" | \"skip\") => void;\n  handleNext: () => void;\n  handleBack: () => void;\n  handleSubmit: () => Promise<void>;\n  gymName: string;\n  setGymName: (value: string) => void;\n  consentGiven: boolean;\n  setConsentGiven: (checked: boolean) => void;\n  loading: boolean;\n}\n\nexport const OnboardingStep4_GymSetupAndConsent = ({\n  equipmentMethod,\n  setEquipmentMethod,\n  handleNext,\n  handleBack,\n  handleSubmit,\n  gymName,\n  setGymName,\n  consentGiven,\n  setConsentGiven,\n  loading,\n}: OnboardingStep4Props) => {\n  const isNextDisabled = !equipmentMethod || !gymName.trim() || !consentGiven;\n\n  const handleFinalStep = () => {\n    if (equipmentMethod === 'skip') {\n      handleSubmit();\n    } else { // equipmentMethod === 'photo'\n      handleNext();\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Section 1: Gym Name */}\n      <div className=\"space-y-4 animate-in slide-in-from-bottom-4 duration-500\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-7 h-7 rounded-full flex items-center justify-center text-white text-sm font-bold bg-workout-lower-body-b\">1</div>\n          <h2 className=\"text-lg font-bold text-slate-900\">Your Gym's Name</h2>\n        </div>\n        <Input\n          id=\"gymName\"\n          placeholder=\"e.g., Home Gym, Fitness First\"\n          value={gymName}\n          onChange={(e) => setGymName(e.target.value)}\n          required\n          className=\"w-full border-2 border-slate-200 rounded-xl p-4 text-base text-slate-600 transition-all duration-200 outline-none focus:bg-purple-50 focus:border-workout-lower-body-b\"\n          disabled={loading}\n        />\n        <p className=\"text-xs text-slate-500 italic mt-2 ml-1\">Give your primary gym a name</p>\n      </div>\n\n      {/* Section 2: Equipment Setup */}\n      <div className=\"space-y-4 animate-in slide-in-from-bottom-4 duration-700\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-7 h-7 rounded-full flex items-center justify-center text-white text-sm font-bold bg-workout-lower-body-b\">2</div>\n          <h2 className=\"text-lg font-bold text-slate-900\">Equipment Setup</h2>\n        </div>\n        <div className=\"space-y-4\">\n          <div\n            onClick={() => setEquipmentMethod('photo')}\n            className={cn(\n              \"relative bg-white border-2 rounded-2xl p-5 cursor-pointer transition-all duration-300 overflow-hidden hover:shadow-md\",\n              equipmentMethod === 'photo' ? '-translate-y-1 border-workout-lower-body-b border-[3px]' : 'hover:-translate-y-0.5 border-slate-200'\n            )}\n          >\n            <div className=\"absolute top-0 left-0 w-full h-1 bg-workout-lower-body-b transition-transform duration-400\" style={{ transform: equipmentMethod === 'photo' ? 'translateX(0)' : 'translateX(-100%)' }} />\n            <div className=\"flex items-center gap-4 mb-3\">\n              <div className={cn(\"w-12 h-12 bg-slate-100 rounded-xl flex items-center justify-center text-xl transition-all duration-300\", equipmentMethod === 'photo' && 'scale-110 bg-purple-50')}>📸</div>\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-base font-bold text-slate-900\">Upload Gym Photos</span>\n                  <span className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white px-2 py-0.5 rounded text-xs font-bold uppercase tracking-wide\">AI Powered</span>\n                </div>\n                <p className=\"text-sm text-slate-500 font-medium\">Smart equipment detection</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-slate-500 leading-relaxed mb-1\">Our AI will automatically identify your available equipment from photos</p>\n          </div>\n          <div\n            onClick={() => setEquipmentMethod('skip')}\n            className={cn(\n              \"relative bg-white border-2 rounded-2xl p-5 cursor-pointer transition-all duration-300 overflow-hidden hover:shadow-md\",\n              equipmentMethod === 'skip' ? '-translate-y-1 border-workout-lower-body-b border-[3px]' : 'hover:-translate-y-0.5 border-slate-200'\n            )}\n          >\n            <div className=\"absolute top-0 left-0 w-full h-1 bg-workout-lower-body-b transition-transform duration-400\" style={{ transform: equipmentMethod === 'skip' ? 'translateX(0)' : 'translateX(-100%)' }} />\n            <div className=\"flex items-center gap-4 mb-3\">\n              <div className={cn(\"w-12 h-12 bg-slate-100 rounded-xl flex items-center justify-center text-xl transition-all duration-300\", equipmentMethod === 'skip' && 'scale-110 bg-purple-50')}>⚡</div>\n              <div>\n                <h3 className=\"text-base font-bold text-slate-900\">Skip for Now</h3>\n                <p className=\"text-sm text-slate-500 font-medium\">Use standard equipment set</p>\n              </div>\n            </div>\n            <p className=\"text-sm text-slate-500 leading-relaxed mb-1\">Start with a common gym setup - customise later in your profile</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Section 3: Consent */}\n      <div className=\"space-y-4 animate-in slide-in-from-bottom-4 duration-1000\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-7 h-7 rounded-full flex items-center justify-center text-white text-sm font-bold bg-workout-lower-body-b\">3</div>\n          <h2 className=\"text-lg font-bold text-slate-900\">Data Consent</h2>\n        </div>\n        <div className={cn(\"relative bg-slate-50 border-2 rounded-2xl p-5 overflow-hidden\", consentGiven ? 'border-green-200' : 'border-slate-200')}>\n          <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-green-600 transition-transform duration-400\" style={{ transform: consentGiven ? 'translateX(0)' : 'translateX(-100%)' }} />\n          <div onClick={() => setConsentGiven(!consentGiven)} className=\"flex items-start gap-3 cursor-pointer\">\n            <div className={cn(\"w-5 h-5 border-2 rounded-md bg-white flex items-center justify-center transition-all duration-300 mt-0.5 flex-shrink-0\", consentGiven && 'scale-110 bg-green-500 border-green-500')}>\n              {consentGiven && <span className=\"text-white text-xs font-bold\">✓</span>}\n            </div>\n            <div>\n              <p className=\"text-sm text-slate-600 leading-relaxed\">I consent to storing my workout data and profile information to provide personalised training recommendations. I understand I can delete my data at any time.</p>\n              <div className=\"mt-3 p-3 bg-white rounded-lg border-l-4 border-green-500\">\n                <p className=\"text-xs text-slate-500 leading-relaxed\">💡 Your data helps create better workouts tailored specifically for you</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-between mt-6\">\n        <Button variant=\"outline\" onClick={handleBack} disabled={loading} className=\"flex-1 h-12 text-base font-semibold border-2\">Back</Button>\n        <Button\n          onClick={handleFinalStep}\n          disabled={isNextDisabled || loading}\n          className={cn(\n            \"flex-1 h-12 text-base font-semibold relative overflow-hidden transition-all duration-200\",\n            isNextDisabled || loading\n              ? 'bg-slate-200 text-slate-400 cursor-not-allowed'\n              : 'text-white bg-gradient-to-r from-workout-lower-body-b to-purple-800 hover:-translate-y-0.5 hover:shadow-lg'\n          )}\n        >\n          {!isNextDisabled && !loading && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -translate-x-full hover:translate-x-full transition-transform duration-500\" />\n          )}\n          <span className=\"relative\">{loading ? \"Setting up...\" : (equipmentMethod === 'skip' ? \"Complete Setup\" : \"Next\")}</span>\n        </Button>\n      </div>\n    </div>\n  );\n};","size_bytes":8460},"apps/web/src/components/onboarding/onboarding-step-5-gym-photo-upload.tsx":{"content":"\"use client\";\n\nimport React, { useState, useCallback } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { AnalyseGymDialog } from \"@/components/manage-exercises/exercise-form/analyze-gym-dialog\";\nimport { SaveAiExercisePrompt } from \"@/components/workout-flow/save-ai-exercise-prompt\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { Camera, CheckCircle, Trash2 } from 'lucide-react';\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface OnboardingStep5Props {\n  identifiedExercises: Partial<FetchedExerciseDefinition>[];\n  addIdentifiedExercise: (exercise: Partial<FetchedExerciseDefinition>) => void;\n  removeIdentifiedExercise: (exerciseName: string) => void;\n  confirmedExercises: Set<string>;\n  toggleConfirmedExercise: (exerciseName: string) => void;\n  handleNext: () => void;\n  handleBack: () => void;\n}\n\nexport const OnboardingStep5_GymPhotoUpload = ({\n  identifiedExercises,\n  addIdentifiedExercise,\n  removeIdentifiedExercise,\n  confirmedExercises,\n  toggleConfirmedExercise,\n  handleNext,\n  handleBack,\n}: OnboardingStep5Props) => {\n  const [showAnalyseGymDialog, setShowAnalyseGymDialog] = useState(false);\n  const [showSaveAiExercisePrompt, setShowSaveAiExercisePrompt] = useState(false);\n  const [aiIdentifiedExercise, setAiIdentifiedExercise] = useState<Partial<Tables<'exercise_definitions'>> | null>(null);\n  const [aiDuplicateStatus, setAiDuplicateStatus] = useState<'none' | 'global' | 'my-exercises'>('none');\n\n  const handleExerciseIdentified = useCallback((exercises: Partial<FetchedExerciseDefinition>[], duplicate_status: 'none' | 'global' | 'my-exercises') => {\n    if (exercises.length === 0) {\n      toast.info(\"No exercises were identified from the photos.\");\n      return;\n    }\n    exercises.forEach(ex => {\n      addIdentifiedExercise(ex as Partial<Tables<'exercise_definitions'>>);\n    });\n    console.log(`${exercises.length} exercise(s) identified and added for review!`);\n  }, [addIdentifiedExercise]);\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n        <div className=\"p-4 border-2 border-dashed rounded-lg text-center\">\n          <p className=\"text-muted-foreground mb-4 text-sm\">\n            Upload photos of your gym equipment. Our AI will identify exercises you can do. You can upload multiple photos.\n          </p>\n          <Button onClick={() => setShowAnalyseGymDialog(true)} size=\"sm\">\n            <Camera className=\"h-4 w-4 mr-2\" />\n            Upload & Analyse\n          </Button>\n        </div>\n\n        {identifiedExercises.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold mb-2\">Review Identified Exercises:</h4>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Confirm the exercises you want to associate with this gym. Uncheck any you don't want.\n            </p>\n            <ul className=\"space-y-2\">\n              {identifiedExercises.map((ex, index) => (\n                <li key={index} className=\"flex items-center justify-between p-2 border rounded-md bg-muted/50\">\n                  <div className=\"flex items-center gap-3\">\n                    <Checkbox\n                      id={`exercise-${index}`}\n                      checked={confirmedExercises.has(ex.name!)}\n                      onCheckedChange={() => toggleConfirmedExercise(ex.name!)}\n                    />\n                    <Label htmlFor={`exercise-${index}`} className=\"text-sm font-medium cursor-pointer\">\n                      {ex.name}\n                    </Label>\n                  </div>\n                  <Button variant=\"ghost\" size=\"icon\" onClick={() => removeIdentifiedExercise(ex.name!)} className=\"h-7 w-7\">\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"flex justify-between\">\n          <Button variant=\"outline\" onClick={handleBack}>\n            Back\n          </Button>\n          <Button \n            onClick={handleNext} \n            disabled={identifiedExercises.length > 0 && confirmedExercises.size === 0}\n          >\n            {identifiedExercises.length > 0 ? `Confirm ${confirmedExercises.size} Exercises` : 'Next'}\n          </Button>\n        </div>\n      </div>\n\n      <AnalyseGymDialog\n        open={showAnalyseGymDialog}\n        onOpenChange={setShowAnalyseGymDialog}\n        onExerciseIdentified={handleExerciseIdentified}\n      />\n    </>\n  );\n};","size_bytes":4566},"apps/web/src/components/onboarding/onboarding-summary-modal.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { CheckCircle, LayoutTemplate, Dumbbell, User, Info, Sparkles } from \"lucide-react\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase';\nimport { cn, getWorkoutColorClass, getWorkoutIcon } from '@/lib/utils'; // Keep web-specific utils;\nimport { WorkoutBadge } from '../workout-badge';\nimport { Badge } from '@/components/ui/badge'; // Import the base Badge component\n\ntype Profile = Tables<'profiles'>;\ntype TPath = Tables<'t_paths'>;\n\ninterface OnboardingSummaryModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  summaryData: {\n    profile: Profile;\n    mainTPath: TPath;\n    childWorkouts: (TPath & { exercises: (Tables<'exercise_definitions'> & { is_bonus_exercise: boolean })[] })[];\n    identifiedExercises: Partial<FetchedExerciseDefinition>[];\n    confirmedExerciseNames: Set<string>;\n  } | null;\n  onClose: () => void;\n}\n\nexport const OnboardingSummaryModal = ({ open, onOpenChange, summaryData, onClose }: OnboardingSummaryModalProps) => {\n  if (!summaryData) return null;\n\n  const { profile, mainTPath, childWorkouts, confirmedExerciseNames } = summaryData;\n\n  const renderProfileSummary = () => (\n    <div className=\"space-y-2 text-sm\">\n      <p><span className=\"font-semibold\">Name:</span> {profile.full_name}</p>\n      {profile.height_cm && <p><span className=\"font-semibold\">Height:</span> {profile.height_cm} cm</p>}\n      {profile.weight_kg && <p><span className=\"font-semibold\">Weight:</span> {profile.weight_kg} kg</p>}\n      {profile.body_fat_pct && <p><span className=\"font-semibold\">Body Fat:</span> {profile.body_fat_pct}%</p>}\n      {profile.primary_goal && <p><span className=\"font-semibold\">Goal:</span> {profile.primary_goal.replace(/_/g, ' ')}</p>}\n      {profile.preferred_muscles && profile.preferred_muscles.length > 0 && (\n        <p><span className=\"font-semibold\">Preferred Muscles:</span> {profile.preferred_muscles}</p>\n      )}\n      {profile.health_notes && <p><span className=\"font-semibold\">Health Notes:</span> {profile.health_notes}</p>}\n      {profile.preferred_session_length && <p><span className=\"font-semibold\">Session Length:</span> {profile.preferred_session_length}</p>}\n    </div>\n  );\n\n  const renderWorkoutPlanSummary = () => (\n    <div className=\"space-y-4\">\n      <p className=\"text-sm text-muted-foreground\">\n        Your new Transformation Path, \"<span className=\"font-semibold\">{mainTPath.template_name}</span>\", has been created with the following workouts:\n      </p>\n      {(childWorkouts || []).map(workout => {\n        const Icon = getWorkoutIcon(workout.template_name);\n        const workoutColorClass = getWorkoutColorClass(workout.template_name, 'text');\n        const workoutBorderClass = getWorkoutColorClass(workout.template_name, 'border');\n        return (\n          <div key={workout.id} className={cn(\"border rounded-md p-3\", workoutBorderClass)}>\n            <h4 className={cn(\"font-semibold text-lg flex items-center gap-2\", workoutColorClass)}>\n              {Icon && <Icon className=\"h-5 w-5\" />} {workout.template_name}\n            </h4>\n            {workout.exercises && workout.exercises.length > 0 ? (\n              <ul className=\"text-sm text-muted-foreground mt-2 space-y-1\">\n                {workout.exercises.map(ex => (\n                  <li key={ex.id} className=\"flex items-center gap-2 p-2\">\n                    <span className=\"flex-grow\">{ex.name}</span>\n                    {ex.is_bonus_exercise && <WorkoutBadge workoutName=\"Bonus\">Bonus</WorkoutBadge>}\n                    {confirmedExerciseNames.has(ex.name) && (\n                      <Badge className=\"bg-blue-500 text-white\">\n                        <Sparkles className=\"h-3 w-3 mr-1\" />\n                        AI Identified\n                      </Badge>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-sm text-muted-foreground mt-2\">No exercises assigned for this session length.</p>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"w-[95vw] max-w-2xl max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-4 sm:p-6 pb-4 border-b\">\n          <DialogTitle className=\"flex items-center gap-2 text-2xl\">\n            <CheckCircle className=\"h-6 w-6 text-green-500\" /> Your Plan is Ready!\n          </DialogTitle>\n          <DialogDescription>\n            Here's a summary of your personalised setup.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"flex-grow overflow-y-auto py-4 px-4 sm:px-6\">\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"font-semibold text-lg flex items-center gap-2 mb-2\">\n                <User className=\"h-5 w-5\" /> Your Profile\n              </h3>\n              {renderProfileSummary()}\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-lg flex items-center gap-2 mb-2\">\n                <LayoutTemplate className=\"h-5 w-5\" /> Your Workout Plan\n              </h3>\n              {renderWorkoutPlanSummary()}\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-lg flex items-center gap-2 mb-2\">\n                <Info className=\"h-5 w-5\" /> How Your Plan Was Built\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Your workout plan was generated based on your session length preference, prioritizing exercises from your confirmed gym equipment, then your custom exercises, and finally a selection of effective bodyweight and common gym exercises from our global library.\n              </p>\n            </div>\n          </div>\n        </ScrollArea>\n        <div className=\"flex justify-end p-4 sm:p-6 pt-4 border-t\">\n          <Button onClick={onClose}>Start Training</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":6220},"apps/web/src/components/profile/achievement-detail-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Flame, Dumbbell, Trophy, Star, Footprints, Bot, Crown, Sunrise, CalendarCheck, Weight, LayoutTemplate, Text } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { Profile as ProfileType, Tables, UserAchievement } from '@/types/supabase';\nimport { Session, SupabaseClient } from '@supabase/supabase-js';\nimport { ACHIEVEMENT_DISPLAY_INFO, ACHIEVEMENT_IDS } from '@/lib/achievements'; // Import from new utility file\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ninterface AchievementDetailDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  achievementId: string | null;\n  isUnlocked: boolean;\n  profile: ProfileType | null;\n  session: Session | null; // Keep session prop for now, but use memoizedSessionUserId internally\n  supabase: SupabaseClient;\n  achievementInfo: { id: string; name: string; icon: string } | null;\n}\n\nexport const AchievementDetailDialog = ({\n  open,\n  onOpenChange,\n  achievementId,\n  isUnlocked,\n  profile,\n  session, // Keep session prop for now\n  supabase,\n  achievementInfo,\n}: AchievementDetailDialogProps) => {\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  if (!achievementId || !achievementInfo) return null;\n\n  const fullAchievementInfo = ACHIEVEMENT_DISPLAY_INFO[achievementId];\n  if (!fullAchievementInfo) return null;\n\n  const { name, icon, description } = fullAchievementInfo;\n\n  // Determine current progress for dynamic achievements\n  let progressText: string | null = null;\n  let progressValue: number = 0;\n  let progressMax: number = 1; // Default to 1 for achievements that are just true/false\n\n  if (profile) {\n    switch (achievementId) {\n      case ACHIEVEMENT_IDS.FIRST_WORKOUT:\n        progressValue = (profile.total_points || 0) >= 10 ? 1 : 0;\n        progressMax = 1;\n        progressText = `Workouts completed: ${(profile.total_points || 0) / 10} / 1`;\n        break;\n      case ACHIEVEMENT_IDS.TEN_DAY_STREAK:\n        progressValue = profile.current_streak || 0;\n        progressMax = 10;\n        progressText = `Current streak: ${profile.current_streak || 0} / 10 days`;\n        break;\n      case ACHIEVEMENT_IDS.THIRTY_DAY_STREAK:\n        progressValue = profile.current_streak || 0;\n        progressMax = 30;\n        progressText = `Current streak: ${profile.current_streak || 0} / 30 days`;\n        break;\n      case ACHIEVEMENT_IDS.TWENTY_FIVE_WORKOUTS:\n        progressValue = (profile.total_points || 0) / 10;\n        progressMax = 25;\n        progressText = `Workouts completed: ${(profile.total_points || 0) / 10} / 25`;\n        break;\n      case ACHIEVEMENT_IDS.FIFTY_WORKOUTS:\n        progressValue = (profile.total_points || 0) / 10;\n        progressMax = 50;\n        progressText = `Workouts completed: ${(profile.total_points || 0) / 10} / 50`;\n        break;\n      case ACHIEVEMENT_IDS.CENTURY_CLUB:\n        progressValue = profile.total_points || 0;\n        progressMax = 1000;\n        progressText = `Total points: ${profile.total_points || 0} / 1000`;\n        break;\n      // For achievements like PERFECT_WEEK, BEAST_MODE, WEEKEND_WARRIOR, EARLY_BIRD, VOLUME_MASTER, AI_APPRENTICE\n      // dynamic progress is more complex and might require additional RPCs or client-side aggregation.\n      // For now, we'll show a generic message if not unlocked.\n      default:\n        if (!isUnlocked) {\n          progressText = \"Keep training to unlock this achievement!\";\n        } else {\n          progressText = \"Achievement unlocked!\";\n        }\n        progressValue = isUnlocked ? 1 : 0;\n        progressMax = 1;\n        break;\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"flex flex-col items-center text-center pt-6\">\n          <div className=\"text-5xl mb-4\">{icon}</div>\n          <DialogTitle className={cn(\"text-2xl font-bold\", isUnlocked ? \"text-yellow-600\" : \"text-muted-foreground\")}>\n            {name}\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground mt-2\">{description}</p>\n        </DialogHeader>\n        <div className=\"py-4 space-y-4\">\n          {progressText && (\n            <div className=\"text-center\">\n              <p className=\"text-sm font-medium text-muted-foreground mb-2\">Your Progress:</p>\n              <p className=\"text-lg font-semibold\">{progressText}</p>\n              {progressMax > 1 && (\n                <div className=\"w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mt-2\">\n                  <div \n                    className={cn(\"h-2.5 rounded-full\", isUnlocked ? \"bg-yellow-500\" : \"bg-blue-500\")} \n                    style={{ width: `${(progressValue / progressMax) * 100}%` }}\n                  ></div>\n                </div>\n              )}\n            </div>\n          )}\n          {!isUnlocked && (\n            <p className=\"text-center text-sm text-muted-foreground\">\n              This achievement is not yet unlocked. Keep working towards your goals!\n            </p>\n          )}\n          {isUnlocked && (\n            <p className=\"text-center text-sm text-green-600 font-semibold\">\n              Congratulations! You've earned this achievement.\n            </p>\n          )}\n        </div>\n        <div className=\"flex justify-center pb-4\">\n          <Button onClick={() => onOpenChange(false)}>Close</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":5667},"apps/web/src/components/profile/achievement-grid.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { ACHIEVEMENT_DISPLAY_INFO } from '@/lib/achievements';\n\ninterface AchievementGridProps {\n  achievements: { id: string; name: string; icon: string }[];\n  unlockedAchievements: Set<string>;\n  onAchievementClick: (achievement: { id: string; name: string; icon: string }) => void;\n}\n\nexport const AchievementGrid = ({ achievements, unlockedAchievements, onAchievementClick }: AchievementGridProps) => {\n  return (\n    <div className=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3\">\n      {achievements.map((a) => {\n        const isAchUnlocked = unlockedAchievements.has(a.id);\n        const displayInfo = ACHIEVEMENT_DISPLAY_INFO[a.id]; // Get full display info\n        return (\n          <Button\n            key={a.id}\n            variant=\"ghost\"\n            className={cn(\n              \"flex flex-col items-center justify-center min-h-[7rem] w-full p-3 rounded-xl border-2 transition-all duration-200 ease-in-out group\",\n              isAchUnlocked\n                ? 'bg-yellow-50 dark:bg-yellow-950/30 border-yellow-400 dark:border-yellow-700 text-yellow-800 dark:text-yellow-300 hover:scale-105'\n                : 'bg-gray-50 dark:bg-gray-900/30 border-gray-200 dark:border-gray-700 text-gray-500 dark:text-gray-400 hover:scale-105'\n            )}\n            onClick={() => onAchievementClick(a)}\n          >\n            <div className=\"text-2xl mb-1 transition-transform duration-200 ease-in-out group-hover:scale-110\">{displayInfo?.icon || a.icon}</div>\n            <div className={cn(\n              \"text-xs font-medium text-center leading-tight whitespace-normal\",\n              isAchUnlocked ? \"text-yellow-800 dark:text-yellow-300\" : \"text-gray-500 dark:text-gray-400\"\n            )}>\n              {displayInfo?.name || a.name}\n            </div>\n          </Button>\n        );\n      })}\n    </div>\n  );\n};","size_bytes":1983},"apps/web/src/components/profile/add-exercises-to-workout-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { PlusCircle, Search, Filter, XCircle } from 'lucide-react';\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { useManageExercisesData } from '@/hooks/use-manage-exercises-data'; // NEW: Import useManageExercisesData\nimport { useSession } from '@/components/session-context-provider'; // NEW: Import useSession\nimport { toast } from \"sonner\"; // Import toast\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface AddExercisesToWorkoutDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  // Removed allExercises, muscleGroups props\n  exercisesInWorkout: string[]; // IDs of exercises already in the current workout\n  onAddExercises: (exerciseIds: string[]) => void;\n  addExerciseSourceFilter: 'my-exercises' | 'global-library';\n  setAddExerciseSourceFilter: (filter: 'my-exercises' | 'global-library') => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const AddExercisesToWorkoutDialog = ({\n  open,\n  onOpenChange,\n  // Removed allExercises, muscleGroups props\n  exercisesInWorkout,\n  onAddExercises,\n  addExerciseSourceFilter,\n  setAddExerciseSourceFilter,\n  setTempStatusMessage, // NEW\n}: AddExercisesToWorkoutDialogProps) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [muscleFilter, setMuscleFilter] = useState(\"all\");\n  const [selectedExerciseIds, setSelectedExerciseIds] = useState<Set<string>>(new Set());\n  const { session, supabase, memoizedSessionUserId } = useSession(); // NEW: Get session and supabase from useSession\n  // NEW: Consume data from useManageExercisesData\n  const {\n    allAvailableExercises: fetchedAllAvailableExercises, // Correctly destructure\n    availableMuscleGroups: fetchedAvailableMuscleGroups,\n    userGyms: fetchedUserGyms,\n    exerciseGymsMap: fetchedExerciseGymsMap,\n    // Removed supabase from here as it's now passed as a prop\n  } = useManageExercisesData({\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n    supabase,\n    setTempStatusMessage: setTempStatusMessage, // Placeholder, not used here\n  });\n\n\n  // Reset selected exercises when dialog opens/closes\n  React.useEffect(() => {\n    if (!open) {\n      setSelectedExerciseIds(new Set());\n      setSearchTerm(\"\");\n      setMuscleFilter(\"all\");\n    }\n  }, [open]);\n\n  const availableExercises = useMemo(() => {\n    if (!memoizedSessionUserId) return []; // NEW: Ensure session exists\n    const lowerCaseSearchTerm = searchTerm.toLowerCase();\n    return fetchedAllAvailableExercises // Use fetchedAllAvailableExercises\n      .filter((ex: FetchedExerciseDefinition) => !exercisesInWorkout.includes(ex.id!)) // Exclude exercises already in workout, non-null assertion\n      .filter((ex: FetchedExerciseDefinition) => { // Filter by source (My Exercises vs Global)\n        if (addExerciseSourceFilter === 'my-exercises') return ex.user_id === memoizedSessionUserId; // User-owned\n        if (addExerciseSourceFilter === 'global-library') return ex.user_id === null; // Global\n        return false;\n      })\n      .filter((ex: FetchedExerciseDefinition) => { // Filter by muscle group\n        return muscleFilter === 'all' || ex.main_muscle === muscleFilter;\n      })\n      .filter((ex: FetchedExerciseDefinition) => { // Filter by search term\n        return ex.name!.toLowerCase().includes(lowerCaseSearchTerm); // Non-null assertion\n      })\n      .sort((a: FetchedExerciseDefinition, b: FetchedExerciseDefinition) => a.name!.localeCompare(b.name!)); // Non-null assertion\n  }, [fetchedAllAvailableExercises, exercisesInWorkout, addExerciseSourceFilter, muscleFilter, searchTerm, memoizedSessionUserId]); // Depend on fetchedAllAvailableExercises and memoizedSessionUserId\n\n  const handleToggleSelect = (exerciseId: string, isChecked: boolean) => {\n    setSelectedExerciseIds(prev => {\n      const newSet = new Set(prev);\n      if (isChecked) {\n        newSet.add(exerciseId);\n      } else {\n        newSet.delete(exerciseId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleAddSelected = () => {\n    onAddExercises(Array.from(selectedExerciseIds));\n    onOpenChange(false); // Close dialog after adding\n    setTempStatusMessage({ message: \"Added!\", type: 'success' });\n    setTimeout(() => setTempStatusMessage(null), 3000);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-xl max-h-[90vh] h-full flex flex-col p-4\"> {/* Added h-full here */}\n        <DialogHeader className=\"pb-4\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <PlusCircle className=\"h-5 w-5\" /> Add Exercises\n          </DialogTitle>\n          <DialogDescription className=\"mb-1 text-sm\">\n            Select exercises to add to the current workout template.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex-grow flex flex-col min-h-0 overflow-hidden\">\n          {/* Filters and Search */}\n          <div className=\"flex flex-col sm:flex-row gap-2 mb-4\">\n            <div className=\"flex sm:w-1/3\">\n              <Button\n                variant={addExerciseSourceFilter === 'my-exercises' ? 'default' : 'outline'}\n                onClick={() => setAddExerciseSourceFilter('my-exercises')}\n                className={cn(\n                  \"flex-1 h-9 text-xs\",\n                  addExerciseSourceFilter === 'my-exercises' ? \"bg-primary text-primary-foreground hover:bg-primary/90\" : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n                )}\n              >\n                My Exercises\n              </Button>\n              <Button\n                variant={addExerciseSourceFilter === 'global-library' ? 'default' : 'outline'}\n                onClick={() => setAddExerciseSourceFilter('global-library')}\n                className={cn(\n                  \"flex-1 h-9 text-xs\",\n                  addExerciseSourceFilter === 'global-library' ? \"bg-primary text-primary-foreground hover:bg-primary/90\" : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n                )}\n              >\n                Global\n              </Button>\n            </div>\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search exercises...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9 text-xs\"\n              />\n            </div>\n            <Select onValueChange={setMuscleFilter} value={muscleFilter}>\n              <SelectTrigger className=\"sm:w-1/3 h-9 text-xs\">\n                <SelectValue placeholder=\"Filter by muscle\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Muscle Groups</SelectItem>\n                {fetchedAvailableMuscleGroups.map(muscle => <SelectItem key={muscle} value={muscle}>{muscle}</SelectItem>)} {/* Use fetchedAvailableMuscleGroups */}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Exercise List - now uses flex-grow to take remaining space */}\n          <ScrollArea className=\"flex-1 border rounded-md p-2 min-h-0\">\n            {availableExercises.length === 0 ? (\n              <p className=\"text-muted-foreground text-center p-4 text-sm\">No exercises found matching your criteria.</p>\n            ) : (\n              <ul className=\"space-y-1\">\n                {availableExercises.map((ex: FetchedExerciseDefinition) => (\n                  <li key={ex.id!} className=\"flex items-center justify-between p-2 text-sm hover:bg-accent rounded-md\">\n                    <div className=\"flex items-center gap-2\">\n                      <Checkbox\n                        id={`add-exercise-${ex.id!}`}\n                        checked={selectedExerciseIds.has(ex.id!)}\n                        onCheckedChange={(checked) => handleToggleSelect(ex.id!, !!checked)}\n                      />\n                      <Label htmlFor={`add-exercise-${ex.id!}`} className=\"font-medium cursor-pointer\">\n                        {ex.name}\n                      </Label>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </ScrollArea>\n        </div>\n        <DialogFooter className=\"flex flex-row justify-end gap-2 pt-4\">\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)} size=\"sm\">Cancel</Button>\n          <Button onClick={handleAddSelected} disabled={selectedExerciseIds.size === 0} size=\"sm\">\n            Add {selectedExerciseIds.size > 0 ? `(${selectedExerciseIds.size})` : ''} Exercises\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9437},"apps/web/src/components/profile/add-gym-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables } from '@/types/supabase';\nimport { SetupGymView } from './setup-gym-view';\nimport { GymPhotoSetupStep } from './gym-photo-setup-step';\n\ntype Gym = Tables<'gyms'>;\n\ninterface AddGymDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSaveSuccess: () => void;\n  gymCount: number;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void;\n}\n\nexport const AddGymDialog = ({ open, onOpenChange, onSaveSuccess, gymCount, setTempStatusMessage }: AddGymDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [step, setStep] = useState<'name' | 'configure' | 'ai-upload'>('name');\n  const [newGymName, setNewGymName] = useState(\"\");\n  const [createdGym, setCreatedGym] = useState<Gym | null>(null);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const handleClose = async () => {\n    if (createdGym) {\n      await onSaveSuccess();\n    }\n    onOpenChange(false);\n    setTimeout(() => {\n      setStep('name');\n      setNewGymName(\"\");\n      setCreatedGym(null);\n      setIsSaving(false);\n    }, 300);\n  };\n\n  const handleNameSubmit = async () => {\n    if (!memoizedSessionUserId) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!newGymName.trim()) {\n      setTempStatusMessage({ message: \"Name empty!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (gymCount >= 3) {\n      setTempStatusMessage({ message: \"Max 3 gyms!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      const { data: insertedGym, error } = await supabase\n        .from('gyms')\n        .insert({ name: newGymName, user_id: memoizedSessionUserId })\n        .select('*')\n        .single();\n\n      if (error) throw error;\n\n      setCreatedGym(insertedGym);\n      setStep('configure');\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to add gym:\", err.message);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] flex flex-col\">\n        {step === 'name' && (\n          <>\n            <DialogHeader>\n              <DialogTitle>Add New Gym</DialogTitle>\n              <DialogDescription>\n                Give your new gym a name. You can have up to 3 gyms.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <Input\n                placeholder=\"e.g., Home Gym, Fitness First\"\n                value={newGymName}\n                onChange={(e) => setNewGymName(e.target.value)}\n                disabled={isSaving}\n              />\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={handleClose}>Cancel</Button>\n              <Button onClick={handleNameSubmit} disabled={isSaving || !newGymName.trim()}>\n                {isSaving ? \"Saving...\" : \"Save & Continue\"}\n              </Button>\n            </DialogFooter>\n          </>\n        )}\n        {step === 'configure' && createdGym && (\n          <SetupGymView\n            gym={createdGym}\n            onClose={handleClose}\n            onSelectAiSetup={() => setStep('ai-upload')}\n            setTempStatusMessage={setTempStatusMessage}\n          />\n        )}\n        {step === 'ai-upload' && createdGym && (\n          <GymPhotoSetupStep\n            gym={createdGym}\n            onBack={() => setStep('configure')}\n            onFinish={handleClose}\n            setTempStatusMessage={setTempStatusMessage}\n          />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4442},"apps/web/src/components/profile/ai-coach-usage-section.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from \"@/components/ui/progress\";\nimport { Bot } from 'lucide-react';\n\ninterface AICoachUsageSectionProps {\n  aiCoachUsageToday: number;\n  AI_COACH_DAILY_LIMIT: number;\n}\n\nexport const AICoachUsageSection = ({ aiCoachUsageToday, AI_COACH_DAILY_LIMIT }: AICoachUsageSectionProps) => {\n  return (\n    <Card className=\"bg-card\">\n      <CardHeader className=\"border-b border-border/50 pb-4\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bot className=\"h-5 w-5 text-primary\" /> AI Coach Usage\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-2 pt-6\">\n        <div className=\"flex justify-between items-center text-sm mb-2\">\n          <p>Daily Uses</p>\n          <p className=\"font-semibold\">{aiCoachUsageToday} / {AI_COACH_DAILY_LIMIT}</p>\n        </div>\n        <Progress value={(aiCoachUsageToday / AI_COACH_DAILY_LIMIT) * 100} />\n        <p className=\"text-xs text-muted-foreground pt-1\">\n          The AI Coach needs at least 3 workouts in the last 30 days to provide advice.\n        </p>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":1222},"apps/web/src/components/profile/body-fat-info-modal.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Info, Image } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables } from '@/types/supabase';\n\ntype BodyFatReferenceImage = Tables<'body_fat_reference_images'>;\n\ninterface BodyFatInfoModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const BodyFatInfoModal = ({ open, onOpenChange }: BodyFatInfoModalProps) => {\n  const { supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [referenceImages, setReferenceImages] = useState<BodyFatReferenceImage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchReferenceImages = async () => {\n      if (!open) return;\n      if (!memoizedSessionUserId) { // Ensure user is logged in\n        setLoading(false);\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n      try {\n        const { data, error } = await supabase\n          .from('body_fat_reference_images')\n          .select('*')\n          .order('percentage', { ascending: true });\n\n        if (error) throw error;\n        setReferenceImages(data || []);\n      } catch (err: any) {\n        console.error(\"Failed to fetch body fat reference images:\", err);\n        setError(err.message || \"Failed to load body fat reference images.\");\n        toast.error(err.message || \"Failed to load body fat reference images.\"); // Changed to toast.error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReferenceImages();\n  }, [open, supabase, memoizedSessionUserId]); // Depend on memoized ID\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Info className=\"h-5 w-5\" /> Body Fat % Reference\n          </DialogTitle>\n          <DialogDescription>\n            Visual guide to help estimate body fat percentages.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"flex-grow overflow-y-auto py-4 pr-4\">\n          {loading ? (\n            <p className=\"text-center text-muted-foreground\">Loading images...</p>\n          ) : error ? (\n            <p className=\"text-destructive text-center\">Error: {error}</p>\n          ) : referenceImages.length === 0 ? (\n            <p className=\"text-center text-muted-foreground\">No reference images available.</p>\n          ) : (\n            <div className=\"space-y-6\">\n              {referenceImages.map((ref) => (\n                <div key={ref.id} className=\"flex flex-col items-center text-center\">\n                  <h3 className=\"text-xl font-bold mb-2\">{ref.percentage}% Body Fat</h3>\n                  {ref.image_url ? (\n                    <img\n                      src={ref.image_url}\n                      alt={`${ref.percentage}% Body Fat`}\n                      className=\"w-full max-w-xs rounded-lg shadow-md object-cover mb-3\"\n                      style={{ aspectRatio: '1/1' }} // Ensure square aspect ratio\n                    />\n                  ) : (\n                    <div className=\"w-full max-w-xs h-48 bg-muted flex items-center justify-center rounded-lg mb-3\">\n                      <Image className=\"h-12 w-12 text-muted-foreground\" />\n                    </div>\n                  )}\n                  {ref.description && (\n                    <p className=\"text-sm text-muted-foreground\">{ref.description}</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n        <div className=\"flex justify-center pt-4\">\n          <Button onClick={() => onOpenChange(false)}>Close</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4160},"apps/web/src/components/profile/copy-gym-setup-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables } from '@/types/supabase';\nimport { LoadingOverlay } from '../loading-overlay';\n\ntype Gym = Tables<'gyms'>;\n\ninterface CopyGymSetupDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  targetGym: Gym;\n  sourceGyms: Gym[];\n  onCopySuccess: () => Promise<void>; // Changed to return a Promise\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void;\n}\n\nexport const CopyGymSetupDialog = ({ open, onOpenChange, targetGym, sourceGyms, onCopySuccess, setTempStatusMessage }: CopyGymSetupDialogProps) => {\n  const { session, memoizedSessionUserId } = useSession();\n  const [selectedSourceGymId, setSelectedSourceGymId] = useState<string>(\"\");\n  const [isCopying, setIsCopying] = useState(false);\n\n  const handleCopySetup = async () => {\n    if (!memoizedSessionUserId) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!selectedSourceGymId) {\n      setTempStatusMessage({ message: \"Select gym!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsCopying(true);\n    try {\n      const response = await fetch('/api/copy-gym-setup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session?.access_token}`,\n        },\n        body: JSON.stringify({ sourceGymId: selectedSourceGymId, targetGymId: targetGym.id }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to copy gym setup.');\n      }\n\n      // CRITICAL FIX: Await the data refresh before closing the dialog and showing success.\n      await onCopySuccess();\n\n      setTempStatusMessage({ message: \"Copied!\", type: 'success' });\n      onOpenChange(false);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to copy gym setup:\", err.message);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsCopying(false);\n    }\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Copy Setup to \"{targetGym.name}\"</DialogTitle>\n            <DialogDescription>\n              Select an existing gym to copy its exercise list from.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <Select onValueChange={setSelectedSourceGymId} value={selectedSourceGymId}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a source gym\" />\n              </SelectTrigger>\n              <SelectContent>\n                {sourceGyms.map(gym => (\n                  <SelectItem key={gym.id} value={gym.id}>\n                    {gym.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n            <Button onClick={handleCopySetup} disabled={isCopying || !selectedSourceGymId}>\n              {isCopying ? \"Copying...\" : \"Copy Setup\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      <LoadingOverlay isOpen={isCopying} title=\"Copying Gym Setup\" description=\"Please wait...\" />\n    </>\n  );\n};","size_bytes":4025},"apps/web/src/components/profile/data-export-section.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Download, Loader2, FileText } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables } from '@/types/supabase';\n\ntype WorkoutSession = Tables<'workout_sessions'>;\ntype SetLog = Tables<'set_logs'>;\ntype ActivityLog = Tables<'activity_logs'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\nexport const DataExportSection = () => {\n  const { session, supabase } = useSession();\n  const [loading, setLoading] = useState(false);\n\n  const exportDataToCsv = async () => {\n    if (!session) {\n      toast.error(\"You must be logged in to export data.\"); // Changed to toast.error\n      return;\n    }\n\n    setLoading(true);\n    const toastId = toast.loading(\"Preparing your data for export...\"); // Initial loading toast\n\n    try {\n      // Fetch Workout Sessions\n      const { data: workoutSessions, error: wsError } = await supabase\n        .from('workout_sessions')\n        .select('id, template_name, session_date, duration_string, rating, completed_at')\n        .eq('user_id', session.user.id)\n        .order('session_date', { ascending: false });\n      if (wsError) throw wsError;\n\n      // Fetch Set Logs with Exercise Names\n      const { data: setLogs, error: slError } = await supabase\n        .from('set_logs')\n        .select(`\n          id, session_id, weight_kg, reps, reps_l, reps_r, time_seconds, is_pb, created_at,\n          exercise_definitions (name),\n          workout_sessions (template_name)\n        `)\n        .eq('workout_sessions.user_id', session.user.id)\n        .order('created_at', { ascending: false });\n      if (slError) throw slError;\n\n      // Fetch Activity Logs\n      const { data: activityLogs, error: alError } = await supabase\n        .from('activity_logs')\n        .select('id, activity_type, log_date, distance, time, avg_time, is_pb, created_at')\n        .eq('user_id', session.user.id)\n        .order('log_date', { ascending: false });\n      if (alError) throw alError;\n\n      const csvContent: string[] = [];\n\n      // --- Workout Sessions CSV ---\n      csvContent.push('Workout Sessions\\n');\n      if (workoutSessions && workoutSessions.length > 0) {\n        const wsHeaders = ['ID', 'Template Name', 'Session Date', 'Duration', 'Rating', 'Completed At'];\n        csvContent.push(wsHeaders.join(',') + '\\n');\n        workoutSessions.forEach(sessionItem => {\n          const row = [\n            sessionItem.id,\n            sessionItem.template_name || 'Ad Hoc Workout',\n            new Date(sessionItem.session_date).toLocaleString(),\n            sessionItem.duration_string || 'N/A',\n            sessionItem.rating || 'N/A',\n            sessionItem.completed_at ? new Date(sessionItem.completed_at).toLocaleString() : 'N/A',\n          ];\n          csvContent.push(row.map(item => `\"${String(item).replace(/\"/g, '\"\"')}\"`).join(',') + '\\n');\n        });\n      } else {\n        csvContent.push('No workout sessions found.\\n');\n      }\n      csvContent.push('\\n'); // Separator\n\n      // --- Set Logs CSV ---\n      csvContent.push('Set Logs\\n');\n      if (setLogs && setLogs.length > 0) {\n        const slHeaders = ['ID', 'Session ID', 'Workout Name', 'Exercise Name', 'Weight (kg)', 'Reps', 'Reps (L)', 'Reps (R)', 'Time (s)', 'Is PR', 'Created At'];\n        csvContent.push(slHeaders.join(',') + '\\n');\n        setLogs.forEach((log: any) => { // Use 'any' for joined data for simplicity in export\n          const row = [\n            log.id,\n            log.session_id,\n            log.workout_sessions?.template_name || 'N/A',\n            log.exercise_definitions?.name || 'Unknown Exercise',\n            log.weight_kg || 'N/A',\n            log.reps || 'N/A',\n            log.reps_l || 'N/A',\n            log.reps_r || 'N/A',\n            log.time_seconds || 'N/A',\n            log.is_pb ? 'Yes' : 'No',\n            new Date(log.created_at).toLocaleString(),\n          ];\n          csvContent.push(row.map(item => `\"${String(item).replace(/\"/g, '\"\"')}\"`).join(',') + '\\n');\n        });\n      } else {\n        csvContent.push('No set logs found.\\n');\n      }\n      csvContent.push('\\n'); // Separator\n\n      // --- Activity Logs CSV ---\n      csvContent.push('Activity Logs\\n');\n      if (activityLogs && activityLogs.length > 0) {\n        const alHeaders = ['ID', 'Activity Type', 'Log Date', 'Distance', 'Time', 'Avg. Time', 'Is PB', 'Created At'];\n        csvContent.push(alHeaders.join(',') + '\\n');\n        activityLogs.forEach(activity => {\n          const row = [\n            activity.id,\n            activity.activity_type,\n            new Date(activity.log_date).toLocaleDateString(),\n            activity.distance || 'N/A',\n            activity.time || 'N/A',\n            activity.avg_time || 'N/A',\n            activity.is_pb ? 'Yes' : 'No',\n            new Date(activity.created_at).toLocaleString(),\n          ];\n          csvContent.push(row.map(item => `\"${String(item).replace(/\"/g, '\"\"')}\"`).join(',') + '\\n');\n        });\n      } else {\n        csvContent.push('No activity logs found.\\n');\n      }\n\n      const blob = new Blob([csvContent.join('')], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `workout_data_${new Date().toISOString().split('T')[0]}.csv`);\n      link.click();\n      URL.revokeObjectURL(url);\n\n      toast.success(\"Your data has been exported successfully!\", { id: toastId }); // Update to success\n\n    } catch (error: any) {\n      console.error(\"Error exporting data:\", error);\n      toast.error(\"Failed to export data: \" + error.message, { id: toastId }); // Update to error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-card\">\n      <CardHeader className=\"border-b border-border/50 pb-4\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileText className=\"h-5 w-5 text-primary\" /> Data Export\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4 pt-6\">\n        <p className=\"text-sm text-muted-foreground\">\n          Download all your workout sessions, set logs, and activity logs as a CSV file.\n          This allows you to keep a personal backup of your fitness journey.\n        </p>\n        <Button onClick={exportDataToCsv} disabled={loading} className=\"w-full\">\n          {loading ? (\n            <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n          ) : (\n            <Download className=\"h-4 w-4 mr-2\" />\n          )}\n          {loading ? \"Exporting Data...\" : \"Export My Data\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":6858},"apps/web/src/components/profile/gym-exercise-manager.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables, FetchedExerciseDefinition, Profile } from '@/types/supabase';\nimport { LoadingOverlay } from '../loading-overlay';\nimport { LayoutTemplate, PlusCircle, Trash2, Info } from 'lucide-react';\nimport { SetupGymPlanPrompt } from '@/components/manage-t-paths/setup-gym-plan-prompt';\nimport { AddExercisesToWorkoutDialog } from './add-exercises-to-workout-dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { ExerciseInfoDialog } from '@/components/exercise-info-dialog';\n\n// DND imports\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragEndEvent } from '@dnd-kit/core';\nimport { SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { arrayMove } from '@dnd-kit/sortable';\n\n// New sortable components\nimport { SortableGymExerciseList } from './gym-exercise-manager/sortable-gym-exercise-list';\nimport { SortableGymExerciseItem } from './gym-exercise-manager/sortable-gym-exercise-item';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { useWorkoutDataFetcher } from '@/hooks/use-workout-data-fetcher'; // NEW: Import useWorkoutDataFetcher\nimport { ConfirmRemoveExerciseDialog } from '@/components/manage-t-paths/edit-workout-exercises/confirm-remove-exercise-dialog'; // NEW: Import ConfirmRemoveExerciseDialog\n\n\ntype Gym = Tables<'gyms'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype TPath = Tables<'t_paths'>;\ntype TPathExercise = Tables<'t_path_exercises'>;\n\nexport interface WorkoutExerciseWithDetails extends ExerciseDefinition {\n  id: string;\n  name: string;\n  order_index: number;\n  is_bonus_exercise: boolean;\n  t_path_exercise_id: string;\n}\n\ntype GymExerciseLink = { exercise_id: string; gym_id: string; };\ntype TPathExerciseLink = { id: string; exercise_id: string; order_index: number; is_bonus_exercise: boolean | null; };\n\n\ninterface ManageGymWorkoutsExercisesDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  gym: Gym | null;\n  onSaveSuccess: () => void;\n  profile: Profile | null;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ManageGymWorkoutsExercisesDialog = ({ open, onOpenChange, gym, onSaveSuccess, profile, setTempStatusMessage }: ManageGymWorkoutsExercisesDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  // NEW: Consume data from useWorkoutDataFetcher\n  const {\n    allAvailableExercises: fetchedAllAvailableExercises,\n    groupedTPaths,\n    availableMuscleGroups: fetchedAvailableMuscleGroups,\n    refreshAllData,\n  } = useWorkoutDataFetcher();\n\n  const [mainTPath, setMainTPath] = useState<TPath | null>(null);\n  const [childWorkouts, setChildWorkouts] = useState<TPath[]>([]);\n  const [selectedWorkoutId, setSelectedWorkoutId] = useState<string | null>(null);\n  const [coreExercises, setCoreExercises] = useState<WorkoutExerciseWithDetails[]>([]);\n  const [bonusExercises, setBonusExercises] = useState<WorkoutExerciseWithDetails[]>([]);\n  const [exerciseIdsInGym, setExerciseIdsInGym] = useState<Set<string>>(new Set());\n  \n  const [loading, setLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [addExerciseSourceFilter, setAddExerciseSourceFilter] = useState<'my-exercises' | 'global-library'>('my-exercises');\n\n  const [showAddExercisesDialog, setShowAddExercisesDialog] = useState(false);\n  const [selectedExerciseForInfo, setSelectedExerciseForInfo] = useState<FetchedExerciseDefinition | null>(null);\n  const [isInfoDialogOpen, setIsInfoDialogOpen] = useState(false);\n\n  const [showConfirmRemoveDialog, setShowConfirmRemoveDialog] = useState(false);\n  const [exerciseToRemove, setExerciseToRemove] = useState<WorkoutExerciseWithDetails | null>(null);\n\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [showDiscardChangesDialog, setShowDiscardChangesDialog] = useState(false);\n\n\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates }));\n\n  const fetchData = useCallback(async () => {\n    if (!memoizedSessionUserId || !gym || !profile) { // Use memoized ID\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    try {\n      // Find the main T-Path for the current gym\n      const mainTPathData = groupedTPaths.find(group => group.mainTPath.gym_id === gym.id)?.mainTPath || null;\n      setMainTPath(mainTPathData);\n\n      if (!mainTPathData) {\n        setChildWorkouts([]);\n        setCoreExercises([]);\n        setBonusExercises([]);\n        setExerciseIdsInGym(new Set());\n        setLoading(false);\n        return;\n      }\n\n      const { data: childWorkoutsData, error: childWorkoutsError } = await supabase\n        .from('t_paths')\n        .select('*')\n        .eq('parent_t_path_id', mainTPathData.id)\n        .eq('is_bonus', true)\n        .order('template_name', { ascending: true });\n      if (childWorkoutsError) throw childWorkoutsError;\n      setChildWorkouts(childWorkoutsData || []);\n\n      const { data: gymExRes, error: gymExError } = await supabase\n        .from('gym_exercises')\n        .select('exercise_id')\n        .eq('gym_id', gym.id);\n      if (gymExError) throw gymExError;\n      setExerciseIdsInGym(new Set((gymExRes || []).map((link: { exercise_id: string }) => link.exercise_id)));\n\n      const initialSelectedWorkoutId = selectedWorkoutId || (childWorkoutsData && childWorkoutsData.length > 0 ? childWorkoutsData[0].id : null);\n      setSelectedWorkoutId(initialSelectedWorkoutId);\n\n      if (initialSelectedWorkoutId) {\n        const { data: tpeRes, error: tpeError } = await supabase\n          .from('t_path_exercises')\n          .select('id, exercise_id, order_index, is_bonus_exercise')\n          .eq('template_id', initialSelectedWorkoutId)\n          .order('order_index', { ascending: true });\n        if (tpeError) throw tpeError;\n\n        const exerciseDefMap = new Map<string, ExerciseDefinition>();\n        fetchedAllAvailableExercises.forEach(def => exerciseDefMap.set(def.id as string, def as ExerciseDefinition));\n\n        const fetchedExercises = (tpeRes || []).map((link: TPathExerciseLink) => {\n          const exerciseDef = exerciseDefMap.get(link.exercise_id);\n          if (!exerciseDef) return null;\n          return {\n            ...exerciseDef,\n            id: exerciseDef.id!, // Non-null assertion\n            name: exerciseDef.name,\n            order_index: link.order_index,\n            is_bonus_exercise: link.is_bonus_exercise || false,\n            t_path_exercise_id: link.id,\n          };\n        }).filter(Boolean) as WorkoutExerciseWithDetails[];\n        \n        setCoreExercises(fetchedExercises.filter(ex => !ex.is_bonus_exercise));\n        setBonusExercises(fetchedExercises.filter(ex => ex.is_bonus_exercise));\n\n      } else {\n        setCoreExercises([]);\n        setBonusExercises([]);\n      }\n\n    } catch (err: any) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      console.error(\"Error fetching gym workout data:\", err);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  }, [memoizedSessionUserId, supabase, gym, profile, selectedWorkoutId, groupedTPaths, fetchedAllAvailableExercises, setTempStatusMessage]); // Depend on memoized ID, groupedTPaths and fetchedAllAvailableExercises\n\n  const refreshDialogData = useCallback(() => {\n    fetchData();\n    onSaveSuccess();\n    setHasUnsavedChanges(false); // Clear unsaved changes after a full refresh\n  }, [fetchData, onSaveSuccess]);\n\n  useEffect(() => {\n    if (open) {\n      fetchData();\n    } else {\n      setMainTPath(null);\n      setChildWorkouts([]);\n      setSelectedWorkoutId(null);\n      setCoreExercises([]);\n      setBonusExercises([]);\n      setExerciseIdsInGym(new Set());\n      setAddExerciseSourceFilter('my-exercises');\n      setHasUnsavedChanges(false); // Reset on close\n    }\n  }, [open, refreshDialogData]);\n\n  const handleAddExercisesToWorkout = useCallback(async (exerciseIds: string[]) => {\n    if (!memoizedSessionUserId || !gym || !selectedWorkoutId || exerciseIds.length === 0) return; // Use memoized ID\n    setIsSaving(true);\n\n    try {\n      const exercisesToInsert: { template_id: string; exercise_id: string; order_index: number; is_bonus_exercise: boolean }[] = [];\n      const gymLinksToInsert: { gym_id: string; exercise_id: string }[] = [];\n      const optimisticUpdates: WorkoutExerciseWithDetails[] = [];\n\n      let currentMaxOrderIndex = [...coreExercises, ...bonusExercises].length > 0 ? Math.max(...[...coreExercises, ...bonusExercises].map(e => e.order_index)) : -1;\n\n      for (const exerciseId of exerciseIds) {\n        const exerciseDef = fetchedAllAvailableExercises.find(ex => ex.id === exerciseId);\n        if (!exerciseDef) {\n          console.warn(`Exercise definition not found for ID: ${exerciseId}, skipping.`);\n          continue;\n        }\n\n        if (!exerciseIdsInGym.has(exerciseId)) {\n          gymLinksToInsert.push({ gym_id: gym.id, exercise_id: exerciseId });\n        }\n\n        currentMaxOrderIndex++;\n        optimisticUpdates.push({\n          ...exerciseDef,\n          id: exerciseDef.id!, // Non-null assertion\n          name: exerciseDef.name,\n          order_index: currentMaxOrderIndex,\n          is_bonus_exercise: false,\n          t_path_exercise_id: `temp-${Date.now()}-${exerciseId}`,\n        });\n        exercisesToInsert.push({\n          template_id: selectedWorkoutId,\n          exercise_id: exerciseId,\n          order_index: currentMaxOrderIndex,\n          is_bonus_exercise: false,\n        });\n      }\n\n      setCoreExercises(prev => [...prev, ...optimisticUpdates]);\n      setExerciseIdsInGym(prev => new Set([...prev, ...exerciseIds.filter(id => !prev.has(id))]));\n      setHasUnsavedChanges(true); // Mark as unsaved after adding\n\n      if (gymLinksToInsert.length > 0) {\n        const { error: linkError } = await supabase.from('gym_exercises').insert(gymLinksToInsert).select();\n        if (linkError) throw linkError;\n      }\n\n      if (exercisesToInsert.length > 0) {\n        const { data: insertedTpes, error: insertError } = await supabase\n          .from('t_path_exercises')\n          .insert(exercisesToInsert)\n          .select('id, exercise_id');\n\n        if (insertError) throw insertError;\n\n        setCoreExercises(prev => prev.map(ex => \n          ex.t_path_exercise_id.startsWith('temp-') && insertedTpes.some(tpe => tpe.exercise_id === ex.id)\n            ? { ...ex, t_path_exercise_id: insertedTpes.find(tpe => tpe.exercise_id === ex.id)?.id || ex.t_path_exercise_id }\n            : ex\n        ));\n      }\n\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSaveSuccess();\n      refreshAllData(); // Refresh all data after adding exercises\n    } catch (err: any) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      console.error(\"Error adding exercises to workout:\", err);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      setCoreExercises(prev => prev.filter(ex => !ex.t_path_exercise_id.startsWith('temp-')));\n      setExerciseIdsInGym(prev => new Set([...prev].filter(id => !exerciseIds.includes(id))));\n    } finally {\n      setIsSaving(false);\n    }\n  }, [memoizedSessionUserId, supabase, gym, selectedWorkoutId, coreExercises, bonusExercises, fetchedAllAvailableExercises, exerciseIdsInGym, onSaveSuccess, refreshAllData, setTempStatusMessage]); // Depend on memoized ID\n\n\n  const handleRemoveExerciseClick = useCallback((exerciseId: string) => {\n    const exercise = [...coreExercises, ...bonusExercises].find(ex => ex.id === exerciseId);\n    if (exercise) {\n      setExerciseToRemove(exercise);\n      setShowConfirmRemoveDialog(true);\n    }\n  }, [coreExercises, bonusExercises]);\n\n  const confirmRemoveExercise = useCallback(async () => {\n    if (!memoizedSessionUserId || !selectedWorkoutId || !exerciseToRemove) return; // Use memoized ID\n    setIsSaving(true);\n    setShowConfirmRemoveDialog(false);\n\n    try {\n      // Optimistic update\n      setCoreExercises(prev => prev.filter(ex => ex.id !== exerciseToRemove.id));\n      setBonusExercises(prev => prev.filter(ex => ex.id !== exerciseToRemove.id));\n      setHasUnsavedChanges(true); // Mark as unsaved after removing\n\n      const { error: deleteError } = await supabase\n        .from('t_path_exercises')\n        .delete()\n        .eq('id', exerciseToRemove.t_path_exercise_id);\n\n      if (deleteError) {\n        // Rollback on error\n        if (!exerciseToRemove.is_bonus_exercise) {\n          setCoreExercises(prev => [...prev, exerciseToRemove]);\n        } else {\n          setBonusExercises(prev => [...prev, exerciseToRemove]);\n        }\n        throw deleteError;\n      }\n\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSaveSuccess();\n      refreshAllData(); // Refresh all data after removing an exercise\n    } catch (err: any) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      console.error(\"Error removing exercise from workout:\", err);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n      setExerciseToRemove(null);\n    }\n  }, [memoizedSessionUserId, supabase, selectedWorkoutId, coreExercises, bonusExercises, exerciseToRemove, onSaveSuccess, refreshAllData, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleWorkoutSelectChange = useCallback((newWorkoutId: string) => {\n    setSelectedWorkoutId(newWorkoutId);\n  }, []);\n\n  const handleOpenInfoDialog = (exercise: WorkoutExerciseWithDetails) => {\n    setSelectedExerciseForInfo(exercise as FetchedExerciseDefinition);\n    setIsInfoDialogOpen(true);\n  };\n\n  const handleDragEnd = useCallback(async (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (!over || !selectedWorkoutId) return;\n\n    const activeId = active.id as string;\n    const overId = over.id as string;\n    const overContainerId = over.data.current?.sortable?.containerId || over.id;\n    const activeContainerId = active.data.current?.sortable?.containerId || active.id;\n\n    let newCore = [...coreExercises];\n    let newBonus = [...bonusExercises];\n    \n    // Find the dragged item\n    const draggedItem = [...newCore, ...newBonus].find(ex => ex.id === activeId);\n    if (!draggedItem) return;\n\n    if (activeContainerId === overContainerId) {\n      // Moved within the same list\n      const isCoreList = activeContainerId === 'core-exercises';\n      const currentList = isCoreList ? newCore : newBonus;\n      \n      const oldIndex = currentList.findIndex(item => item.id === activeId);\n      const newIndex = currentList.findIndex(item => item.id === overId);\n\n      const newOrderedList = arrayMove(currentList, oldIndex, newIndex);\n      \n      if (isCoreList) {\n        setCoreExercises(newOrderedList);\n      } else {\n        setBonusExercises(newOrderedList);\n      }\n\n    } else {\n      // Moved between lists (e.g., Core to Bonus, or Bonus to Core)\n      const isMovingToBonus = overContainerId === 'bonus-exercises';\n\n      // Remove from source list\n      newCore = newCore.filter(ex => ex.id !== activeId);\n      newBonus = newBonus.filter(ex => ex.id !== activeId);\n\n      // Add to target list at the correct position\n      const targetList = isMovingToBonus ? newBonus : newCore;\n      const newIndex = targetList.findIndex(item => item.id === overId);\n      const insertIndex = newIndex === -1 ? targetList.length : newIndex;\n\n      const newItem = { ...draggedItem, is_bonus_exercise: isMovingToBonus };\n      targetList.splice(insertIndex, 0, newItem);\n\n      setCoreExercises(newCore);\n      setBonusExercises(newBonus);\n    }\n    setHasUnsavedChanges(true); // Mark as unsaved after any drag-and-drop\n    setTempStatusMessage({ message: \"Order changed!\", type: 'success' });\n    setTimeout(() => setTempStatusMessage(null), 3000);\n  }, [coreExercises, bonusExercises, selectedWorkoutId, setTempStatusMessage]);\n\n  const handleSaveChanges = useCallback(async () => {\n    if (!memoizedSessionUserId || !selectedWorkoutId || !hasUnsavedChanges) return; // Use memoized ID\n    setIsSaving(true);\n    try {\n      const updates = [\n        ...coreExercises.map((ex, index) => ({ id: ex.t_path_exercise_id, order_index: index, is_bonus_exercise: false })),\n        ...bonusExercises.map((ex, index) => ({ id: ex.t_path_exercise_id, order_index: index, is_bonus_exercise: true })),\n      ];\n      const { error } = await supabase.rpc('update_gym_exercise_order_and_status', { updates });\n      if (error) throw error;\n      setTempStatusMessage({ message: \"Saved!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      setHasUnsavedChanges(false);\n      onSaveSuccess();\n      refreshAllData(); // Refresh all data after saving changes\n    } catch (err: any) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      console.error(\"Error saving exercise order/status:\", err);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [memoizedSessionUserId, supabase, selectedWorkoutId, coreExercises, bonusExercises, hasUnsavedChanges, onSaveSuccess, refreshAllData, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleCloseDialog = useCallback(() => {\n    if (hasUnsavedChanges) {\n      setShowDiscardChangesDialog(true);\n    } else {\n      onOpenChange(false);\n    }\n  }, [hasUnsavedChanges, onOpenChange]);\n\n  const handleConfirmDiscard = useCallback(() => {\n    setShowDiscardChangesDialog(false);\n    onOpenChange(false); // Close the main dialog\n  }, [onOpenChange]);\n\n  const handleCancelDiscard = useCallback(() => {\n    setShowDiscardChangesDialog(false);\n  }, []);\n\n\n  if (!gym) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={handleCloseDialog}>\n        <DialogContent className=\"sm:max-w-xl max-h-[90vh] flex flex-col p-0\">\n          <DialogHeader className=\"p-4 pb-2 border-b\">\n            <DialogTitle className=\"flex items-center gap-2 text-xl\">\n              <LayoutTemplate className=\"h-5 w-5\" /> Manage Workouts for \"{gym.name}\"\n            </DialogTitle>\n            <DialogDescription className=\"text-sm\">\n              Select a workout to add, remove, or reorder exercises.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex-grow flex flex-col p-4 space-y-4 overflow-hidden\">\n            {loading ? (\n              <p className=\"text-muted-foreground text-center\">Loading gym workout data...</p>\n            ) : !mainTPath ? (\n              <div className=\"text-center text-muted-foreground\">\n                <SetupGymPlanPrompt gym={gym} onSetupSuccess={refreshDialogData} profile={profile} setTempStatusMessage={setTempStatusMessage} />\n              </div>\n            ) : (\n              <>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Select onValueChange={handleWorkoutSelectChange} value={selectedWorkoutId || ''}>\n                    <SelectTrigger className=\"flex-1 h-9 text-sm\">\n                      <SelectValue placeholder=\"Select a workout to manage\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {childWorkouts.map(workout => (\n                        <SelectItem key={workout.id} value={workout.id}>\n                          {workout.template_name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Button \n                    onClick={() => setShowAddExercisesDialog(true)} \n                    disabled={!selectedWorkoutId}\n                    className=\"flex-shrink-0 sm:w-1/3 h-9 text-sm\"\n                  >\n                    <PlusCircle className=\"h-4 w-4 mr-2\" /> Add Exercises\n                  </Button>\n                </div>\n                \n                {selectedWorkoutId ? (\n                  <div className=\"flex-grow flex flex-col gap-4 overflow-y-auto\">\n                    <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n                      <SortableGymExerciseList\n                        id=\"core-exercises\"\n                        title=\"Core Exercises\"\n                        exercises={coreExercises}\n                        onDragEnd={handleDragEnd}\n                        onRemoveExercise={handleRemoveExerciseClick}\n                        onOpenInfoDialog={handleOpenInfoDialog}\n                        emptyMessage=\"No core exercises in this workout. Add some!\"\n                      />\n                      <SortableGymExerciseList\n                        id=\"bonus-exercises\"\n                        title=\"Bonus Exercises\"\n                        exercises={bonusExercises}\n                        onDragEnd={handleDragEnd}\n                        onRemoveExercise={handleRemoveExerciseClick}\n                        onOpenInfoDialog={handleOpenInfoDialog}\n                        emptyMessage=\"No bonus exercises in this workout. Add some!\"\n                      />\n                    </DndContext>\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground text-center p-4\">Please select a workout to manage its exercises.</p>\n                )}\n              </>\n            )}\n          </div>\n          <DialogFooter className=\"flex flex-row justify-end gap-2 p-4 pt-2 border-t\">\n            <Button variant=\"outline\" onClick={handleSaveChanges} disabled={isSaving || !hasUnsavedChanges} size=\"sm\">Close</Button>\n            <Button onClick={handleSaveChanges} disabled={isSaving || !hasUnsavedChanges} size=\"sm\">Save Changes</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      <LoadingOverlay isOpen={isSaving} title=\"Updating Workout Exercises\" />\n\n      <AddExercisesToWorkoutDialog\n        open={showAddExercisesDialog}\n        onOpenChange={setShowAddExercisesDialog}\n        // Removed allExercises, muscleGroups props\n        exercisesInWorkout={[...coreExercises, ...bonusExercises].map(ex => ex.id!)} // Non-null assertion\n        onAddExercises={handleAddExercisesToWorkout}\n        addExerciseSourceFilter={addExerciseSourceFilter}\n        setAddExerciseSourceFilter={setAddExerciseSourceFilter}\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n\n      {selectedExerciseForInfo && (\n        <ExerciseInfoDialog\n          open={isInfoDialogOpen}\n          onOpenChange={setIsInfoDialogOpen}\n          exercise={selectedExerciseForInfo}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n\n      <ConfirmRemoveExerciseDialog\n        open={showConfirmRemoveDialog}\n        onOpenChange={setShowConfirmRemoveDialog}\n        exerciseToRemove={exerciseToRemove}\n        onConfirm={confirmRemoveExercise}\n      />\n\n      <AlertDialog open={showDiscardChangesDialog} onOpenChange={setShowDiscardChangesDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Discard Unsaved Changes?</AlertDialogTitle>\n            <AlertDialogDescription>\n              You have unsaved changes. Are you sure you want to close without saving? Your changes will be lost.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleCancelDiscard}>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleConfirmDiscard}>Discard & Close</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};","size_bytes":24527},"apps/web/src/components/profile/gym-exercise-manager/sortable-gym-exercise-item.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Button } from \"@/components/ui/button\";\nimport { GripVertical, Info, Trash2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { WorkoutExerciseWithDetails } from '../gym-exercise-manager';\nimport { toast } from \"sonner\"; // Import toast\n\ninterface SortableGymExerciseItemProps {\n  exercise: WorkoutExerciseWithDetails;\n  onRemove: (exerciseId: string) => void;\n  onOpenInfo: (exercise: WorkoutExerciseWithDetails) => void;\n}\n\nexport const SortableGymExerciseItem = ({ exercise, onRemove, onOpenInfo }: SortableGymExerciseItemProps) => {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: exercise.id });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    zIndex: isDragging ? 10 : 0, // Bring dragged item to front\n  };\n\n  return (\n    <li\n      ref={setNodeRef}\n      style={style}\n      className={cn(\n        \"flex items-center justify-between py-1 px-2 border rounded-md bg-card group hover:bg-accent transition-colors text-sm\",\n        isDragging && \"ring-2 ring-primary\", // Highlight dragged item\n      )}\n    >\n      <div className=\"flex items-center gap-2 flex-grow min-w-0\">\n        <button {...listeners} {...attributes} className=\"cursor-grab p-1 -ml-1\">\n          <GripVertical className=\"h-4 w-4 text-muted-foreground\" />\n        </button>\n        <span className=\"font-medium text-sm text-foreground leading-tight break-words\">{exercise.name}</span>\n      </div>\n      <div className=\"flex gap-1 flex-shrink-0\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => onOpenInfo(exercise)} title=\"Exercise Info\" className=\"h-7 w-7\">\n          <Info className=\"h-4 w-4\" />\n        </Button>\n        <Button variant=\"ghost\" size=\"icon\" title=\"Remove Exercise\" onClick={() => onRemove(exercise.id)} className=\"h-7 w-7\">\n          <Trash2 className=\"h-4 w-4 text-destructive\" />\n        </Button>\n      </div>\n    </li>\n  );\n};","size_bytes":2084},"apps/web/src/components/profile/gym-exercise-manager/sortable-gym-exercise-list.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragEndEvent } from '@dnd-kit/core';\nimport { SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { WorkoutExerciseWithDetails } from '../gym-exercise-manager';\nimport { SortableGymExerciseItem } from './sortable-gym-exercise-item';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface SortableGymExerciseListProps {\n  id: string; // Unique ID for this sortable list (e.g., 'core-exercises', 'bonus-exercises')\n  title: string;\n  exercises: WorkoutExerciseWithDetails[];\n  onDragEnd: (event: DragEndEvent) => void;\n  onRemoveExercise: (exerciseId: string) => void;\n  onOpenInfoDialog: (exercise: WorkoutExerciseWithDetails) => void;\n  emptyMessage: string;\n  className?: string;\n}\n\nexport const SortableGymExerciseList = ({\n  id,\n  title,\n  exercises,\n  onDragEnd,\n  onRemoveExercise,\n  onOpenInfoDialog,\n  emptyMessage,\n  className,\n}: SortableGymExerciseListProps) => {\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates }));\n\n  return (\n    <div className={cn(\"space-y-3\", className)}>\n      <h3 className=\"text-lg font-semibold text-muted-foreground\">{title}</h3>\n      <ScrollArea className=\"h-auto max-h-[250px] border rounded-md p-2\">\n        <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={onDragEnd}>\n          <SortableContext id={id} items={exercises.map(e => e.id)} strategy={verticalListSortingStrategy}>\n            <ul className=\"space-y-1\">\n              {exercises.length === 0 ? (\n                <p className=\"text-muted-foreground text-center p-4 text-sm\">{emptyMessage}</p>\n              ) : (\n                exercises.map(exercise => (\n                  <SortableGymExerciseItem\n                    key={exercise.id}\n                    exercise={exercise}\n                    onRemove={onRemoveExercise}\n                    onOpenInfo={onOpenInfoDialog}\n                  />\n                ))\n              )}\n            </ul>\n          </SortableContext>\n        </DndContext>\n      </ScrollArea>\n    </div>\n  );\n};","size_bytes":2315},"apps/web/src/components/profile/gym-management-section.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Home, PlusCircle, Edit, Trash2, Dumbbell, Save, Loader2 } from 'lucide-react'; // Added Save, Loader2\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { Tables, Profile } from '@/types/supabase';\nimport { useGym } from '@/components/gym-context-provider';\nimport { AddGymDialog } from './add-gym-dialog';\nimport { ManageGymWorkoutsExercisesDialog } from './gym-exercise-manager'; // Import the NEW component\n\ntype Gym = Tables<'gyms'>;\n\ninterface GymManagementSectionProps {\n  profile: Profile | null;\n  onDataChange: () => void; // Callback to refresh parent data\n  setIsSaving: (isSaving: boolean) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const GymManagementSection = ({ profile, onDataChange, setIsSaving, setTempStatusMessage }: GymManagementSectionProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const { userGyms, activeGym, refreshGyms } = useGym(); // Use userGyms and activeGym from context\n  const [loading, setLoading] = useState(true); // Keep local loading for dialogs/actions\n  const [isEditing, setIsEditing] = useState(false); // Local editing state for this section\n\n  // State for dialogs\n  const [isAddGymDialogOpen, setIsAddGymDialogOpen] = useState(false);\n  const [isRenameDialogOpen, setIsRenameDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isLastGymWarningOpen, setIsLastGymWarningOpen] = useState(false);\n  const [isManageExercisesDialogOpen, setIsManageExercisesDialogOpen] = useState(false); // Renamed state\n\n  const [selectedGym, setSelectedGym] = useState<Gym | null>(null);\n  const [newGymName, setNewGymName] = useState(\"\");\n  const [isRenaming, setIsRenaming] = useState(false); // Local state for rename operation\n\n  // Set local loading state based on userGyms availability\n  useEffect(() => {\n    setLoading(userGyms === undefined);\n  }, [userGyms]);\n\n  const handleRenameGym = async () => {\n    if (!memoizedSessionUserId || !selectedGym || !newGymName.trim()) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsRenaming(true); // Set local renaming state\n    setIsSaving(true); // Set global saving state\n    try {\n      const { error } = await supabase.from('gyms').update({ name: newGymName }).eq('id', selectedGym.id);\n      if (error) throw error;\n\n      setTempStatusMessage({ message: \"Renamed!\", type: 'success' });\n      onDataChange(); // Trigger parent refresh\n      refreshGyms(); // Refresh the gym context\n      setIsRenameDialogOpen(false);\n      setNewGymName(\"\");\n      setSelectedGym(null);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to rename gym:\", err.message);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsRenaming(false); // Clear local renaming state\n      setIsSaving(false); // Clear global saving state\n    }\n  };\n\n  const handleDeleteGym = async () => {\n    if (!memoizedSessionUserId || !selectedGym || !profile) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsDeleteDialogOpen(false);\n\n    if (userGyms.length === 1) { // Use userGyms from context\n      setIsLastGymWarningOpen(true);\n      return;\n    }\n\n    setIsSaving(true); // Set global saving state\n    try {\n      if (selectedGym.id === profile.active_gym_id) {\n        const nextActiveGym = userGyms.find(g => g.id !== selectedGym.id); // Use userGyms\n        if (nextActiveGym) {\n          const { error: updateProfileError } = await supabase.from('profiles').update({ active_gym_id: nextActiveGym.id }).eq('id', memoizedSessionUserId); // Use memoized ID\n          if (updateProfileError) throw updateProfileError;\n        }\n      }\n      const { error } = await supabase.from('gyms').delete().eq('id', selectedGym.id);\n      if (error) throw error;\n\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      onDataChange(); // Trigger parent refresh\n      refreshGyms(); // Refresh the gym context\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to delete gym:\", err.message);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false); // Clear global saving state\n      setSelectedGym(null);\n    }\n  };\n\n  const handleConfirmDeleteLastGym = async () => {\n    if (!memoizedSessionUserId || !selectedGym || !profile?.active_t_path_id) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsLastGymWarningOpen(false);\n    setIsSaving(true); // Set global saving state\n    \n    try {\n      const response = await fetch(`/api/generate-t-path`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session?.access_token}` }, // Use session?.access_token\n        body: JSON.stringify({ tPathId: profile.active_t_path_id })\n      });\n      if (!response.ok) throw new Error(\"Failed to reset workout plan.\");\n\n      const { error: deleteError } = await supabase.from('gyms').delete().eq('id', selectedGym.id);\n      if (deleteError) throw deleteError;\n\n      const { error: profileError } = await supabase.from('profiles').update({ active_gym_id: null }).eq('id', memoizedSessionUserId); // Use memoized ID\n      if (profileError) throw profileError;\n\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      onDataChange(); // Trigger parent refresh\n      refreshGyms(); // Refresh the gym context\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to delete last gym:\", err.message);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false); // Clear global saving state\n      setSelectedGym(null);\n    }\n  };\n\n  const handleAddSuccess = () => {\n    refreshGyms(); // This should be sufficient to trigger revalidation and UI update\n    onDataChange(); // NEW: Trigger parent refresh for profile data\n  };\n\n  return (\n    <>\n      <Card className=\"bg-card\">\n        <CardHeader className=\"border-b border-border/50 pb-4 flex flex-row items-center justify-between\"> {/* Adjusted for buttons */}\n          <CardTitle className=\"flex items-center gap-2\">\n            <Home className=\"h-5 w-5 text-primary\" /> My Gyms\n          </CardTitle>\n          {isEditing ? (\n            <Button onClick={() => setIsEditing(false)} size=\"sm\" variant=\"outline\">\n              <Save className=\"h-4 w-4 mr-2\" /> Done\n            </Button>\n          ) : (\n            <Button onClick={() => setIsEditing(true)} size=\"sm\" variant=\"outline\">\n              <Edit className=\"h-4 w-4 mr-2\" /> Edit\n            </Button>\n          )}\n        </CardHeader>\n        <CardContent className=\"space-y-4 pt-6\">\n          {loading ? (\n            <p>Loading gyms...</p>\n          ) : (\n            <ul className=\"space-y-2\">\n              {userGyms.map(gym => ( // Use userGyms from context\n                <li key={gym.id} className=\"flex items-center justify-between p-2 border rounded-md\">\n                  <div>\n                    <span className=\"font-medium\">{gym.name}</span>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Added: {new Date(gym.created_at).toLocaleDateString()}\n                    </p>\n                  </div>\n                  {isEditing && (\n                    <div className=\"flex gap-1\">\n                      <Button type=\"button\" variant=\"ghost\" size=\"icon\" title=\"Manage Exercises\" onClick={() => { setSelectedGym(gym); setIsManageExercisesDialogOpen(true); }}>\n                        <Dumbbell className=\"h-4 w-4\" />\n                      </Button>\n                      <Button type=\"button\" variant=\"ghost\" size=\"icon\" title=\"Rename Gym\" onClick={() => { setSelectedGym(gym); setNewGymName(gym.name); setIsRenameDialogOpen(true); }}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button type=\"button\" variant=\"ghost\" size=\"icon\" title=\"Delete Gym\" onClick={() => { setSelectedGym(gym); setIsDeleteDialogOpen(true); }}>\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  )}\n                </li>\n              ))}\n            </ul>\n          )}\n          {isEditing && userGyms.length < 3 && ( // Use userGyms.length\n            <Button type=\"button\" variant=\"outline\" className=\"w-full\" onClick={() => setIsAddGymDialogOpen(true)}>\n              <PlusCircle className=\"h-4 w-4 mr-2\" /> Add New Gym\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n\n      <AddGymDialog\n        open={isAddGymDialogOpen}\n        onOpenChange={setIsAddGymDialogOpen}\n        onSaveSuccess={handleAddSuccess}\n        gymCount={userGyms.length} // Pass userGyms.length\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n\n      <Dialog open={isRenameDialogOpen} onOpenChange={setIsRenameDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Rename Gym</DialogTitle>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <Input\n              placeholder=\"e.g., Home Gym, Fitness First\"\n              value={newGymName}\n              onChange={(e) => setNewGymName(e.target.value)}\n              disabled={isRenaming}\n            />\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsRenameDialogOpen(false)} disabled={isRenaming}>Cancel</Button>\n            <Button onClick={handleRenameGym} disabled={isRenaming || !newGymName.trim()}>\n              {isRenaming ? <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" /> : <Save className=\"h-4 w-4 mr-2\" />}\n              {isRenaming ? \"Saving...\" : \"Save\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirm Deletion</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete the gym \"{selectedGym?.name}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleDeleteGym}>Delete</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <AlertDialog open={isLastGymWarningOpen} onOpenChange={setIsLastGymWarningOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Warning: Deleting Last Gym</AlertDialogTitle>\n            <AlertDialogDescription>\n              This is your last gym. Deleting it will reset your current workout plan to use default \"common gym\" exercises. Your T-Path and session preferences will be kept. Are you sure you want to continue?\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleConfirmDeleteLastGym}>Continue and Reset Plan</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <ManageGymWorkoutsExercisesDialog // Changed to the new component name\n        open={isManageExercisesDialogOpen}\n        onOpenChange={setIsManageExercisesDialogOpen}\n        gym={selectedGym}\n        onSaveSuccess={() => {\n          onDataChange();\n          refreshGyms();\n        }}\n        profile={profile} // NEW: Pass profile\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n    </>\n  );\n};","size_bytes":13123},"apps/web/src/components/profile/gym-photo-setup-step.tsx":{"content":"\"use client\";\n\nimport React, { useState, useCallback } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { AnalyseGymDialog } from \"@/components/manage-exercises/exercise-form/analyze-gym-dialog\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useSession } from '@/components/session-context-provider';\nimport { Camera, CheckCircle, Trash2, Loader2 } from 'lucide-react';\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { ScrollArea } from '@/components/ui/scroll-area';\n\ninterface GymPhotoSetupStepProps {\n  gym: Tables<'gyms'>;\n  onBack: () => void;\n  onFinish: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void;\n}\n\nexport const GymPhotoSetupStep = ({ gym, onBack, onFinish, setTempStatusMessage }: GymPhotoSetupStepProps) => {\n  const { session, supabase } = useSession();\n  const [identifiedExercises, setIdentifiedExercises] = useState<Partial<FetchedExerciseDefinition>[]>([]);\n  const [confirmedExercises, setConfirmedExercises] = useState<Set<string>>(new Set());\n  const [showAnalyseGymDialog, setShowAnalyseGymDialog] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const addIdentifiedExercise = useCallback((exercise: Partial<FetchedExerciseDefinition>) => {\n    setIdentifiedExercises(prev => {\n      if (prev.some(e => e.name === exercise.name)) return prev;\n      setConfirmedExercises(prevConfirmed => new Set(prevConfirmed).add(exercise.name!));\n      return [...prev, exercise];\n    });\n  }, []);\n\n  const removeIdentifiedExercise = useCallback((exerciseName: string) => {\n    setIdentifiedExercises(prev => prev.filter(e => e.name !== exerciseName));\n    setConfirmedExercises(prevConfirmed => {\n      const newSet = new Set(prevConfirmed);\n      newSet.delete(exerciseName);\n      return newSet;\n    });\n  }, []);\n\n  const toggleConfirmedExercise = useCallback((exerciseName: string) => {\n    setConfirmedExercises(prevConfirmed => {\n      const newSet = new Set(prevConfirmed);\n      if (newSet.has(exerciseName)) {\n        newSet.delete(exerciseName);\n      } else {\n        newSet.add(exerciseName);\n      }\n      return newSet;\n    });\n  }, []);\n\n  const handleExerciseIdentified = useCallback((exercises: Partial<FetchedExerciseDefinition>[], duplicate_status: 'none' | 'global' | 'my-exercises') => {\n    if (exercises.length === 0) {\n      toast.info(\"No exercises were identified from the photos.\");\n      return;\n    }\n    exercises.forEach(ex => {\n      addIdentifiedExercise(ex);\n    });\n  }, [addIdentifiedExercise]);\n\n  const handleSubmit = async () => {\n    if (!session) {\n      toast.error(\"You must be logged in.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const payload = {\n        gymId: gym.id,\n        confirmedExercises: identifiedExercises.filter(ex => confirmedExercises.has(ex.name!)),\n      };\n\n      const response = await fetch('/api/setup-gym-with-ai', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session.access_token}` },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.error || 'Failed to set up gym with AI.');\n\n      setTempStatusMessage({ message: \"Setup complete!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onFinish();\n    } catch (error: any) {\n      console.error(\"Failed to setup gym with AI:\", error);\n      setTempStatusMessage({ message: `Setup failed: ${error.message}`, type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Analyse \"{gym.name}\" with AI</DialogTitle>\n        <DialogDescription>Upload photos of your equipment. The AI will identify exercises and build a plan.</DialogDescription>\n      </DialogHeader>\n      <div className=\"flex-grow overflow-y-auto py-4 space-y-6 pr-4 -mr-4\">\n        <div className=\"p-4 border-2 border-dashed rounded-lg text-center\">\n          <p className=\"text-muted-foreground mb-4 text-sm\">\n            Upload photos of your gym equipment. Our AI will identify exercises you can do. You can upload multiple photos.\n          </p>\n          <Button onClick={() => setShowAnalyseGymDialog(true)} size=\"sm\">\n            <Camera className=\"h-4 w-4 mr-2\" />\n            Upload & Analyse\n          </Button>\n        </div>\n\n        {identifiedExercises.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold mb-2\">Review Identified Exercises:</h4>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Confirm the exercises you want to associate with this gym. Uncheck any you don't want.\n            </p>\n            <ScrollArea className=\"max-h-48 pr-4\">\n              <ul className=\"space-y-2\">\n                {identifiedExercises.map((ex, index) => (\n                  <li key={index} className=\"flex items-center justify-between p-2 border rounded-md bg-muted/50\">\n                    <div className=\"flex items-center gap-3\">\n                      <Checkbox\n                        id={`exercise-${index}`}\n                        checked={confirmedExercises.has(ex.name!)}\n                        onCheckedChange={() => toggleConfirmedExercise(ex.name!)}\n                      />\n                      <Label htmlFor={`exercise-${index}`} className=\"text-sm font-medium cursor-pointer\">\n                        {ex.name}\n                      </Label>\n                    </div>\n                    <Button variant=\"ghost\" size=\"icon\" onClick={() => removeIdentifiedExercise(ex.name!)} className=\"h-7 w-7\">\n                      <Trash2 className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            </ScrollArea>\n          </div>\n        )}\n      </div>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onBack} disabled={loading}>Back</Button>\n        <Button onClick={handleSubmit} disabled={loading || (identifiedExercises.length > 0 && confirmedExercises.size === 0)}>\n          {loading ? <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" /> : <CheckCircle className=\"h-4 w-4 mr-2\" />}\n          {loading ? \"Setting up...\" : \"Finish Setup\"}\n        </Button>\n      </DialogFooter>\n      <AnalyseGymDialog\n        open={showAnalyseGymDialog}\n        onOpenChange={setShowAnalyseGymDialog}\n        onExerciseIdentified={handleExerciseIdentified}\n      />\n    </>\n  );\n};","size_bytes":6809},"apps/web/src/components/profile/manage-exercise-gyms-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, FetchedExerciseDefinition } from '@/types/supabase';\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ntype Gym = Tables<'gyms'>;\n\ninterface ManageExerciseGymsDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exercise: FetchedExerciseDefinition;\n  userGyms: Tables<'gyms'>[]; // NEW: Receive userGyms as a prop\n  initialSelectedGymIds: Set<string>;\n  onSaveSuccess: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ManageExerciseGymsDialog = ({\n  open,\n  onOpenChange,\n  exercise,\n  userGyms, // Use the prop\n  initialSelectedGymIds,\n  onSaveSuccess,\n  setTempStatusMessage, // NEW\n}: ManageExerciseGymsDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [selectedGymIds, setSelectedGymIds] = useState<Set<string>>(initialSelectedGymIds);\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    setSelectedGymIds(initialSelectedGymIds);\n  }, [initialSelectedGymIds, open]);\n\n  const handleToggleGym = (gymId: string) => {\n    setSelectedGymIds(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(gymId)) {\n        newSet.delete(gymId);\n      } else {\n        newSet.add(gymId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleSaveChanges = async () => {\n    if (!memoizedSessionUserId || !exercise.id) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsSaving(true);\n\n    const gymsToAdd = [...selectedGymIds].filter(id => !initialSelectedGymIds.has(id));\n    const gymsToRemove = [...initialSelectedGymIds].filter(id => !selectedGymIds.has(id));\n\n    try {\n      if (gymsToRemove.length > 0) {\n        const { error } = await supabase\n          .from('gym_exercises')\n          .delete()\n          .eq('exercise_id', exercise.id)\n          .in('gym_id', gymsToRemove);\n        if (error) throw error;\n      }\n\n      if (gymsToAdd.length > 0) {\n        const linksToAdd = gymsToAdd.map(gymId => ({\n          gym_id: gymId,\n          exercise_id: exercise.id!,\n        }));\n        const { error } = await supabase.from('gym_exercises').insert(linksToAdd);\n        if (error) throw error;\n      }\n\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSaveSuccess(); // This will trigger the refresh in the parent.\n      onOpenChange(false);\n    } catch (err: any) {\n      console.error(\"Failed to update gym associations:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Manage Gyms for \"{exercise.name}\"</DialogTitle>\n          <DialogDescription>\n            Select the gyms where this exercise is available.\n          </DialogDescription>\n        </DialogHeader>\n        <ScrollArea className=\"max-h-64 py-4\">\n          <div className=\"space-y-3\">\n            {userGyms.length === 0 ? (\n              <p className=\"text-muted-foreground text-sm\">You haven't created any gyms yet. Go to your profile settings to add one.</p>\n            ) : (\n              userGyms.map(gym => (\n                <div key={gym.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`gym-${gym.id}`}\n                    checked={selectedGymIds.has(gym.id)}\n                    onCheckedChange={() => handleToggleGym(gym.id)}\n                  />\n                  <Label htmlFor={`gym-${gym.id}`} className=\"font-normal\">\n                    {gym.name}\n                  </Label>\n                </div>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n          <Button onClick={handleSaveChanges} disabled={isSaving || userGyms.length === 0}>\n            {isSaving ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":4782},"apps/web/src/components/profile/mobile-navigation.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\n// Removed lucide-react imports as emoji icons are used directly\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface MobileNavigationProps {\n  currentPage?: string; // Changed to currentPage\n  onPageChange: (pageId: string) => void;\n}\n\nexport const MobileNavigation = ({ currentPage = 'overview', onPageChange }: MobileNavigationProps) => {\n  const [startX, setStartX] = useState(0);\n  const [isSwipe, setIsSwipe] = useState(false);\n\n  const pages = [\n    { id: 'overview', icon: '📊', label: 'Overview' },\n    { id: 'stats', icon: '📈', label: 'Stats' },\n    { id: 'photo', icon: '📸', label: 'Photo' },\n    { id: 'media', icon: '🎬', label: 'Media' },\n    { id: 'social', icon: '👥', label: 'Social' },\n    { id: 'settings', icon: '⚙️', label: 'Settings' }\n  ];\n\n  const handleNavClick = (pageId: string) => {\n    if (onPageChange) {\n      onPageChange(pageId);\n    }\n    \n    // Haptic feedback\n    if ('vibrate' in navigator) {\n      navigator.vibrate(12);\n    }\n  };\n\n  // Swipe handlers\n  const handleTouchStart = (e: React.TouchEvent) => {\n    setStartX(e.touches[0].clientX);\n    setIsSwipe(false);\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!startX) return;\n    const deltaX = Math.abs(e.touches[0].clientX - startX);\n    if (deltaX > 30) {\n      setIsSwipe(true);\n    }\n  };\n\n  const handleTouchEnd = (e: React.TouchEvent) => {\n    if (!startX || !isSwipe) return;\n    \n    const endX = e.changedTouches[0].clientX;\n    const deltaX = startX - endX;\n    const threshold = 80;\n    \n    if (Math.abs(deltaX) > threshold) {\n      const currentIndex = pages.findIndex(p => p.id === currentPage);\n      \n      if (deltaX > 0 && currentIndex < pages.length - 1) {\n        handleNavClick(pages[currentIndex + 1].id);\n      } else if (deltaX < 0 && currentIndex > 0) {\n        handleNavClick(pages[currentIndex - 1].id);\n      }\n    }\n    \n    setStartX(0);\n    setIsSwipe(false);\n  };\n\n  return (\n    <div \n      className=\"bg-card border border-border rounded-xl p-1 my-2 shadow-sm\"\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      <div className=\"flex justify-between items-center gap-0.5\">\n        {pages.map((page) => (\n          <button\n            key={page.id}\n            onClick={() => handleNavClick(page.id)}\n            className={cn(\n              \"relative flex flex-col items-center justify-center rounded-lg transition-all duration-300 flex-auto overflow-hidden\", // Re-added overflow-hidden\n              currentPage === page.id \n                ? 'bg-muted border-2 border-border transform -translate-y-1 shadow-md' \n                : 'hover:bg-muted/50 hover:-translate-y-0.5 hover:shadow-sm'\n            )}\n            style={{ \n              minHeight: '60px', \n              padding: '4px 0px'\n            }}\n          >\n            {/* Black top border */}\n            <div \n              className={cn(\n                \"absolute top-0 left-0 w-full bg-foreground rounded-t-lg transition-transform duration-400\"\n              )}\n              style={{ \n                height: '3px',\n                transform: currentPage === page.id ? 'translateX(0)' : 'translateX(-100%)'\n              }}\n            />\n            \n            {/* Icon */}\n            <div \n              className=\"mb-1 transition-all duration-300\"\n              style={{\n                fontSize: '18px',\n                opacity: currentPage === page.id ? 1 : 0.8,\n                transform: currentPage === page.id ? 'scale(1.1)' : 'scale(1)'\n              }}\n            >\n              {page.icon}\n            </div>\n            \n            {/* Label */}\n            <span \n              className={cn(\n                \"text-center transition-all duration-300 text-wrap\",\n                currentPage === page.id \n                  ? 'text-foreground font-bold' \n                  : 'text-muted-foreground font-semibold'\n              )}\n              style={{ \n                fontSize: '11px',\n                lineHeight: '1.1'\n              }}\n            >\n              {page.label}\n            </span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};","size_bytes":4260},"apps/web/src/components/profile/monthly-momentum-bars.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { CalendarDays } from 'lucide-react';\n\ntype Profile = Tables<'profiles'>;\ntype WorkoutSession = Tables<'workout_sessions'>;\ntype TPath = Tables<'t_paths'>;\n\ninterface MonthlyMomentumBarsProps {\n  profile: Profile | null;\n}\n\n// Helper to get the start of the week (Monday) in UTC\nconst getStartOfWeekUTC = (date: Date): Date => {\n  const d = new Date(date);\n  d.setUTCHours(0, 0, 0, 0); // Normalize to UTC midnight\n  const day = d.getUTCDay(); // 0 for Sunday, 1 for Monday, ..., 6 for Saturday\n  const diff = d.getUTCDate() - day + (day === 0 ? -6 : 1); // Adjust to Monday (UTC)\n  d.setUTCDate(diff);\n  return d;\n};\n\nexport const MonthlyMomentumBars = ({ profile }: MonthlyMomentumBarsProps) => {\n  const { session, supabase } = useSession();\n  const [loading, setLoading] = useState(true);\n  const [weeklyWorkoutData, setWeeklyWorkoutData] = useState<Map<string, number>>(new Map()); // Map<weekKey, workoutCount>\n  const [requiredWorkoutsPerWeek, setRequiredWorkoutsPerWeek] = useState<number>(3); // Default to PPL (3)\n\n  const currentYear = useMemo(() => new Date().getFullYear(), []);\n  const profileCreatedAt = useMemo(() => profile?.created_at ? new Date(profile.created_at) : null, [profile]);\n\n  const getColorClass = useCallback((workoutCount: number): string => {\n    const darkGreen = 'bg-green-600';\n    const mediumGreen = 'bg-green-400';\n    const lightGreen = 'bg-green-200';\n    const gray = 'bg-gray-200'; // For 0 workouts\n\n    if (requiredWorkoutsPerWeek === 4) { // ULUL\n      if (workoutCount >= 4) return darkGreen;\n      if (workoutCount >= 2) return mediumGreen; // 2-3 workouts\n      if (workoutCount >= 1) return lightGreen;\n    } else { // PPL or default (3)\n      if (workoutCount >= 3) return darkGreen;\n      if (workoutCount >= 2) return mediumGreen;\n      if (workoutCount >= 1) return lightGreen;\n    }\n    return gray;\n  }, [requiredWorkoutsPerWeek]);\n\n  useEffect(() => {\n    const fetchWorkoutData = async () => {\n      if (!session || !profile) {\n        setLoading(false);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        // 1. Determine required workouts per week based on active T-Path\n        if (profile.active_t_path_id) {\n          const { data: activeTPath, error: tPathError } = await supabase\n            .from('t_paths')\n            .select('settings')\n            .eq('id', profile.active_t_path_id)\n            .single();\n\n          if (tPathError) {\n            console.error(\"Error fetching active T-Path settings:\", tPathError);\n            toast.error(\"Failed to load active workout plan settings.\"); // Added toast.error\n          }\n          else if (activeTPath?.settings && typeof activeTPath.settings === 'object' && 'tPathType' in activeTPath.settings) {\n            const tPathType = (activeTPath.settings as { tPathType: string }).tPathType;\n            setRequiredWorkoutsPerWeek(tPathType === 'ulul' ? 4 : 3);\n          }\n        } else {\n          // If no active T-Path, default to PPL requirements\n          setRequiredWorkoutsPerWeek(3);\n        }\n\n        // 2. Fetch all workout sessions for the user\n        const { data: workoutSessions, error: sessionsError } = await supabase\n          .from('workout_sessions')\n          .select('session_date') // Only need session_date for counting\n          .eq('user_id', session.user.id)\n          .order('session_date', { ascending: true });\n\n        if (sessionsError) throw sessionsError;\n        console.log(\"Raw workoutSessions from DB:\", workoutSessions); // Log raw data\n\n        const newWeeklyWorkoutData = new Map<string, number>(); // Key: YYYY-MM-DD (start of week)\n        (workoutSessions || []).forEach(sessionItem => {\n          const sessionDate = new Date(sessionItem.session_date);\n          const startOfWeek = getStartOfWeekUTC(sessionDate); // Use UTC version\n          const weekKey = startOfWeek.toISOString().split('T')[0]; // e.g., \"2023-01-02\"\n\n          newWeeklyWorkoutData.set(weekKey, (newWeeklyWorkoutData.get(weekKey) || 0) + 1);\n        });\n        setWeeklyWorkoutData(newWeeklyWorkoutData);\n        console.log(\"Processed Weekly Workout Data Map (UTC keys):\", newWeeklyWorkoutData); // Log the map\n\n      } catch (err: any) {\n        toast.error(\"Failed to load monthly workout data: \" + err.message); // Changed to toast.error\n        console.error(\"Error fetching monthly workout data:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWorkoutData();\n  }, [session, supabase, profile]);\n\n  const renderYearMomentum = () => {\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const today = getStartOfWeekUTC(new Date()); // Use UTC version\n\n    // Generate all weeks for the year up to today, and store them chronologically\n    const allWeeksInYear: { date: Date; workoutCount: number; colorClass: string }[] = [];\n    let currentWeekStart = getStartOfWeekUTC(new Date(currentYear, 0, 1)); // Always start from Jan 1st of current year (UTC)\n\n    // If profileCreatedAt is for a future year, no data to show for current year\n    if (profileCreatedAt && profileCreatedAt.getFullYear() > currentYear) {\n      return null;\n    }\n    \n    while (currentWeekStart.getTime() <= today.getTime()) { // Compare timestamps for Date objects\n      const weekKey = currentWeekStart.toISOString().split('T')[0];\n      const workoutCount = weeklyWorkoutData.get(weekKey) || 0;\n      const colorClass = getColorClass(workoutCount);\n      \n      console.log(`[MomentumBars Render] Week: ${weekKey}, Workouts: ${workoutCount}, Color: ${colorClass}`);\n\n      allWeeksInYear.push({ date: new Date(currentWeekStart), workoutCount, colorClass });\n      currentWeekStart.setUTCDate(currentWeekStart.getUTCDate() + 7); // Move to next week (UTC)\n    }\n\n    // Group weeks by quarter\n    const quarters: { [key: number]: typeof allWeeksInYear } = { 0: [], 1: [], 2: [], 3: [] }; // Q1, Q2, Q3, Q4\n    allWeeksInYear.forEach(week => {\n      const month = week.date.getUTCMonth(); // Use UTC month\n      if (month >= 0 && month <= 2) quarters[0].push(week); // Jan-Mar\n      else if (month >= 3 && month <= 5) quarters[1].push(week); // Apr-Jun\n      else if (month >= 6 && month <= 8) quarters[2].push(week); // Jul-Sep\n      else if (month >= 9 && month <= 11) quarters[3].push(week); // Oct-Dec\n    });\n\n    return (\n      <div className=\"space-y-3\"> {/* Reduced vertical spacing between quarters */}\n        {Object.keys(quarters).map((quarterKey, quarterIndex) => {\n          const weeksInQuarter = quarters[parseInt(quarterKey)];\n          const startMonthIndex = quarterIndex * 3;\n          const monthsInQuarter = monthNames.slice(startMonthIndex, startMonthIndex + 3);\n\n          return (\n            <div key={quarterKey} className=\"space-y-1\"> {/* Reduced vertical spacing */}\n              {/* Month labels for the quarter, evenly distributed */}\n              <div className=\"flex justify-around px-1\"> {/* Use justify-around for even spacing */}\n                {monthsInQuarter.map(monthName => (\n                  <span key={monthName} className=\"text-sm font-semibold text-muted-foreground flex-1 text-center\">\n                    {monthName}\n                  </span>\n                ))}\n              </div>\n              {/* Continuous bar for weeks */}\n              <div className=\"flex h-12 w-full rounded-md overflow-hidden border border-gray-300\">\n                {weeksInQuarter.length === 0 ? (\n                  <div className=\"flex-1 h-full bg-gray-100\" /> // Empty gray bar for quarters with no data\n                ) : (\n                  weeksInQuarter.map((week, weekIndex) => (\n                        <div\n                          key={weekIndex}\n                          className={cn(\"flex-1 h-full\", week.colorClass)}\n                          title={`${week.date.toLocaleDateString()} - Workouts: ${week.workoutCount}`}\n                        />\n                      ))\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        );\n      };\n    \n      if (loading) {\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CalendarDays className=\"h-5 w-5\" /> Monthly Momentum\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Loading monthly momentum...</p>\n            </CardContent>\n          </Card>\n        );\n      }\n    \n      return (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CalendarDays className=\"h-5 w-5\" /> Monthly Momentum\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Workout consistency for {currentYear} based on your active T-Path.\n            </p>\n          </CardHeader>\n          <CardContent>\n            {renderYearMomentum()}\n            <p className=\"text-sm text-muted-foreground mt-4 text-center\">\n              Green shades indicate workout consistency. Darker green means more workouts completed relative to your active T-Path.\n            </p>\n          </CardContent>\n        </Card>\n      );\n    };","size_bytes":9645},"apps/web/src/components/profile/personal-info-form.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Command, CommandInput, CommandEmpty, CommandGroup, CommandItem } from \"@/components/ui/command\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Button } from '@/components/ui/button';\nimport { User, ChevronDown, X, Info, Edit, Save, Loader2 } from 'lucide-react'; // Added Edit, Save, Loader2\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { useFormContext } from 'react-hook-form'; // Import useFormContext\nimport { BodyFatInfoModal } from '../onboarding/body-fat-info-modal';\nimport { toast } from 'sonner'; // Import toast\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\nimport { ProfileUpdate } from '@/types/supabase'; // Import ProfileUpdate\nimport { useWorkoutDataFetcher } from '@/hooks/use-workout-data-fetcher'; // Import useWorkoutDataFetcher\n\ninterface PersonalInfoFormProps {\n  mainMuscleGroups: string[];\n  onDataChange: () => void;\n  setIsSaving: (isSaving: boolean) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const PersonalInfoForm = ({ mainMuscleGroups, onDataChange, setIsSaving, setTempStatusMessage }: PersonalInfoFormProps) => {\n  const [isBodyFatInfoModalOpen, setIsBodyFatInfoModalOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false); // Local editing state\n  const form = useFormContext(); // Use context\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const { profile } = useWorkoutDataFetcher(); // Get profile to check active_t_path_id\n\n  const handleSave = async () => {\n    if (!memoizedSessionUserId || !profile) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsSaving(true); // Set global saving state\n    try {\n      const values = form.getValues(); // Get current form values\n\n      const nameParts = values.full_name.split(' ');\n      const firstName = nameParts.shift() || '';\n      const lastName = nameParts.join(' ');\n\n      const updateData: ProfileUpdate = {\n        full_name: values.full_name,\n        first_name: firstName,\n        last_name: lastName,\n        height_cm: values.height_cm,\n        weight_kg: values.weight_kg,\n        body_fat_pct: values.body_fat_pct,\n        preferred_muscles: values.preferred_muscles?.join(', ') || null,\n        health_notes: values.health_notes,\n        updated_at: new Date().toISOString()\n      };\n      \n      const { error } = await supabase.from('profiles').update(updateData).eq('id', memoizedSessionUserId); // Use memoized ID\n      if (error) {\n        console.error(\"Failed to update personal info:\", error);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      } else {\n        setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n        onDataChange(); // Refresh parent data\n        setIsEditing(false); // Exit editing mode\n      }\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (error: any) {\n      console.error(\"Error saving personal info:\", error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false); // Clear global saving state\n    }\n  };\n\n  return (\n    <>\n      <Card className=\"bg-card\">\n        <CardHeader className=\"border-b border-border/50 pb-4 flex flex-row items-center justify-between\"> {/* Adjusted for buttons */}\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5 text-primary\" /> Personal Info\n          </CardTitle>\n          {isEditing ? (\n            <Button onClick={form.handleSubmit(handleSave)} size=\"sm\" disabled={form.formState.isSubmitting}>\n              {form.formState.isSubmitting ? (\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <Save className=\"h-4 w-4 mr-2\" />\n              )}\n              Save\n            </Button>\n          ) : (\n            <Button onClick={() => setIsEditing(true)} size=\"sm\" variant=\"outline\">\n              <Edit className=\"h-4 w-4 mr-2\" /> Edit\n            </Button>\n          )}\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 pt-6\">\n          <FormField control={form.control} name=\"full_name\" render={({ field }) => (\n            <FormItem className=\"sm:col-span-2\">\n              <FormLabel>Preferred Name</FormLabel>\n              <FormControl><Input {...field} disabled={!isEditing} className=\"text-sm\" /></FormControl>\n              <FormMessage />\n            </FormItem>\n          )} />\n          <div className=\"flex flex-row gap-4 sm:col-span-2\">\n            <FormField control={form.control} name=\"height_cm\" render={({ field }) => (\n              <FormItem className=\"flex-1\">\n                <FormLabel>Height (cm)</FormLabel>\n                <FormControl><Input type=\"number\" inputMode=\"numeric\" step=\"1\" {...field} value={field.value ?? ''} disabled={!isEditing} className=\"max-w-[120px] text-sm\" /></FormControl>\n                <FormMessage />\n              </FormItem>\n            )} />\n            <FormField control={form.control} name=\"weight_kg\" render={({ field }) => (\n              <FormItem className=\"flex-1\">\n                <FormLabel>Weight (kg)</FormLabel>\n                <FormControl><Input type=\"number\" step=\"1\" inputMode=\"numeric\" {...field} value={field.value ?? ''} disabled={!isEditing} className=\"max-w-[120px] text-sm\" /></FormControl>\n                <FormMessage />\n              </FormItem>\n            )} />\n          </div>\n          <FormField control={form.control} name=\"body_fat_pct\" render={({ field }) => (\n            <FormItem>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <FormLabel>Body Fat (%)</FormLabel>\n                <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={() => setIsBodyFatInfoModalOpen(true)}>\n                  <Info className=\"h-4 w-4 text-muted-foreground\" />\n                </Button>\n              </div>\n              <FormControl><Input type=\"number\" inputMode=\"numeric\" step=\"1\" min=\"0\" max=\"100\" {...field} value={field.value ?? ''} disabled={!isEditing} className=\"max-w-[120px] text-sm\" /></FormControl>\n              <FormMessage />\n            </FormItem>\n          )} />\n          <FormField control={form.control} name=\"preferred_muscles\" render={({ field }) => (\n            <FormItem className=\"sm:col-span-2\">\n              <FormLabel>Preferred Muscles to Train (Optional)</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    role=\"combobox\"\n                    className={cn(\n                      \"w-full justify-between text-sm\",\n                      !field.value?.length && \"text-muted-foreground\"\n                    )}\n                    disabled={!isEditing}\n                  >\n                    <span className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex flex-wrap gap-1\">\n                        {field.value && field.value.length > 0 ? (\n                          field.value.map((muscle: string) => (\n                            <Badge key={muscle} variant=\"secondary\" className=\"flex items-center gap-1 text-xs\">\n                              {muscle}\n                              <X className=\"h-3 w-3 cursor-pointer\" onClick={(e) => {\n                                e.stopPropagation();\n                                if (isEditing) {\n                                  const newSelection = field.value?.filter((m: string) => m !== muscle);\n                                  field.onChange(newSelection);\n                                }\n                              }} />\n                            </Badge>\n                          ))\n                        ) : (\n                          <span>Select muscles...</span>\n                        )}\n                      </div>\n                      <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                    </span>\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] p-0\">\n                  <Command>\n                    <CommandInput placeholder=\"Search muscles...\" />\n                    <CommandEmpty>No muscle found.</CommandEmpty>\n                    <CommandGroup>\n                      {mainMuscleGroups.map((muscle) => (\n                        <CommandItem\n                          key={muscle}\n                          onSelect={() => {\n                            if (!isEditing) return;\n                            const currentSelection = new Set(field.value);\n                            if (currentSelection.has(muscle)) {\n                              currentSelection.delete(muscle);\n                            } else {\n                              currentSelection.add(muscle);\n                            }\n                            field.onChange(Array.from(currentSelection));\n                          }}\n                          className=\"text-sm\"\n                        >\n                          <Checkbox\n                            checked={field.value?.includes(muscle)}\n                            onCheckedChange={(checked) => {\n                              if (!isEditing) return;\n                              const currentSelection = new Set(field.value);\n                              if (checked) {\n                                currentSelection.add(muscle);\n                              } else {\n                                currentSelection.delete(muscle);\n                              }\n                              field.onChange(Array.from(currentSelection));\n                            }}\n                            className=\"mr-2\"\n                          />\n                          {muscle}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </Command>\n                </PopoverContent>\n              </Popover>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Select muscle groups you'd like the AI Coach to prioritise in your recommendations.\n              </p>\n              <FormMessage />\n            </FormItem>\n          )} />\n          <FormField control={form.control} name=\"health_notes\" render={({ field }) => (\n            <FormItem className=\"sm:col-span-2\">\n              <FormLabel>Health Notes / Constraints (Optional)</FormLabel>\n              <FormControl><Textarea {...field} value={field.value ?? ''} disabled={!isEditing} placeholder=\"Any injuries, health conditions, or limitations...\" className=\"text-sm\" /></FormControl>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Share any relevant health information or limitations for the AI Coach to consider when generating advice.\n              </p>\n              <FormMessage />\n            </FormItem>\n          )} />\n        </CardContent>\n      </Card>\n\n      <BodyFatInfoModal\n        open={isBodyFatInfoModalOpen}\n        onOpenChange={setIsBodyFatInfoModalOpen}\n      />\n    </>\n  );\n};","size_bytes":11941},"apps/web/src/components/profile/photo-journey/photo-capture-flow.tsx":{"content":"\"use client\";\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Camera, Check, RefreshCw, X, Ghost, Loader2, RotateCcw } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { useSession } from '@/components/session-context-provider';\nimport { useGesture } from '@use-gesture/react';\n\ninterface PhotoCaptureFlowProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPhotoCaptured: (file: File) => void;\n}\n\n// Helper function to convert data URL to File\nfunction dataURLtoFile(dataurl: string, filename: string): File {\n    const arr = dataurl.split(',');\n    const mimeMatch = arr[0].match(/:(.*?);/);\n    if (!mimeMatch) {\n        throw new Error(\"Invalid data URL\");\n    }\n    const mime = mimeMatch[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new File([u8arr], filename, { type: mime });\n}\n\nexport const PhotoCaptureFlow = ({ open, onOpenChange, onPhotoCaptured }: PhotoCaptureFlowProps) => {\n  const { session, supabase } = useSession();\n  const [step, setStep] = useState<'capture' | 'confirm'>('capture');\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isPoseGhostVisible, setIsPoseGhostVisible] = useState(false);\n  const [ghostImageUrl, setGhostImageUrl] = useState<string | null>(null);\n  const [loadingGhost, setLoadingGhost] = useState(false);\n\n  // State for gesture controls\n  const [ghostStyle, setGhostStyle] = useState({ x: 0, y: 0, scale: 1 });\n\n  // Gesture handler\n  const bind = useGesture({\n    onDrag: ({ offset: [x, y] }) => setGhostStyle(prev => ({ ...prev, x, y })),\n    onPinch: ({ offset: [s] }) => setGhostStyle(prev => ({ ...prev, scale: s })),\n  }, {\n    drag: { from: () => [ghostStyle.x, ghostStyle.y] },\n    pinch: { from: () => [ghostStyle.scale, 0] }\n  });\n\n  const handleResetGhost = () => {\n    setGhostStyle({ x: 0, y: 0, scale: 1 });\n  };\n\n  const startCamera = useCallback(async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' }, // Prefer rear camera\n        audio: false,\n      });\n      setStream(mediaStream);\n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (err) {\n      console.error(\"Error accessing camera:\", err);\n      toast.error(\"Could not access camera. Please check permissions.\");\n      onOpenChange(false);\n    }\n  }, [onOpenChange]);\n\n  const stopCamera = useCallback(() => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n  }, [stream]);\n\n  useEffect(() => {\n    if (open) {\n      startCamera();\n    } else {\n      stopCamera();\n      setStep('capture');\n      setCapturedImage(null);\n      setIsPoseGhostVisible(false);\n      setGhostImageUrl(null);\n      handleResetGhost(); // Reset ghost style on close\n    }\n    return () => stopCamera();\n  }, [open, startCamera, stopCamera]);\n\n  const handleCapture = () => {\n    if (videoRef.current && canvasRef.current) {\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n\n      if (video.videoWidth === 0 || video.videoHeight === 0) {\n        toast.error(\"Camera is not ready. Please try again in a moment.\");\n        return;\n      }\n\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      const context = canvas.getContext('2d');\n      if (context) {\n        context.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const dataUrl = canvas.toDataURL('image/jpeg');\n\n        if (!dataUrl || dataUrl === \"data:,\") {\n          toast.error(\"Could not capture photo. Please try again.\");\n          return;\n        }\n\n        setCapturedImage(dataUrl);\n        setStep('confirm');\n        stopCamera();\n      }\n    }\n  };\n\n  const handleRetake = () => {\n    setCapturedImage(null);\n    setStep('capture');\n    startCamera();\n  };\n\n  const handleSave = () => {\n    if (capturedImage) {\n      const file = dataURLtoFile(capturedImage, `progress-photo-${Date.now()}.jpg`);\n      onPhotoCaptured(file);\n      onOpenChange(false);\n    }\n  };\n\n  const togglePoseGhost = async () => {\n    const turningOn = !isPoseGhostVisible;\n    setIsPoseGhostVisible(turningOn);\n    handleResetGhost(); // Reset position/scale when toggling\n\n    if (turningOn) {\n      setLoadingGhost(true);\n      try {\n        if (!session?.user.id) {\n          toast.error(\"You must be logged in to use this feature.\");\n          setIsPoseGhostVisible(false);\n          return;\n        }\n\n        const { data: latestPhoto, error: fetchError } = await supabase\n          .from('progress_photos')\n          .select('photo_path')\n          .eq('user_id', session.user.id)\n          .order('created_at', { ascending: false })\n          .limit(1)\n          .single();\n\n        if (fetchError) {\n          if (fetchError.code === 'PGRST116') {\n            toast.info(\"No previous photo found to use as a ghost.\");\n            setIsPoseGhostVisible(false);\n            return;\n          }\n          throw fetchError;\n        }\n\n        if (!latestPhoto) {\n          toast.info(\"No previous photo found to use as a ghost.\");\n          setIsPoseGhostVisible(false);\n          return;\n        }\n\n        const { data: urlData, error: urlError } = await supabase.storage\n          .from('user-photos')\n          .createSignedUrl(latestPhoto.photo_path, 60);\n\n        if (urlError) throw urlError;\n        setGhostImageUrl(urlData.signedUrl);\n\n      } catch (error: any) {\n        console.error(\"Error fetching pose ghost image:\", error);\n        toast.error(\"Could not load your last photo for the ghost overlay.\");\n        setIsPoseGhostVisible(false);\n      } finally {\n        setLoadingGhost(false);\n      }\n    } else {\n      setGhostImageUrl(null);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"p-0 m-0 w-screen h-screen max-w-full max-h-full bg-black border-0 rounded-none flex items-center justify-center\">\n        <div className=\"relative w-full h-full\">\n          {step === 'capture' && (\n            <video ref={videoRef} autoPlay playsInline className=\"w-full h-full object-cover\" />\n          )}\n          {step === 'confirm' && capturedImage && (\n            <img src={capturedImage} alt=\"Captured progress\" className=\"w-full h-full object-contain\" />\n          )}\n          <canvas ref={canvasRef} className=\"hidden\" />\n\n          {/* Pose Ghost Overlay */}\n          {isPoseGhostVisible && ghostImageUrl && step === 'capture' && (\n            <div {...bind()} className=\"absolute inset-0 touch-none\">\n              <img\n                src={ghostImageUrl}\n                alt=\"Pose ghost\"\n                style={{\n                  transform: `translate(${ghostStyle.x}px, ${ghostStyle.y}px) scale(${ghostStyle.scale})`,\n                  opacity: 0.35,\n                }}\n                className=\"absolute inset-0 w-full h-full object-cover pointer-events-none\"\n              />\n            </div>\n          )}\n\n          {/* Controls */}\n          <div className=\"absolute bottom-0 left-0 right-0 p-6 bg-gradient-to-t from-black/50 to-transparent flex justify-center items-center\">\n            {step === 'capture' && (\n              <Button\n                size=\"icon\"\n                className=\"w-20 h-20 rounded-full border-4 border-white bg-white/30 hover:bg-white/50\"\n                onClick={handleCapture}\n              >\n                <Camera className=\"h-10 w-10 text-white\" />\n              </Button>\n            )}\n            {step === 'confirm' && (\n              <div className=\"flex w-full justify-between items-center gap-4\">\n                <Button variant=\"outline\" className=\"text-base p-4 flex-1\" onClick={handleRetake}>\n                  <RefreshCw className=\"h-5 w-5 mr-2\" /> Retake\n                </Button>\n                <Button className=\"text-base p-4 bg-primary flex-1\" onClick={handleSave}>\n                  <Check className=\"h-5 w-5 mr-2\" /> Save Snapshot\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          {/* Top-right controls */}\n          <div className=\"absolute top-4 right-4 flex items-center gap-2\">\n            {step === 'capture' && (\n              <>\n                {isPoseGhostVisible && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-white bg-black/30 hover:bg-black/50 hover:text-white\"\n                    onClick={handleResetGhost}\n                    title=\"Reset Pose Ghost\"\n                  >\n                    <RotateCcw className=\"h-5 w-5\" />\n                  </Button>\n                )}\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"text-white bg-black/30 hover:bg-black/50 hover:text-white\"\n                  onClick={togglePoseGhost}\n                  title=\"Toggle Pose Ghost\"\n                  disabled={loadingGhost}\n                >\n                  {loadingGhost ? <Loader2 className=\"h-6 w-6 animate-spin\" /> : <Ghost className=\"h-6 w-6\" />}\n                </Button>\n              </>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-white bg-black/30 hover:bg-black/50 hover:text-white\"\n              onClick={() => onOpenChange(false)}\n            >\n              <X className=\"h-6 w-6\" />\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":9939},"apps/web/src/components/profile/photo-journey/photo-card.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useSession } from '@/components/session-context-provider';\n\ntype ProgressPhoto = Tables<'progress_photos'>;\n\ninterface PhotoCardProps {\n  photo: ProgressPhoto;\n}\n\nexport const PhotoCard = ({ photo }: PhotoCardProps) => {\n  const { supabase } = useSession();\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSignedUrl = async () => {\n      setLoading(true);\n      try {\n        const { data, error } = await supabase.storage\n          .from('user-photos')\n          .createSignedUrl(photo.photo_path, 60); // 60 seconds validity\n\n        if (error) {\n          throw error;\n        }\n        setImageUrl(data.signedUrl);\n      } catch (error) {\n        console.error(\"Error fetching signed URL:\", error);\n        toast.error(\"Could not load image.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (supabase) {\n      fetchSignedUrl();\n    }\n  }, [photo.photo_path, supabase]);\n\n  return (\n    <Card className=\"overflow-hidden transition-all duration-200 ease-in-out hover:scale-105 hover:shadow-lg\">\n      <CardContent className=\"p-0\">\n        <div className=\"aspect-square w-full bg-muted\">\n          {loading ? (\n            <Skeleton className=\"h-full w-full\" />\n          ) : imageUrl ? (\n            <img src={imageUrl} alt={photo.notes || 'Progress photo'} className=\"h-full w-full object-cover\" />\n          ) : (\n            <div className=\"h-full w-full flex items-center justify-center text-muted-foreground\">\n              Image not available\n            </div>\n          )}\n        </div>\n        <div className=\"p-4\">\n          <p className=\"text-sm font-medium\">{new Date(photo.created_at).toLocaleDateString()}</p>\n          <p className=\"text-sm text-muted-foreground truncate\">{photo.notes || 'No notes'}</p>\n          {photo.workouts_since_last_photo !== null && (\n            <p className=\"text-xs text-primary font-semibold mt-2\">\n              {photo.workouts_since_last_photo} workout(s) since last photo\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2394},"apps/web/src/components/profile/photo-journey/photo-comparison-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { Slider } from '@/components/ui/slider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useSession } from '@/components/session-context-provider';\nimport { Loader2, Lightbulb, X } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from '@/components/ui/button';\n\ntype ProgressPhoto = Tables<'progress_photos'>;\n\ninterface PhotoComparisonDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  sourcePhoto: ProgressPhoto | null;\n}\n\nconst proTips = [\n  'Progress isn\\'t always linear! Factors like water retention can affect daily photos. Stay consistent!',\n  'Different lighting can change how a photo looks. For best results, try to use the same spot each time.',\n  'Notice a difference in angle? Try using the Pose Ghost next time for a perfect match.'\n];\n\nexport const PhotoComparisonDialog = ({ open, onOpenChange, sourcePhoto }: PhotoComparisonDialogProps) => {\n  const { session, supabase } = useSession();\n  const [comparisonPhoto, setComparisonPhoto] = useState<ProgressPhoto | null>(null);\n  const [sourceImageUrl, setSourceImageUrl] = useState<string | null>(null);\n  const [comparisonImageUrl, setComparisonImageUrl] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [sliderValue, setSliderValue] = useState(50);\n  const [tip, setTip] = useState<string | null>(null);\n  const [isTipVisible, setIsTipVisible] = useState(true);\n\n  useEffect(() => {\n    if (!open || !sourcePhoto) {\n      setComparisonPhoto(null);\n      setSourceImageUrl(null);\n      setComparisonImageUrl(null);\n      setLoading(true);\n      return;\n    }\n\n    const randomTip = proTips[Math.floor(Math.random() * proTips.length)];\n    setTip(randomTip);\n    setIsTipVisible(true);\n\n    const fetchComparisonData = async () => {\n      setLoading(true);\n      try {\n        const { data: sourceUrlData, error: sourceUrlError } = await supabase.storage\n          .from('user-photos')\n          .createSignedUrl(sourcePhoto.photo_path, 60);\n        if (sourceUrlError) throw sourceUrlError;\n        setSourceImageUrl(sourceUrlData.signedUrl);\n\n        const response = await fetch('/api/photos/find-matching-pose', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${session?.access_token}`,\n          },\n          body: JSON.stringify({ source_photo_id: sourcePhoto.id }),\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n          throw new Error(data.error || 'Failed to find matching photo.');\n        }\n        \n        const matchedPhoto = data.matchedPhoto as ProgressPhoto;\n        setComparisonPhoto(matchedPhoto);\n\n        const { data: comparisonUrlData, error: comparisonUrlError } = await supabase.storage\n          .from('user-photos')\n          .createSignedUrl(matchedPhoto.photo_path, 60);\n        if (comparisonUrlError) throw comparisonUrlError;\n        setComparisonImageUrl(comparisonUrlData.signedUrl);\n\n      } catch (error: any) {\n        console.error(\"Error in comparison dialog:\", error);\n        toast.error(error.message || \"Could not load comparison photos.\");\n        onOpenChange(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchComparisonData();\n  }, [open, sourcePhoto, supabase, session]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl w-[95vw] h-[90vh] flex flex-col\">\n        <DialogHeader>\n          <DialogTitle>Compare Progress</DialogTitle>\n          <DialogDescription>\n            Use the slider to fade between your photos for a precise comparison.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex-grow flex items-center justify-center\">\n          <div className=\"relative w-full max-w-lg aspect-square\">\n            {loading ? (\n              <div className=\"absolute inset-0 w-full h-full flex items-center justify-center bg-muted rounded-md\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              </div>\n            ) : (\n              <>\n                {comparisonImageUrl && (\n                  <img src={comparisonImageUrl} alt=\"Comparison photo\" className=\"absolute inset-0 w-full h-full object-contain rounded-md\" />\n                )}\n                {sourceImageUrl && (\n                  <img\n                    src={sourceImageUrl}\n                    alt=\"Source photo\"\n                    className=\"absolute inset-0 w-full h-full object-contain rounded-md transition-opacity duration-100\"\n                    style={{ opacity: sliderValue / 100 }}\n                  />\n                )}\n              </>\n            )}\n          </div>\n        </div>\n        <div className=\"px-4 pb-4 space-y-4\">\n          {isTipVisible && tip && (\n            <Alert className=\"relative pr-10\">\n              <Lightbulb className=\"h-4 w-4\" />\n              <AlertTitle>Pro Tip</AlertTitle>\n              <AlertDescription>{tip}</AlertDescription>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute top-2 right-2 h-6 w-6\"\n                onClick={() => setIsTipVisible(false)}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </Alert>\n          )}\n          <div>\n            <Slider\n              value={[sliderValue]}\n              onValueChange={(value) => setSliderValue(value[0])}\n              max={100}\n              step={1}\n              disabled={loading}\n            />\n            <div className=\"flex justify-between text-xs text-muted-foreground mt-2\">\n              <span>{comparisonPhoto ? new Date(comparisonPhoto.created_at).toLocaleDateString() : 'Older'}</span>\n              <span>{sourcePhoto ? new Date(sourcePhoto.created_at).toLocaleDateString() : 'Newer'}</span>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":6239},"apps/web/src/components/profile/photo-journey/photo-detail-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useSession } from '@/components/session-context-provider';\nimport { Dumbbell, GitCompareArrows } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ntype ProgressPhoto = Tables<'progress_photos'>;\n\ninterface PhotoDetailDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  photo: ProgressPhoto | null;\n  totalPhotos: number;\n  onStartCompare: (photo: ProgressPhoto) => void;\n}\n\nexport const PhotoDetailDialog = ({ open, onOpenChange, photo, totalPhotos, onStartCompare }: PhotoDetailDialogProps) => {\n  const { supabase } = useSession();\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (open && photo) {\n      const fetchSignedUrl = async () => {\n        setLoading(true);\n        try {\n          const { data, error } = await supabase.storage\n            .from('user-photos')\n            .createSignedUrl(photo.photo_path, 60); // 60 seconds validity\n\n          if (error) {\n            throw error;\n          }\n          setImageUrl(data.signedUrl);\n        } catch (error) {\n          console.error(\"Error fetching signed URL for detail view:\", error);\n          toast.error(\"Could not load image detail.\");\n        } finally {\n          setLoading(false);\n        }\n      };\n      fetchSignedUrl();\n    } else {\n      // Reset when dialog closes or photo is null\n      setImageUrl(null);\n      setLoading(true);\n    }\n  }, [photo, open, supabase]);\n\n  if (!photo) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg p-0 border-0\">\n        <div className=\"relative aspect-square w-full bg-muted\">\n          {loading ? (\n            <Skeleton className=\"h-full w-full\" />\n          ) : imageUrl ? (\n            <img src={imageUrl} alt={photo.notes || 'Progress photo'} className=\"h-full w-full object-contain\" />\n          ) : (\n            <div className=\"h-full w-full flex items-center justify-center text-muted-foreground\">\n              Image not available\n            </div>\n          )}\n\n          {photo.workouts_since_last_photo !== null && photo.workouts_since_last_photo > 0 && (\n            <div className=\"absolute bottom-4 left-4 right-4 bg-black/60 backdrop-blur-sm text-white p-3 rounded-lg flex items-center gap-2 animate-fade-in\">\n              <Dumbbell className=\"h-5 w-5 flex-shrink-0\" />\n              <p className=\"text-sm font-semibold\">\n                {photo.workouts_since_last_photo} Workout(s) completed since your last snapshot.\n              </p>\n            </div>\n          )}\n        </div>\n        <div className=\"p-4 pt-2 flex justify-between items-center\">\n          <div>\n            <p className=\"text-sm font-medium\">{new Date(photo.created_at).toLocaleString()}</p>\n            <p className=\"text-sm text-muted-foreground\">{photo.notes || 'No notes'}</p>\n          </div>\n          <Button variant=\"outline\" disabled={totalPhotos < 2} onClick={() => onStartCompare(photo)}>\n            <GitCompareArrows className=\"h-4 w-4 mr-2\" />\n            Compare\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":3444},"apps/web/src/components/profile/photo-journey/photo-journey-tab.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Loader2, GitCompareArrows } from 'lucide-react';\nimport { Tables } from '@/types/supabase';\nimport { PhotoCard } from './photo-card';\nimport { PhotoDetailDialog } from './photo-detail-dialog';\nimport { Button } from '@/components/ui/button';\nimport { PhotoComparisonDialog } from './photo-comparison-dialog';\n\ntype ProgressPhoto = Tables<'progress_photos'>;\n\ninterface PhotoJourneyTabProps {\n  photos: ProgressPhoto[];\n  loading: boolean;\n}\n\nexport const PhotoJourneyTab = ({ photos, loading }: PhotoJourneyTabProps) => {\n  const [selectedPhoto, setSelectedPhoto] = useState<ProgressPhoto | null>(null);\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\n  const [isComparisonOpen, setIsComparisonOpen] = useState(false);\n  const [photoForComparison, setPhotoForComparison] = useState<ProgressPhoto | null>(null);\n\n  const handlePhotoClick = (photo: ProgressPhoto) => {\n    setSelectedPhoto(photo);\n    setIsDetailOpen(true);\n  };\n\n  const handleStartComparison = (photo: ProgressPhoto) => {\n    setPhotoForComparison(photo);\n    setIsDetailOpen(false); // Close detail view if open\n    setIsComparisonOpen(true);\n  };\n\n  const handleCompareLatest = () => {\n    if (photos.length > 0) {\n      // Assuming photos are sorted descending by date, the first one is the latest\n      handleStartComparison(photos[0]);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"relative mt-6 border-none p-0\">\n        <header className=\"mb-6 flex flex-col sm:flex-row justify-between items-center gap-4\">\n          <div className=\"text-center sm:text-left\">\n            <h1 className=\"text-3xl font-bold\">My Progress Journey</h1>\n          </div>\n          <Button variant=\"outline\" disabled={photos.length < 2} onClick={handleCompareLatest}>\n            <GitCompareArrows className=\"h-4 w-4 mr-2\" />\n            Compare Photos\n          </Button>\n        </header>\n\n        {loading ? (\n          <div className=\"flex justify-center items-center h-64\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : photos.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-16\">\n            <p>You haven't uploaded any progress photos yet.</p>\n            <p>Click the camera button to start your journey!</p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n            {photos.map(photo => (\n              <div key={photo.id} onClick={() => handlePhotoClick(photo)} className=\"cursor-pointer\">\n                <PhotoCard photo={photo} />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      <PhotoDetailDialog\n        open={isDetailOpen}\n        onOpenChange={setIsDetailOpen}\n        photo={selectedPhoto}\n        totalPhotos={photos.length}\n        onStartCompare={handleStartComparison}\n      />\n      <PhotoComparisonDialog\n        open={isComparisonOpen}\n        onOpenChange={setIsComparisonOpen}\n        sourcePhoto={photoForComparison}\n      />\n    </>\n  );\n};","size_bytes":3088},"apps/web/src/components/profile/photo-journey/upload-photo-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from 'sonner';\nimport { Loader2 } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\n\ninterface UploadPhotoDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onUploadSuccess: () => void;\n  initialFile?: File | null;\n}\n\nexport const UploadPhotoDialog = ({ open, onOpenChange, onUploadSuccess, initialFile }: UploadPhotoDialogProps) => {\n  const { session, supabase } = useSession();\n  const [file, setFile] = useState<File | null>(null);\n  const [notes, setNotes] = useState('');\n  const [preview, setPreview] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (open && initialFile) {\n      setFile(initialFile);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(initialFile);\n    } else if (!open) {\n      // Reset when dialog closes\n      setFile(null);\n      setPreview(null);\n      setNotes('');\n    }\n  }, [open, initialFile]);\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      if (selectedFile.size > 5 * 1024 * 1024) { // 5MB limit\n        toast.error(\"File size cannot exceed 5MB.\");\n        return;\n      }\n      setFile(selectedFile);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreview(reader.result as string);\n      };\n      reader.readAsDataURL(selectedFile);\n    }\n  };\n\n  const handleClose = () => {\n    setFile(null);\n    setNotes('');\n    setPreview(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n    onOpenChange(false);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!file) {\n      toast.error(\"Please select a photo to upload.\");\n      return;\n    }\n    if (!session?.user) {\n      toast.error(\"You must be logged in to upload photos.\");\n      return;\n    }\n    setLoading(true);\n\n    try {\n      // 1. Find the timestamp of the user's most recent photo\n      const { data: lastPhoto, error: lastPhotoError } = await supabase\n        .from('progress_photos')\n        .select('created_at')\n        .eq('user_id', session.user.id)\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .single();\n\n      if (lastPhotoError && lastPhotoError.code !== 'PGRST116') { // Ignore 'not found' error\n        throw lastPhotoError;\n      }\n\n      // 2. If a previous photo exists, count workouts since then\n      let workoutsSinceLastPhoto: number | null = null;\n      if (lastPhoto) {\n        const { count, error: countError } = await supabase\n          .from('workout_sessions')\n          .select('*', { count: 'exact', head: true })\n          .eq('user_id', session.user.id)\n          .not('completed_at', 'is', null)\n          .gt('completed_at', lastPhoto.created_at);\n\n        if (countError) {\n          throw countError;\n        }\n        workoutsSinceLastPhoto = count;\n      }\n\n      const timestamp = Date.now();\n      const filePath = `${session.user.id}/${timestamp}-${file.name}`;\n\n      // 3. Upload to storage\n      const { data: uploadData, error: uploadError } = await supabase.storage\n        .from('user-photos')\n        .upload(filePath, file);\n\n      if (uploadError) {\n        throw uploadError;\n      }\n\n      // 4. Insert record into database with the new count\n      const { error: insertError } = await supabase\n        .from('progress_photos')\n        .insert({\n          user_id: session.user.id,\n          photo_path: uploadData.path,\n          notes: notes,\n          workouts_since_last_photo: workoutsSinceLastPhoto,\n        });\n\n      if (insertError) {\n        // If DB insert fails, try to remove the orphaned file from storage\n        await supabase.storage.from('user-photos').remove([filePath]);\n        throw insertError;\n      }\n\n      toast.success(\"Photo uploaded successfully!\");\n      onUploadSuccess();\n      handleClose();\n    } catch (error: any) {\n      console.error(\"Upload error:\", error);\n      toast.error(`Upload failed: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent onInteractOutside={(e) => { if (loading) e.preventDefault(); }} onEscapeKeyDown={(e) => { if (loading) e.preventDefault(); }}>\n        <DialogHeader>\n          <DialogTitle>Upload New Progress Photo</DialogTitle>\n          <DialogDescription>\n            Add a new photo to your journey. You can add notes to track your progress.\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {!initialFile && (\n            <div>\n              <Label htmlFor=\"photo\">Photo</Label>\n              <Input id=\"photo\" type=\"file\" accept=\"image/*\" onChange={handleFileChange} ref={fileInputRef} required disabled={loading} />\n            </div>\n          )}\n          {preview && (\n            <div className=\"mt-4\">\n              <img src={preview} alt=\"Preview\" className=\"max-h-48 w-auto rounded-md mx-auto\" />\n            </div>\n          )}\n          <div>\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Textarea id=\"notes\" value={notes} onChange={(e) => setNotes(e.target.value)} placeholder=\"e.g., Morning weight: 75kg\" disabled={loading} />\n          </div>\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={handleClose} disabled={loading}>Cancel</Button>\n            <Button type=\"submit\" disabled={!file || loading}>\n              {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              {loading ? 'Uploading...' : 'Upload'}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":6360},"apps/web/src/components/profile/points-explanation-modal.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, Dumbbell, ListChecks, CalendarCheck } from 'lucide-react';\n// Removed: import { ScrollArea } from '@/components/ui/scroll-area'; // Removed import\n\ninterface PointsExplanationModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport const PointsExplanationModal = ({ open, onOpenChange }: PointsExplanationModalProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md max-h-[90vh] flex flex-col overflow-y-auto\"> {/* DialogContent itself is scrollable */}\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Star className=\"h-5 w-5 text-yellow-500\" /> How Points Are Calculated\n          </DialogTitle>\n          <DialogDescription>\n            Your fitness points reflect your overall engagement and progress in the app.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex-grow py-4 pr-4\"> {/* Content area, now directly scrollable via DialogContent */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <Dumbbell className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h4 className=\"font-semibold\">Workout Sessions:</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  You earn **10 points** for every completed workout session.\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <ListChecks className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h4 className=\"font-semibold\">Total Unique Exercises:</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  You earn points for completing new unique exercises, contributing to your \"Total Exercises Completed\" count. (Points for this are integrated into workout sessions).\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <CalendarCheck className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h4 className=\"font-semibold\">Consistency & Streaks:</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Maintaining workout streaks and logging activities regularly contributes to your overall fitness level and unlocks achievements.\n                </p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground italic\">\n              Keep logging your workouts and activities to increase your points and climb the fitness ranks!\n            </p>\n          </div>\n        </div>\n        <div className=\"flex justify-center pt-4\">\n          <Button onClick={() => onOpenChange(false)}>Got It!</Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":3133},"apps/web/src/components/profile/profile-overview-tab.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Flame, Dumbbell, BarChart2, ListChecks, Star } from 'lucide-react';\nimport { Profile as ProfileType } from '@/types/supabase';\nimport { AchievementGrid } from './achievement-grid';\nimport { ACHIEVEMENT_IDS, achievementsList } from '@/lib/achievements'; // Import achievementsList\n\ninterface ProfileOverviewTabProps {\n  profile: ProfileType | null;\n  bmi: string | null;\n  dailyCalories: string | null;\n  achievements: { id: string; name: string; icon: string }[]; // Added achievements prop\n  unlockedAchievements: Set<string>;\n  onAchievementClick: (achievement: { id: string; name: string; icon: string }) => void;\n  onOpenPointsExplanation: () => void;\n  totalWorkoutsCount: number;\n  totalExercisesCount: number;\n}\n\nexport const ProfileOverviewTab = ({\n  profile,\n  bmi,\n  dailyCalories,\n  achievements, // Destructure achievements prop\n  unlockedAchievements,\n  onAchievementClick,\n  onOpenPointsExplanation,\n  totalWorkoutsCount,\n  totalExercisesCount,\n}: ProfileOverviewTabProps) => {\n  if (!profile) return null;\n\n  return (\n    <div className=\"mt-6 space-y-6 border-none p-0\">\n      <div className=\"grid grid-cols-2 lg:grid-cols-3 gap-4\">\n        <Card className=\"bg-gradient-to-br from-orange-400 to-orange-500 text-primary-foreground shadow-lg flex flex-col justify-between p-4\">\n          <CardHeader className=\"flex-row items-center justify-between pb-2 p-0\">\n            <CardTitle className=\"text-sm font-medium\">Current Streak</CardTitle>\n            <Flame className=\"h-4 w-4\" />\n          </CardHeader>\n          <CardContent className=\"p-0 pt-2\">\n            <div className=\"text-2xl font-bold\">{profile.current_streak || 0} Days</div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-gradient-to-br from-blue-400 to-blue-500 text-primary-foreground shadow-lg flex flex-col justify-between p-4\">\n          <CardHeader className=\"flex-row items-center justify-between pb-2 p-0\">\n            <CardTitle className=\"text-sm font-medium\">Total Workouts</CardTitle>\n            <Dumbbell className=\"h-4 w-4\" />\n          </CardHeader>\n          <CardContent className=\"p-0 pt-2\">\n            <div className=\"text-2xl font-bold\">{totalWorkoutsCount}</div>\n          </CardContent>\n        </Card>\n        <Card className=\"bg-gradient-to-br from-purple-400 to-purple-500 text-primary-foreground shadow-lg flex flex-col justify-between p-4\">\n          <CardHeader className=\"flex-row items-center justify-between pb-2 p-0\">\n            <CardTitle className=\"text-sm font-medium\">Total Unique Exercises</CardTitle>\n            <ListChecks className=\"h-4 w-4\" />\n          </CardHeader>\n          <CardContent className=\"p-0 pt-2\">\n            <div className=\"text-2xl font-bold\">{totalExercisesCount}</div>\n          </CardContent>\n        </Card>\n        <Card \n          className=\"bg-gradient-to-br from-yellow-400 to-yellow-500 text-primary-foreground shadow-lg flex flex-col justify-between p-4 cursor-pointer hover:scale-[1.02] transition-transform duration-200 ease-in-out\"\n          onClick={onOpenPointsExplanation}\n        >\n          <CardHeader className=\"flex-row items-center justify-between pb-2 p-0\">\n            <CardTitle className=\"text-sm font-medium\">Total Points</CardTitle>\n            <Star className=\"h-4 w-4\" />\n          </CardHeader>\n          <CardContent className=\"p-0 pt-2\">\n            <div className=\"text-2xl font-bold\">{profile.total_points || 0}</div>\n          </CardContent>\n        </Card>\n      </div>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart2 className=\"h-5 w-5\" /> Body Metrics\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 text-center\">\n          <div><p className=\"text-2xl font-bold\">{bmi || 'N/A'}</p><p className=\"text-xs text-muted-foreground\">BMI</p></div>\n          <div><p className=\"text-2xl font-bold\">{profile.height_cm || 'N/A'}<span className=\"text-base\">cm</span></p><p className=\"text-xs text-muted-foreground\">Height</p></div>\n          <div><p className=\"text-2xl font-bold\">{profile.weight_kg || 'N/A'}<span className=\"text-base\">kg</span></p><p className=\"text-xs text-muted-foreground\">Weight</p></div>\n          <div><p className=\"text-2xl font-bold\">{dailyCalories || 'N/A'}</p><p className=\"text-xs text-muted-foreground\">Daily Cal (Est.)</p></div>\n          <div><p className=\"text-2xl font-bold\">{profile.body_fat_pct || 'N/A'}%</p><p className=\"text-xs text-muted-foreground\">Body Fat</p></div>\n        </CardContent>\n      </Card>\n      <Card>\n        <CardHeader><CardTitle>Achievements</CardTitle></CardHeader>\n        <CardContent>\n          <AchievementGrid\n            achievements={achievements} // Use the achievements prop\n            unlockedAchievements={unlockedAchievements}\n            onAchievementClick={onAchievementClick}\n          />\n          <p className=\"text-center text-muted-foreground text-sm mt-4\">\n            Tap to see requirements\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":5237},"apps/web/src/components/profile/profile-settings-tab.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { FormProvider, UseFormReturn } from 'react-hook-form'; // Import FormProvider\nimport { LogOut } from 'lucide-react';\nimport { PersonalInfoForm } from './personal-info-form';\nimport { WorkoutPreferencesForm } from './workout-preferences-form';\nimport { ProgrammeTypeSection } from './programme-type-section';\nimport { AICoachUsageSection } from './ai-coach-usage-section';\nimport { DataExportSection } from './data-export-section';\nimport { GymManagementSection } from './gym-management-section';\nimport { Tables, Profile } from '@/types/supabase';\nimport { toast } from 'sonner'; // Import toast\n\ntype TPath = Tables<'t_paths'>;\n\ninterface ProfileSettingsTabProps {\n  form: UseFormReturn<any>;\n  mainMuscleGroups: string[];\n  aiCoachUsageToday: number;\n  AI_COACH_DAILY_LIMIT: number;\n  onSignOut: () => void;\n  profile: Profile | null;\n  onDataChange: () => void;\n  setIsSaving: (isSaving: boolean) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ProfileSettingsTab = ({\n  form,\n  mainMuscleGroups,\n  aiCoachUsageToday,\n  AI_COACH_DAILY_LIMIT,\n  onSignOut,\n  profile,\n  onDataChange,\n  setIsSaving, // NEW\n  setTempStatusMessage, // NEW\n}: ProfileSettingsTabProps) => {\n  return (\n    <div className=\"mt-6 space-y-6 border-none p-0\">\n      {/* Removed the <form> wrapper here, each section will manage its own submission */}\n      <PersonalInfoForm \n        mainMuscleGroups={mainMuscleGroups} \n        onDataChange={onDataChange} \n        setIsSaving={setIsSaving} \n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n      <WorkoutPreferencesForm \n        onDataChange={onDataChange} \n        setIsSaving={setIsSaving} \n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n      <ProgrammeTypeSection \n        profile={profile} \n        onDataChange={onDataChange} \n        setIsSaving={setIsSaving} \n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n      <GymManagementSection \n        profile={profile} \n        onDataChange={onDataChange} \n        setIsSaving={setIsSaving} \n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n      <AICoachUsageSection aiCoachUsageToday={aiCoachUsageToday} AI_COACH_DAILY_LIMIT={AI_COACH_DAILY_LIMIT} />\n      <DataExportSection />\n      \n      <div className=\"flex justify-end mt-6\">\n        <Button type=\"button\" variant=\"ghost\" className=\"text-destructive hover:text-destructive\" onClick={onSignOut}>\n          <LogOut className=\"h-4 w-4 mr-2\" /> Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n};","size_bytes":2732},"apps/web/src/components/profile/profile-stats-tab.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Progress } from \"@/components/ui/progress\";\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { MonthlyMomentumBars } from './monthly-momentum-bars'; // Import the renamed component\nimport { Tables } from '@/types/supabase'; // Import Tables for Profile type\n\ntype Profile = Tables<'profiles'>; // Define Profile type\n\ninterface ProfileStatsTabProps {\n  fitnessLevel: {\n    level: string;\n    color: string;\n    progress: number;\n    icon: React.ReactElement<React.SVGProps<SVGSVGElement>>;\n    nextLevelPoints: number;\n  };\n  profile: Profile | null; // Add profile prop\n}\n\nexport const ProfileStatsTab = ({ fitnessLevel, profile }: ProfileStatsTabProps) => {\n  return (\n    <div className=\"mt-6 space-y-6 border-none p-0\">\n      <Card className={cn(\"relative overflow-hidden p-6 text-center text-primary-foreground shadow-lg group\", fitnessLevel.color, \"transition-all duration-300 ease-in-out hover:scale-[1.01] hover:shadow-xl\")}>\n        <div className=\"absolute inset-0 opacity-20\" style={{\n          background: `linear-gradient(45deg, ${fitnessLevel.color.replace('bg-', 'var(--')} / 0.8), transparent)`,\n          filter: 'blur(50px)',\n          transform: 'scale(1.5)'\n        }}></div>\n        <div className=\"relative z-10 flex flex-col items-center justify-center\">\n          <div className=\"mb-4 text-white transition-transform duration-300 ease-in-out group-hover:scale-110\">\n            {React.cloneElement(fitnessLevel.icon, { className: \"h-12 w-12\" })}\n          </div>\n          <CardTitle className=\"text-4xl font-extrabold tracking-tight text-white mb-2\">\n            {fitnessLevel.level}\n          </CardTitle>\n          <CardDescription className=\"text-base text-white/90 mb-4\">\n            {fitnessLevel.level === 'Legend' ? \"You've reached the pinnacle of fitness!\" : `Keep pushing to reach ${fitnessLevel.nextLevelPoints / 10} workouts for the next level!`}\n          </CardDescription>\n          <Progress value={fitnessLevel.progress} className=\"w-full h-3 bg-white/30\" indicatorClassName={cn(fitnessLevel.color.replace('bg-', 'bg-'))} />\n          <p className=\"text-sm text-white/80 mt-2\">{Math.round(fitnessLevel.progress)}% to next level</p>\n        </div>\n      </Card>\n      \n      {/* Integrate MonthlyMomentumBars here */}\n      <MonthlyMomentumBars profile={profile} />\n\n      {/* Removed old weekly progress bar */}\n    </div>\n  );\n};","size_bytes":2540},"apps/web/src/components/profile/programme-type-section.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { LayoutTemplate, Edit, Save, Loader2 } from 'lucide-react'; // Added Edit, Save, Loader2\nimport { Tables, Profile } from '@/types/supabase';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { LoadingOverlay } from '../loading-overlay';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useFormContext } from 'react-hook-form'; // Import useFormContext\nimport { Button } from '@/components/ui/button'; // Import Button\n\ninterface ProgrammeTypeSectionProps {\n  profile: Profile | null;\n  onDataChange: () => void;\n  setIsSaving: (isSaving: boolean) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ProgrammeTypeSection = ({ profile, onDataChange, setIsSaving, setTempStatusMessage }: ProgrammeTypeSectionProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [isEditing, setIsEditing] = useState(false); // Local editing state\n  const [isWarningOpen, setIsWarningOpen] = useState(false);\n  const [pendingProgrammeType, setPendingProgrammeType] = useState<string | null>(null);\n  const [isRegenerating, setIsRegenerating] = useState(false); // Local state for regeneration loading\n  const form = useFormContext(); // Use context\n\n  const currentProgrammeType = profile?.programme_type || '';\n\n  const handleValueChange = (newType: string) => {\n    // Only trigger the warning if the value actually changes\n    if (newType !== currentProgrammeType) {\n      setPendingProgrammeType(newType);\n      setIsWarningOpen(true);\n    }\n  };\n\n  const confirmChange = async () => {\n    if (!memoizedSessionUserId || !pendingProgrammeType) { // Use memoized ID\n      console.error(\"Error: Session or pending programme type missing for confirmation.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsWarningOpen(false);\n    setIsRegenerating(true); // Set local regenerating state\n    setIsSaving(true); // Set global saving state\n\n    try {\n      const { error: profileError } = await supabase\n        .from('profiles')\n        .update({ programme_type: pendingProgrammeType })\n        .eq('id', memoizedSessionUserId); // Use memoized ID\n      if (profileError) throw profileError;\n\n      // Call the new API route to regenerate all plans\n      const response = await fetch('/api/regenerate-all-plans', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session?.access_token}`, // Use session?.access_token\n        },\n        body: JSON.stringify({}), // No body needed\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to start plan regeneration.\");\n      }\n\n      setTempStatusMessage({ message: \"Updating!\", type: 'success' }); // Use tempStatusMessage for initiation\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onDataChange();\n      setIsEditing(false); // Exit editing mode\n    } catch (err: any) {\n      console.error(\"Failed to update programme type and regenerate plans:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsRegenerating(false); // Clear local regenerating state\n      setIsSaving(false); // Clear global saving state\n      setPendingProgrammeType(null);\n    }\n  };\n\n  const cancelChange = () => {\n    setIsWarningOpen(false);\n    setPendingProgrammeType(null);\n    form.setValue('programme_type', currentProgrammeType); // Revert form value\n  };\n\n  return (\n    <>\n      <Card className=\"bg-card\">\n        <CardHeader className=\"border-b border-border/50 pb-4 flex flex-row items-center justify-between\"> {/* Adjusted for buttons */}\n          <CardTitle className=\"flex items-center gap-2\">\n            <LayoutTemplate className=\"h-5 w-5 text-primary\" /> Core Programme Type\n          </CardTitle>\n          {isEditing ? (\n            <Button onClick={form.handleSubmit(() => handleValueChange(form.getValues().programme_type))} size=\"sm\" disabled={form.formState.isSubmitting || isRegenerating}>\n              {form.formState.isSubmitting || isRegenerating ? (\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                <Save className=\"h-4 w-4 mr-2\" />\n              )}\n              Save\n            </Button>\n          ) : (\n            <Button onClick={() => setIsEditing(true)} size=\"sm\" variant=\"outline\">\n              <Edit className=\"h-4 w-4 mr-2\" /> Edit\n            </Button>\n          )}\n        </CardHeader>\n        <CardDescription className=\"px-6 pb-4 text-sm text-muted-foreground\">\n          Changing your programme type (or T-Path as we call it) will delete and regenerate the workout plans for ALL of your gyms to match the new structure. You can add in your saved exercises and those associated to your gym in the Management page.\n        </CardDescription>\n        <CardContent className=\"pt-6\">\n          <FormField\n            control={form.control}\n            name=\"programme_type\"\n            render={({ field }) => (\n              <FormItem>\n                <Select\n                  onValueChange={(value) => {\n                    field.onChange(value);\n                    // The actual save/warning logic is now tied to the Save button\n                  }}\n                  value={field.value || ''}\n                  disabled={!isEditing || isRegenerating}\n                >\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select your programme type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"ulul\">4-Day Upper/Lower</SelectItem>\n                    <SelectItem value=\"ppl\">3-Day Push/Pull/Legs</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={isWarningOpen} onOpenChange={setIsWarningOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Confirm Programme Change</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to change your programme type? This action cannot be undone. It will permanently delete and regenerate the workout plans for ALL of your gyms to match the new structure.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelChange}>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={confirmChange}>Confirm & Reset All Plans</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      <LoadingOverlay \n        isOpen={isRegenerating} // Use local state for this overlay\n        title=\"Updating Programme\" \n        description=\"Please wait while we regenerate all your workout plans...\" \n      />\n    </>\n  );\n};","size_bytes":7853},"apps/web/src/components/profile/setup-gym-view.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Camera, Copy, Sparkles, PlusSquare } from 'lucide-react';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useSession } from '@/components/session-context-provider';\nimport { CopyGymSetupDialog } from './copy-gym-setup-dialog';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ntype Gym = Tables<'gyms'>;\n\ninterface SetupGymViewProps {\n  gym: Gym;\n  onClose: () => void;\n  onSelectAiSetup: () => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void;\n}\n\nexport const SetupGymView = ({ gym, onClose, onSelectAiSetup, setTempStatusMessage }: SetupGymViewProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [isCopyDialogOpen, setIsCopyDialogOpen] = useState(false);\n  const [sourceGyms, setSourceGyms] = useState<Gym[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchOtherGyms = async () => {\n      if (!memoizedSessionUserId) return;\n      const { data, error } = await supabase\n        .from('gyms')\n        .select('*')\n        .eq('user_id', memoizedSessionUserId)\n        .neq('id', gym.id);\n\n      if (error) {\n        console.error(\"Failed to fetch other gyms for copying:\", error);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      } else {\n        setSourceGyms(data || []);\n      }\n    };\n    fetchOtherGyms();\n  }, [memoizedSessionUserId, supabase, gym.id, setTempStatusMessage]);\n\n  const handleSetupOption = async (option: 'copy' | 'defaults' | 'empty') => {\n    switch (option) {\n      case 'copy':\n        if (sourceGyms.length > 0) {\n          setIsCopyDialogOpen(true);\n        } else {\n          setTempStatusMessage({ message: \"No gyms to copy!\", type: 'error' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n        }\n        break;\n      case 'defaults':\n        if (!memoizedSessionUserId) {\n          setTempStatusMessage({ message: \"Error!\", type: 'error' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n          return;\n        }\n        setLoading(true);\n        try {\n          const response = await fetch('/api/setup-default-gym', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session?.access_token}` },\n            body: JSON.stringify({ gymId: gym.id }),\n          });\n          const data = await response.json();\n          if (!response.ok) throw new Error(data.error || 'Failed to set up default gym.');\n          setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n          onClose();\n        } catch (err: any) {\n          console.error(\"Failed to set up default gym:\", err.message);\n          setTempStatusMessage({ message: \"Error!\", type: 'error' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n        } finally {\n          setLoading(false);\n        }\n        break;\n      case 'empty':\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        onClose();\n        break;\n    }\n  };\n\n  const options = [\n    {\n      id: 'ai-photo' as const,\n      title: 'Analyse Gym Photos',\n      description: 'Upload photos to automatically create your equipment list',\n      icon: Camera,\n      recommended: true,\n      badge: 'AI',\n      action: onSelectAiSetup,\n    },\n    {\n      id: 'copy-existing' as const,\n      title: 'Copy from Existing Gym',\n      description: \"Duplicate the setup from another gym you've created\",\n      icon: Copy,\n      recommended: false,\n      action: () => handleSetupOption('copy'),\n    },\n    {\n      id: 'app-defaults' as const,\n      title: 'Use App Defaults',\n      description: 'Start with a standard set of common gym equipment',\n      icon: Sparkles,\n      recommended: false,\n      dividerBefore: true,\n      action: () => handleSetupOption('defaults'),\n    },\n    {\n      id: 'empty' as const,\n      title: 'Start from Empty',\n      description: 'Manually add exercises to this gym from scratch',\n      icon: PlusSquare,\n      recommended: false,\n      action: () => handleSetupOption('empty'),\n    },\n  ];\n\n  return (\n    <>\n      <DialogHeader className=\"px-2 pt-5 pb-2 border-b border-slate-100\">\n        <DialogTitle className=\"text-xl font-bold text-slate-900\">\n          Setup \"{gym.name}\"\n        </DialogTitle>\n        <DialogDescription className=\"text-[13px] text-slate-500 leading-tight\">\n          How would you like to add exercises to your new gym?\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"px-2 pt-2 pb-4 flex-1 overflow-y-auto\">\n        <div className=\"grid gap-2.5\">\n          {options.map((option) => (\n            <React.Fragment key={option.id}>\n              {option.dividerBefore && (\n                <div className=\"h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent my-2\" />\n              )}\n              \n              <button\n                onClick={option.action}\n                className={cn(\n                  `relative w-full text-left rounded-xl p-3 border-2 group`,\n                  `transition-all duration-300 ease-out overflow-hidden`,\n                  `before:absolute before:top-0 before:left-0 before:w-1 before:h-full`,\n                  `before:bg-slate-900 before:scale-y-0 before:transition-transform`,\n                  `before:duration-300 before:ease-out before:origin-center`,\n                  `hover:translate-x-1 hover:shadow-md hover:border-slate-300`,\n                  `hover:before:scale-y-100`,\n                  option.recommended\n                    ? 'bg-gradient-to-br from-slate-900/[0.03] to-slate-900/[0.01] border-slate-900'\n                    : 'bg-white border-slate-200'\n                )}\n              >\n                <div className=\"flex gap-2.5 items-start\">\n                  <div className=\"w-9 h-9 sm:w-10 sm:h-10 bg-slate-50 rounded-lg flex items-center justify-center flex-shrink-0 transition-all duration-300 group-hover:bg-slate-900 group-hover:scale-105\">\n                    <option.icon className=\"w-[18px] h-[18px] sm:w-5 sm:h-5 text-slate-900 transition-colors duration-300 group-hover:text-white\" />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-1.5 mb-1\">\n                      <h3 className=\"text-sm font-bold text-slate-900\">\n                        {option.title}\n                      </h3>\n                      {option.recommended && option.badge && (\n                        <span className=\"bg-slate-900 text-white text-[10px] font-bold uppercase tracking-wider px-2 py-0.5 rounded-md\">\n                          {option.badge}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-slate-500 leading-snug\">\n                      {option.description}\n                    </p>\n                  </div>\n                </div>\n              </button>\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n      {isCopyDialogOpen && (\n        <CopyGymSetupDialog\n          open={isCopyDialogOpen}\n          onOpenChange={setIsCopyDialogOpen}\n          targetGym={gym}\n          sourceGyms={sourceGyms}\n          onCopySuccess={async () => onClose()}\n          setTempStatusMessage={setTempStatusMessage}\n        />\n      )}\n    </>\n  );\n};","size_bytes":7840},"apps/web/src/components/profile/weekly-momentum-bars.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\nimport { CalendarDays } from 'lucide-react';\n\ntype Profile = Tables<'profiles'>;\ntype WorkoutSession = Tables<'workout_sessions'>;\ntype TPath = Tables<'t_paths'>;\n\ninterface WeeklyMomentumBarsProps {\n  profile: Profile | null;\n}\n\n// Helper to get the start of the week (Monday)\nconst getStartOfWeek = (date: Date): Date => {\n  const d = new Date(date);\n  const day = d.getDay(); // Sunday - 0, Monday - 1, ..., Saturday - 6\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust to Monday\n  d.setDate(diff);\n  d.setHours(0, 0, 0, 0);\n  d.setMinutes(0, 0, 0);\n  d.setSeconds(0);\n  d.setMilliseconds(0);\n  return d;\n};\n\nexport const WeeklyMomentumBars = ({ profile }: WeeklyMomentumBarsProps) => {\n  const { session, supabase } = useSession();\n  const [loading, setLoading] = useState(true);\n  const [weeklyWorkoutData, setWeeklyWorkoutData] = useState<Map<string, number>>(new Map()); // Map<weekKey, workoutCount>\n  const [requiredWorkoutsPerWeek, setRequiredWorkoutsPerWeek] = useState<number>(3); // Default to PPL (3)\n\n  const currentYear = useMemo(() => new Date().getFullYear(), []);\n  const profileCreatedAt = useMemo(() => profile?.created_at ? new Date(profile.created_at) : null, [profile]);\n\n  const getColorClass = useCallback((workoutCount: number): string => {\n    const darkGreen = 'bg-green-600';\n    const mediumGreen = 'bg-green-400';\n    const lightGreen = 'bg-green-200';\n    const gray = 'bg-gray-200'; // For 0 workouts\n\n    if (requiredWorkoutsPerWeek === 4) { // ULUL\n      if (workoutCount >= 4) return darkGreen;\n      if (workoutCount >= 2) return mediumGreen; // 2-3 workouts\n      if (workoutCount >= 1) return lightGreen;\n    } else { // PPL or default (3)\n      if (workoutCount >= 3) return darkGreen;\n      if (workoutCount >= 2) return mediumGreen;\n      if (workoutCount >= 1) return lightGreen;\n    }\n    return gray;\n  }, [requiredWorkoutsPerWeek]);\n\n  useEffect(() => {\n    const fetchWorkoutData = async () => {\n      if (!session || !profile) {\n        setLoading(false);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        // 1. Determine required workouts per week based on active T-Path\n        if (profile.active_t_path_id) {\n          const { data: activeTPath, error: tPathError } = await supabase\n            .from('t_paths')\n            .select('settings')\n            .eq('id', profile.active_t_path_id)\n            .single();\n\n          if (tPathError) {\n            console.error(\"Error fetching active T-Path settings:\", tPathError);\n            toast.error(\"Failed to load active workout plan settings.\"); // Added toast.error\n          }\n          else if (activeTPath?.settings && typeof activeTPath.settings === 'object' && 'tPathType' in activeTPath.settings) {\n            const tPathType = (activeTPath.settings as { tPathType: string }).tPathType;\n            setRequiredWorkoutsPerWeek(tPathType === 'ulul' ? 4 : 3);\n          }\n        } else {\n          // If no active T-Path, default to PPL requirements\n          setRequiredWorkoutsPerWeek(3);\n        }\n\n        // 2. Fetch all workout sessions for the user\n        const { data: workoutSessions, error: sessionsError } = await supabase\n          .from('workout_sessions')\n          .select('session_date') // Only need session_date for counting\n          .eq('user_id', session.user.id)\n          .order('session_date', { ascending: true });\n\n        if (sessionsError) throw sessionsError;\n\n        const newWeeklyWorkoutData = new Map<string, number>(); // Key: YYYY-MM-DD (start of week)\n        (workoutSessions || []).forEach(sessionItem => {\n          const sessionDate = new Date(sessionItem.session_date);\n          const startOfWeek = getStartOfWeek(sessionDate);\n          const weekKey = startOfWeek.toISOString().split('T')[0]; // e.g., \"2023-01-02\"\n\n          newWeeklyWorkoutData.set(weekKey, (newWeeklyWorkoutData.get(weekKey) || 0) + 1);\n        });\n        setWeeklyWorkoutData(newWeeklyWorkoutData);\n\n      } catch (err: any) {\n        toast.error(\"Failed to load weekly workout data: \" + err.message);\n        console.error(\"Error fetching weekly workout data:\", err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWorkoutData();\n  }, [session, supabase, profile]);\n\n  const renderYearMomentum = () => {\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    const today = getStartOfWeek(new Date()); // Current week's Monday\n\n    const yearWeeksGroupedByMonth: { [month: number]: { date: Date; colorClass: string }[] } = {};\n\n    let currentWeekStart = getStartOfWeek(new Date(currentYear, 0, 1)); // Start from Jan 1st of current year\n\n    // Adjust start date if profile was created in the current year, starting from that week\n    if (profileCreatedAt && profileCreatedAt.getFullYear() === currentYear) {\n      const profileWeekStart = getStartOfWeek(profileCreatedAt);\n      if (profileWeekStart > currentWeekStart) {\n        currentWeekStart = profileWeekStart;\n      }\n    } else if (profileCreatedAt && profileCreatedAt.getFullYear() > currentYear) {\n      // If profile is for a future year, no data to show for current year\n      return null;\n    }\n    // If profileCreatedAt is from a previous year, currentWeekStart remains Jan 1st of currentYear\n\n    while (currentWeekStart <= today) {\n      const monthIndex = currentWeekStart.getMonth();\n      if (!yearWeeksGroupedByMonth[monthIndex]) {\n        yearWeeksGroupedByMonth[monthIndex] = [];\n      }\n\n      const weekKey = currentWeekStart.toISOString().split('T')[0];\n      const workoutCount = weeklyWorkoutData.get(weekKey) || 0;\n      const colorClass = getColorClass(workoutCount);\n\n      yearWeeksGroupedByMonth[monthIndex].push({ date: new Date(currentWeekStart), colorClass });\n\n      currentWeekStart.setDate(currentWeekStart.getDate() + 7); // Move to next week\n    }\n\n    return (\n      <div className=\"grid grid-cols-1 gap-4\">\n        {Array.from({ length: 3 }).map((_, rowIndex) => (\n          <div key={rowIndex} className=\"grid grid-cols-4 gap-4\">\n            {Array.from({ length: 4 }).map((_, colIndex) => {\n              const monthIndex = rowIndex * 4 + colIndex;\n              const monthName = monthNames[monthIndex];\n              const monthWeeks = yearWeeksGroupedByMonth[monthIndex] || [];\n\n              return (\n                <Card key={monthName} className=\"p-2\">\n                  <CardTitle className=\"text-sm font-semibold mb-2 text-center\">{monthName}</CardTitle>\n                  <div className=\"flex h-12 w-full rounded-md overflow-hidden border border-gray-300\">\n                    {monthWeeks.length === 0 ? (\n                      <div className=\"flex-1 h-full bg-gray-100\" /> // Empty gray bar for months with no data\n                    ) : (\n                      monthWeeks.map((week, weekIndex) => (\n                        <div\n                          key={weekIndex}\n                          className={cn(\"flex-1 h-full\", week.colorClass)}\n                          title={`${week.date.toLocaleDateString()} - Workouts: ${weeklyWorkoutData.get(week.date.toISOString().split('T')[0]) || 0}`}\n                        />\n                      ))\n                    )}\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CalendarDays className=\"h-5 w-5\" /> Weekly Momentum\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Loading weekly momentum...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CalendarDays className=\"h-5 w-5\" /> Weekly Momentum\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Workout consistency for {currentYear} based on your active T-Path.\n        </p>\n      </CardHeader>\n      <CardContent>\n        {renderYearMomentum()}\n        <p className=\"text-sm text-muted-foreground mt-4 text-center\">\n          Green shades indicate workout consistency. Darker green means more workouts completed relative to your active T-Path.\n        </p>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":8768},"apps/web/src/components/profile/workout-preferences-form.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dumbbell, Edit, Save, Loader2 } from 'lucide-react'; // Added Edit, Save, Loader2\nimport { useFormContext } from 'react-hook-form'; // Import useFormContext\nimport { toast } from 'sonner'; // Import toast\nimport { Button } from '@/components/ui/button'; // Import Button\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\nimport { ProfileUpdate } from '@/types/supabase'; // Import ProfileUpdate\nimport { useWorkoutDataFetcher } from '@/hooks/use-workout-data-fetcher'; // Import useWorkoutDataFetcher\n\ninterface WorkoutPreferencesFormProps {\n  onDataChange: () => void;\n  setIsSaving: (isSaving: boolean) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const WorkoutPreferencesForm = ({ onDataChange, setIsSaving, setTempStatusMessage }: WorkoutPreferencesFormProps) => {\n  const [isEditing, setIsEditing] = useState(false); // Local editing state\n  const form = useFormContext(); // Use context\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const { profile } = useWorkoutDataFetcher(); // Get profile to check active_t_path_id\n\n  const handleSave = async () => {\n    if (!memoizedSessionUserId || !profile) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsSaving(true); // Set global saving state\n    try {\n      const values = form.getValues(); // Get current form values\n\n      const updateData: ProfileUpdate = {\n        primary_goal: values.primary_goal,\n        preferred_session_length: values.preferred_session_length,\n        updated_at: new Date().toISOString()\n      };\n      \n      const { error } = await supabase.from('profiles').update(updateData).eq('id', memoizedSessionUserId); // Use memoized ID\n      if (error) {\n        console.error(\"Failed to update workout preferences:\", error);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        return;\n      }\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      onDataChange(); // Refresh parent data\n\n      // Always trigger plan regeneration if an active T-Path exists and session length changed\n      if (profile.active_t_path_id && form.formState.dirtyFields.preferred_session_length) {\n        console.log(`[WorkoutPreferencesForm] Initiating workout plan update because session length changed. Active T-Path: ${profile.active_t_path_id}.`);\n        try {\n          const response = await fetch(`/api/generate-t-path`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${session?.access_token}`\n            },\n            body: JSON.stringify({ \n              tPathId: profile.active_t_path_id,\n              preferred_session_length: values.preferred_session_length // Use the value from the form\n            })\n          });\n\n          if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"[WorkoutPreferencesForm] Failed to initiate T-Path workout regeneration API:\", errorText);\n            setTempStatusMessage({ message: \"Error!\", type: 'error' });\n            throw new Error(`Failed to initiate T-Path workout regeneration: ${errorText}`);\n          }\n          console.log(\"[WorkoutPreferencesForm] Successfully initiated T-Path workout regeneration API call.\");\n        } catch (err: any) {\n          console.error(\"[WorkoutPreferencesForm] Error initiating workout plan update:\", err);\n          setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        }\n      }\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      setIsEditing(false); // Exit editing mode\n    } catch (error: any) {\n      console.error(\"Error saving workout preferences:\", error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false); // Clear global saving state\n    }\n  };\n\n  return (\n    <Card className=\"bg-card\">\n      <CardHeader className=\"border-b border-border/50 pb-4 flex flex-row items-center justify-between\"> {/* Adjusted for buttons */}\n        <CardTitle className=\"flex items-center gap-2\">\n          <Dumbbell className=\"h-5 w-5 text-primary\" /> Workout Preferences\n        </CardTitle>\n        {isEditing ? (\n          <Button onClick={form.handleSubmit(handleSave)} size=\"sm\" disabled={form.formState.isSubmitting}>\n            {form.formState.isSubmitting ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Save className=\"h-4 w-4 mr-2\" />\n            )}\n            Save\n          </Button>\n        ) : (\n          <Button onClick={() => setIsEditing(true)} size=\"sm\" variant=\"outline\">\n            <Edit className=\"h-4 w-4 mr-2\" /> Edit\n          </Button>\n        )}\n      </CardHeader>\n      <CardContent className=\"space-y-4 pt-6\">\n        <FormField control={form.control} name=\"primary_goal\" render={({ field }) => (\n          <FormItem>\n            <FormLabel>Primary Goal</FormLabel>\n            <Select onValueChange={field.onChange} value={field.value || ''} disabled={!isEditing}>\n              <FormControl><SelectTrigger><SelectValue placeholder=\"Select your goal\" /></SelectTrigger></FormControl>\n              <SelectContent>\n                <SelectItem value=\"muscle_gain\">Muscle Gain</SelectItem>\n                <SelectItem value=\"fat_loss\">Fat Loss</SelectItem>\n                <SelectItem value=\"strength_increase\">Strength Increase</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )} />\n        <FormField control={form.control} name=\"preferred_session_length\" render={({ field }) => (\n          <FormItem>\n            <FormLabel>Preferred Session Length</FormLabel>\n            <Select onValueChange={(value) => {\n              form.setValue(field.name, value, { shouldDirty: true }); // Force dirty state\n            }} value={field.value || ''} disabled={!isEditing}>\n              <FormControl><SelectTrigger><SelectValue placeholder=\"Select length\" /></SelectTrigger></FormControl>\n              <SelectContent>\n                <SelectItem value=\"15-30\">15-30 mins</SelectItem>\n                <SelectItem value=\"30-45\">30-45 mins</SelectItem>\n                <SelectItem value=\"45-60\">45-60 mins</SelectItem>\n                <SelectItem value=\"60-90\">60-90 mins</SelectItem>\n              </SelectContent>\n            </Select>\n            <FormMessage />\n          </FormItem>\n        )} />\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":7152},"apps/web/src/components/progress/activity-chart.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { formatDistance, formatTime } from '@/lib/unit-conversions';\nimport { useActivityChartData } from '@/hooks/data/useActivityChartData'; // Import the new hook\n\nexport const ActivityChart = () => {\n  const { chartData, isLoading, error, preferredDistanceUnit } = useActivityChartData();\n\n  if (isLoading) {\n    return (\n      <Card className=\"h-[350px] flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading activity data...</p>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"h-[350px] flex items-center justify-center\">\n        <p className=\"text-destructive\">Error: {error}</p>\n      </Card>\n    );\n  }\n\n  const hasData = chartData.some(d => d.cyclingDistance > 0 || d.swimmingLengths > 0 || d.tennisDuration > 0);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Weekly Activity Overview</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!hasData ? (\n          <div className=\"h-[250px] flex items-center justify-center text-muted-foreground\">\n            No activity data available. Log some activities to see your progress!\n          </div>\n        ) : (\n          <div className=\"h-[250px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={chartData}\n                margin={{\n                  top: 5,\n                  right: 10,\n                  left: 10,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" tickFormatter={(tick) => new Date(tick).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} />\n                <YAxis />\n                <Tooltip\n                  formatter={(value: number, name: string) => {\n                    if (name === 'Cycling Distance') return [`${formatDistance(value, preferredDistanceUnit as 'km' | 'miles')}`, name];\n                    if (name === 'Swimming Lengths') return [`${value} lengths`, name];\n                    if (name === 'Tennis Duration') return [`${formatTime(value * 60)}`, name]; // Convert minutes back to formatted time\n                    return [value, name];\n                  }}\n                />\n                <Legend />\n                <Bar dataKey=\"cyclingDistance\" fill=\"hsl(var(--chart-1))\" name={`Cycling Distance (${preferredDistanceUnit})`} />\n                <Bar dataKey=\"swimmingLengths\" fill=\"hsl(var(--chart-2))\" name=\"Swimming Lengths\" />\n                <Bar dataKey=\"tennisDuration\" fill=\"hsl(var(--chart-3))\" name=\"Tennis Duration (min)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2967},"apps/web/src/components/progress/personal-records-card.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Trophy } from 'lucide-react';\nimport { formatTime } from '@/lib/unit-conversions';\nimport { usePersonalRecordsData } from '@/hooks/data/usePersonalRecordsData'; // Import the new hook\n\nexport const PersonalRecordsCard = () => {\n  const { personalRecords, isLoading, error } = usePersonalRecordsData();\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5\" />\n            Personal Bests\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Trophy className=\"h-5 w-5\" />\n            Personal Bests\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-destructive\">Error: {error}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Trophy className=\"h-5 w-5\" />\n          Personal Bests\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {personalRecords.length === 0 ? (\n          <p className=\"text-muted-foreground\">No personal bests yet. Complete workouts to set new PBs!</p>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Exercise</TableHead>\n                <TableHead>Record</TableHead>\n                <TableHead>Date</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {personalRecords.map((record, index) => (\n                <TableRow key={index}>\n                  <TableCell className=\"font-medium\">{record.exerciseName}</TableCell>\n                  <TableCell>\n                    {record.exerciseType === 'weight' \n                      ? `${record.value.toLocaleString()} kg` \n                      : `${formatTime(record.value)}`}\n                  </TableCell>\n                  <TableCell>{record.date}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2561},"apps/web/src/components/session-context-provider.tsx":{"content":"\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { Session, SupabaseClient } from '@supabase/supabase-js';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useRouter } from 'next/navigation';\nimport { Toaster } from 'sonner';\nimport { SyncManagerInitializer } from './sync-manager-initializer';\nimport { db, LocalSupabaseSession } from '@/lib/db'; // Import db and LocalSupabaseSession\n\ninterface SessionContextType {\n  session: Session | null;\n  supabase: SupabaseClient;\n  memoizedSessionUserId: string | null; // ADDED: Memoized user ID\n}\n\nconst SessionContext = createContext<SessionContextType | undefined>(undefined);\n\nexport const SessionContextProvider = ({ children }: { children: React.ReactNode }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n\n  // Memoize sessionUserId to ensure stable reference for dependencies\n  const memoizedSessionUserId = useMemo(() => session?.user.id || null, [session?.user.id]);\n\n  // Function to save session to IndexedDB\n  const saveSessionToIndexedDB = useCallback(async (currentSession: Session | null) => {\n    try {\n      if (currentSession) {\n        await db.supabase_session.put({\n          id: 'current_session', // Fixed ID for the single session object\n          session: currentSession,\n          last_updated: Date.now(),\n        });\n      } else {\n        // If session is null, remove it from IndexedDB\n        await db.supabase_session.delete('current_session');\n      }\n    } catch (error) {\n      console.error(\"Error saving session to IndexedDB:\", error);\n    }\n  }, []);\n\n  // Function to load session from IndexedDB\n  const loadSessionFromIndexedDB = useCallback(async (): Promise<Session | null> => {\n    try {\n      const localSession = await db.supabase_session.get('current_session');\n      if (localSession && localSession.session) {\n        // Check if the session is still valid (e.g., not expired)\n        const currentTime = Date.now() / 1000; // in seconds\n        if (localSession.session.expires_at && localSession.session.expires_at > currentTime) {\n          return localSession.session;\n        } else {\n          // Session expired, remove it\n          await db.supabase_session.delete('current_session');\n        }\n      }\n    } catch (error) {\n      console.error(\"Error loading session from IndexedDB:\", error);\n    }\n    return null;\n  }, []);\n\n  useEffect(() => {\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n\n    const initializeDbAndSession = async () => {\n      setLoading(true);\n      try {\n        await db.open(); // Ensure DB is open when provider mounts\n        console.log(\"[SessionContextProvider] IndexedDB opened.\");\n      } catch (error) {\n        console.error(\"[SessionContextProvider] Failed to open IndexedDB:\", error);\n        // If DB fails to open, we might not be able to load/save sessions locally.\n        // Proceed without local session, relying only on Supabase.\n      }\n\n      // 1. Try to get session from Supabase (server-side or fresh client-side)\n      const { data: { session: supabaseSession } } = await supabase.auth.getSession();\n\n      if (isMounted) {\n        if (supabaseSession) {\n          setSession(supabaseSession);\n          await saveSessionToIndexedDB(supabaseSession);\n        } else {\n          // 2. If no session from Supabase, try to load from IndexedDB\n          const localSession = await loadSessionFromIndexedDB();\n          if (localSession) {\n            setSession(localSession);\n            // Attempt to refresh the session in the background if it's from IndexedDB\n            supabase.auth.setSession(localSession).then(() => {\n              supabase.auth.refreshSession().then(({ data, error }) => {\n                if (isMounted) {\n                  if (data?.session) {\n                    setSession(data.session);\n                    saveSessionToIndexedDB(data.session);\n                  } else if (error) {\n                    console.error(\"Error refreshing session from IndexedDB:\", error);\n                    // If refresh fails, consider the local session invalid\n                    setSession(null);\n                    saveSessionToIndexedDB(null);\n                  }\n                }\n              });\n            });\n          }\n        }\n        setLoading(false);\n      }\n    };\n\n    initializeDbAndSession();\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (_event, newSession) => {\n      if (isMounted) {\n        setSession(newSession);\n        await saveSessionToIndexedDB(newSession); // Always save the latest session state\n        setLoading(false); // Ensure loading is false after any auth state change\n\n        if (_event === 'SIGNED_OUT') {\n          router.push('/login');\n          // Clear all IndexedDB data on sign out\n          try {\n            await db.delete(); // Delete all data\n            await db.open(); // Re-open the database after deletion\n            console.log(\"[SessionContextProvider] IndexedDB cleared and re-opened on sign out.\");\n          } catch (err) {\n            console.error(\"[SessionContextProvider] Error clearing/re-opening IndexedDB on sign out:\", err);\n          }\n        }\n      }\n    });\n\n    return () => {\n      isMounted = false; // Cleanup flag\n      subscription.unsubscribe();\n      try {\n        db.close(); // Close DB when provider unmounts\n        console.log(\"[SessionContextProvider] IndexedDB closed on unmount.\");\n      } catch (error) {\n        console.error(\"[SessionContextProvider] Error closing IndexedDB on unmount:\", error);\n      }\n    };\n  }, [router, saveSessionToIndexedDB, loadSessionFromIndexedDB]);\n\n  if (loading) {\n    return null; // Or a loading spinner\n  }\n\n  return (\n    <SessionContext.Provider value={{ session, supabase, memoizedSessionUserId }}>\n      <SyncManagerInitializer />\n      {children}\n      <Toaster />\n    </SessionContext.Provider>\n  );\n};\n\nexport const useSession = () => {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error('useSession must be used within a SessionContextProvider');\n  }\n  return context;\n};","size_bytes":6287},"apps/web/src/components/shared/exercise-selection-dropdown.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\";\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ExerciseSelectionDropdownProps {\n  exercises: ExerciseDefinition[]; // Now receives a pre-filtered list\n  selectedExerciseId: string;\n  setSelectedExerciseId: (id: string) => void;\n  placeholder?: string;\n}\n\nexport const ExerciseSelectionDropdown = ({\n  exercises,\n  selectedExerciseId,\n  setSelectedExerciseId,\n  placeholder = \"Select exercise to add\",\n}: ExerciseSelectionDropdownProps) => {\n  return (\n    <Select onValueChange={setSelectedExerciseId} value={selectedExerciseId}>\n      <SelectTrigger className=\"w-full\"><SelectValue placeholder={placeholder} /></SelectTrigger>\n      <SelectContent className=\"p-0\">\n        <ScrollArea className=\"h-64\">\n          <div className=\"p-1\">\n            {exercises.length === 0 ? (\n              <div className=\"text-center text-muted-foreground py-4 text-sm\">No exercises found.</div>\n            ) : (\n              exercises.map(e => (\n                <SelectItem key={e.id} value={e.id as string}>\n                  {e.name}\n                </SelectItem>\n              ))\n            )}\n          </div>\n        </ScrollArea>\n      </SelectContent>\n    </Select>\n  );\n};","size_bytes":1465},"apps/web/src/components/sync-manager-initializer.tsx":{"content":"\"use client\";\n\nimport { useSyncManager } from '@/hooks/use-sync-manager';\n\nexport const SyncManagerInitializer = () => {\n  useSyncManager();\n  return null; // This component doesn't render anything\n};","size_bytes":200},"apps/web/src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2015},"apps/web/src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4433},"apps/web/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"apps/web/src/components/ui/aspect-ratio.tsx":{"content":"\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":154},"apps/web/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"apps/web/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"apps/web/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"apps/web/src/components/ui/button.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background\", // Removed hover:bg-accent and hover:text-accent-foreground\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        brand: \"bg-action text-action-foreground hover:bg-action-light\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","size_bytes":1906},"apps/web/src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside: \"text-muted-foreground opacity-50\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }","size_bytes":2136},"apps/web/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border border-b-4 bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1887},"apps/web/src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"apps/web/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"apps/web/src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1026},"apps/web/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"apps/web/src/components/ui/command.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4887},"apps/web/src/components/ui/context-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7420},"apps/web/src/components/ui/dialog.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 backdrop-blur-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-[calc(100%-2rem)] max-w-md translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};","size_bytes":3837},"apps/web/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"apps/web/src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7606},"apps/web/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nfunction useFormField() {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <LabelPrimitive.Root\n      ref={ref}\n      className={cn(\n        error && \"text-destructive\",\n        className\n      )}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = LabelPrimitive.Root.displayName\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { formItemId, name } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}","size_bytes":3917},"apps/web/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"apps/web/src/components/ui/input-otp.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2157},"apps/web/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"apps/web/src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"apps/web/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8622},"apps/web/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"apps/web/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"apps/web/src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1356},"apps/web/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {\n    indicatorClassName?: string; // Added indicatorClassName prop\n  }\n>(({ className, value, indicatorClassName, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 bg-primary transition-all\",\n        indicatorClassName // Apply indicatorClassName here\n      )}\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":967},"apps/web/src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1424},"apps/web/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"apps/web/src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1656},"apps/web/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5745},"apps/web/src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"apps/web/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"apps/web/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23581},"apps/web/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"apps/web/src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root> & {\n    indicatorClassName?: string;\n  }\n>(({ className, indicatorClassName, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className={cn(\"absolute h-full bg-primary\", indicatorClassName)} />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }","size_bytes":1177},"apps/web/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"apps/web/src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1162},"apps/web/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"apps/web/src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1901},"apps/web/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"apps/web/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"apps/web/src/components/ui/toggle.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1500},"apps/web/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1267},"apps/web/src/components/workout-badge.tsx":{"content":"\"use client\";\n\nimport * as React from \"react\";\nimport { cn, getWorkoutColorClass, getWorkoutIcon } from \"@/lib/utils\";\nimport { Badge, BadgeProps } from \"@/components/ui/badge\";\n\ninterface WorkoutBadgeProps extends BadgeProps {\n  workoutName: string;\n}\n\nconst WorkoutBadge = ({ workoutName, className, ...props }: WorkoutBadgeProps) => {\n  const bgColorClass = getWorkoutColorClass(workoutName, 'bg');\n  const textColorClass = getWorkoutColorClass(workoutName, 'text'); // This is now unused as we force text-white\n  const Icon = getWorkoutIcon(workoutName);\n\n  return (\n    <Badge\n      className={cn(\n        \"px-2 py-0.5 text-xs flex items-center gap-1\",\n        bgColorClass, // Apply background color\n        \"text-white\", // Force text to white for contrast on colored backgrounds\n        \"transition-transform duration-200 ease-out group-hover:scale-105\", // Add scale animation\n        className\n      )}\n      // Removed default variant to allow direct class application to control colors\n      {...props}\n    >\n      {Icon && <Icon className=\"h-3 w-3\" />}\n      {workoutName}\n    </Badge>\n  );\n};\n\nexport { WorkoutBadge };","size_bytes":1132},"apps/web/src/components/workout-flow/adhoc-generator-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Sparkles, Loader2 } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { ExerciseDefinition } from '@/types/supabase';\nimport { cn } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface AdHocGeneratorDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onWorkoutGenerated: (exercises: ExerciseDefinition[]) => void;\n  activeGymName: string | null;\n}\n\nexport const AdHocGeneratorDialog = ({ open, onOpenChange, onWorkoutGenerated, activeGymName }: AdHocGeneratorDialogProps) => {\n  const { session } = useSession();\n  const [timeInMinutes, setTimeInMinutes] = useState(30);\n  const [workoutFocus, setWorkoutFocus] = useState<'Full Body' | 'Upper Body' | 'Lower Body'>('Full Body');\n  const [useGymEquipment, setUseGymEquipment] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const handleGenerate = async () => {\n    if (!session) {\n      toast.error(\"You must be logged in to generate a workout.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('/api/workouts/generate-adhoc', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify({\n          time_in_minutes: timeInMinutes,\n          workout_focus: workoutFocus,\n          use_gym_equipment: useGymEquipment,\n        }),\n      });\n\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to generate workout.');\n      }\n\n      if (data.workout && data.workout.length > 0) {\n        onWorkoutGenerated(data.workout);\n        onOpenChange(false); // Close dialog on success\n      } else {\n        toast.info(\"Could not generate a workout with the selected options. Try a longer duration.\");\n      }\n    } catch (err: any) {\n      console.error(\"Error generating ad-hoc workout:\", err);\n      toast.error(`Failed to generate workout: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Generate a Timed Workout</DialogTitle>\n          <DialogDescription>\n            Select your preferences and let the AI build a quick workout for you.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"py-4 space-y-6\">\n          {/* Time Slider */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <Label htmlFor=\"time-slider\">Duration</Label>\n              <span className=\"font-semibold\">{timeInMinutes} minutes</span>\n            </div>\n            <Slider\n              id=\"time-slider\"\n              value={[timeInMinutes]}\n              onValueChange={(value) => setTimeInMinutes(value[0])}\n              min={15}\n              max={90}\n              step={5}\n              disabled={loading}\n            />\n          </div>\n\n          {/* Workout Focus */}\n          <div className=\"space-y-2\">\n            <Label>Workout Focus</Label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              <Button\n                variant={workoutFocus === 'Full Body' ? 'default' : 'outline'}\n                onClick={() => setWorkoutFocus('Full Body')}\n                disabled={loading}\n              >\n                Full Body\n              </Button>\n              <Button\n                variant={workoutFocus === 'Upper Body' ? 'default' : 'outline'}\n                onClick={() => setWorkoutFocus('Upper Body')}\n                disabled={loading}\n              >\n                Upper\n              </Button>\n              <Button\n                variant={workoutFocus === 'Lower Body' ? 'default' : 'outline'}\n                onClick={() => setWorkoutFocus('Lower Body')}\n                disabled={loading}\n              >\n                Lower\n              </Button>\n            </div>\n          </div>\n\n          {/* Equipment Toggle */}\n          <div className=\"flex items-center justify-between space-x-2\">\n            <Label htmlFor=\"equipment-toggle\" className=\"flex flex-col space-y-1\">\n              <span>Use Equipment from \"{activeGymName || 'Your Active Gym'}\"</span>\n              <span className=\"font-normal leading-snug text-muted-foreground text-xs\">\n                If off, exercises from the global library will be used.\n              </span>\n            </Label>\n            <Switch\n              id=\"equipment-toggle\"\n              checked={useGymEquipment}\n              onCheckedChange={setUseGymEquipment}\n              disabled={loading}\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button onClick={handleGenerate} disabled={loading} className=\"w-full\">\n            {loading ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n            )}\n            {loading ? \"Generating...\" : \"Generate Workout\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":5601},"apps/web/src/components/workout-flow/save-ai-exercise-prompt.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Save, PlusCircle, Edit } from \"lucide-react\"; // Added Edit icon\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\"; // Import FetchedExerciseDefinition\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { LoadingOverlay } from \"../loading-overlay\";\nimport { toast } from 'sonner'; // Import toast\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface SaveAiExercisePromptProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  exercise: Partial<FetchedExerciseDefinition> | null; // Use FetchedExerciseDefinition\n  onSaveToMyExercises: (exercise: Partial<FetchedExerciseDefinition>) => Promise<void>; // Updated type\n  onAddOnlyToCurrentWorkout?: (exercise: Partial<FetchedExerciseDefinition>) => Promise<void>; // Updated type\n  isSaving: boolean;\n  context: 'manage-exercises' | 'workout-flow'; // New prop to differentiate context\n  onEditExercise?: (exercise: Partial<FetchedExerciseDefinition>) => void; // Updated type\n}\n\nexport const SaveAiExercisePrompt = ({\n  open,\n  onOpenChange,\n  exercise,\n  onSaveToMyExercises,\n  onAddOnlyToCurrentWorkout,\n  isSaving,\n  context, // Destructure new prop\n  onEditExercise, // Destructure new prop\n}: SaveAiExercisePromptProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  if (!exercise) return null;\n\n  const currentDuplicateStatus = exercise.duplicate_status || 'none'; // Access directly from exercise\n  const showAddOnlyToWorkoutButton = typeof onAddOnlyToCurrentWorkout === 'function';\n\n  const renderDescription = () => {\n    if (context === 'manage-exercises') {\n      if (currentDuplicateStatus === 'my-exercises') {\n        return (\n          <>AI has identified the exercise and it looks like you already have this in <strong className=\"font-semibold\">My Exercises</strong>. Exercise name - \"<span className=\"font-semibold\">{exercise.name}</span>\". Select Edit to change the exercise details or click Close to go back.</>\n        );\n      } else if (currentDuplicateStatus === 'global') {\n        return (\n          <>AI has identified the exercise and it looks like this already exists in the <strong className=\"font-semibold\">Global Library</strong>. Exercise name - \"<span className=\"font-semibold\">{exercise.name}</span>\". You can add it to \"My Exercises\" to customize it.</>\n        );\n      }\n      return <>AI has identified the exercise. Save it to \"My Exercises\" for future use.</>;\n    } else { // context === 'workout-flow'\n      if (currentDuplicateStatus === 'my-exercises') {\n        return <>AI has identified the exercise and it looks like you already have this in <strong className=\"font-semibold\">My Exercises</strong>. You can still add it to your current ad-hoc workout from here.</>;\n      } else if (currentDuplicateStatus === 'global') {\n        return <>AI has identified the exercise and it looks like this already exists in the <strong className=\"font-semibold\">Global Library</strong>. You can still add it to your current ad-hoc workout from here.</>;\n      }\n      return <>The AI has identified an exercise. You can add it to your current ad-hoc workout, and optionally save it to \"My Exercises\" for future use.</>;\n    }\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] grid grid-rows-[auto_1fr_auto] p-4\">\n          <DialogHeader className=\"row-start-1 pb-4\">\n            <DialogTitle className=\"flex items-center\">\n              <Sparkles className=\"h-5 w-5 mr-2\" /> AI Identified Exercise\n            </DialogTitle>\n            <DialogDescription>\n              {renderDescription()}\n            </DialogDescription>\n          </DialogHeader>\n          <ScrollArea className=\"row-start-2 overflow-y-auto\">\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold text-sm mb-1\">Name:</h4>\n                <p className=\"text-base font-medium\">{exercise.name || 'N/A'}</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-sm mb-1\">Main Muscle:</h4>\n                <p className=\"text-sm text-muted-foreground\">{exercise.main_muscle || 'N/A'}</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-sm mb-1\">Type:</h4>\n                <p className=\"text-sm text-muted-foreground\">{exercise.type || 'N/A'}</p>\n              </div>\n              {exercise.category && (\n                <div>\n                  <h4 className=\"font-semibold text-sm mb-1\">Category:</h4>\n                  <p className=\"text-sm text-muted-foreground\">{exercise.category}</p>\n                </div>\n              )}\n              {exercise.description && (\n                <div>\n                  <h4 className=\"font-semibold text-sm mb-1\">Description:</h4>\n                  <p className=\"text-sm text-muted-foreground\">{exercise.description}</p>\n                </div>\n              )}\n              {exercise.pro_tip && (\n                  <div>\n                    <h4 className=\"font-semibold text-sm mb-1\">Pro Tip:</h4>\n                    <p className=\"text-sm text-muted-foreground\">{exercise.pro_tip}</p>\n                  </div>\n                )}\n                {exercise.video_url && (\n                  <div>\n                    <h4 className=\"font-semibold text-sm mb-1\">Video URL:</h4>\n                    <a href={exercise.video_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-sm text-blue-500 hover:underline block break-all\">\n                      {exercise.video_url}\n                    </a>\n                  </div>\n                )}\n            </div>\n          </ScrollArea>\n          <div className=\"row-start-3 flex flex-col gap-2 pt-4 border-t\">\n            {context === 'manage-exercises' ? (\n              currentDuplicateStatus === 'my-exercises' ? (\n                <>\n                  <Button variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isSaving}>\n                    Close\n                  </Button>\n                  {onEditExercise && (\n                    <Button onClick={() => onEditExercise(exercise)} disabled={isSaving}>\n                      <Edit className=\"h-4 w-4 mr-2\" /> Edit Exercise\n                    </Button>\n                  )}\n                </>\n              ) : ( // currentDuplicateStatus === 'none' or 'global' in manage-exercises context\n                <Button\n                  onClick={() => onSaveToMyExercises(exercise)}\n                  disabled={isSaving}\n                >\n                  <Save className=\"h-4 w-4 mr-2\" /> {isSaving ? \"Saving...\" : \"Add and Save to My Exercises\"}\n                </Button>\n              )\n            ) : ( // context === 'workout-flow'\n              <>\n                {/* Primary action: Add to Current Workout */}\n                {showAddOnlyToWorkoutButton && (\n                  <Button variant=\"default\" onClick={() => onAddOnlyToCurrentWorkout!(exercise)} disabled={isSaving}>\n                    <PlusCircle className=\"h-4 w-4 mr-2\" /> Add to Current Workout\n                  </Button>\n                )}\n                {/* Secondary action: Save to My Exercises (only if not a duplicate) */}\n                {currentDuplicateStatus === 'none' && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => onSaveToMyExercises(exercise)}\n                    disabled={isSaving}\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" /> {isSaving ? \"Saving...\" : \"Save to My Exercises\"}\n                  </Button>\n                )}\n              </>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n      <LoadingOverlay\n        isOpen={isSaving}\n        title=\"Saving Exercise\"\n        description=\"Please wait while the exercise is added to your library.\"\n      />\n    </>\n  );\n};","size_bytes":8244},"apps/web/src/components/workout-flow/unsaved-changes-dialog.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Settings, TriangleAlert } from 'lucide-react'; // Import Settings icon\nimport { Button } from '@/components/ui/button'; // Import Button\nimport { Tables } from '@/types/supabase'; // Import Tables for TPath type\n\ntype TPath = Tables<'t_paths'>;\n\ninterface UnsavedChangesDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onConfirmLeave: () => void;\n  onCancelLeave: () => void;\n  activeWorkout: TPath | null; // New prop\n  onOpenEditWorkoutDialog: (workoutId: string, workoutName: string) => void; // New prop\n}\n\nexport const UnsavedChangesDialog = ({\n  open,\n  onOpenChange,\n  onConfirmLeave,\n  onCancelLeave,\n  activeWorkout,\n  onOpenEditWorkoutDialog,\n}: UnsavedChangesDialogProps) => {\n  const handleManageWorkoutClick = () => {\n    if (activeWorkout && activeWorkout.id !== 'ad-hoc') {\n      onOpenEditWorkoutDialog(activeWorkout.id, activeWorkout.template_name);\n    }\n    // The dialog itself should not close here, as the user might still want to leave or go back.\n  };\n\n  return (\n    <AlertDialog open={open} onOpenChange={onOpenChange}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"flex items-center text-yellow-600\">\n            <TriangleAlert className=\"h-5 w-5 mr-2\" /> Unsaved Workout Progress\n          </AlertDialogTitle>\n          <AlertDialogDescription>\n            You have an active workout session with unsaved changes. If you leave now, your progress for this workout will be lost.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter className=\"flex flex-col sm:flex-row gap-2\">\n          <AlertDialogCancel onClick={onCancelLeave} className=\"flex-1\">Go back to Workout</AlertDialogCancel>\n          {activeWorkout && activeWorkout.id !== 'ad-hoc' && (\n            <Button \n              variant=\"outline\" \n              onClick={handleManageWorkoutClick} \n              className=\"flex-1\"\n            >\n              <Settings className=\"h-4 w-4 mr-2\" /> Manage Workout\n            </Button>\n          )}\n          <AlertDialogAction onClick={onConfirmLeave} className=\"flex-1 bg-destructive text-destructive-foreground hover:bg-destructive/90\">\n            Continue and Exit\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};","size_bytes":2593},"apps/web/src/components/workout-flow/workout-aware-link.tsx":{"content":"\"use client\";\n\nimport Link from 'next/link';\nimport { usePathname, useRouter } from 'next/navigation';\nimport React, { useCallback } from 'react';\nimport { useWorkoutFlow } from './workout-flow-context-provider';\n\ninterface WorkoutAwareLinkProps extends React.ComponentProps<typeof Link> {\n  children: React.ReactNode;\n}\n\nexport const WorkoutAwareLink = ({ href, onClick, children, ...props }: WorkoutAwareLinkProps) => {\n  const router = useRouter();\n  const { promptBeforeNavigation } = useWorkoutFlow();\n\n  const handleClick = useCallback(async (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault(); \n\n    if (onClick) {\n      onClick(event);\n    }\n\n    if (typeof href === 'string') {\n      const shouldBlock = await promptBeforeNavigation(href);\n      if (!shouldBlock) {\n        router.push(href);\n      }\n    }\n  }, [href, onClick, promptBeforeNavigation, router]);\n\n  return (\n    <Link href={href} onClick={handleClick} {...props}>\n      {children}\n    </Link>\n  );\n};","size_bytes":1000},"apps/web/src/components/workout-flow/workout-flow-context-provider.tsx":{"content":"\"use client\";\n\nimport React, { createContext, useContext } from 'react';\nimport { useWorkoutFlowManager } from '@/hooks/use-workout-flow-manager';\nimport { useRouter } from 'next/navigation';\n\n// Define the context type based on the return type of the hook\ntype WorkoutFlowContextType = ReturnType<typeof useWorkoutFlowManager>;\n\n// Create the context\nconst WorkoutFlowContext = createContext<WorkoutFlowContextType | undefined>(undefined);\n\n// Create the provider component\nexport const WorkoutFlowProvider = ({ children }: { children: React.ReactNode }) => {\n  const router = useRouter();\n  const workoutFlowManager = useWorkoutFlowManager({ router });\n\n  return (\n    <WorkoutFlowContext.Provider value={workoutFlowManager}>\n      {children}\n    </WorkoutFlowContext.Provider>\n  );\n};\n\n// Create a custom hook to consume the context\nexport const useWorkoutFlow = () => {\n  const context = useContext(WorkoutFlowContext);\n  if (context === undefined) {\n    throw new Error('useWorkoutFlow must be used within a WorkoutFlowProvider');\n  }\n  return context;\n};","size_bytes":1060},"apps/web/src/components/workout-flow/workout-pill.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { cn, formatTimeAgo, getPillStyles } from '@/lib/utils'; // Keep web-specific utils;\n\nexport interface WorkoutPillProps {\n  id: string;\n  title: string;\n  workoutType: 'upper-lower' | 'push-pull-legs';\n  category: 'upper' | 'lower' | 'push' | 'pull' | 'legs';\n  variant?: 'a' | 'b';\n  completedAt: Date | null;\n  isSelected: boolean;\n  onClick: (id: string) => void;\n  className?: string;\n  hideIcon?: boolean; // NEW PROP\n}\n\nexport const WorkoutPill = ({\n  id,\n  title,\n  workoutType, // Pass workoutType to getPillStyles\n  category,\n  variant,\n  completedAt,\n  isSelected,\n  onClick,\n  className, // Destructure className here\n  hideIcon = false, // Default to false\n}: WorkoutPillProps) => {\n  console.log(`[WorkoutPill] Rendering ${title} (ID: ${id}). isSelected: ${isSelected}`);\n\n  const {\n    Icon,\n    selectedBgClass,\n    selectedTextClass,\n    selectedBorderClass,\n    selectedShadowClass,\n    unselectedBgClass,\n    unselectedTextClass,\n    unselectedBorderClass,\n    unselectedShadowClass,\n  } = getPillStyles(workoutType, category, variant);\n\n  return (\n    <button\n      onClick={() => onClick(id)}\n      className={cn(\n        'flex items-center gap-2 h-14 pl-3 pr-3 rounded-2xl border-2', // Reduced gap, pl, and pr\n        'font-sans cursor-pointer',\n        'transition-all duration-200 ease-out w-full', // Changed w-fit to w-full\n        isSelected\n          ? cn(selectedBgClass, selectedTextClass, selectedBorderClass, selectedShadowClass, 'opacity-100 scale-105') // More prominent scale\n          : cn(unselectedBgClass, unselectedTextClass, unselectedBorderClass, unselectedShadowClass, 'opacity-100 scale-95', 'hover:scale-100'), // Slightly smaller when unselected, normal on hover\n        'active:scale-95', // Active state for press effect\n        className \n      )}\n    >\n      {!hideIcon && <Icon className={cn(\"w-6 h-6 flex-shrink-0\", isSelected ? 'text-white' : unselectedTextClass)} strokeWidth={2.5} />}\n      <div className=\"flex flex-col gap-0 text-left\">\n        <span className={cn(\"text-sm font-semibold leading-tight whitespace-nowrap\", isSelected ? 'text-white' : unselectedTextClass)}>{title}</span>\n        <span className={cn(\n          \"text-xs font-medium leading-tight\",\n          isSelected ? 'text-white opacity-70' : cn(unselectedTextClass, 'opacity-80')\n        )}>\n          {formatTimeAgo(completedAt)}\n        </span>\n      </div>\n    </button>\n  );\n};","size_bytes":2457},"apps/web/src/components/workout-flow/workout-progress-bar.tsx":{"content":"\"use client\";\n\nimport React, { useMemo } from 'react';\nimport { Progress } from '@/components/ui/progress';\nimport { cn, getWorkoutColorClass } from '@/lib/utils'; // Keep web-specific utils;\nimport { Tables, WorkoutExercise } from '@/types/supabase';\nimport { Dumbbell } from 'lucide-react';\n\ntype TPath = Tables<'t_paths'>; // Import TPath type\n\ninterface WorkoutProgressBarProps {\n  exercisesForSession: WorkoutExercise[];\n  completedExercises: Set<string>;\n  isWorkoutSessionStarted: boolean; // NEW PROP\n  activeWorkout: TPath | null; // NEW PROP\n}\n\nexport const WorkoutProgressBar = ({\n  exercisesForSession,\n  completedExercises,\n  isWorkoutSessionStarted, // USE NEW PROP\n  activeWorkout, // NEW PROP\n}: WorkoutProgressBarProps) => {\n  const totalExercises = exercisesForSession.length;\n  const completedCount = completedExercises.size;\n\n  const progressPercentage = useMemo(() => {\n    if (totalExercises === 0) return 0;\n    return (completedCount / totalExercises) * 100;\n  }, [completedCount, totalExercises]);\n\n  if (!isWorkoutSessionStarted || totalExercises === 0) { // USE NEW PROP FOR VISIBILITY\n    return null; // Don't render if workout session hasn't started or no exercises\n  }\n\n  const workoutName = activeWorkout?.template_name || 'Ad Hoc Workout';\n  const progressBarGradientClasses = getWorkoutColorClass(workoutName, 'gradient');\n\n  // Ensure progressBarGradientClasses is an object with 'from' and 'to' properties\n  const fromClass = typeof progressBarGradientClasses === 'object' ? progressBarGradientClasses.from : 'from-primary';\n  const toClass = typeof progressBarGradientClasses === 'object' ? progressBarGradientClasses.to : 'to-action';\n\n  return (\n    <div\n      className={cn(\n        \"fixed bottom-0 left-0 right-0 z-40 p-4 bg-background/80 backdrop-blur-md border-t\",\n        \"transition-transform duration-500 ease-out\",\n        isWorkoutSessionStarted ? \"translate-y-0 opacity-100\" : \"translate-y-full opacity-0\" // Use new prop for animation\n      )}\n    >\n      <div className=\"max-w-2xl mx-auto flex items-center gap-4\">\n        <Dumbbell className=\"h-6 w-6 text-primary flex-shrink-0\" />\n        <div className=\"flex-grow\">\n          <div className=\"flex justify-between text-sm font-medium mb-1\">\n            <span className=\"text-muted-foreground\">\n              Exercise {completedCount} of {totalExercises}\n            </span>\n            <span className=\"text-primary\">{Math.round(progressPercentage)}% Complete</span>\n          </div>\n          <Progress \n            value={progressPercentage} \n            className=\"h-2 bg-muted\" \n            indicatorClassName={cn(\"bg-gradient-to-r\", fromClass, toClass)} // ADDED bg-gradient-to-r\n          />\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":2747},"apps/web/src/components/workout-flow/workout-selector.tsx":{"content":"\"use client\";\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusCircle, Dumbbell, Settings, Sparkles, Search, Heart, Home, Filter, ChevronsUpDown, Check } from 'lucide-react';\nimport { Tables, WorkoutWithLastCompleted, GroupedTPath, SetLogState, WorkoutExercise, FetchedExerciseDefinition, Profile, ExerciseDefinition } from '@/types/supabase';\nimport { cn, formatTimeAgo, getPillStyles } from '@/lib/utils'; // Keep web-specific utils;\nimport { ExerciseCard } from '@/components/workout-session/exercise-card';\nimport { WorkoutBadge } from '../workout-badge';\nimport { LoadingOverlay } from '../loading-overlay';\nimport { useSession } from '@/components/session-context-provider';\nimport { WorkoutPill, WorkoutPillProps } from '@/components/workout-flow/workout-pill';\nimport { EditWorkoutExercisesDialog } from '../manage-t-paths/edit-workout-exercises-dialog';\nimport { toast } from 'sonner';\nimport { v4 as uuidv4 } from 'uuid';\nimport { WorkoutAwareLink } from './workout-aware-link';\nimport { AnalyseGymButton } from \"@/components/manage-exercises/exercise-form/analyze-gym-button\";\nimport { AnalyseGymDialog } from \"@/components/manage-exercises/exercise-form/analyze-gym-dialog\";\nimport { SaveAiExercisePrompt } from \"@/components/workout-flow/save-ai-exercise-prompt\";\nimport { useGym } from '@/components/gym-context-provider';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { SetupGymPlanPrompt } from '../manage-t-paths/setup-gym-plan-prompt';\nimport { useRouter } from 'next/navigation';\nimport { AdHocGeneratorDialog } from './adhoc-generator-dialog';\n\ntype TPath = Tables<'t_paths'>;\n\ninterface WorkoutSelectorProps {\n  activeWorkout: TPath | null;\n  exercisesForSession: WorkoutExercise[];\n  exercisesWithSets: Record<string, SetLogState[]>;\n  allAvailableExercises: FetchedExerciseDefinition[];\n  currentSessionId: string | null;\n  sessionStartTime: Date | null;\n  completedExercises: Set<string>;\n  addExerciseToSession: (exercise: ExerciseDefinition) => Promise<void>;\n  removeExerciseFromSession: (exerciseId: string) => Promise<void>;\n  substituteExercise: (oldExerciseId: string, newExercise: WorkoutExercise) => Promise<void>;\n  updateSessionStartTime: (timestamp: string) => void;\n  markExerciseAsCompleted: (exerciseId: string, isNewPR: boolean) => void;\n  updateExerciseSets: (exerciseId: string, newSets: SetLogState[]) => void;\n  selectWorkout: (workoutId: string | null) => Promise<void>;\n  loadingWorkoutFlow: boolean;\n  groupedTPaths: GroupedTPath[];\n  isCreatingSession: boolean;\n  createWorkoutSessionInDb: (templateName: string, firstSetTimestamp: string) => Promise<string>;\n  finishWorkoutSession: () => Promise<string | null>;\n  refreshAllData: () => void;\n  isQuickStart?: boolean;\n  expandedExerciseCards: Record<string, boolean>;\n  toggleExerciseCardExpansion: (exerciseId: string) => void;\n  isEditWorkoutDialogOpen: boolean;\n  selectedWorkoutToEdit: { id: string; name: string } | null;\n  handleOpenEditWorkoutDialog: (workoutId: string, workoutName: string) => void;\n  handleEditWorkoutSaveSuccess: () => void;\n  setIsEditWorkoutDialogOpen: (isOpen: boolean) => void;\n  profile: Profile | null;\n  isWorkoutSessionStarted: boolean;\n  availableMuscleGroups: string[];\n  userGyms: Tables<'gyms'>[];\n  exerciseGymsMap: Record<string, string[]>;\n  availableGymExerciseIds: Set<string>; // NEW\n  allGymExerciseIds: Set<string>; // NEW\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nconst mapWorkoutToPillProps = (workout: WorkoutWithLastCompleted, mainTPathName: string): Omit<WorkoutPillProps, 'isSelected' | 'onClick'> => {\n  const lowerTitle = workout.template_name.toLowerCase();\n  const isUpperLowerSplit = mainTPathName.toLowerCase().includes('upper/lower');\n  const workoutType: WorkoutPillProps['workoutType'] = isUpperLowerSplit ? 'upper-lower' : 'push-pull-legs';\n  \n  let category: WorkoutPillProps['category'];\n  let variant: WorkoutPillProps['variant'] = undefined;\n\n  if (isUpperLowerSplit) {\n    if (lowerTitle.includes('upper')) category = 'upper';\n    else if (lowerTitle.includes('lower')) category = 'lower';\n    else category = 'upper';\n    \n    if (lowerTitle.includes(' a')) variant = 'a';\n    else if (lowerTitle.includes(' b')) variant = 'b';\n  } else { // push-pull-legs\n    if (lowerTitle.includes('push')) category = 'push';\n    else if (lowerTitle.includes('pull')) category = 'pull';\n    else if (lowerTitle.includes('legs')) category = 'legs';\n    else category = 'push';\n  }\n\n  return {\n    id: workout.id,\n    title: workout.template_name,\n    workoutType,\n    category,\n    variant,\n    completedAt: workout.last_completed_at ? new Date(workout.last_completed_at) : null,\n  };\n};\n\nexport const WorkoutSelector = ({ \n  activeWorkout,\n  exercisesForSession,\n  exercisesWithSets,\n  allAvailableExercises,\n  currentSessionId,\n  sessionStartTime,\n  completedExercises,\n  addExerciseToSession,\n  removeExerciseFromSession,\n  substituteExercise,\n  updateSessionStartTime,\n  markExerciseAsCompleted,\n  updateExerciseSets,\n  selectWorkout,\n  loadingWorkoutFlow,\n  groupedTPaths,\n  isCreatingSession,\n  createWorkoutSessionInDb,\n  finishWorkoutSession,\n  refreshAllData,\n  isQuickStart = false,\n  expandedExerciseCards,\n  toggleExerciseCardExpansion,\n  isEditWorkoutDialogOpen,\n  selectedWorkoutToEdit,\n  handleOpenEditWorkoutDialog,\n  handleEditWorkoutSaveSuccess,\n  setIsEditWorkoutDialogOpen,\n  profile,\n  isWorkoutSessionStarted,\n  availableMuscleGroups,\n  userGyms,\n  exerciseGymsMap,\n  availableGymExerciseIds, // NEW\n  allGymExerciseIds, // NEW\n  setTempStatusMessage, // NEW\n}: WorkoutSelectorProps) => {\n  const { supabase, session, memoizedSessionUserId } = useSession();\n  const { activeGym } = useGym();\n  const router = useRouter();\n  const [selectedExerciseToAdd, setSelectedExerciseToAdd] = useState<string>(\"\");\n  const [adHocExerciseSourceFilter, setAdHocExerciseSourceFilter] = useState<'my-exercises' | 'global-library'>('my-exercises');\n\n  const [showAnalyseGymDialog, setShowAnalyseGymDialog] = useState(false);\n  const [showSaveAiExercisePrompt, setShowSaveAiExercisePrompt] = useState(false);\n  const [aiIdentifiedExercise, setAiIdentifiedExercise] = useState<Partial<FetchedExerciseDefinition> | null>(null);\n  const [isAiSaving, setIsAiSaving] = useState(false);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [muscleFilter, setMuscleFilter] = useState(\"all\");\n  const [gymFilter, setGymFilter] = useState(\"all\");\n  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);\n  const [isComboboxOpen, setIsComboboxOpen] = useState(false);\n  const [isAdHocGeneratorOpen, setIsAdHocGeneratorOpen] = useState(false);\n\n  const activeTPathId = profile?.active_t_path_id;\n  const activeTPathGroup = activeTPathId ? groupedTPaths.find(group => group.mainTPath.id === activeTPathId) : null;\n\n  const isGymConfigured = useMemo(() => {\n    if (!activeGym || groupedTPaths.length === 0) return false;\n    return groupedTPaths.some(group => group.mainTPath.gym_id === activeGym.id);\n  }, [activeGym, groupedTPaths]);\n\n  const exercisesForCombobox = useMemo(() => {\n    if (!memoizedSessionUserId) return [];\n\n    return allAvailableExercises\n      .filter(ex => {\n        if (adHocExerciseSourceFilter === 'my-exercises') return ex.user_id === memoizedSessionUserId;\n        if (adHocExerciseSourceFilter === 'global-library') return ex.user_id === null;\n        return false;\n      })\n      .filter(ex => {\n        return muscleFilter === 'all' || ex.main_muscle === muscleFilter;\n      })\n      .filter(ex => {\n        if (gymFilter === 'all') return true;\n        const exerciseGyms = exerciseGymsMap[ex.id as string] || [];\n        return exerciseGyms.includes(userGyms.find(g => g.id === gymFilter)?.name || '');\n      })\n      .filter(ex => {\n        if (!showFavoritesOnly) return true;\n        return ex.is_favorite || ex.is_favorited_by_current_user;\n      })\n      .filter(ex => {\n        return ex.name!.toLowerCase().includes(searchTerm.toLowerCase());\n      })\n      .sort((a, b) => a.name!.localeCompare(b.name!));\n  }, [\n    allAvailableExercises, adHocExerciseSourceFilter, searchTerm,\n    muscleFilter, gymFilter, showFavoritesOnly,\n    exercisesForSession, memoizedSessionUserId, exerciseGymsMap, userGyms\n  ]);\n\n  const handleWorkoutClick = (workoutId: string) => {\n    selectWorkout(workoutId);\n  };\n\n  const handleAdHocClick = () => {\n    setIsAdHocGeneratorOpen(true);\n  };\n\n  const handleWorkoutGenerated = async (exercises: ExerciseDefinition[]) => {\n    await selectWorkout('ad-hoc');\n    for (const exercise of exercises) {\n      await addExerciseToSession(exercise);\n    }\n    toast.success(`${exercises.length} exercises added to your ad-hoc workout!`);\n  };\n\n  const handleAddExercise = () => {\n    if (!selectedExerciseToAdd) {\n      setTempStatusMessage({ message: \"Select exercise!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    const exercise = allAvailableExercises.find((ex: FetchedExerciseDefinition) => ex.id === selectedExerciseToAdd);\n    if (exercise) {\n      addExerciseToSession(exercise as ExerciseDefinition); \n      setSelectedExerciseToAdd(\"\");\n    } else {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  };\n\n  const handleExerciseIdentified = useCallback((exercises: Partial<FetchedExerciseDefinition>[], duplicate_status: 'none' | 'global' | 'my-exercises') => {\n    if (exercises.length > 0) {\n      setAiIdentifiedExercise(exercises[0]);\n      setShowSaveAiExercisePrompt(true);\n    } else {\n      setTempStatusMessage({ message: \"No exercises identified!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [setAiIdentifiedExercise, setShowSaveAiExercisePrompt, setTempStatusMessage]);\n\n  const handleSaveAiExerciseToMyExercises = useCallback(async (exercise: Partial<FetchedExerciseDefinition>) => {\n    if (!memoizedSessionUserId) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsAiSaving(true);\n    try {\n      let finalExerciseToAdd: ExerciseDefinition | null = null;\n\n      const { data: insertedExercise, error: insertError } = await supabase.from('exercise_definitions').insert([{\n        name: exercise.name!,\n        main_muscle: exercise.main_muscle!,\n        type: exercise.type!,\n        category: exercise.category,\n        description: exercise.description,\n        pro_tip: exercise.pro_tip,\n        video_url: exercise.video_url,\n        user_id: memoizedSessionUserId,\n        library_id: null,\n        is_favorite: false,\n        created_at: new Date().toISOString(),\n        movement_type: exercise.movement_type,\n        movement_pattern: exercise.movement_pattern,\n      }]).select('*').single();\n\n      if (insertError) {\n        if (insertError.code === '23505') {\n          setTempStatusMessage({ message: \"Duplicate!\", type: 'error' });\n          const existingUserExercise = allAvailableExercises.find(ex => ex.name?.trim().toLowerCase() === exercise.name?.trim().toLowerCase() && ex.user_id === memoizedSessionUserId);\n          if (existingUserExercise) {\n            finalExerciseToAdd = existingUserExercise as ExerciseDefinition;\n          } else {\n             throw insertError;\n          }\n        } else {\n          throw insertError;\n        }\n      } else {\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n        finalExerciseToAdd = insertedExercise as ExerciseDefinition;\n      }\n\n      if (finalExerciseToAdd) {\n        await addExerciseToSession(finalExerciseToAdd);\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      } else {\n        throw new Error(\"Could not find the exercise to add to workout.\");\n      }\n\n      refreshAllData();\n      setShowSaveAiExercisePrompt(false);\n      setAiIdentifiedExercise(null);\n\n    } catch (err: any) {\n      console.error(\"Failed to save AI identified exercise and add to workout:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n    } finally {\n      setIsAiSaving(false);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [memoizedSessionUserId, supabase, allAvailableExercises, addExerciseToSession, refreshAllData, setShowSaveAiExercisePrompt, setAiIdentifiedExercise, setIsAiSaving, setTempStatusMessage]);\n\n  const handleAddAiExerciseToWorkoutOnly = useCallback(async (exercise: Partial<FetchedExerciseDefinition>) => {\n    if (!memoizedSessionUserId) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsAiSaving(true);\n    try {\n      let finalExerciseToAdd: ExerciseDefinition | null = null;\n\n      const existingExercise = allAvailableExercises.find(ex => \n        ex.name?.trim().toLowerCase() === exercise.name?.trim().toLowerCase() && \n        (ex.user_id === memoizedSessionUserId || ex.user_id === null)\n      );\n      if (existingExercise) {\n        finalExerciseToAdd = existingExercise as ExerciseDefinition;\n      }\n      \n      if (!finalExerciseToAdd) {\n        const { data: insertedExercise, error: insertError } = await supabase.from('exercise_definitions').insert([{\n          name: exercise.name!,\n          main_muscle: exercise.main_muscle!,\n          type: exercise.type!,\n          category: exercise.category,\n          description: exercise.description,\n          pro_tip: exercise.pro_tip,\n          video_url: exercise.video_url,\n          user_id: memoizedSessionUserId,\n          library_id: null,\n          is_favorite: false,\n          created_at: new Date().toISOString(),\n          movement_type: exercise.movement_type,\n          movement_pattern: exercise.movement_pattern,\n        }]).select('*').single();\n\n        if (insertError) {\n          if (insertError.code === '23505') {\n            setTempStatusMessage({ message: \"Duplicate!\", type: 'error' });\n            const existingUserExercise = allAvailableExercises.find(ex => ex.name?.trim().toLowerCase() === exercise.name?.trim().toLowerCase() && ex.user_id === memoizedSessionUserId);\n            if (existingUserExercise) {\n              finalExerciseToAdd = existingUserExercise as ExerciseDefinition;\n            } else {\n               throw insertError;\n            }\n          } else {\n            throw insertError;\n          }\n        } else {\n          finalExerciseToAdd = insertedExercise as ExerciseDefinition;\n        }\n      }\n\n      if (finalExerciseToAdd) {\n        await addExerciseToSession(finalExerciseToAdd);\n        setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      } else {\n        throw new Error(\"Could not find or create the exercise to add to workout.\");\n      }\n\n      refreshAllData();\n      setShowSaveAiExercisePrompt(false);\n      setAiIdentifiedExercise(null);\n\n    } catch (err: any) {\n      console.error(\"Failed to add AI identified exercise to workout only:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n    } finally {\n      setIsAiSaving(false);\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [memoizedSessionUserId, supabase, allAvailableExercises, addExerciseToSession, refreshAllData, setShowSaveAiExercisePrompt, setAiIdentifiedExercise, setIsAiSaving, setTempStatusMessage]);\n\n\n  const totalExercises = exercisesForSession.length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        {loadingWorkoutFlow ? (\n          <p className=\"text-muted-foreground text-center py-4\">Loading Transformation Paths...</p>\n        ) : !activeGym ? (\n          <Card>\n            <CardHeader><CardTitle>No Active Gym</CardTitle></CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Please add a gym in your profile settings to begin.</p>\n              <Button onClick={() => router.push('/profile')} className=\"mt-4\">Go to Profile Settings</Button>\n            </CardContent>\n          </Card>\n        ) : !isGymConfigured ? (\n          <SetupGymPlanPrompt gym={activeGym} onSetupSuccess={refreshAllData} profile={profile} setTempStatusMessage={setTempStatusMessage} />\n        ) : !activeTPathGroup ? (\n          <p className=\"text-muted-foreground text-center py-4\">\n            No active Transformation Path found for this gym. Go to <WorkoutAwareLink href=\"/manage-t-paths\" className=\"text-primary underline\">Manage T-Paths</WorkoutAwareLink> to set one up.\n          </p>\n        ) : (\n          <div key={activeTPathGroup.mainTPath.id} className=\"space-y-3\">\n            <h4 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Dumbbell className=\"h-5 w-5 text-muted-foreground\" />\n              {activeTPathGroup.mainTPath.template_name}\n            </h4>\n            {activeTPathGroup.childWorkouts.length === 0 ? (\n              <p className=\"text-muted-foreground text-sm ml-7\">No workouts defined for this path. This may happen if your session length is too short for any workouts.</p>\n            ) : (\n              <div className=\"grid grid-cols-2 gap-2\">\n                {activeTPathGroup.childWorkouts.map((workout: WorkoutWithLastCompleted) => {\n                  const pillProps = mapWorkoutToPillProps(workout, activeTPathGroup.mainTPath.template_name);\n                  const isPPLAndLegs = pillProps.workoutType === 'push-pull-legs' && pillProps.category === 'legs';\n                  const isSelectedPill = activeWorkout?.id === workout.id;\n                  return (\n                    <WorkoutPill\n                      key={workout.id}\n                      {...pillProps}\n                      isSelected={isSelectedPill}\n                      onClick={handleWorkoutClick}\n                      className={cn(isPPLAndLegs && \"col-span-2 justify-self-center\")}\n                    />\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {activeWorkout && (\n        <div className=\"mt-4 border-t pt-4\">\n          <div className=\"flex justify-center mb-4\">\n            <WorkoutBadge \n              workoutName={activeWorkout.id === 'ad-hoc' ? \"Ad Hoc Workout\" : (activeWorkout?.template_name || \"Workout\")} \n              className=\"text-lg px-4 py-2\"\n            >\n              {activeWorkout.id === 'ad-hoc' ? \"Ad Hoc Workout\" : (activeWorkout?.template_name || \"Workout\")}\n            </WorkoutBadge>\n          </div>\n\n          {activeWorkout.id === 'ad-hoc' && (\n            <section className=\"mb-6 p-4 border rounded-lg bg-card\">\n              <h3 className=\"text-lg font-semibold mb-3\">Find and Add Exercises Here ...</h3>\n              <div className=\"flex flex-col gap-3 mb-3\">\n                {/* Filters */}\n                <div className=\"flex flex-wrap items-center gap-2\">\n                  <Tabs value={adHocExerciseSourceFilter} onValueChange={(value) => setAdHocExerciseSourceFilter(value as 'my-exercises' | 'global-library')} className=\"flex-grow\">\n                    <TabsList className=\"grid w-full grid-cols-2 h-9\">\n                      <TabsTrigger value=\"my-exercises\" className=\"text-xs\">My Exercises</TabsTrigger>\n                      <TabsTrigger value=\"global-library\" className=\"text-xs\">Global Library</TabsTrigger>\n                    </TabsList>\n                  </Tabs>\n                  <Select onValueChange={setMuscleFilter} value={muscleFilter}>\n                    <SelectTrigger className=\"flex-1 h-8 text-xs min-w-[120px]\">\n                      <SelectValue placeholder=\"Muscle Group\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Muscles</SelectItem>\n                      {availableMuscleGroups.map(muscle => (\n                        <SelectItem key={muscle} value={muscle}>\n                          {muscle}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Select onValueChange={setGymFilter} value={gymFilter} disabled={userGyms.length === 0}>\n                    <SelectTrigger className=\"flex-1 h-8 text-xs min-w-[100px]\">\n                      <SelectValue placeholder=\"Gym\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Gyms</SelectItem>\n                      {userGyms.map(gym => (\n                        <SelectItem key={gym.id} value={gym.id}>\n                          {gym.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    variant={showFavoritesOnly ? \"default\" : \"outline\"}\n                    size=\"icon\"\n                    onClick={() => setShowFavoritesOnly(prev => !prev)}\n                    className=\"h-8 w-8 flex-shrink-0\"\n                    title=\"Show Favorites Only\"\n                  >\n                    <Heart className={cn(\"h-4 w-4\", showFavoritesOnly ? \"fill-white text-white\" : \"text-muted-foreground\")} />\n                  </Button>\n                </div>\n\n                {/* Combobox and Add Button */}\n                <div className=\"flex gap-2\">\n                  <Popover open={isComboboxOpen} onOpenChange={setIsComboboxOpen}>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        role=\"combobox\"\n                        aria-expanded={isComboboxOpen}\n                        className=\"w-full justify-between font-normal\"\n                      >\n                        {selectedExerciseToAdd\n                          ? allAvailableExercises.find(ex => ex.id === selectedExerciseToAdd)?.name\n                          : \"Select exercise...\"}\n                        <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n                      <Command>\n                        <CommandInput\n                          placeholder=\"Search exercises...\"\n                          value={searchTerm}\n                          onValueChange={setSearchTerm}\n                        />\n                        <CommandList>\n                          <CommandEmpty>No exercise found.</CommandEmpty>\n                          <CommandGroup>\n                            {exercisesForCombobox.map((exercise) => (\n                              <CommandItem\n                                key={exercise.id}\n                                value={exercise.name!}\n                                onSelect={() => {\n                                  setSelectedExerciseToAdd(exercise.id!);\n                                  setIsComboboxOpen(false);\n                                }}\n                              >\n                                <Check\n                                  className={cn(\n                                    \"mr-2 h-4 w-4\",\n                                    selectedExerciseToAdd === exercise.id ? \"opacity-100\" : \"opacity-0\"\n                                  )}\n                                />\n                                {exercise.name}\n                              </CommandItem>\n                            ))}\n                          </CommandGroup>\n                        </CommandList>\n                      </Command>\n                    </PopoverContent>\n                  </Popover>\n                  <Button onClick={handleAddExercise} disabled={!selectedExerciseToAdd} className=\"flex-shrink-0\">\n                    <PlusCircle className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              <AnalyseGymButton onClick={() => setShowAnalyseGymDialog(true)} />\n            </section>\n          )}\n\n          <section className=\"mb-6\">\n            {exercisesForSession.length === 0 && activeWorkout.id !== 'ad-hoc' ? (\n              <div className=\"flex flex-col items-center justify-center text-center py-8\">\n                <Dumbbell className=\"h-12 w-12 text-muted-foreground mb-3\" />\n                <h3 className=\"text-lg font-bold mb-2\">No exercises for this workout</h3>\n                <p className=\"text-muted-foreground mb-4\">This may happen if your session length is too short.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {exercisesForSession.map((exercise: WorkoutExercise, index: number) => (\n                  <ExerciseCard\n                    key={exercise.id}\n                    exercise={exercise}\n                    exerciseNumber={index + 1}\n                    currentSessionId={currentSessionId}\n                    supabase={supabase}\n                    onUpdateGlobalSets={updateExerciseSets}\n                    onSubstituteExercise={substituteExercise}\n                    onRemoveExercise={removeExerciseFromSession}\n                    workoutTemplateName={activeWorkout.template_name}\n                    onFirstSetSaved={async (timestamp) => {\n                      return await createWorkoutSessionInDb(activeWorkout.template_name, timestamp);\n                    }}\n                    onExerciseCompleted={markExerciseAsCompleted}\n                    isExerciseCompleted={completedExercises.has(exercise.id)}\n                    isExpandedProp={expandedExerciseCards[exercise.id] || false}\n                    onToggleExpand={toggleExerciseCardExpansion}\n                    setTempStatusMessage={setTempStatusMessage} // NEW\n                  />\n                ))}\n              </div>\n            )}\n          </section>\n\n          {activeWorkout.id !== 'ad-hoc' && activeWorkout && (\n            <Button \n              variant=\"outline\" \n              onClick={() => handleOpenEditWorkoutDialog(activeWorkout.id, activeWorkout.template_name)} \n              className=\"w-full mt-4 mb-6\"\n            >\n              <Settings className=\"h-4 w-4 mr-2\" /> Manage Exercises for this Workout\n            </Button>\n          )}\n\n          {totalExercises > 0 && (\n            <Button size=\"lg\" onClick={finishWorkoutSession} className=\"w-full mt-6\">\n              Finish Workout\n            </Button>\n          )}\n        </div>\n      )}\n\n      <Card\n        className={cn(\n          \"cursor-pointer transition-colors\",\n          activeWorkout?.id === 'ad-hoc' && \"border-primary ring-2 ring-primary\"\n        )}\n      >\n        <CardHeader className=\"p-4\">\n          <CardTitle className=\"flex items-center text-base\">\n            <PlusCircle className=\"h-4 w-4 mr-2\" />\n            Start Ad-Hoc Workout\n          </CardTitle>\n          <CardDescription className=\"text-xs\">\n            Start a workout without a T-Path. Add exercises as you go.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-4 pt-0\">\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" className=\"flex-1\" onClick={() => selectWorkout('ad-hoc')}>Start Empty</Button>\n            <Button className=\"flex-1\" onClick={handleAdHocClick}>\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n              Generate\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      <LoadingOverlay isOpen={isCreatingSession} title=\"Starting Workout...\" description=\"Please wait while your session is being prepared.\" />\n      {selectedWorkoutToEdit && (\n        <EditWorkoutExercisesDialog\n          open={isEditWorkoutDialogOpen}\n          onOpenChange={setIsEditWorkoutDialogOpen}\n          workoutId={selectedWorkoutToEdit.id}\n          workoutName={selectedWorkoutToEdit.name}\n          onSaveSuccess={handleEditWorkoutSaveSuccess}\n          setTempStatusMessage={setTempStatusMessage} // NEW\n        />\n      )}\n      <AnalyseGymDialog\n        open={showAnalyseGymDialog}\n        onOpenChange={setShowAnalyseGymDialog}\n        onExerciseIdentified={handleExerciseIdentified}\n      />\n      <SaveAiExercisePrompt\n        open={showSaveAiExercisePrompt}\n        onOpenChange={setShowSaveAiExercisePrompt}\n        exercise={aiIdentifiedExercise}\n        onSaveToMyExercises={handleSaveAiExerciseToMyExercises}\n        onAddOnlyToCurrentWorkout={handleAddAiExerciseToWorkoutOnly}\n        context=\"workout-flow\"\n        isSaving={isAiSaving}\n      />\n      <AdHocGeneratorDialog\n        open={isAdHocGeneratorOpen}\n        onOpenChange={setIsAdHocGeneratorOpen}\n        onWorkoutGenerated={handleWorkoutGenerated}\n        activeGymName={activeGym?.name || null}\n      />\n    </div>\n  );\n};","size_bytes":29422},"apps/web/src/components/workout-session/cant-do-toggle.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables, WorkoutExercise } from '@/types/supabase'; // Import WorkoutExercise\nimport { toast } from \"sonner\";\nimport { Ban, RotateCcw } from \"lucide-react\";\nimport { ExerciseSubstitutionDialog } from \"./exercise-substitution-dialog\";\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface CantDoToggleProps {\n  open: boolean; // Controlled prop\n  onOpenChange: (open: boolean) => void; // Controlled prop\n  exercise: ExerciseDefinition;\n  onRemove: () => void;\n  onSubstitute: (newExercise: ExerciseDefinition) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const CantDoToggle = ({ open, onOpenChange, exercise, onRemove, onSubstitute, setTempStatusMessage }: CantDoToggleProps) => {\n  const [showSubstitutionDialog, setShowSubstitutionDialog] = React.useState(false);\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const handleSubstitute = () => {\n    onOpenChange(false); // Close current dialog\n    setShowSubstitutionDialog(true); // Open substitution dialog\n  };\n\n  const handleRemove = () => {\n    onOpenChange(false); // Close current dialog\n    onRemove();\n    setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n    setTimeout(() => setTempStatusMessage(null), 3000);\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Can't Do This Exercise?</DialogTitle>\n            <DialogDescription>\n              What would you like to do with <span className=\"font-semibold\">{exercise.name}</span>?\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"py-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              You've indicated you can't perform this exercise. You can either substitute it \n              with a similar exercise or remove it from this workout session.\n            </p>\n          </div>\n          <DialogFooter className=\"flex flex-col sm:flex-row gap-2\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"secondary\" onClick={handleSubstitute}>\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              Substitute\n            </Button>\n            <Button variant=\"destructive\" onClick={handleRemove}>\n              Remove\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      <ExerciseSubstitutionDialog\n        open={showSubstitutionDialog}\n        onOpenChange={setShowSubstitutionDialog}\n        currentExercise={exercise}\n        onSubstitute={onSubstitute}\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n    </>\n  );\n};","size_bytes":3124},"apps/web/src/components/workout-session/exercise-card.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Plus, Check, Trophy, Edit, Trash2, Timer, RefreshCcw, Info, History, Menu, Play, Pause, RotateCcw, Save, ChevronDown, ChevronUp, Lightbulb } from 'lucide-react';\nimport { ExerciseHistoryDialog } from '@/components/exercise-history-dialog';\nimport { ExerciseInfoDialog } from '@/components/exercise-info-dialog';\nimport { Tables, SetLogState, WorkoutExercise, UserExercisePR } from '@/types/supabase';\nimport { useExerciseSets } from '@/hooks/use-exercise-sets';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { useSession } from '@/components/session-context-provider';\nimport { formatWeight, convertWeight } from '@/lib/unit-conversions';\nimport { ExerciseSwapDialog } from './exercise-swap-dialog';\nimport { CantDoToggle } from './cant-do-toggle';\nimport { WorkoutBadge } from '../workout-badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { cn, getWorkoutColorClass } from '@/lib/utils'; // Keep web-specific utils;\nimport { toast } from 'sonner';\nimport { Separator } from '@/components/ui/separator';\n\ntype Profile = Tables<'profiles'>;\n\ninterface ExerciseCardProps {\n  exercise: WorkoutExercise;\n  exerciseNumber: number;\n  currentSessionId: string | null;\n  supabase: SupabaseClient;\n  onUpdateGlobalSets: (exerciseId: string, newSets: SetLogState[]) => void;\n  onSubstituteExercise?: (oldExerciseId: string, newExercise: WorkoutExercise) => void;\n  onRemoveExercise?: (exerciseId: string) => void;\n  workoutTemplateName: string;\n  onFirstSetSaved: (timestamp: string) => Promise<string>;\n  onExerciseCompleted: (exerciseId: string, isNewPR: boolean) => void;\n  isExerciseCompleted: boolean;\n  isExpandedProp: boolean;\n  onToggleExpand: (exerciseId: string) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ExerciseCard = ({\n  exercise,\n  exerciseNumber,\n  currentSessionId,\n  supabase,\n  onUpdateGlobalSets,\n  onSubstituteExercise,\n  onRemoveExercise,\n  workoutTemplateName,\n  onFirstSetSaved,\n  onExerciseCompleted,\n  isExerciseCompleted,\n  isExpandedProp,\n  onToggleExpand,\n  setTempStatusMessage, // NEW\n}: ExerciseCardProps) => {\n  const { session } = useSession();\n  const [preferredWeightUnit, setPreferredWeightUnit] = useState<Profile['preferred_weight_unit']>('kg');\n  const [defaultRestTime, setDefaultRestTime] = useState<number>(60);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [timeLeft, setTimeLeft] = useState(defaultRestTime);\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  // State for dialogs\n  const [showSwapDialog, setShowSwapDialog] = useState(false);\n  const [showCantDoDialog, setShowCantDoDialog] = useState(false);\n  const [showExerciseInfoDialog, setShowExerciseInfoDialog] = useState(false);\n  const [showExerciseHistoryDialog, setShowExerciseHistoryDialog] = useState(false);\n\n  const workoutColorClass = getWorkoutColorClass(workoutTemplateName, 'text');\n  const workoutBorderClass = getWorkoutColorClass(workoutTemplateName, 'border');\n  const workoutBgClass = getWorkoutColorClass(workoutTemplateName, 'bg');\n\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      if (!session) return;\n      const { data: profileData, error } = await supabase\n        .from('profiles')\n        .select('preferred_weight_unit, default_rest_time_seconds')\n        .eq('id', session.user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        console.error(\"Error fetching user profile for units/rest time:\", error);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      } else if (profileData) {\n        setPreferredWeightUnit(profileData.preferred_weight_unit || 'kg');\n        setDefaultRestTime(profileData.default_rest_time_seconds || 60);\n        setTimeLeft(profileData.default_rest_time_seconds || 60);\n      }\n    };\n    fetchUserProfile();\n  }, [session, supabase, setTempStatusMessage]);\n\n  const {\n    sets,\n    handleAddSet,\n    handleInputChange,\n    handleSaveSet,\n    handleEditSet,\n    handleDeleteSet,\n    handleCompleteExercise,\n    exercisePR,\n    loadingPR,\n    handleSuggestProgression,\n    hasAchievedPRInSession,\n  } = useExerciseSets({\n    exerciseId: exercise.id,\n    exerciseName: exercise.name,\n    exerciseType: exercise.type,\n    exerciseCategory: exercise.category,\n    currentSessionId,\n    supabase,\n    onUpdateGlobalSets: onUpdateGlobalSets,\n    preferredWeightUnit,\n    onFirstSetSaved: onFirstSetSaved,\n    onExerciseCompleted: async (id, isNewPR) => {\n      onExerciseCompleted(id, isNewPR);\n    },\n    workoutTemplateName,\n    exerciseNumber,\n    setTempStatusMessage, // NEW\n  });\n\n  const handleSaveSetAndStartTimer = async (setIndex: number) => {\n    await handleSaveSet(setIndex);\n    setIsTimerRunning(true);\n    setTimeLeft(defaultRestTime);\n  };\n\n  const handleCompleteExerciseClick = async () => {\n    const { success, isNewPR } = await handleCompleteExercise();\n    if (success) {\n      // Parent will handle collapsing via onExerciseCompleted\n    }\n  };\n\n  const handleToggleTimer = () => {\n    setIsTimerRunning((prev) => !prev);\n  };\n\n  const handleResetTimer = () => {\n    setIsTimerRunning(false);\n    setTimeLeft(defaultRestTime);\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (isTimerRunning) {\n      if (timerRef.current) clearInterval(timerRef.current);\n      timerRef.current = setInterval(() => {\n        setTimeLeft((prevTime) => {\n          if (prevTime <= 1) {\n            clearInterval(timerRef.current!);\n            timerRef.current = null;\n            setIsTimerRunning(false);\n            toast.info(\"Rest time is over!\");\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    } else {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [isTimerRunning, defaultRestTime]);\n\n  const formatTimeDisplay = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const hasAnyInput = sets.some(s => \n    (s.weight_kg !== null && s.weight_kg > 0) || \n    (s.reps !== null && s.reps > 0) || \n    (s.time_seconds !== null && s.time_seconds > 0) || \n    (s.reps_l !== null && s.reps_l > 0) || \n    (s.reps_r !== null && s.reps_r > 0)\n  );\n\n  return (\n    <React.Fragment>\n      <Card className={cn(\"mb-6 border-2 relative\", workoutBorderClass, { \"opacity-70\": isExerciseCompleted })}>\n        <CardHeader \n          className=\"p-0 cursor-pointer relative\"\n          onClick={() => onToggleExpand(exercise.id)}\n        >\n          <div className=\"p-4 space-y-2\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex flex-col text-left\">\n                <div className=\"flex items-center gap-2\">\n                  {isExerciseCompleted && hasAchievedPRInSession && (\n                    <Trophy className=\"h-5 w-5 text-yellow-500 fill-yellow-500\" />\n                  )}\n                  <CardTitle className={cn(\"text-lg font-semibold leading-none\", workoutColorClass)}>\n                    {exerciseNumber}. {exercise.name}\n                  </CardTitle>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1 truncate\">{exercise.main_muscle}</p>\n              </div>\n              {exercise.is_bonus_exercise && <WorkoutBadge workoutName=\"Bonus\" className=\"flex-shrink-0\">Bonus</WorkoutBadge>}\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              {exercise.icon_url && (\n                <img\n                  src={exercise.icon_url}\n                  alt={`${exercise.name} icon`}\n                  className=\"h-10 w-10 object-contain flex-shrink-0 rounded-sm\"\n                />\n              )}\n              <div className=\"flex items-center gap-2 flex-shrink-0\">\n                {isExerciseCompleted && (\n                  <Check className=\"h-8 w-8 text-green-500\" />\n                )}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" title=\"More Options\" onClick={(e) => e.stopPropagation()}>\n                      <Menu className=\"h-5 w-5\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onSelect={() => setShowExerciseHistoryDialog(true)}>\n                      <History className=\"h-4 w-4 mr-2\" /> History\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onSelect={() => setShowExerciseInfoDialog(true)}>\n                      <Info className=\"h-4 w-4 mr-2\" /> Info\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onSelect={() => setShowSwapDialog(true)}>\n                      <RefreshCcw className=\"h-4 w-4 mr-2\" /> Swap Exercise\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onSelect={() => setShowCantDoDialog(true)} className=\"text-destructive\">\n                      <Trash2 className=\"h-4 w-4 mr-2\" /> Can't Do\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                <Button variant=\"ghost\" size=\"icon\" onClick={(e) => { e.stopPropagation(); onToggleExpand(exercise.id); }} title={isExpandedProp ? \"Collapse\" : \"Expand\"}>\n                  {isExpandedProp ? <ChevronUp className=\"h-5 w-5\" /> : <ChevronDown className=\"h-5 w-5\" />}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        {isExpandedProp && (\n          <CardContent className=\"pb-16\">\n            <div className=\"space-y-4\">\n              {sets.map((set, setIndex) => (\n                <React.Fragment key={set.id || `new-${setIndex}`}>\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-semibold text-base\">Set {setIndex + 1}</h3>\n                        {(set.lastWeight != null || set.lastReps != null || set.lastRepsL != null || set.lastRepsR != null || set.lastTimeSeconds != null) && (\n                          <span className=\"text-muted-foreground text-xs\">\n                            (Last: {exercise.type === 'weight' ?\n                              `${set.lastWeight != null ? formatWeight(convertWeight(set.lastWeight, 'kg', preferredWeightUnit as 'kg' | 'lbs'), preferredWeightUnit as 'kg' | 'lbs') : '-'} x ${exercise.category === 'Unilateral' ? `${set.lastRepsL != null ? set.lastRepsL : '-'} L / ${set.lastRepsR != null ? set.lastRepsR : '-'} R` : (set.lastReps != null ? set.lastReps : '-')}` :\n                              `${set.lastTimeSeconds != null ? `${set.lastTimeSeconds}s` : '-'}`})\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {set.isSaved && set.isPR && (\n                          <span className=\"text-yellow-500 flex items-center text-xs font-semibold\">\n                            <Trophy className=\"h-3 w-3\" /> PB!\n                          </span>\n                        )}\n                        {!set.isSaved && (\n                          <Button variant=\"ghost\" size=\"icon\" onClick={() => handleSaveSetAndStartTimer(setIndex)} title=\"Save Set\" className=\"h-6 w-6\">\n                            <Save className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        {set.isSaved && (\n                          <Button variant=\"ghost\" size=\"icon\" onClick={() => handleEditSet(setIndex)} title=\"Edit Set\" className=\"h-6 w-6\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                        <Button variant=\"ghost\" size=\"icon\" onClick={() => handleDeleteSet(setIndex)} title=\"Delete Set\" className=\"h-6 w-6\">\n                          <Trash2 className=\"h-4 w-4 text-destructive\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 mt-2\">\n                      {exercise.type === 'weight' && (\n                        <>\n                          <Input\n                            id={`weight-${setIndex}`}\n                            type=\"number\"\n                            step=\"0.1\"\n                            placeholder=\"kg\"\n                            value={convertWeight(set.weight_kg, 'kg', preferredWeightUnit as 'kg' | 'lbs') ?? ''}\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(setIndex, 'weight_kg', e.target.value)}\n                            disabled={set.isSaved}\n                            className=\"w-20 text-center h-8 text-xs\"\n                          />\n                          <span className=\"text-muted-foreground text-xs\">x</span>\n                          {exercise.category === 'Unilateral' ? (\n                            <>\n                              <Input\n                                id={`reps-l-${setIndex}`}\n                                type=\"number\"\n                                placeholder=\"L\"\n                                value={set.reps_l ?? ''}\n                                onChange={(e) => handleInputChange(setIndex, 'reps_l', e.target.value)}\n                                disabled={set.isSaved}\n                                className=\"w-20 h-8 text-xs\"\n                              />\n                              <Input\n                                id={`reps-r-${setIndex}`}\n                                type=\"number\"\n                                placeholder=\"R\"\n                                value={set.reps_r ?? ''}\n                                onChange={(e) => handleInputChange(setIndex, 'reps_r', e.target.value)}\n                                disabled={set.isSaved}\n                                className=\"w-20 h-8 text-xs\"\n                              />\n                            </>\n                          ) : (\n                            <Input\n                              id={`reps-${setIndex}`}\n                              type=\"number\"\n                              placeholder=\"reps\"\n                              value={set.reps ?? ''}\n                              onChange={(e) => handleInputChange(setIndex, 'reps', e.target.value)}\n                              disabled={set.isSaved}\n                              className=\"w-20 text-center h-8 text-xs\"\n                            />\n                          )}\n                        </>\n                      )}\n                      {exercise.type === 'timed' && (\n                        <Input\n                          id={`time-${setIndex}`}\n                          type=\"number\"\n                          placeholder=\"Time (seconds)\"\n                          value={set.time_seconds ?? ''}\n                          onChange={(e) => handleInputChange(setIndex, 'time_seconds', e.target.value)}\n                          disabled={set.isSaved}\n                          className=\"flex-1 h-8 text-xs\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                  {setIndex < sets.length - 1 && <Separator className=\"my-4\" />}\n                </React.Fragment>\n              ))}\n            </div>\n\n            <div className=\"flex justify-between items-center mt-4 gap-2\">\n              <div className=\"flex gap-2\">\n                {sets.length < 5 && (\n                  <Button variant=\"outline\" onClick={handleAddSet} size=\"icon\" className=\"h-8 w-8\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                <Button variant=\"outline\" onClick={handleSuggestProgression} size=\"icon\" className=\"h-8 w-8\">\n                  <Lightbulb className=\"h-4 w-4 text-orange-500\" />\n                </Button>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleToggleTimer}\n                  className=\"w-24 justify-center\"\n                >\n                  {isTimerRunning ? <Pause className=\"h-4 w-4 mr-1\" /> : <Play className=\"h-4 w-4 mr-1\" />}\n                  {formatTimeDisplay(timeLeft)}\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" onClick={handleResetTimer} title=\"Reset Timer\">\n                  <RotateCcw className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <Button\n                className={cn(\n                  \"w-full\",\n                  {\n                    \"bg-orange-500 text-black hover:bg-orange-600\": hasAnyInput && !isExerciseCompleted,\n                    \"bg-green-700 text-white hover:bg-green-800\": isExerciseCompleted,\n                  }\n                )}\n                onClick={handleCompleteExerciseClick}\n                disabled={!hasAnyInput}\n              >\n                {isExerciseCompleted ? (\n                  <span className=\"flex items-center\">\n                    Saved\n                    {hasAchievedPRInSession && <Trophy className=\"h-4 w-4 ml-2 fill-white text-white\" />}\n                  </span>\n                ) : (\n                  <span className=\"flex items-center\">\n                    Save Exercise\n                  </span>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      <ExerciseHistoryDialog\n        open={showExerciseHistoryDialog}\n        onOpenChange={setShowExerciseHistoryDialog}\n        exerciseId={exercise.id}\n        exerciseName={exercise.name}\n        exerciseType={exercise.type}\n        exerciseCategory={exercise.category}\n      />\n      <ExerciseInfoDialog\n        open={showExerciseInfoDialog}\n        onOpenChange={setShowExerciseInfoDialog}\n        exercise={exercise}\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n      <ExerciseSwapDialog\n        open={showSwapDialog}\n        onOpenChange={setShowSwapDialog}\n        currentExercise={exercise}\n        onSwap={(newExercise) => {\n          if (onSubstituteExercise) {\n            onSubstituteExercise(exercise.id, { ...newExercise, is_bonus_exercise: exercise.is_bonus_exercise, movement_type: newExercise.movement_type, movement_pattern: newExercise.movement_pattern });\n          }\n          setShowSwapDialog(false);\n        }}\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n      <CantDoToggle\n        open={showCantDoDialog}\n        onOpenChange={setShowCantDoDialog}\n        exercise={exercise}\n        onRemove={() => {\n          if (onRemoveExercise) {\n            onRemoveExercise(exercise.id);\n          }\n          setShowCantDoDialog(false);\n        }}\n        onSubstitute={(newExercise) => {\n          if (onSubstituteExercise) {\n            onSubstituteExercise(exercise.id, { ...newExercise, is_bonus_exercise: exercise.is_bonus_exercise, movement_type: newExercise.movement_type, movement_pattern: newExercise.movement_pattern });\n          }\n          setShowCantDoDialog(false);\n        }}\n        setTempStatusMessage={setTempStatusMessage} // NEW\n      />\n    </React.Fragment>\n  );\n};","size_bytes":20282},"apps/web/src/components/workout-session/exercise-substitution-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables } from '@/types/supabase';\nimport { toast } from \"sonner\";\nimport { Info, Check, Sparkles } from \"lucide-react\";\nimport { LoadingOverlay } from '../loading-overlay';\nimport { Badge } from \"@/components/ui/badge\";\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ExerciseSubstitutionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  currentExercise: ExerciseDefinition;\n  onSubstitute: (newExercise: ExerciseDefinition) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\n// Helper function to get YouTube embed URL\nconst getYouTubeEmbedUrl = (url: string | null | undefined): string | null => {\n  if (!url) return null;\n  const regExp = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([\\w-]{11})(?:\\S+)?/;\n  const match = url.match(regExp);\n  return match && match[1] ? `https://www.youtube.com/embed/${match[1]}` : null;\n};\n\nexport const ExerciseSubstitutionDialog = ({\n  open,\n  onOpenChange,\n  currentExercise,\n  onSubstitute,\n  setTempStatusMessage, // NEW\n}: ExerciseSubstitutionDialogProps) => {\n  const { session, supabase } = useSession();\n  const [substitutions, setSubstitutions] = useState<ExerciseDefinition[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [generatingAi, setGeneratingAi] = useState(false);\n  const [aiGenerationCount, setAiGenerationCount] = useState(0);\n  const [newlyGeneratedExerciseIds, setNewlyGeneratedExerciseIds] = useState<Set<string>>(new Set());\n\n  const fetchSubstitutions = async () => {\n    if (!session || !open) return;\n\n    setLoading(true);\n    try {\n      const { data: allMatchingExercises, error: fetchError } = await supabase\n        .from('exercise_definitions')\n        .select('id, name, main_muscle, type, category, description, pro_tip, video_url, user_id, library_id, created_at, is_favorite, icon_url')\n        .or(`user_id.eq.${session.user.id},user_id.is.null`)\n        .eq('main_muscle', currentExercise.main_muscle)\n        .eq('type', currentExercise.type)\n        .neq('id', currentExercise.id);\n\n      if (fetchError) throw fetchError;\n\n      // Filter out global exercises if a user-owned copy already exists\n      const userOwnedExerciseLibraryIds = new Set(\n        allMatchingExercises\n          .filter(ex => ex.user_id === session.user.id && ex.library_id)\n          .map(ex => ex.library_id)\n      );\n\n      const filteredSubstitutions = (allMatchingExercises as ExerciseDefinition[]).filter(ex => {\n        if (ex.user_id === null && ex.library_id && userOwnedExerciseLibraryIds.has(ex.library_id)) {\n          return false;\n        }\n        return true;\n      });\n\n      setSubstitutions(filteredSubstitutions || []);\n    } catch (err: any) {\n      console.error(\"Failed to fetch substitutions:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (open) {\n      fetchSubstitutions();\n      setAiGenerationCount(0);\n      setNewlyGeneratedExerciseIds(new Set());\n    }\n  }, [open, session, supabase, currentExercise, setTempStatusMessage]);\n\n  const handleSelectSubstitution = async (exercise: ExerciseDefinition) => {\n    try {\n      onSubstitute(exercise);\n      onOpenChange(false);\n      setTempStatusMessage({ message: \"Swapped!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to substitute exercise:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  };\n\n  const handleGenerateAiSuggestion = async () => {\n    if (!session) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (aiGenerationCount >= 2) {\n      setTempStatusMessage({ message: \"Max 2 suggestions!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setGeneratingAi(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('generate-exercise-suggestion', {\n        body: {\n          main_muscle: currentExercise.main_muscle,\n          type: currentExercise.type,\n          category: currentExercise.category,\n          saveScope: 'user', // Save as a user-owned exercise\n        },\n        headers: {\n          Authorization: `Bearer ${session.access_token}`,\n        },\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      if (data.error) {\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return;\n      }\n\n      const newAiExercise = data.newExercise;\n      if (newAiExercise) {\n        setSubstitutions(prev => [...prev, newAiExercise]);\n        setTempStatusMessage({ message: \"Suggested!\", type: 'success' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        setNewlyGeneratedExerciseIds(prev => new Set(prev).add(newAiExercise.id));\n        setAiGenerationCount(prev => prev + 1);\n      } else {\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      }\n    } catch (err: any) {\n      console.error(\"Failed to generate AI suggestion:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setGeneratingAi(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Substitute Exercise</DialogTitle>\n        </DialogHeader>\n        <div className=\"py-4\">\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Replace <span className=\"font-semibold\">{currentExercise.name}</span> with one of these alternatives:\n          </p>\n\n          {loading ? (\n            <p className=\"text-center text-muted-foreground\">Loading substitutions...</p>\n          ) : substitutions.length === 0 && !generatingAi ? (\n            <div className=\"text-center space-y-4\">\n              <p className=\"text-muted-foreground\">\n                No suitable alternative exercises found in your library or global defaults.\n              </p>\n              <Button onClick={handleGenerateAiSuggestion} disabled={generatingAi}>\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                {generatingAi ? \"Generating...\" : \"Generate AI Suggestion\"}\n              </Button>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-64 pr-4\">\n              <div className=\"space-y-3\">\n                {substitutions.map((exercise) => {\n                  const embedVideoUrl = getYouTubeEmbedUrl(exercise.video_url);\n                  return (\n                    <div\n                      key={exercise.id}\n                      className=\"p-4 border rounded-lg hover:bg-accent transition-colors\"\n                    >\n                      <div className=\"flex justify-between items-start gap-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2\">\n                            <h3 className=\"font-semibold\">{exercise.name}</h3>\n                            {newlyGeneratedExerciseIds.has(exercise.id) && (\n                              <Badge variant=\"secondary\">New</Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {exercise.main_muscle} • {exercise.type}\n                          </p>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleSelectSubstitution(exercise)}\n                          className=\"flex-shrink-0\"\n                        >\n                          Select\n                        </Button>\n                      </div>\n                      {exercise.description && (\n                        <p className=\"text-sm mt-2\">{exercise.description}</p>\n                      )}\n                      {embedVideoUrl ? (\n                        <div className=\"mt-2\">\n                          <div className=\"relative w-full rounded-md overflow-hidden\" style={{ paddingBottom: '56.25%' }}>\n                            <iframe\n                              className=\"absolute top-0 left-0 w-full h-full\"\n                              src={embedVideoUrl}\n                              title={`${exercise.name} video`}\n                              frameBorder=\"0\"\n                              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                              allowFullScreen\n                            ></iframe>\n                          </div>\n                        </div>\n                      ) : exercise.pro_tip && (\n                        <div className=\"mt-2 flex items-start\">\n                          <Info className=\"h-4 w-4 text-blue-500 mr-2 mt-0.5\" />\n                          <span className=\"text-sm text-blue-500\">{exercise.pro_tip}</span>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </ScrollArea>\n          )}\n\n          <div className=\"mt-4 flex justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={generatingAi}\n            >\n              Cancel\n            </Button>\n            {substitutions.length > 0 && (\n              <Button\n                variant=\"secondary\"\n                onClick={handleGenerateAiSuggestion}\n                disabled={generatingAi || aiGenerationCount >= 2}\n              >\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                {generatingAi ? \"Generating...\" : \"Generate More\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n      <LoadingOverlay\n        isOpen={generatingAi}\n        title=\"Generating AI Suggestion\"\n        description=\"Please wait while the AI suggests a new exercise.\"\n      />\n    </Dialog>\n  );\n};","size_bytes":10862},"apps/web/src/components/workout-session/exercise-swap-dialog.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"; // Add DialogTrigger\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables } from '@/types/supabase';\nimport { RefreshCcw, Sparkles } from \"lucide-react\";\nimport { LoadingOverlay } from '@/components/loading-overlay'; // Corrected import path\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ExerciseSwapDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  currentExercise: ExerciseDefinition;\n  onSwap: (newExercise: ExerciseDefinition) => void;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const ExerciseSwapDialog = ({ open, onOpenChange, currentExercise, onSwap, setTempStatusMessage }: ExerciseSwapDialogProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [availableExercises, setAvailableExercises] = useState<ExerciseDefinition[]>([]);\n  const [selectedNewExerciseId, setSelectedNewExerciseId] = useState<string>(\"\");\n  const [loading, setLoading] = useState(true);\n  const [generatingAi, setGeneratingAi] = useState(false);\n\n  const fetchAvailableExercises = async () => {\n    if (!memoizedSessionUserId || !open) return; // Use memoized ID\n\n    setLoading(true);\n    try {\n      const { data: allMatchingExercises, error: fetchError } = await supabase\n        .from('exercise_definitions')\n        .select('id, name, main_muscle, type, category, description, pro_tip, video_url, user_id, library_id, created_at, is_favorite, icon_url, movement_type, movement_pattern') // Include new fields\n        .or(`user_id.eq.${memoizedSessionUserId},user_id.is.null`) // Use memoized ID\n        .eq('main_muscle', currentExercise.main_muscle)\n        .eq('type', currentExercise.type)\n        .neq('id', currentExercise.id)\n        .order('name', { ascending: true });\n\n      if (fetchError) throw fetchError;\n\n      // Filter out global exercises if a user-owned copy already exists\n      const userOwnedExerciseLibraryIds = new Set(\n        allMatchingExercises\n          .filter(ex => ex.user_id === memoizedSessionUserId && ex.library_id) // Use memoized ID\n          .map(ex => ex.library_id)\n      );\n\n      const filteredExercises = (allMatchingExercises as ExerciseDefinition[]).filter(ex => {\n        if (ex.user_id === null && ex.library_id && userOwnedExerciseLibraryIds.has(ex.library_id)) {\n          return false;\n        }\n        return true;\n      });\n\n      setAvailableExercises(filteredExercises || []);\n    } catch (err: any) {\n      console.error(\"Failed to fetch available exercises for swap:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (open) {\n      fetchAvailableExercises();\n      setSelectedNewExerciseId(\"\");\n    }\n  }, [open, memoizedSessionUserId, supabase, currentExercise, setTempStatusMessage]); // Depend on memoized ID\n\n  // Removed adoptExercise function as per new requirements\n\n  const handleConfirmSwap = async () => {\n    const newExercise = availableExercises.find(ex => ex.id === selectedNewExerciseId);\n    if (!newExercise) {\n      setTempStatusMessage({ message: \"Select exercise!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    try {\n      // Directly use the newExercise, no adoption needed.\n      onSwap(newExercise);\n      onOpenChange(false);\n      setTempStatusMessage({ message: \"Swapped!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } catch (err: any) {\n      console.error(\"Failed to swap exercise:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  };\n\n  const handleGenerateAiSuggestion = async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setGeneratingAi(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('generate-exercise-suggestion', {\n        body: {\n          main_muscle: currentExercise.main_muscle,\n          type: currentExercise.type,\n          category: currentExercise.category,\n          saveScope: 'user', // Save as a user-owned exercise\n        },\n        headers: {\n          Authorization: `Bearer ${session?.access_token}`, // Use session?.access_token\n        },\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      const newAiExercise = data.newExercise;\n      if (newAiExercise) {\n        setAvailableExercises(prev => [...prev, newAiExercise]);\n        setTempStatusMessage({ message: \"Suggested!\", type: 'success' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      } else {\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      }\n    } catch (err: any) {\n      console.error(\"Failed to generate AI suggestion:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setGeneratingAi(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Swap Exercise: {currentExercise.name}</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Select an alternative exercise for the same muscle group and type.\n          </p>\n          {loading ? (\n            <p className=\"text-muted-foreground text-center\">Loading exercises...</p>\n          ) : availableExercises.length === 0 && !generatingAi ? (\n            <div className=\"text-center space-y-4\">\n              <p className=\"text-muted-foreground\">\n                No suitable alternative exercises found in your library or global defaults.\n              </p>\n              <Button onClick={handleGenerateAiSuggestion} disabled={generatingAi}>\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                {generatingAi ? \"Generating...\" : \"Generate AI Suggestion\"}\n              </Button>\n            </div>\n          ) : (\n            <>\n              <Select onValueChange={setSelectedNewExerciseId} value={selectedNewExerciseId}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a new exercise\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableExercises.map(ex => (\n                    <SelectItem key={ex.id} value={ex.id}>\n                      {ex.name} ({ex.main_muscle})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button onClick={handleConfirmSwap} disabled={!selectedNewExerciseId || loading || generatingAi}>\n                <RefreshCcw className=\"h-4 w-4 mr-2\" /> Confirm Swap\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleGenerateAiSuggestion}\n                disabled={generatingAi}\n              >\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                {generatingAi ? \"Generating...\" : \"Generate More Suggestions\"}\n              </Button>\n            </>\n          )}\n        </div>\n      </DialogContent>\n      <LoadingOverlay\n        isOpen={generatingAi}\n        title=\"Generating AI Suggestion\"\n        description=\"Please wait while the AI suggests a new exercise.\"\n      />\n    </Dialog>\n  );\n};","size_bytes":8252},"apps/web/src/components/workout-session/t-path-header.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { cn, getWorkoutColorClass } from '@/lib/utils'; // Keep web-specific utils; // Import cn and getWorkoutColorClass\n\ninterface TPathHeaderProps {\n  tPathName: string;\n}\n\nexport const TPathHeader = ({ tPathName }: TPathHeaderProps) => {\n  const router = useRouter();\n  const workoutColorClass = getWorkoutColorClass(tPathName, 'text'); // Get text color class\n  return (\n    <header className=\"mb-8 flex justify-between items-center\">\n      <h1 className={cn(\"text-3xl font-bold\", workoutColorClass)}>{tPathName}</h1>\n      <Button variant=\"ghost\" onClick={() => router.push('/dashboard')}>\n        <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back\n      </Button>\n    </header>\n  );\n};","size_bytes":863},"apps/web/src/components/workout-session/workout-session-header.tsx":{"content":"\"use client\";\n\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { cn, getWorkoutColorClass } from '@/lib/utils'; // Keep web-specific utils;\n\ninterface WorkoutSessionHeaderProps {\n  tPathName: string;\n  currentExerciseCount: number;\n  totalExercises: number;\n}\n\nexport const WorkoutSessionHeader = ({ tPathName, currentExerciseCount, totalExercises }: WorkoutSessionHeaderProps) => {\n  const router = useRouter();\n  const workoutColorClass = getWorkoutColorClass(tPathName, 'text');\n  const progressBarGradientClasses = getWorkoutColorClass(tPathName, 'gradient');\n  const progressPercentage = totalExercises > 0 ? (currentExerciseCount / totalExercises) * 100 : 0;\n\n  // Ensure progressBarGradientClasses is an object with 'from' and 'to' properties\n  const fromClass = typeof progressBarGradientClasses === 'object' ? progressBarGradientClasses.from : 'from-primary';\n  const toClass = typeof progressBarGradientClasses === 'object' ? progressBarGradientClasses.to : 'to-action';\n\n\n  return (\n    <header className=\"sticky top-0 z-20 w-full bg-background/95 backdrop-blur-md border-b p-4 sm:px-6 sm:py-4\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => router.push('/dashboard')} className=\"text-muted-foreground hover:text-foreground\">\n          <ArrowLeft className=\"h-4 w-4 mr-2\" /> Back\n        </Button>\n        <h1 className={cn(\"text-xl font-bold text-center flex-1\", workoutColorClass)}>{tPathName}</h1>\n        <div className=\"w-16\"></div> {/* Spacer to balance the back button */}\n      </div>\n      <div className=\"w-full bg-muted rounded-full h-2\">\n        <div\n          className={cn(\"h-2 rounded-full transition-all duration-500 ease-out\", fromClass, toClass)}\n          style={{ width: `${progressPercentage}%` }}\n        ></div>\n      </div>\n      <p className=\"text-sm text-muted-foreground text-center mt-1\">\n        Exercise {currentExerciseCount} of {totalExercises}\n      </p>\n    </header>\n  );\n};","size_bytes":2116},"apps/web/src/components/workout-summary/ai-session-analysis-card.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Bot, Sparkles, AlertCircle } from 'lucide-react';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { LoadingOverlay } from '../loading-overlay';\n\ninterface AiSessionAnalysisCardProps {\n  sessionId: string;\n}\n\nexport const AiSessionAnalysisCard = ({ sessionId }: AiSessionAnalysisCardProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [analysis, setAnalysis] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [usageCount, setUsageCount] = useState(0);\n  const AI_COACH_DAILY_LIMIT = 2;\n\n  const fetchUsageData = useCallback(async () => {\n    if (!memoizedSessionUserId) return; // Use memoized ID\n    \n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(today.getDate() + 1);\n\n      const { count, error } = await supabase\n        .from('ai_coach_usage_logs')\n        .select('*', { count: 'exact', head: true })\n        .eq('user_id', memoizedSessionUserId) // Use memoized ID\n        .gte('used_at', today.toISOString())\n        .lt('used_at', tomorrow.toISOString());\n\n      if (error) throw error;\n      \n      setUsageCount(count || 0);\n      \n    } catch (err: any) {\n      console.error(\"Failed to fetch AI coach usage data:\", err);\n      toast.error(\"Failed to load AI coach usage data.\"); // Added toast.error\n    }\n  }, [memoizedSessionUserId, supabase]); // Depend on memoized ID\n\n  useEffect(() => {\n    if (session) {\n      fetchUsageData();\n    }\n  }, [session, fetchUsageData]);\n\n  const handleAnalyse = async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      toast.error(\"You must be logged in to use the AI coach.\"); // Changed to toast.error\n      return;\n    }\n    if (usageCount >= AI_COACH_DAILY_LIMIT) {\n      toast.error(`You've reached the limit of ${AI_COACH_DAILY_LIMIT} AI coach uses per day.`); // Changed to toast.error\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('ai-coach', {\n        body: { sessionId },\n        headers: {\n          Authorization: `Bearer ${session?.access_token}`, // Use session?.access_token\n        },\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (data.error) {\n        throw new Error(data.error);\n      }\n\n      setAnalysis(data.analysis);\n      await fetchUsageData(); // Re-fetch the count from the database\n      \n    } catch (err: any) {\n      console.error(\"AI Coach error:\", err);\n      toast.error(\"Failed to get AI analysis: \" + err.message); // Changed to toast.error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const canUseAiCoach = usageCount < AI_COACH_DAILY_LIMIT;\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Bot className=\"h-5 w-5\" /> AI Coach Feedback\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!analysis && !loading ? (\n          <div className=\"text-center space-y-4\">\n            {canUseAiCoach ? (\n              <>\n                <p className=\"text-muted-foreground\">Get personalised feedback on this specific workout session.</p>\n                <Button onClick={handleAnalyse} disabled={!canUseAiCoach}>\n                  <Sparkles className=\"h-4 w-4 mr-2\" /> Analyse This Workout\n                </Button>\n                <p className=\"text-sm text-muted-foreground\">\n                  You have {AI_COACH_DAILY_LIMIT - usageCount} uses remaining today.\n                </p>\n              </>\n            ) : (\n              <div className=\"space-y-4\">\n                <AlertCircle className=\"h-12 w-12 text-yellow-500 mx-auto\" />\n                <p className=\"text-muted-foreground\">\n                  You've reached the limit of {AI_COACH_DAILY_LIMIT} AI coach uses per day.\n                </p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <ScrollArea className=\"h-64 w-full rounded-md border p-4\">\n            <div\n              className=\"prose prose-sm dark:prose-invert max-w-none\"\n              dangerouslySetInnerHTML={{ __html: analysis.replace(/\\n/g, '<br />') }}\n            />\n          </ScrollArea>\n        )}\n      </CardContent>\n      <LoadingOverlay\n        isOpen={loading}\n        title=\"Generating AI Analysis\"\n        description=\"Please wait while the AI coach analyses your workout performance.\"\n      />\n    </Card>\n  );\n};","size_bytes":4827},"apps/web/src/components/workout-summary/exercise-mini-chart.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { formatWeight, formatTime } from '@/lib/unit-conversions';\n\ntype SetLog = Tables<'set_logs'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ChartData {\n  date: string;\n  value: number;\n}\n\ninterface ExerciseMiniChartProps {\n  exerciseId: string;\n  exerciseType: ExerciseDefinition['type'];\n  currentSessionId: string;\n}\n\nexport const ExerciseMiniChart = ({ exerciseId, exerciseType, currentSessionId }: ExerciseMiniChartProps) => {\n  const { session, supabase } = useSession();\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchExerciseHistory = async () => {\n      if (!session || !exerciseId) return;\n\n      setLoading(true);\n      setError(null);\n      try {\n        // Fetch last 4 workout sessions for this exercise (including current if completed)\n        const { data: setLogs, error: fetchError } = await supabase\n          .from('set_logs')\n          .select(`\n            weight_kg, reps, time_seconds,\n            workout_sessions (\n              session_date,\n              id\n            )\n          `)\n          .eq('exercise_id', exerciseId)\n          .order('created_at', { ascending: false })\n          .limit(20); // Fetch more to ensure we get enough distinct sessions\n\n        if (fetchError) {\n          throw new Error(fetchError.message);\n        }\n\n        const sessionPerformance: Record<string, { date: string; value: number; sessionId: string }> = {};\n        \n        (setLogs || []).forEach(log => {\n          const sessionInfo = (log.workout_sessions as { session_date: string; id: string }[] | null)?.[0];\n          const sessionId = sessionInfo?.id;\n\n          if (!sessionId || !sessionInfo.session_date) return;\n          \n          const dateKey = new Date(sessionInfo.session_date).toLocaleDateString();\n          let performanceValue: number | null = null;\n\n          if (exerciseType === 'weight') {\n            const weight = log.weight_kg || 0;\n            const reps = log.reps || 0;\n            performanceValue = weight * reps; // Total volume for the set\n          } else if (exerciseType === 'timed') {\n            performanceValue = log.time_seconds || 0;\n          }\n\n          if (performanceValue !== null) {\n            if (!sessionPerformance[sessionId]) {\n              sessionPerformance[sessionId] = {\n                date: dateKey,\n                value: 0,\n                sessionId\n              };\n            }\n            // For weight: sum volume. For timed: take max time (or average, depending on desired metric)\n            if (exerciseType === 'weight') {\n              sessionPerformance[sessionId].value += performanceValue;\n            } else if (exerciseType === 'timed') {\n              sessionPerformance[sessionId].value = Math.max(sessionPerformance[sessionId].value, performanceValue);\n            }\n          }\n        });\n\n        // Convert to array and sort by date, take last 4 unique sessions\n        const sortedSessions = Object.values(sessionPerformance)\n          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n          .slice(-4); // Show last 4 sessions\n\n        const formattedChartData = sortedSessions.map(session => ({\n          date: session.date,\n          value: session.value\n        }));\n\n        setChartData(formattedChartData);\n\n      } catch (err: any) {\n        console.error(\"Failed to fetch exercise history for mini-chart:\", err);\n        setError(err.message || \"Failed to load exercise mini-chart.\");\n        toast.error(err.message || \"Failed to load exercise mini-chart.\"); // Added toast.error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExerciseHistory();\n  }, [session, supabase, exerciseId, exerciseType, currentSessionId]);\n\n  if (loading || error || chartData.length < 2) { // Need at least 2 data points for a line chart\n    return (\n      <div className=\"h-20 w-full flex items-center justify-center text-muted-foreground text-xs\">\n        {loading ? \"Loading...\" : (error ? \"Error\" : \"No trend data\")}\n      </div>\n    );\n  }\n\n  const tooltipFormatter = (value: number) => {\n    if (exerciseType === 'weight') {\n      return `${formatWeight(value, 'kg')}`;\n    } else if (exerciseType === 'timed') {\n      return `${formatTime(value)}`;\n    }\n    return value.toString();\n  };\n\n  return (\n    <div className=\"h-20 w-full\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart data={chartData} margin={{ top: 5, right: 10, left: 10, bottom: 5 }}>\n          <XAxis dataKey=\"date\" hide />\n          <YAxis hide domain={['auto', 'auto']} />\n          <Tooltip formatter={tooltipFormatter} />\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke=\"hsl(var(--primary))\"\n            strokeWidth={2}\n            dot={{ r: 3 }}\n            activeDot={{ r: 6 }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};","size_bytes":5345},"apps/web/src/components/workout-summary/exercise-volume-chart.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { formatWeight } from '@/lib/unit-conversions';\n\ntype SetLog = Tables<'set_logs'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ChartData {\n  date: string;\n  [key: string]: number | string;\n}\n\ninterface ExerciseVolumeChartProps {\n  currentSessionId: string;\n  exerciseName: string;\n  exerciseId: string;\n}\n\nexport const ExerciseVolumeChart = ({ currentSessionId, exerciseName, exerciseId }: ExerciseVolumeChartProps) => {\n  const { session, supabase } = useSession();\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchExerciseHistory = async () => {\n      if (!session) return;\n\n      setLoading(true);\n      setError(null);\n      try {\n        // Fetch last 3 workout sessions for this exercise\n        const { data: setLogs, error: fetchError } = await supabase\n          .from('set_logs')\n          .select(`\n            weight_kg, reps,\n            workout_sessions (\n              session_date,\n              id\n            )\n          `)\n          .eq('exercise_id', exerciseId)\n          .order('created_at', { ascending: false })\n          .limit(20); // Get more sets to ensure we get 3 different sessions\n\n        if (fetchError) {\n          throw new Error(fetchError.message);\n        }\n\n        // Group sets by workout session and calculate volume for each\n        const sessionVolumes: Record<string, { date: string; volume: number; sessionId: string }> = {};\n        \n        (setLogs || []).forEach(log => {\n          // Access workout_sessions as an array and get the first element\n          const sessionInfo = (log.workout_sessions as { session_date: string; id: string }[] | null)?.[0];\n          const sessionId = sessionInfo?.id;\n\n          if (!sessionId) return;\n          \n          // Skip the current session\n          if (sessionId === currentSessionId) return;\n          \n          const weight = log.weight_kg || 0;\n          const reps = log.reps || 0;\n          const volume = weight * reps;\n          \n          if (!sessionVolumes[sessionId]) {\n            sessionVolumes[sessionId] = {\n              date: new Date(sessionInfo.session_date || '').toLocaleDateString(),\n              volume: 0,\n              sessionId\n            };\n          }\n          \n          sessionVolumes[sessionId].volume += volume;\n        });\n\n        // Convert to array and sort by date, take last 3\n        const sortedSessions = Object.values(sessionVolumes)\n          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n          .slice(-3);\n\n        // Format for chart\n        const chartDataFormatted = sortedSessions.map(session => ({\n          date: session.date,\n          [exerciseName]: session.volume\n        }));\n\n        setChartData(chartDataFormatted);\n\n      } catch (err: any) {\n        console.error(\"Failed to fetch exercise history for chart:\", err);\n        toast.info(\"Failed to load exercise history chart.\");\n        setError(err.message || \"Failed to load exercise history chart.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExerciseHistory();\n  }, [session, supabase, exerciseId, exerciseName, currentSessionId]);\n\n  if (loading) {\n    return (\n      <Card className=\"h-[300px] flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading chart data...</p>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"h-[300px] flex items-center justify-center\">\n        <p className=\"text-destructive\">Error: {error}</p>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Volume Comparison</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {chartData.length === 0 ? (\n          <div className=\"h-[200px] flex items-center justify-center text-muted-foreground\">\n            Not enough data to show volume comparison. Complete more workouts to see your progress!\n          </div>\n        ) : (\n          <div className=\"h-[200px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={chartData}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip formatter={(value: number) => [`${formatWeight(value, 'kg')}`, 'Volume']} />\n                <Legend />\n                <Bar dataKey={exerciseName} fill=\"hsl(var(--primary))\" name=\"Volume (kg)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":5264},"apps/web/src/components/workout-summary/workout-rating-card.tsx":{"content":"\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Tables } from \"@/types/supabase\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Star } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { useSession } from \"@/components/session-context-provider\";\n\ntype WorkoutSession = Tables<'workout_sessions'>;\n\ninterface WorkoutRatingCardProps {\n  workoutSession: WorkoutSession;\n  onRatingChange: (rating: number) => void;\n  currentRating: number | null;\n  isRatingSaved: boolean;\n}\n\nexport const WorkoutRatingCard = ({ workoutSession, onRatingChange, currentRating, isRatingSaved }: WorkoutRatingCardProps) => {\n  const { session, supabase } = useSession();\n\n  const handleRatingClick = async (rating: number) => {\n    if (!session || !workoutSession) return;\n\n    onRatingChange(rating);\n\n    const { error: updateError } = await supabase\n      .from('workout_sessions')\n      .update({ rating: rating })\n      .eq('id', workoutSession.id)\n      .eq('user_id', session.user.id);\n\n    if (updateError) {\n      console.error(\"Error saving rating:\", updateError.message);\n      toast.info(\"Failed to save rating.\");\n    } else {\n      console.log(\"Workout rated successfully!\");\n    }\n  };\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle>Rate Your Workout</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"flex items-center space-x-1\">\n          {[1, 2, 3, 4, 5].map((star) => (\n            <Star\n              key={star}\n              className={`h-8 w-8 cursor-pointer ${\n                (currentRating && star <= currentRating) ? 'text-yellow-500 fill-yellow-500' : 'text-muted-foreground'\n              }`}\n              onClick={() => handleRatingClick(star)}\n            />\n          ))}\n          {isRatingSaved && <span className=\"ml-2 text-sm text-green-500\">Saved!</span>}\n        </div>\n        <p className=\"text-sm text-muted-foreground mt-2\">\n          How would you rate this workout session? (1-5 stars)\n        </p>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2087},"apps/web/src/components/workout-summary/workout-stats-card.tsx":{"content":"\"use client\";\n\nimport React from \"react\";\nimport { Tables } from \"@/types/supabase\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dumbbell, Timer, Trophy, Calendar, ListChecks } from \"lucide-react\";\nimport { formatTime } from '@/lib/unit-conversions';\nimport { cn, getWorkoutColorClass } from '@/lib/utils'; // Keep web-specific utils;\n\ntype WorkoutSession = Tables<'workout_sessions'>;\n\ninterface WorkoutStatsCardProps {\n  workoutSession: WorkoutSession;\n  totalVolume: number;\n  prsAchieved: number;\n  newPrExercises: string[];\n  exercisesPerformed: number;\n}\n\nexport const WorkoutStatsCard = ({ workoutSession, totalVolume, prsAchieved, newPrExercises, exercisesPerformed }: WorkoutStatsCardProps) => {\n  const workoutColorClass = getWorkoutColorClass(workoutSession.template_name || 'Ad Hoc Workout', 'text');\n  return (\n    <Card className=\"mb-4\">\n      <CardHeader className=\"p-4\">\n        <CardTitle className={cn(\"text-lg\", workoutColorClass)}>{workoutSession.template_name || 'Ad Hoc Workout'}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"grid grid-cols-2 gap-4 p-4 pt-0\">\n        <div className=\"flex items-center space-x-2\">\n          <Calendar className=\"h-5 w-5 text-primary\" />\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Date</p>\n            <p className=\"text-base font-semibold\">{new Date(workoutSession.session_date).toLocaleDateString()}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Timer className=\"h-5 w-5 text-primary\" />\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Duration</p>\n            <p className=\"text-base font-semibold\">{workoutSession.duration_string || 'N/A'}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Dumbbell className=\"h-5 w-5 text-primary\" />\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Total Volume</p>\n            <p className=\"text-base font-semibold\">{totalVolume.toLocaleString()} kg</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <ListChecks className=\"h-5 w-5 text-primary\" />\n          <div>\n            <p className=\"text-xs text-muted-foreground\">Exercises</p>\n            <p className=\"text-base font-semibold\">{exercisesPerformed}</p>\n          </div>\n        </div>\n        <div className=\"col-span-2 flex items-start space-x-2\">\n          <Trophy className=\"h-5 w-5 text-primary flex-shrink-0 mt-0.5\" />\n          <div>\n            <p className=\"text-xs text-muted-foreground\">PBs Achieved</p>\n            <p className=\"text-base font-semibold\">{prsAchieved}</p>\n            {newPrExercises.length > 0 && (\n              <div className=\"text-xs text-yellow-500 mt-1\">\n                New PBs: {newPrExercises.join(', ')}\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":2998},"apps/web/src/components/workout-summary/workout-summary-modal.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useSession } from '@/components/session-context-provider';\nimport { Button } from '@/components/ui/button';\nimport { Tables, SetLogWithExercise } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { WorkoutStatsCard } from '@/components/workout-summary/workout-stats-card';\nimport { WorkoutRatingCard } from '@/components/workout-summary/workout-rating-card';\nimport { WorkoutVolumeHistoryCard } from '@/components/workout-summary/workout-volume-history-card';\nimport { AiSessionAnalysisCard } from '@/components/workout-summary/ai-session-analysis-card';\nimport { ACHIEVEMENT_DISPLAY_INFO } from '@/lib/achievements';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { ArrowLeft, Trophy } from 'lucide-react';\nimport { db, LocalWorkoutSession, LocalSetLog, LocalExerciseDefinition } from '@/lib/db';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { formatWeight, formatTime } from '@/lib/unit-conversions';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\n\ntype WorkoutSession = Tables<'workout_sessions'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ntype ExerciseGroup = {\n  name: string;\n  type: ExerciseDefinition['type'] | undefined;\n  category: ExerciseDefinition['category'] | null | undefined;\n  sets: SetLogWithExercise[];\n  id: string;\n};\n\ninterface WorkoutSummaryModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  sessionId: string | null;\n}\n\nexport const WorkoutSummaryModal = ({ open, onOpenChange, sessionId }: WorkoutSummaryModalProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const router = useRouter();\n  const [workoutSession, setWorkoutSession] = useState<WorkoutSession | null>(null);\n  const [setLogs, setSetLogs] = useState<SetLogWithExercise[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [totalVolume, setTotalVolume] = useState<number>(0);\n  const [prsAchieved, setPrsAchieved] = useState<number>(0);\n  const [newPrExercises, setNewPrExercises] = useState<string[]>([]);\n  const [currentRating, setCurrentRating] = useState<number | null>(null);\n  const [isRatingSaved, setIsRatingSaved] = useState(false);\n  const [hasShownAchievementToasts, setHasShownAchievementToasts] = useState(false);\n\n  useEffect(() => {\n    if (!memoizedSessionUserId || !sessionId || !open) { // Use memoized ID\n      setWorkoutSession(null);\n      setSetLogs([]);\n      setLoading(true);\n      setHasShownAchievementToasts(false); // Reset this state when modal closes or session/ID changes\n      if (!sessionId && open) {\n        setError(\"No workout session ID provided for summary.\");\n        setLoading(false);\n      }\n      return;\n    }\n\n    const fetchWorkoutSummary = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const localSession = await db.workout_sessions.get(sessionId);\n        if (!localSession) throw new Error(\"Workout session not found in local database.\");\n        \n        setWorkoutSession(localSession as WorkoutSession);\n        setCurrentRating(localSession.rating);\n        setIsRatingSaved(localSession.rating !== null);\n\n        const localSetLogs = await db.set_logs.where('session_id').equals(sessionId).toArray();\n        const allExerciseDefs = await db.exercise_definitions_cache.toArray();\n        const exerciseDefMap = new Map(allExerciseDefs.map(def => [def.id, def]));\n\n        let volume = 0;\n        let prCount = 0;\n        const processedSetLogs: SetLogWithExercise[] = [];\n        const uniqueExerciseIds = new Set<string>();\n        const newPrsThisSession = new Set<string>();\n\n        localSetLogs.forEach(log => {\n          const exerciseDef = log.exercise_id ? exerciseDefMap.get(log.exercise_id) : null;\n          if (exerciseDef?.type === 'weight' && log.weight_kg && log.reps) {\n            volume += log.weight_kg * log.reps;\n          }\n          if (log.is_pb) {\n            prCount++;\n            if (exerciseDef?.name) newPrsThisSession.add(exerciseDef.name);\n          }\n          if (exerciseDef?.id) uniqueExerciseIds.add(exerciseDef.id);\n          \n          // Explicitly pick properties for exercise_definitions to match SetLogWithExercise type\n          processedSetLogs.push({ \n            ...log, \n            exercise_definitions: exerciseDef ? { \n              id: exerciseDef.id, \n              name: exerciseDef.name, \n              main_muscle: exerciseDef.main_muscle, \n              type: exerciseDef.type, \n              category: exerciseDef.category,\n              movement_type: exerciseDef.movement_type, // ADDED\n              movement_pattern: exerciseDef.movement_pattern // ADDED\n            } : null \n          });\n        });\n        \n        setTotalVolume(volume);\n        setPrsAchieved(prCount);\n        setNewPrExercises(Array.from(newPrsThisSession));\n        setSetLogs(processedSetLogs);\n\n        // Only show achievement toasts if they haven't been shown for this session yet\n        if (!hasShownAchievementToasts && memoizedSessionUserId) { // Use memoized ID\n          const response = await fetch('/api/get-session-achievements', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${session?.access_token}` }, // Use session?.access_token\n            body: JSON.stringify({ userId: memoizedSessionUserId, sessionId: sessionId }), // Use memoized ID\n          });\n          const data = await response.json();\n          if (!response.ok) throw new Error(data.error || 'Failed to fetch session achievements.');\n          const newlyUnlockedAchievements: string[] = data.newlyUnlockedAchievementIds || [];\n          newlyUnlockedAchievements.forEach(achievementId => {\n            const displayInfo = ACHIEVEMENT_DISPLAY_INFO[achievementId];\n            if (displayInfo) {\n              toast.info(`Congrats! Achievement Unlocked: ${displayInfo.name}! ${displayInfo.icon}`);\n            }\n          });\n          setHasShownAchievementToasts(true); // Mark as shown\n        }\n      } catch (err: any) {\n        setError(err.message || \"Failed to load workout summary. Please try again.\");\n        toast.error(\"Failed to load workout summary.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWorkoutSummary();\n  }, [memoizedSessionUserId, sessionId, supabase, hasShownAchievementToasts, open]); // Depend on memoized ID and 'open' to re-trigger on modal open\n\n  const handleRatingChange = (rating: number) => {\n    setCurrentRating(rating);\n    setIsRatingSaved(false);\n  };\n\n  const exercisesWithGroupedSets = setLogs\n    .filter(log => log.exercise_definitions && log.exercise_definitions.id)\n    .reduce((acc, log) => {\n      const exerciseId = log.exercise_definitions!.id;\n      const exerciseName = log.exercise_definitions!.name || 'Unknown Exercise';\n      if (!acc[exerciseId]) {\n        acc[exerciseId] = {\n          name: exerciseName,\n          type: log.exercise_definitions!.type,\n          category: log.exercise_definitions!.category,\n          sets: [],\n          id: exerciseId\n        };\n      }\n      acc[exerciseId].sets.push(log);\n      return acc;\n    }, {} as Record<string, ExerciseGroup>);\n\n  const getBestSetString = (exerciseGroup: ExerciseGroup): string => {\n    if (exerciseGroup.sets.length === 0) return '-';\n    if (exerciseGroup.type === 'timed') {\n      const bestSet = Math.max(...exerciseGroup.sets.map(s => s.time_seconds || 0));\n      return formatTime(bestSet);\n    } else {\n      const bestSet = exerciseGroup.sets.reduce((best, current) => {\n        const currentVolume = (current.weight_kg || 0) * (current.reps || 0);\n        const bestVolume = (best.weight_kg || 0) * (best.reps || 0);\n        return currentVolume > bestVolume ? current : best;\n      });\n      return `${formatWeight(bestSet.weight_kg, 'kg')} x ${bestSet.reps}`;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg max-h-[90vh] flex flex-col p-0\">\n        <DialogHeader className=\"p-6 pb-4 border-b\">\n          <DialogTitle className=\"text-2xl font-bold\">Workout Summary</DialogTitle>\n        </DialogHeader>\n\n        <ScrollArea className=\"flex-grow overflow-y-auto px-6 pb-6\">\n          <div className=\"space-y-6\">\n            {loading && <p>Loading workout summary...</p>}\n            {error && <p className=\"text-destructive\">{error}</p>}\n            {!loading && !error && workoutSession && (\n              <>\n                <WorkoutStatsCard \n                  workoutSession={workoutSession} \n                  totalVolume={totalVolume} \n                  prsAchieved={prsAchieved} \n                  newPrExercises={newPrExercises}\n                  exercisesPerformed={Object.keys(exercisesWithGroupedSets).length}\n                />\n                {workoutSession.template_name && workoutSession.template_name !== 'Ad Hoc Workout' && (\n                  <WorkoutVolumeHistoryCard\n                    workoutTemplateName={workoutSession.template_name}\n                    currentSessionId={sessionId!}\n                  />\n                )}\n                <WorkoutRatingCard \n                  workoutSession={workoutSession} \n                  onRatingChange={handleRatingChange} \n                  currentRating={currentRating} \n                  isRatingSaved={isRatingSaved} \n                />\n                <AiSessionAnalysisCard sessionId={sessionId!} />\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Exercises Performed</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {Object.values(exercisesWithGroupedSets).length === 0 ? (\n                      <p className=\"text-muted-foreground\">No exercises logged for this session.</p>\n                    ) : (\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Exercise</TableHead>\n                            <TableHead className=\"text-center\">Sets</TableHead>\n                            <TableHead>Best Set</TableHead>\n                            <TableHead className=\"text-center\">PB</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {Object.values(exercisesWithGroupedSets).map((group) => (\n                            <TableRow key={group.id}>\n                              <TableCell className=\"font-medium\">{group.name}</TableCell>\n                              <TableCell className=\"text-center\">{group.sets.length}</TableCell>\n                              <TableCell>{getBestSetString(group)}</TableCell>\n                              <TableCell className=\"text-center\">\n                                {group.sets.some(s => s.is_pb) ? <Trophy className=\"h-4 w-4 text-yellow-500 mx-auto\" /> : '-'}\n                              </TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    )}\n                  </CardContent>\n                </Card>\n              </>\n            )}\n          </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":11664},"apps/web/src/components/workout-summary/workout-volume-history-card.tsx":{"content":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { Dumbbell } from 'lucide-react';\nimport { db, LocalWorkoutSession, LocalSetLog, LocalExerciseDefinition } from '@/lib/db';\n\ntype WorkoutSession = Tables<'workout_sessions'>;\ntype SetLog = Tables<'set_logs'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface ChartData {\n  date: string;\n  volume: number;\n  change?: number;\n  color?: string;\n}\n\ninterface WorkoutVolumeHistoryCardProps {\n  workoutTemplateName: string;\n  currentSessionId: string;\n}\n\nexport const WorkoutVolumeHistoryCard = ({ workoutTemplateName, currentSessionId }: WorkoutVolumeHistoryCardProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchWorkoutVolumeHistory = async () => {\n      if (!memoizedSessionUserId || !workoutTemplateName) return; // Use memoized ID\n\n      setLoading(true);\n      setError(null);\n      try {\n        const sessionsData = await db.workout_sessions\n          .where('template_name').equals(workoutTemplateName)\n          .and(s => s.user_id === memoizedSessionUserId && s.completed_at !== null) // Use memoized ID\n          .sortBy('session_date');\n\n        const relevantSessionIds = (sessionsData || []).map(s => s.id);\n        if (relevantSessionIds.length === 0) {\n          setChartData([]);\n          setLoading(false);\n          return;\n        }\n\n        const setLogsData = await db.set_logs.where('session_id').anyOf(relevantSessionIds).toArray();\n        const allExerciseDefs = await db.exercise_definitions_cache.toArray();\n        const exerciseDefMap = new Map(allExerciseDefs.map(def => [def.id, def]));\n\n        const sessionVolumes: Record<string, { date: string; volume: number }> = {};\n        (sessionsData || []).forEach(s => {\n          sessionVolumes[s.id] = { date: new Date(s.session_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }), volume: 0 };\n        });\n\n        (setLogsData || []).forEach(log => {\n          const exerciseDef = log.exercise_id ? exerciseDefMap.get(log.exercise_id) : null;\n          if (exerciseDef?.type === 'weight' && log.weight_kg && log.reps) {\n            sessionVolumes[log.session_id!].volume += (log.weight_kg * log.reps);\n          }\n        });\n\n        const sortedVolumes = Object.entries(sessionVolumes)\n          .map(([id, data]) => ({ id, ...data }))\n          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n          .slice(-4);\n\n        const formattedChartData: ChartData[] = sortedVolumes.map((item, index) => {\n          const previousVolume = index > 0 ? sortedVolumes[index - 1].volume : 0;\n          let change = 0;\n          if (previousVolume > 0) {\n            change = ((item.volume - previousVolume) / previousVolume) * 100;\n          }\n\n          let color = 'hsl(var(--primary))';\n          if (item.id === currentSessionId) color = 'hsl(var(--action-primary))';\n          else if (change > 0) color = 'hsl(var(--chart-2))';\n          else if (change < 0) color = 'hsl(var(--destructive))';\n\n          return { date: item.date, volume: item.volume, change, color };\n        });\n        \n        setChartData(formattedChartData);\n      } catch (err: any) {\n        setError(err.message || \"Failed to load workout volume history.\");\n        toast.error(\"Failed to load workout volume history.\"); // Changed to toast.error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchWorkoutVolumeHistory();\n  }, [memoizedSessionUserId, supabase, workoutTemplateName, currentSessionId]); // Depend on memoized ID\n\n  if (loading) {\n    return <Card className=\"h-[250px] flex items-center justify-center mb-6\"><p className=\"text-muted-foreground\">Loading history...</p></Card>;\n  }\n  if (error) {\n    return <Card className=\"h-[250px] flex items-center justify-center mb-6\"><p className=\"text-destructive\">Error: {error}</p></Card>;\n  }\n\n  const hasData = chartData.length > 0;\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Dumbbell className=\"h-5 w-5\" /> Workout Volume History\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {!hasData ? (\n          <div className=\"h-[220px] flex items-center justify-center text-muted-foreground\">\n            No previous workout data for \"{workoutTemplateName}\". Complete more sessions to see your trend!\n          </div>\n        ) : (\n          <>\n            <div className=\"h-[200px]\"> {/* Increased height to accommodate legend */}\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={chartData} margin={{ top: 5, right: 5, left: 20, bottom: 5 }}> {/* Adjusted left margin */}\n                  <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.5} />\n                  <XAxis dataKey=\"date\" tickFormatter={(tick) => new Date(tick).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} />\n                  <YAxis\n                    tickFormatter={(value) => {\n                      if (value >= 1000) {\n                        return `${Math.round(value / 1000)}k`;\n                      }\n                      return value.toLocaleString();\n                    }}\n                    label={{ value: 'Volume (kg)', angle: -90, position: 'left', offset: -10, style: { textAnchor: 'middle', fontSize: 12 } }}\n                  />\n                  <Tooltip\n                    cursor={{ fill: 'hsl(var(--muted))', opacity: 0.5 }}\n                    contentStyle={{ background: 'hsl(var(--background))', border: '1px solid hsl(var(--border))', borderRadius: 'var(--radius)' }}\n                    formatter={(value: number, name: string, props: any) => {\n                      const dataPoint = props.payload;\n                      if (dataPoint && dataPoint.change !== undefined) {\n                        const changeText = dataPoint.change > 0 ? `+${dataPoint.change.toFixed(1)}%` : `${dataPoint.change.toFixed(1)}%`;\n                        return [`${value.toLocaleString()} kg`, `Change: ${changeText}`];\n                      }\n                      return [`${value.toLocaleString()} kg`, 'Volume'];\n                    }}\n                  />\n                  <Bar dataKey=\"volume\" name=\"Total Volume\" barSize={20}>\n                    {chartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"flex justify-center items-center flex-wrap gap-x-4 gap-y-1 mt-4 text-xs text-muted-foreground\">\n              <div className=\"flex items-center gap-1.5\"><div className=\"h-3 w-3 rounded-sm\" style={{ backgroundColor: 'hsl(var(--action-primary))' }} /><span>Current</span></div>\n              <div className=\"flex items-center gap-1.5\"><div className=\"h-3 w-3 rounded-sm\" style={{ backgroundColor: 'hsl(var(--chart-2))' }} /><span>Improved</span></div>\n              <div className=\"flex items-center gap-1.5\"><div className=\"h-3 w-3 rounded-sm\" style={{ backgroundColor: 'hsl(var(--destructive))' }} /><span>Decreased</span></div>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":7852},"apps/web/src/hooks/data/useActiveWorkoutSession.ts":{"content":"\"use client\";\n\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport { toast } from 'sonner';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Tables, SetLogState, WorkoutExercise, ExerciseDefinition, GroupedTPath } from '@/types/supabase';\nimport { db, addToSyncQueue, LocalWorkoutSession } from '@/lib/db';\nimport { useSession } from '@/components/session-context-provider';\nimport { useGym } from '@/components/gym-context-provider';\nimport { supabase } from '@/integrations/supabase/client';\n\nconst DEFAULT_INITIAL_SETS = 3;\n\n// Helper function to check if a set has any user input\nconst hasUserInput = (set: SetLogState): boolean => {\n  return (set.weight_kg !== null && set.weight_kg > 0) ||\n         (set.reps !== null && set.reps > 0) ||\n         (set.reps_l !== null && set.reps_l > 0) ||\n         (set.reps_r !== null && set.reps_r > 0) ||\n         (set.time_seconds !== null && set.time_seconds > 0);\n};\n\ninterface UseActiveWorkoutSessionProps {\n  groupedTPaths: GroupedTPath[];\n  workoutExercisesCache: Record<string, WorkoutExercise[]>;\n  availableGymExerciseIds: Set<string>; // NEW PROP\n  allGymExerciseIds: Set<string>; // NEW PROP\n}\n\nexport const useActiveWorkoutSession = ({ groupedTPaths, workoutExercisesCache, availableGymExerciseIds, allGymExerciseIds }: UseActiveWorkoutSessionProps) => {\n  const [activeWorkout, setActiveWorkout] = useState<Tables<'t_paths'> | null>(null);\n  const [exercisesForSession, setExercisesForSession] = useState<WorkoutExercise[]>([]);\n  const [exercisesWithSets, setExercisesWithSets] = useState<Record<string, SetLogState[]>>({});\n  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n  const [sessionStartTime, setSessionStartTime] = useState<Date | null>(null);\n  const [completedExercises, setCompletedExercises] = useState<Set<string>>(new Set());\n  const [isCreatingSession, setIsCreatingSession] = useState(false);\n  const [expandedExerciseCards, setExpandedExerciseCards] = useState<Record<string, boolean>>({});\n  const [isWorkoutSessionStarted, setIsWorkoutSessionStarted] = useState(false); // NEW STATE\n\n  const isWorkoutActive = useMemo(() => !!activeWorkout, [activeWorkout]);\n  const hasUnsavedChanges = useMemo(() => {\n    if (!isWorkoutActive) return false;\n    return Object.values(exercisesWithSets).flat().some(set => !set.isSaved && hasUserInput(set));\n  }, [isWorkoutActive, exercisesWithSets]);\n\n  const _resetLocalState = useCallback(() => {\n    console.log(\"[ActiveWorkoutSession] _resetLocalState called.\");\n    setActiveWorkout(null);\n    setExercisesForSession([]);\n    setExercisesWithSets({});\n    setCurrentSessionId(null);\n    setSessionStartTime(null);\n    setCompletedExercises(new Set());\n    setIsCreatingSession(false);\n    setExpandedExerciseCards({});\n    setIsWorkoutSessionStarted(false); // RESET NEW STATE\n  }, []);\n\n  const { session, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const { activeGym } = useGym();\n\n  const resetWorkoutSession = useCallback(async () => {\n    console.log(\"[ActiveWorkoutSession] resetWorkoutSession called.\");\n    if (memoizedSessionUserId) { // Use memoized ID\n      try {\n        const allDrafts = await db.draft_set_logs.toArray();\n        const userDraftKeys = allDrafts.map(draft => [draft.exercise_id, draft.set_index] as [string, number]);\n        if (userDraftKeys.length > 0) {\n          await db.draft_set_logs.bulkDelete(userDraftKeys);\n          console.log(\"[ActiveWorkoutSession] Cleared draft set logs from IndexedDB.\");\n        }\n      } catch (error) {\n        console.error(\"[ActiveWorkoutSession] Error clearing draft set logs:\", error);\n        toast.error(\"Failed to clear local workout drafts.\");\n      }\n    }\n    _resetLocalState();\n  }, [memoizedSessionUserId, _resetLocalState]); // Depend on memoized ID\n\n  const selectWorkout = useCallback(async (workoutId: string | null) => {\n    console.log(`[ActiveWorkoutSession] selectWorkout called with workoutId: ${workoutId}`);\n\n    // NEW: If the selected workout is already active, do nothing.\n    if (activeWorkout?.id === workoutId) {\n      console.log(`[ActiveWorkoutSession] Workout ${workoutId} is already active. Skipping update.`);\n      return;\n    }\n\n    await resetWorkoutSession();\n    if (!workoutId) return;\n\n    if (workoutId === 'ad-hoc') {\n      console.log(\"[ActiveWorkoutSession] Setting active workout to Ad Hoc.\");\n      setActiveWorkout({ id: 'ad-hoc', template_name: 'Ad Hoc Workout', is_bonus: false, user_id: null, created_at: new Date().toISOString(), version: null, settings: null, progression_settings: null, parent_t_path_id: null, gym_id: null });\n      return;\n    }\n\n    const selectedWorkout = groupedTPaths.flatMap(g => g.childWorkouts).find(w => w.id === workoutId);\n    if (selectedWorkout) {\n      console.log(`[ActiveWorkoutSession] Found selected workout: ${selectedWorkout.template_name}`);\n      setActiveWorkout(selectedWorkout); // Only set activeWorkout here\n    } else {\n      toast.error(\"Selected workout not found.\");\n      console.error(\"[ActiveWorkoutSession] Error: Selected workout not found for ID:\", workoutId);\n    }\n  }, [resetWorkoutSession, groupedTPaths, activeWorkout]); // Added activeWorkout to dependencies\n\n  // Memoize filtered exercises to prevent unnecessary re-renders\n  const filteredExercises = useMemo(() => {\n    if (!activeWorkout || !memoizedSessionUserId || activeWorkout.id === 'ad-hoc') {\n      return [];\n    }\n\n    const newExercisesFromCache = workoutExercisesCache[activeWorkout.id];\n    if (!newExercisesFromCache) {\n      return [];\n    }\n\n    let currentFilteredExercises = newExercisesFromCache;\n\n    if (activeGym) {\n      // Use the pre-fetched availableGymExerciseIds and allGymExerciseIds\n      currentFilteredExercises = newExercisesFromCache.filter(ex => !allGymExerciseIds.has(ex.id) || availableGymExerciseIds.has(ex.id));\n    }\n    return currentFilteredExercises;\n  }, [activeWorkout, workoutExercisesCache, activeGym, memoizedSessionUserId, availableGymExerciseIds, allGymExerciseIds]);\n\n  // Effect to react to activeWorkout and filteredExercises changes\n  useEffect(() => {\n    console.log(\"[ActiveWorkoutSession] Reactivity useEffect triggered.\");\n\n    if (!activeWorkout || !memoizedSessionUserId) {\n      // If no active workout or user, clear states\n      setExercisesForSession([]);\n      setExercisesWithSets({});\n      setCompletedExercises(new Set());\n      setExpandedExerciseCards({});\n      return;\n    }\n\n    if (activeWorkout.id === 'ad-hoc') {\n      // For ad-hoc, exercises are added manually, so ensure states are empty\n      if (exercisesForSession.length > 0 || Object.keys(exercisesWithSets).length > 0) {\n        setExercisesForSession([]);\n        setExercisesWithSets({});\n        setCompletedExercises(new Set());\n        setExpandedExerciseCards({});\n      }\n      return;\n    }\n\n    // Deep compare filteredExercises with current exercisesForSession\n    const areExercisesIdentical = exercisesForSession.length === filteredExercises.length &&\n      exercisesForSession.every((ex, index) => ex.id === filteredExercises[index].id);\n\n    if (!areExercisesIdentical) {\n      console.log(\"[ActiveWorkoutSession] Detected change in exercise list. Updating session exercises.\");\n      setExercisesForSession(filteredExercises);\n      \n      // Re-initialize sets for the new exercise list\n      const initialSets = Object.fromEntries(filteredExercises.map(ex => [ex.id, Array.from({ length: DEFAULT_INITIAL_SETS }, () => ({ id: null, created_at: null, session_id: currentSessionId, exercise_id: ex.id, weight_kg: null, reps: null, reps_l: null, reps_r: null, time_seconds: null, is_pb: false, isSaved: false, isPR: false, lastWeight: null, lastReps: null, lastRepsL: null, lastRepsR: null, lastTimeSeconds: null }))]));\n      setExercisesWithSets(initialSets);\n      setCompletedExercises(new Set());\n      setExpandedExerciseCards(Object.fromEntries(filteredExercises.map(ex => [ex.id, false])));\n    } else {\n      console.log(\"[ActiveWorkoutSession] No change in exercise list. Skipping update.\");\n    }\n  }, [activeWorkout, filteredExercises, memoizedSessionUserId]); // Removed exercisesForSession and exercisesWithSets from dependencies\n\n  const createWorkoutSessionInDb = useCallback(async (templateName: string, firstSetTimestamp: string): Promise<string> => {\n    console.log(`[ActiveWorkoutSession] createWorkoutSessionInDb called for template: ${templateName}, timestamp: ${firstSetTimestamp}`);\n    if (!memoizedSessionUserId) { // Use memoized ID\n      console.error(\"[ActiveWorkoutSession] Error: User not authenticated when trying to create workout session.\");\n      throw new Error(\"User not authenticated.\");\n    }\n    setIsCreatingSession(true);\n    try {\n      const newSessionId = uuidv4();\n      const sessionData: LocalWorkoutSession = {\n        id: newSessionId,\n        user_id: memoizedSessionUserId, // Use memoized ID\n        template_name: templateName,\n        t_path_id: activeWorkout?.id === 'ad-hoc' ? null : activeWorkout?.id || null,\n        session_date: firstSetTimestamp,\n        duration_string: null,\n        rating: null,\n        created_at: new Date().toISOString(),\n        completed_at: null,\n      };\n      await db.workout_sessions.put(sessionData);\n      await addToSyncQueue('create', 'workout_sessions', sessionData);\n      setCurrentSessionId(newSessionId);\n      setSessionStartTime(new Date(firstSetTimestamp));\n      setIsWorkoutSessionStarted(true); // SET NEW STATE TO TRUE\n      console.log(`[ActiveWorkoutSession] New workout session created in DB and IndexedDB: ${newSessionId}`);\n      return newSessionId;\n    } catch (error) {\n      console.error(\"[ActiveWorkoutSession] Error creating workout session in DB:\", error);\n      toast.error(\"Failed to start workout session.\");\n      throw error;\n    } finally {\n      setIsCreatingSession(false);\n    }\n  }, [memoizedSessionUserId, activeWorkout]); // Depend on memoized ID\n\n  const finishWorkoutSession = useCallback(async (): Promise<string | null> => {\n    console.log(\"[ActiveWorkoutSession] finishWorkoutSession called.\");\n    if (!currentSessionId || !sessionStartTime || !memoizedSessionUserId || !activeWorkout) { // Use memoized ID\n      console.error(\"[ActiveWorkoutSession] Error: Workout session not properly started or missing data for finishing.\");\n      toast.error(\"Workout session not properly started.\");\n      return null;\n    }\n    const endTime = new Date();\n    const durationMs = endTime.getTime() - sessionStartTime.getTime();\n    const durationMinutes = Math.round(durationMs / 60000);\n    const durationString = durationMinutes < 60 ? `${durationMinutes} minutes` : `${Math.floor(durationMinutes / 60)}h ${durationMinutes % 60}m`;\n\n    try {\n      const updatePayload = { duration_string: durationString, completed_at: endTime.toISOString() };\n      await db.workout_sessions.update(currentSessionId, updatePayload);\n      const fullSessionData = await db.workout_sessions.get(currentSessionId);\n      if (fullSessionData) {\n        await addToSyncQueue('update', 'workout_sessions', fullSessionData);\n        console.log(`[ActiveWorkoutSession] Workout session ${currentSessionId} updated in IndexedDB and added to sync queue.`);\n      }\n      await db.draft_set_logs.where('session_id').equals(currentSessionId).delete();\n      console.log(`[ActiveWorkoutSession] Draft set logs for session ${currentSessionId} cleared.`);\n      \n      console.log(`[ActiveWorkoutSession] Invoking process-achievements for user ${memoizedSessionUserId}, session ${currentSessionId}`); // Use memoized ID\n      const { error: achievementError } = await supabase.functions.invoke('process-achievements', { body: { user_id: memoizedSessionUserId, session_id: currentSessionId } }); // Use memoized ID\n      if (achievementError) {\n        console.error(\"[ActiveWorkoutSession] Error invoking process-achievements:\", achievementError);\n        toast.error(\"Failed to process achievements.\");\n      }\n\n      const finishedSessionId = currentSessionId;\n      await resetWorkoutSession();\n      console.log(`[ActiveWorkoutSession] Workout session ${finishedSessionId} finished successfully.`);\n      return finishedSessionId;\n    } catch (error) {\n      console.error(\"[ActiveWorkoutSession] Error finishing workout session:\", error);\n      toast.error(\"Failed to save workout duration.\");\n      return null;\n    }\n  }, [currentSessionId, sessionStartTime, memoizedSessionUserId, activeWorkout, supabase, resetWorkoutSession]); // Depend on memoized ID\n\n  const updateExerciseSets = useCallback((exerciseId: string, newSets: SetLogState[]) => {\n    console.log(`[ActiveWorkoutSession] updateExerciseSets called for exerciseId: ${exerciseId}`);\n    setExercisesWithSets(prev => ({ ...prev, [exerciseId]: newSets }));\n  }, []);\n\n  const markExerciseAsCompleted = useCallback((exerciseId: string) => {\n    console.log(`[ActiveWorkoutSession] markExerciseAsCompleted called for exerciseId: ${exerciseId}`);\n    setCompletedExercises((prev: Set<string>) => new Set(prev).add(exerciseId));\n    setExpandedExerciseCards(prev => ({ ...prev, [exerciseId]: false }));\n  }, []);\n\n  const addExerciseToSession = useCallback(async (exercise: ExerciseDefinition) => {\n    console.log(`[ActiveWorkoutSession] addExerciseToSession called for exercise: ${exercise.name}`);\n    if (exercisesForSession.some(ex => ex.id === exercise.id)) {\n      toast.info(`'${exercise.name}' is already in this session.`);\n      return;\n    }\n    setExercisesForSession(prev => [{ ...exercise, is_bonus_exercise: false }, ...prev]);\n    const newSets = Array.from({ length: DEFAULT_INITIAL_SETS }, () => ({ id: null, created_at: null, session_id: currentSessionId, exercise_id: exercise.id, weight_kg: null, reps: null, reps_l: null, reps_r: null, time_seconds: null, is_pb: false, isSaved: false, isPR: false, lastWeight: null, lastReps: null, lastRepsL: null, lastRepsR: null, lastTimeSeconds: null }));\n    updateExerciseSets(exercise.id, newSets);\n    setExpandedExerciseCards(prev => ({ ...prev, [exercise.id]: false })); // Changed to false for collapsed by default\n    console.log(`[ActiveWorkoutSession] Exercise ${exercise.name} added to session.`);\n  }, [exercisesForSession, currentSessionId, updateExerciseSets]);\n\n  const removeExerciseFromSession = useCallback(async (exerciseId: string) => {\n    console.log(`[ActiveWorkoutSession] removeExerciseFromSession called for exerciseId: ${exerciseId}`);\n    setExercisesForSession(prev => prev.filter(ex => ex.id !== exerciseId));\n    setExercisesWithSets(prev => { const newSets = { ...prev }; delete newSets[exerciseId]; return newSets; });\n    setCompletedExercises((prev: Set<string>) => { const newCompleted = new Set(prev); newCompleted.delete(exerciseId); return newCompleted; });\n    setExpandedExerciseCards(prev => { const newExpanded = { ...prev }; delete newExpanded[exerciseId]; return newExpanded; });\n    console.log(`[ActiveWorkoutSession] Exercise ${exerciseId} removed from session.`);\n  }, []);\n\n  const substituteExercise = useCallback(async (oldExerciseId: string, newExercise: WorkoutExercise) => {\n    console.log(`[ActiveWorkoutSession] substituteExercise called: old=${oldExerciseId}, new=${newExercise.name}`);\n    if (exercisesForSession.some(ex => ex.id === newExercise.id)) {\n      toast.info(`'${newExercise.name}' is already in this session.`);\n      return;\n    }\n    setExercisesForSession(prev => prev.map(ex => ex.id === oldExerciseId ? newExercise : ex));\n    const newSets = Array.from({ length: DEFAULT_INITIAL_SETS }, () => ({ id: null, created_at: null, session_id: currentSessionId, exercise_id: newExercise.id, weight_kg: null, reps: null, reps_l: null, reps_r: null, time_seconds: null, is_pb: false, isSaved: false, isPR: false, lastWeight: null, lastReps: null, lastRepsL: null, lastRepsR: null, lastTimeSeconds: null }));\n    updateExerciseSets(newExercise.id, newSets);\n    setExercisesWithSets(prev => { const newSets = { ...prev }; delete newSets[oldExerciseId]; return newSets; });\n    setCompletedExercises((prev: Set<string>) => { const newCompleted = new Set(prev); newCompleted.delete(oldExerciseId); return newCompleted; });\n    setExpandedExerciseCards(prev => { const newExpanded = { ...prev }; delete newExpanded[oldExerciseId]; newExpanded[newExercise.id] = false; return newExpanded; }); // Changed to false for collapsed by default\n    console.log(`[ActiveWorkoutSession] Exercise ${oldExerciseId} substituted with ${newExercise.name}.`);\n  }, [exercisesForSession, currentSessionId, updateExerciseSets]);\n\n  const toggleExerciseCardExpansion = useCallback((exerciseId: string) => {\n    console.log(`[ActiveWorkoutSession] toggleExerciseCardExpansion called for exerciseId: ${exerciseId}`);\n    setExpandedExerciseCards(prev => ({ ...prev, [exerciseId]: !prev[exerciseId] }));\n  }, []);\n\n  return useMemo(() => ({\n    activeWorkout,\n    exercisesForSession,\n    exercisesWithSets,\n    currentSessionId,\n    sessionStartTime,\n    completedExercises,\n    isCreatingSession,\n    isWorkoutActive,\n    hasUnsavedChanges,\n    expandedExerciseCards,\n    selectWorkout,\n    resetWorkoutSession,\n    createWorkoutSessionInDb,\n    finishWorkoutSession,\n    updateExerciseSets,\n    markExerciseAsCompleted,\n    addExerciseToSession,\n    removeExerciseFromSession,\n    substituteExercise,\n    toggleExerciseCardExpansion,\n    updateSessionStartTime: (timestamp: string) => setSessionStartTime(new Date(timestamp)),\n    isWorkoutSessionStarted, // EXPOSE NEW STATE\n  }), [\n    activeWorkout,\n    exercisesForSession,\n    exercisesWithSets,\n    currentSessionId,\n    sessionStartTime,\n    completedExercises,\n    isCreatingSession,\n    isWorkoutActive,\n    hasUnsavedChanges,\n    expandedExerciseCards,\n    selectWorkout,\n    resetWorkoutSession,\n    createWorkoutSessionInDb,\n    finishWorkoutSession,\n    updateExerciseSets,\n    markExerciseAsCompleted,\n    addExerciseToSession,\n    removeExerciseFromSession,\n    substituteExercise,\n    toggleExerciseCardExpansion,\n    isWorkoutSessionStarted,\n  ]);\n};","size_bytes":18082},"apps/web/src/hooks/data/useActivityChartData.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables, Profile } from '@/types/supabase';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\nimport { db, LocalProfile, LocalActivityLog } from '@/lib/db';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { convertDistance } from '@/lib/unit-conversions';\n\ntype ActivityLog = Tables<'activity_logs'>;\n\ninterface ChartData {\n  date: string;\n  cyclingDistance: number;\n  swimmingLengths: number;\n  tennisDuration: number; // in minutes\n}\n\nexport const useActivityChartData = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [preferredDistanceUnit, setPreferredDistanceUnit] = useState<Profile['preferred_distance_unit']>('km');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch profile for distance unit\n  const { data: cachedProfile, loading: loadingProfile, error: profileError } = useCacheAndRevalidate<LocalProfile>({\n    cacheTable: 'profiles_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('profiles').select('*').eq('id', memoizedSessionUserId); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'activity_chart_profile',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  // Fetch activity logs\n  const { data: cachedActivityLogs, loading: loadingLogs, error: logsError } = useCacheAndRevalidate<LocalActivityLog>({\n    cacheTable: 'activity_logs',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('activity_logs').select('*').eq('user_id', memoizedSessionUserId).order('log_date', { ascending: true }); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'activity_chart_logs',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  useEffect(() => {\n    const overallLoading = loadingProfile || loadingLogs;\n    setIsLoading(overallLoading);\n\n    const anyError = profileError || logsError;\n    if (anyError) {\n      setError(anyError);\n      setChartData([]);\n      return;\n    }\n\n    if (!overallLoading && cachedProfile && cachedActivityLogs) {\n      const profile = cachedProfile[0];\n      const unit = profile?.preferred_distance_unit || 'km';\n      setPreferredDistanceUnit(unit);\n\n      const weeklyActivityMap = new Map<string, { cyclingDistance: number, swimmingLengths: number, tennisDuration: number }>();\n\n      (cachedActivityLogs || []).forEach(log => {\n        const date = new Date(log.log_date);\n        const startOfWeek = new Date(date);\n        startOfWeek.setDate(date.getDate() - (date.getDay() + 6) % 7); // Adjust to Monday\n        startOfWeek.setHours(0, 0, 0, 0);\n        const weekKey = startOfWeek.toISOString().split('T')[0];\n\n        let currentWeekData = weeklyActivityMap.get(weekKey) || { cyclingDistance: 0, swimmingLengths: 0, tennisDuration: 0 };\n\n        if (log.activity_type === 'Cycling' && log.distance) {\n          const distanceMatch = log.distance.match(/^(\\d+(\\.\\d+)?) km$/);\n          if (distanceMatch) {\n            const distanceInKm = parseFloat(distanceMatch[1]);\n            currentWeekData.cyclingDistance += convertDistance(distanceInKm, 'km', unit as 'km' | 'miles') || 0;\n          }\n        } else if (log.activity_type === 'Swimming' && log.distance) {\n          const lengthsMatch = log.distance.match(/^(\\d+) lengths/);\n          if (lengthsMatch) {\n            currentWeekData.swimmingLengths += parseInt(lengthsMatch[1]);\n          }\n        } else if (log.activity_type === 'Tennis' && log.time) {\n          let totalMinutes = 0;\n          const hoursMatch = log.time.match(/(\\d+)h/);\n          const minutesMatch = log.time.match(/(\\d+)m/);\n          if (hoursMatch) totalMinutes += parseInt(hoursMatch[1]) * 60;\n          if (minutesMatch) totalMinutes += parseInt(minutesMatch[1]);\n          currentWeekData.tennisDuration += totalMinutes;\n        }\n        weeklyActivityMap.set(weekKey, currentWeekData);\n      });\n\n      const sortedChartData = Array.from(weeklyActivityMap.entries())\n        .map(([date, data]) => ({ date, ...data }))\n        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n      setChartData(sortedChartData);\n    }\n  }, [\n    cachedProfile, loadingProfile, profileError,\n    cachedActivityLogs, loadingLogs, logsError\n  ]);\n\n  return { chartData, isLoading, error, preferredDistanceUnit };\n};","size_bytes":4927},"apps/web/src/hooks/data/useExerciseHistory.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { useUserProfile } from './useUserProfile';\n\ntype SetLog = Tables<'set_logs'>;\ntype Profile = Tables<'profiles'>;\n\nexport type SetLogWithSession = Pick<SetLog, 'id' | 'weight_kg' | 'reps' | 'reps_l' | 'reps_r' | 'time_seconds' | 'created_at' | 'exercise_id' | 'is_pb' | 'session_id'> & {\n  workout_sessions: Pick<Tables<'workout_sessions'>, 'session_date'> | null;\n};\n\ninterface UseExerciseHistoryProps {\n  exerciseId: string;\n  sessionUserId: string | null; // ADDED: sessionUserId prop\n}\n\nexport const useExerciseHistory = ({ exerciseId, sessionUserId }: UseExerciseHistoryProps) => {\n  const { session, supabase } = useSession();\n  const { profile, isLoading: loadingProfile } = useUserProfile();\n  const [historyLogs, setHistoryLogs] = useState<SetLogWithSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const preferredWeightUnit = profile?.preferred_weight_unit || 'kg';\n\n  const fetchHistory = useCallback(async () => {\n    if (!session || !exerciseId || !sessionUserId) { // Use sessionUserId\n      setLoading(false);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    try {\n      const { data, error } = await supabase\n        .from('set_logs')\n        .select(`\n          id, weight_kg, reps, reps_l, reps_r, time_seconds, created_at, exercise_id, is_pb, session_id,\n          workout_sessions (\n            session_date\n          )\n        `)\n        .eq('exercise_id', exerciseId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      const mappedData: SetLogWithSession[] = (data as any[]).map(log => ({\n        ...log,\n        workout_sessions: (log.workout_sessions && Array.isArray(log.workout_sessions) && log.workout_sessions.length > 0) \n          ? log.workout_sessions[0] \n          : log.workout_sessions,\n      }));\n\n      setHistoryLogs(mappedData || []);\n    } catch (err: any) {\n      console.error(\"Failed to fetch exercise history:\", err);\n      setError(\"Failed to load exercise history.\");\n      toast.error(\"Failed to load exercise history.\"); // Changed to toast.error\n    } finally {\n      setLoading(false);\n    }\n  }, [session, exerciseId, sessionUserId, supabase]); // Added sessionUserId to dependencies\n\n  useEffect(() => {\n    if (exerciseId) {\n        fetchHistory();\n    }\n  }, [exerciseId, fetchHistory]);\n\n  return {\n    historyLogs,\n    loading: loading || loadingProfile,\n    error,\n    preferredWeightUnit,\n    refresh: fetchHistory,\n  };\n};","size_bytes":2775},"apps/web/src/hooks/data/usePersonalRecordsData.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { toast } from 'sonner';\nimport { formatTime } from '@/lib/unit-conversions';\n\ninterface PersonalRecord {\n  exerciseName: string;\n  exerciseType: string;\n  value: number;\n  date: string;\n  unit: string;\n}\n\nexport const usePersonalRecordsData = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [personalRecords, setPersonalRecords] = useState<PersonalRecord[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPersonalRecords = useCallback(async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setIsLoading(false);\n      return;\n    }\n    \n    setIsLoading(true);\n    setError(null);\n    try {\n      const { data: prs, error: rpcError } = await supabase.rpc('get_user_personal_records', {\n        p_user_id: memoizedSessionUserId, // Use memoized ID\n        p_limit: 5 // Fetch top 5 PRs\n      });\n\n      if (rpcError) throw rpcError;\n\n      const formattedRecords: PersonalRecord[] = (prs || []).map((pr: any) => ({\n        exerciseName: pr.exercise_name,\n        exerciseType: pr.exercise_type,\n        value: pr.best_value || 0,\n        date: new Date(pr.last_achieved_date).toLocaleDateString(),\n        unit: pr.unit || '',\n      }));\n      \n      setPersonalRecords(formattedRecords);\n    } catch (err: any) {\n      const errorMessage = err.message || \"Failed to load personal bests.\";\n      console.error(\"Failed to load personal bests:\", err);\n      setError(errorMessage);\n      toast.error(errorMessage); // Changed to toast.error\n    } finally {\n      setIsLoading(false);\n    }\n  }, [memoizedSessionUserId, supabase]); // Depend on memoized ID\n\n  useEffect(() => {\n    fetchPersonalRecords();\n  }, [fetchPersonalRecords]);\n\n  return {\n    personalRecords,\n    isLoading,\n    error,\n    refresh: fetchPersonalRecords,\n  };\n};","size_bytes":2099},"apps/web/src/hooks/data/useUserProfile.ts":{"content":"\"use client\";\n\nimport { useCallback, useMemo } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Profile } from '@/types/supabase';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\nimport { LocalProfile } from '@/lib/db';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n/**\n * A centralized hook to fetch and manage the current user's profile data.\n * It uses the caching layer to provide instant loads and offline support.\n */\nexport const useUserProfile = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const { \n    data: cachedProfileArray, // Renamed to emphasize it's an array\n    loading: isLoading, \n    error, \n    refresh \n  } = useCacheAndRevalidate<LocalProfile>({\n    cacheTable: 'profiles_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data, error } = await client.from('profiles').select('*').eq('id', memoizedSessionUserId); // Use memoized ID\n      return { data: data || [], error };\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'user_profile_data_hook',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  // Use useMemo to ensure the 'profile' object itself is referentially stable\n  const profile = useMemo(() => cachedProfileArray?.[0] || null, [cachedProfileArray]);\n\n  return { profile, isLoading, error, refresh };\n};","size_bytes":1575},"apps/web/src/hooks/data/useWeeklyVolumeData.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\nimport { db, LocalWorkoutSession, LocalSetLog, LocalExerciseDefinition } from '@/lib/db';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n// Helper function to get the start of the week (Monday)\nconst getStartOfWeek = (date: Date): Date => {\n  const d = new Date(date);\n  const day = d.getDay(); // Sunday - 0, Monday - 1, ..., Saturday - 6\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust to Monday\n  d.setDate(diff);\n  d.setHours(0, 0, 0, 0);\n  d.setMinutes(0, 0, 0);\n  d.setSeconds(0);\n  d.setMilliseconds(0);\n  return d;\n};\n\n// Define a type for SetLog with joined ExerciseDefinition and WorkoutSession\ntype SetLogWithJoins = Pick<LocalSetLog, 'id' | 'weight_kg' | 'reps'> & {\n  exercise_definitions: Pick<LocalExerciseDefinition, 'type'> | null;\n  workout_sessions: Pick<LocalWorkoutSession, 'session_date'> | null;\n};\n\ninterface ChartData {\n  date: string;\n  volume: number;\n}\n\nexport const useWeeklyVolumeData = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch necessary data using caching hooks\n  const { data: cachedSessions, loading: loadingSessions, error: sessionsError } = useCacheAndRevalidate<LocalWorkoutSession>({\n    cacheTable: 'workout_sessions',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('workout_sessions').select('*').eq('user_id', memoizedSessionUserId).not('completed_at', 'is', null); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'volume_chart_sessions',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedSetLogs, loading: loadingSetLogs, error: setLogsError } = useCacheAndRevalidate<LocalSetLog>({\n    cacheTable: 'set_logs',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data: sessionIds, error: sessionIdsError } = await client.from('workout_sessions').select('id').eq('user_id', memoizedSessionUserId); // Use memoized ID\n      if (sessionIdsError) return { data: [], error: sessionIdsError };\n      if (!sessionIds || sessionIds.length === 0) return { data: [], error: null };\n      \n      return client.from('set_logs').select('*').in('session_id', sessionIds.map(s => s.id));\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'volume_chart_set_logs',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedExerciseDefs, loading: loadingExerciseDefs, error: exerciseDefsError } = useCacheAndRevalidate<LocalExerciseDefinition>({\n    cacheTable: 'exercise_definitions_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      return client.from('exercise_definitions').select('*');\n    }, []),\n    queryKey: 'all_exercises_for_volume_chart',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  useEffect(() => {\n    const overallLoading = loadingSessions || loadingSetLogs || loadingExerciseDefs;\n    setIsLoading(overallLoading);\n\n    const anyError = sessionsError || setLogsError || exerciseDefsError;\n    if (anyError) {\n      setError(anyError);\n      setChartData([]);\n      return;\n    }\n\n    if (!overallLoading && cachedSessions && cachedSetLogs && cachedExerciseDefs) {\n      const exerciseDefMap = new Map(cachedExerciseDefs.map(def => [def.id, def]));\n      const sessionDateMap = new Map(cachedSessions.map(s => [s.id, s.session_date]));\n      \n      const weeklyVolumeMap = new Map<string, number>();\n\n      (cachedSetLogs || []).forEach(log => {\n        const exerciseDef = log.exercise_id ? exerciseDefMap.get(log.exercise_id) : null;\n        const sessionDate = log.session_id ? sessionDateMap.get(log.session_id) : null;\n\n        if (exerciseDef?.type === 'weight' && log.weight_kg && log.reps && sessionDate) {\n          const date = new Date(sessionDate);\n          const startOfWeek = getStartOfWeek(date);\n          const weekKey = startOfWeek.toISOString().split('T')[0];\n          const volume = (log.weight_kg || 0) * (log.reps || 0);\n          weeklyVolumeMap.set(weekKey, (weeklyVolumeMap.get(weekKey) || 0) + volume);\n        }\n      });\n\n      const sortedChartData = Array.from(weeklyVolumeMap.entries())\n        .map(([date, volume]) => ({ date, volume }))\n        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n      setChartData(sortedChartData);\n    }\n  }, [\n    cachedSessions, loadingSessions, sessionsError,\n    cachedSetLogs, loadingSetLogs, setLogsError,\n    cachedExerciseDefs, loadingExerciseDefs, exerciseDefsError\n  ]);\n\n  return { chartData, isLoading, error };\n};","size_bytes":5292},"apps/web/src/hooks/data/useWorkoutHistory.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables, WorkoutSessionWithAggregatedDetails } from '@/types/supabase';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\nimport { db, LocalWorkoutSession, LocalSetLog, LocalExerciseDefinition } from '@/lib/db';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner'; // Import toast\n\n/**\n * A centralized hook to fetch and process the user's entire workout history.\n * It encapsulates all logic for fetching sessions, set logs, and exercise definitions,\n * aggregates the data, and provides a clean interface for UI components.\n * It handles its own loading and error states according to our new architectural principles.\n */\nexport const useWorkoutHistory = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [sessions, setSessions] = useState<WorkoutSessionWithAggregatedDetails[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // 1. Fetch all necessary data sources using our caching hook\n  const { data: cachedSessions, loading: loadingSessions, error: sessionsError, refresh: refreshSessions } = useCacheAndRevalidate<LocalWorkoutSession>({\n    cacheTable: 'workout_sessions',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('workout_sessions').select('*').eq('user_id', memoizedSessionUserId).not('completed_at', 'is', null).order('session_date', { ascending: false }); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'workout_history_sessions',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedSetLogs, loading: loadingSetLogs, error: setLogsError, refresh: refreshSetLogs } = useCacheAndRevalidate<LocalSetLog>({\n    cacheTable: 'set_logs',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data: sessionIds, error: sessionIdsError } = await client.from('workout_sessions').select('id').eq('user_id', memoizedSessionUserId); // Use memoized ID\n      if (sessionIdsError) return { data: [], error: sessionIdsError };\n      if (!sessionIds || sessionIds.length === 0) return { data: [], error: null };\n      \n      return client.from('set_logs').select('*').in('session_id', sessionIds.map(s => s.id));\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'workout_history_set_logs',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedExerciseDefs, loading: loadingExerciseDefs, error: exerciseDefsError, refresh: refreshExerciseDefs } = useCacheAndRevalidate<LocalExerciseDefinition>({\n    cacheTable: 'exercise_definitions_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      return client.from('exercise_definitions').select('*');\n    }, []),\n    queryKey: 'all_exercises_for_history',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  // 2. Process and aggregate the data once all sources are loaded\n  useEffect(() => {\n    const overallLoading = loadingSessions || loadingSetLogs || loadingExerciseDefs;\n    setIsLoading(overallLoading);\n\n    const anyError = sessionsError || setLogsError || exerciseDefsError;\n    if (anyError) {\n      setError(anyError);\n      setSessions([]);\n      console.error(\"Error loading workout history data:\", anyError); // Added console.error\n      toast.error(\"Failed to load workout history.\"); // Added toast.error\n      return;\n    }\n\n    if (!overallLoading && cachedSessions) {\n      const exerciseDefMap = new Map((cachedExerciseDefs || []).map(def => [def.id, def]));\n\n      const sessionsWithDetails: WorkoutSessionWithAggregatedDetails[] = (cachedSessions || []).map(sessionItem => {\n        let exerciseCount = new Set<string>();\n        let totalVolume = 0;\n        let hasPRs = false;\n\n        (cachedSetLogs || [])\n          .filter(log => log.session_id === sessionItem.id)\n          .forEach(log => {\n            if (log.exercise_id) {\n              exerciseCount.add(log.exercise_id);\n              const exerciseDef = exerciseDefMap.get(log.exercise_id);\n              if (exerciseDef?.type === 'weight' && log.weight_kg && log.reps) {\n                totalVolume += (log.weight_kg * log.reps);\n              }\n            }\n            if (log.is_pb) {\n              hasPRs = true;\n            }\n          });\n\n        return {\n          ...sessionItem,\n          exercise_count: exerciseCount.size,\n          total_volume_kg: totalVolume,\n          has_prs: hasPRs,\n        };\n      });\n      \n      setSessions(sessionsWithDetails);\n    }\n  }, [\n    cachedSessions, loadingSessions, sessionsError,\n    cachedSetLogs, loadingSetLogs, setLogsError,\n    cachedExerciseDefs, loadingExerciseDefs, exerciseDefsError\n  ]);\n\n  // 3. Expose a single refresh function to re-fetch all data for this hook\n  const refresh = useCallback(async () => {\n    await Promise.all([\n      refreshSessions(),\n      refreshSetLogs(),\n      refreshExerciseDefs(),\n    ]);\n  }, [refreshSessions, refreshSetLogs, refreshExerciseDefs]);\n\n  return {\n    sessions,\n    isLoading,\n    error,\n    refresh,\n  };\n};","size_bytes":5578},"apps/web/src/hooks/data/useWorkoutPerformanceData.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSession } from '@/components/session-context-provider';\nimport { Tables } from '@/types/supabase';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\nimport { db, LocalWorkoutSession, LocalSetLog, LocalExerciseDefinition } from '@/lib/db';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n// Helper to get the start of the week (Monday)\nconst getStartOfWeek = (date: Date): Date => {\n  const d = new Date(date);\n  const day = d.getDay(); // Sunday - 0, Monday - 1, ..., Saturday - 6\n  const diff = d.getDate() - day + (day === 0 ? -6 : 1); // Adjust to Monday\n  d.setDate(diff);\n  d.setHours(0, 0, 0, 0);\n  d.setMinutes(0, 0, 0);\n  d.setSeconds(0);\n  d.setMilliseconds(0);\n  return d;\n};\n\n// Muscle group categorization\nconst UPPER_BODY_MUSCLES = new Set([\n  'Pectorals', 'Deltoids', 'Lats', 'Traps', 'Biceps', 'Triceps', 'Forearms'\n]);\nconst LOWER_BODY_MUSCLES = new Set([\n  'Quadriceps', 'Hamstrings', 'Glutes', 'Calves', 'Abdominals', 'Core'\n]);\n\nconst categorizeMuscle = (muscle: string): 'upper' | 'lower' | 'other' => {\n  const cleanedMuscle = muscle.trim();\n  if (UPPER_BODY_MUSCLES.has(cleanedMuscle)) return 'upper';\n  if (LOWER_BODY_MUSCLES.has(cleanedMuscle)) return 'lower';\n  return 'other';\n};\n\nexport const useWorkoutPerformanceData = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const [weeklyVolumeData, setWeeklyVolumeData] = useState<{ upper: any[]; lower: any[] }>({ upper: [], lower: [] });\n  const [weeklyMuscleBreakdown, setWeeklyMuscleBreakdown] = useState<{ upper: any[]; lower: any[] }>({ upper: [], lower: [] });\n  const [recentSessions, setRecentSessions] = useState<Tables<'workout_sessions'>[]>([]);\n  const [totalUpperVolume, setTotalUpperVolume] = useState(0);\n  const [totalLowerVolume, setTotalLowerVolume] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch all necessary data sources using our caching hook\n  const { data: cachedSessions, loading: loadingSessions, error: sessionsError, refresh: refreshSessions } = useCacheAndRevalidate<LocalWorkoutSession>({\n    cacheTable: 'workout_sessions',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('workout_sessions').select('*').eq('user_id', memoizedSessionUserId).not('completed_at', 'is', null).order('session_date', { ascending: false }); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'workout_performance_sessions',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedSetLogs, loading: loadingSetLogs, error: setLogsError, refresh: refreshSetLogs } = useCacheAndRevalidate<LocalSetLog>({\n    cacheTable: 'set_logs',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data: sessionIds, error: sessionIdsError } = await client.from('workout_sessions').select('id').eq('user_id', memoizedSessionUserId); // Use memoized ID\n      if (sessionIdsError) return { data: [], error: sessionIdsError };\n      if (!sessionIds || sessionIds.length === 0) return { data: [], error: null };\n      \n      return client.from('set_logs').select('*').in('session_id', sessionIds.map(s => s.id));\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'workout_performance_set_logs',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedExerciseDefs, loading: loadingExerciseDefs, error: exerciseDefsError, refresh: refreshExerciseDefs } = useCacheAndRevalidate<LocalExerciseDefinition>({\n    cacheTable: 'exercise_definitions_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      return client.from('exercise_definitions').select('*');\n    }, []),\n    queryKey: 'all_exercises_for_performance',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  // Process and aggregate the data once all sources are loaded\n  useEffect(() => {\n    const overallLoading = loadingSessions || loadingSetLogs || loadingExerciseDefs;\n    setIsLoading(overallLoading);\n\n    const anyError = sessionsError || setLogsError || exerciseDefsError;\n    if (anyError) {\n      setError(anyError);\n      return;\n    }\n\n    if (!overallLoading && cachedSessions && cachedSetLogs && cachedExerciseDefs) {\n      const exerciseDefMap = new Map(cachedExerciseDefs.map(def => [def.id, def]));\n      \n      setRecentSessions(cachedSessions.slice(0, 5));\n\n      const today = new Date();\n      const currentWeekStart = getStartOfWeek(today);\n      \n      const upperVolumeMap = new Map<string, number>();\n      const lowerVolumeMap = new Map<string, number>();\n      const upperMuscleSetsMap = new Map<string, number>();\n      const lowerMuscleSetsMap = new Map<string, number>();\n\n      let currentUpperVolume = 0;\n      let currentLowerVolume = 0;\n\n      (cachedSetLogs || []).forEach(log => {\n        const sessionForLog = cachedSessions.find(s => s.id === log.session_id);\n        const exerciseDef = log.exercise_id ? exerciseDefMap.get(log.exercise_id) : null;\n\n        if (exerciseDef?.type === 'weight' && log.weight_kg && log.reps && sessionForLog?.session_date) {\n          const date = new Date(sessionForLog.session_date);\n          const weekStart = getStartOfWeek(date);\n          const weekKey = weekStart.toISOString().split('T')[0];\n          const volume = (log.weight_kg || 0) * (log.reps || 0);\n\n          const mainMuscles = (exerciseDef.main_muscle || '').split(',').map(m => m.trim());\n          let isUpper = false;\n          let isLower = false;\n\n          mainMuscles.forEach(muscle => {\n            const category = categorizeMuscle(muscle);\n            if (category === 'upper') isUpper = true;\n            if (category === 'lower') isLower = true;\n          });\n\n          if (isUpper) {\n            upperVolumeMap.set(weekKey, (upperVolumeMap.get(weekKey) || 0) + volume);\n            if (weekStart.getTime() === currentWeekStart.getTime()) {\n              currentUpperVolume += volume;\n              mainMuscles.forEach(muscle => {\n                if (categorizeMuscle(muscle) === 'upper') {\n                  upperMuscleSetsMap.set(muscle, (upperMuscleSetsMap.get(muscle) || 0) + 1);\n                }\n              });\n            }\n          }\n          if (isLower) {\n            lowerVolumeMap.set(weekKey, (lowerVolumeMap.get(weekKey) || 0) + volume);\n            if (weekStart.getTime() === currentWeekStart.getTime()) {\n              currentLowerVolume += volume;\n              mainMuscles.forEach(muscle => {\n                if (categorizeMuscle(muscle) === 'lower') {\n                  lowerMuscleSetsMap.set(muscle, (lowerMuscleSetsMap.get(muscle) || 0) + 1);\n                }\n              });\n            }\n          }\n        }\n      });\n\n      setTotalUpperVolume(currentUpperVolume);\n      setTotalLowerVolume(currentLowerVolume);\n\n      const volumeChartDataUpper = [];\n      const volumeChartDataLower = [];\n      for (let i = 3; i >= 0; i--) {\n        const weekDate = new Date(currentWeekStart);\n        weekDate.setDate(currentWeekStart.getDate() - i * 7);\n        const weekKey = weekDate.toISOString().split('T')[0];\n        volumeChartDataUpper.push({\n          date: weekKey,\n          volume: upperVolumeMap.get(weekKey) || 0,\n          isCurrentWeek: weekDate.getTime() === currentWeekStart.getTime(),\n        });\n        volumeChartDataLower.push({\n          date: weekKey,\n          volume: lowerVolumeMap.get(weekKey) || 0,\n          isCurrentWeek: weekDate.getTime() === currentWeekStart.getTime(),\n        });\n      }\n\n      setWeeklyVolumeData({ upper: volumeChartDataUpper, lower: volumeChartDataLower });\n      setWeeklyMuscleBreakdown({\n        upper: Array.from(upperMuscleSetsMap.entries()).map(([muscle, sets]) => ({ muscle, sets })).sort((a, b) => b.sets - a.sets),\n        lower: Array.from(lowerMuscleSetsMap.entries()).map(([muscle, sets]) => ({ muscle, sets })).sort((a, b) => b.sets - a.sets),\n      });\n    }\n  }, [\n    cachedSessions, loadingSessions, sessionsError,\n    cachedSetLogs, loadingSetLogs, setLogsError,\n    cachedExerciseDefs, loadingExerciseDefs, exerciseDefsError\n  ]);\n\n  // 3. Expose a single refresh function to re-fetch all data for this hook\n  const refresh = useCallback(async () => {\n    await Promise.all([\n      refreshSessions(),\n      refreshSetLogs(),\n      refreshExerciseDefs(),\n    ]);\n  }, [refreshSessions, refreshSetLogs, refreshExerciseDefs]);\n\n  return {\n    weeklyVolumeData,\n    weeklyMuscleBreakdown,\n    recentSessions,\n    totalUpperVolume,\n    totalLowerVolume,\n    loading: isLoading,\n    error,\n    refresh,\n  };\n};","size_bytes":9025},"apps/web/src/hooks/data/useWorkoutPlans.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner';\nimport { Tables, WorkoutExercise, WorkoutWithLastCompleted, GroupedTPath } from '@/types/supabase';\nimport { useCacheAndRevalidate } from '@/hooks/use-cache-and-revalidate';\nimport { db, LocalExerciseDefinition, LocalTPath, LocalTPathExercise } from '@/lib/db';\nimport { useSession } from '@/components/session-context-provider';\nimport { useUserProfile } from './useUserProfile';\n\ntype TPath = Tables<'t_paths'>;\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\nconst ULUL_ORDER = ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\nconst PPL_ORDER = ['Push', 'Pull', 'Legs'];\n\n/**\n * A centralized hook to fetch and process all user workout plans (T-Paths),\n * their child workouts, and the exercises within them.\n */\nexport const useWorkoutPlans = () => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  const { profile, isLoading: loadingProfile, error: profileError } = useUserProfile();\n\n  const [groupedTPaths, setGroupedTPaths] = useState<GroupedTPath[]>([]);\n  const [workoutExercisesCache, setWorkoutExercisesCache] = useState<Record<string, WorkoutExercise[]>>({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const { data: cachedExercises, loading: loadingExercises, error: exercisesError, refresh: refreshExercises } = useCacheAndRevalidate<LocalExerciseDefinition>({\n    cacheTable: 'exercise_definitions_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => client.from('exercise_definitions').select('*').order('name', { ascending: true }), []),\n    queryKey: 'all_exercises_for_plans',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedTPaths, loading: loadingTPaths, error: tPathsError, refresh: refreshTPaths } = useCacheAndRevalidate<LocalTPath>({\n    cacheTable: 't_paths_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => client.from('t_paths').select('*'), []),\n    queryKey: 'all_t_paths_for_plans',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedTPathExercises, loading: loadingTPathExercises, error: tPathExercisesError, refresh: refreshTPathExercises } = useCacheAndRevalidate<LocalTPathExercise>({\n    cacheTable: 't_path_exercises_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('t_path_exercises').select('*');\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'all_t_path_exercises_for_plans',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const refresh = useCallback(async () => {\n    await Promise.all([\n      refreshExercises(),\n      refreshTPaths(),\n      refreshTPathExercises(),\n    ]);\n  }, [refreshExercises, refreshTPaths, refreshTPathExercises]);\n\n  useEffect(() => {\n    const overallLoading = loadingExercises || loadingTPaths || loadingProfile || loadingTPathExercises;\n    setIsLoading(overallLoading);\n\n    const anyError = exercisesError || tPathsError || profileError || tPathExercisesError;\n    if (anyError) {\n      setError(anyError);\n      setIsLoading(false);\n      return;\n    }\n\n    if (!overallLoading && memoizedSessionUserId) { // Use memoizedSessionUserId\n      const processData = async () => {\n        try {\n          const exerciseDefMap = new Map<string, ExerciseDefinition>();\n          (cachedExercises || []).forEach(def => exerciseDefMap.set(def.id, def as ExerciseDefinition));\n\n          const newWorkoutExercisesCache: Record<string, WorkoutExercise[]> = {};\n          const allChildWorkouts = (cachedTPaths || []).filter(tp => tp.user_id === memoizedSessionUserId && tp.parent_t_path_id); // Use memoizedSessionUserId\n\n          for (const workout of allChildWorkouts) {\n            const exercisesForWorkout = (cachedTPathExercises || [])\n              .filter(tpe => tpe.template_id === workout.id)\n              .sort((a, b) => a.order_index - b.order_index)\n              .map(tpe => {\n                const exerciseDef = exerciseDefMap.get(tpe.exercise_id);\n                if (!exerciseDef) return null;\n                return { ...exerciseDef, is_bonus_exercise: tpe.is_bonus_exercise || false };\n              })\n              .filter(Boolean) as WorkoutExercise[];\n            newWorkoutExercisesCache[workout.id] = exercisesForWorkout;\n          }\n          setWorkoutExercisesCache(newWorkoutExercisesCache);\n\n          const userMainTPaths = (cachedTPaths || []).filter(tp => tp.user_id === memoizedSessionUserId && !tp.parent_t_path_id); // Use memoizedSessionUserId\n          \n          const newGroupedTPaths: GroupedTPath[] = await Promise.all(\n            userMainTPaths.map(async (mainTPath) => {\n              let childWorkouts = allChildWorkouts.filter(tp => tp.parent_t_path_id === mainTPath.id);\n              \n              const enrichedChildWorkouts = await Promise.all(\n                childWorkouts.map(async (workout) => {\n                  const { data: lastSessionDate, error: rpcError } = await supabase.rpc('get_last_workout_date_for_t_path', { p_t_path_id: workout.id });\n                  if (rpcError) console.error(`Error fetching last completed date for workout ${workout.id}:`, rpcError);\n                  return { ...workout, last_completed_at: lastSessionDate?.[0]?.last_completed_at || null };\n                })\n              );\n\n              const tPathSettings = mainTPath.settings as { tPathType?: string };\n              if (tPathSettings?.tPathType === 'ppl') {\n                enrichedChildWorkouts.sort((a, b) => PPL_ORDER.indexOf(a.template_name) - PPL_ORDER.indexOf(b.template_name));\n              } else if (tPathSettings?.tPathType === 'ulul') {\n                enrichedChildWorkouts.sort((a, b) => ULUL_ORDER.indexOf(a.template_name) - ULUL_ORDER.indexOf(b.template_name));\n              }\n\n              return { mainTPath, childWorkouts: enrichedChildWorkouts };\n            })\n          );\n          setGroupedTPaths(newGroupedTPaths);\n          setError(null);\n        } catch (err: any) {\n          setError(err.message || \"Failed to process workout plan data.\");\n        }\n      };\n      processData();\n    }\n  }, [\n    memoizedSessionUserId, supabase, // Depend on memoized ID\n    cachedExercises, loadingExercises, exercisesError,\n    cachedTPaths, loadingTPaths, tPathsError,\n    cachedTPathExercises, loadingTPathExercises, tPathExercisesError,\n    profile, loadingProfile, profileError\n  ]);\n\n  return {\n    groupedTPaths,\n    workoutExercisesCache,\n    isLoading,\n    error,\n    refresh,\n  };\n};","size_bytes":6914},"apps/web/src/hooks/use-cache-and-revalidate.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { db } from '@/lib/db';\nimport { SupabaseClient, Session } from '@supabase/supabase-js'; // Import Session\nimport { toast } from 'sonner';\nimport { LocalExerciseDefinition, LocalTPath, LocalProfile, LocalTPathExercise, LocalUserAchievement, LocalGym, LocalActivityLog, LocalGymExercise } from '@/lib/db'; // Import specific local types\n\ntype CacheTableName = 'exercise_definitions_cache' | 't_paths_cache' | 'profiles_cache' | 't_path_exercises_cache' | 'user_achievements_cache' | 'gyms_cache' | 'workout_sessions' | 'set_logs' | 'activity_logs' | 'gym_exercises_cache';\n\n// Updated generic constraint to be more flexible for tables without a single 'id'\ntype CacheItem = { \n  id?: string | null; \n  user_id?: string | null; \n  template_id?: string | null; \n  exercise_id?: string | null; \n  gym_id?: string | null; \n  created_at?: string | null; \n};\n\ninterface UseCacheAndRevalidateProps<T extends CacheItem> {\n  cacheTable: CacheTableName;\n  supabaseQuery: (supabase: SupabaseClient) => Promise<{ data: T[] | null; error: any }>;\n  queryKey: string;\n  supabase: SupabaseClient;\n  sessionUserId: string | null; // This prop will now receive memoizedSessionUserId\n}\n\n// Helper to get a stable key for map lookups, handling composite keys\nconst getItemKey = (item: any, primaryKey: string | string[]): string | undefined => {\n  if (Array.isArray(primaryKey)) {\n    const keyParts = primaryKey.map(key => item[key]);\n    // Ensure all parts of a composite key are present\n    if (keyParts.some(part => part === undefined || part === null)) {\n      return undefined;\n    }\n    return JSON.stringify(keyParts);\n  }\n  const key = item[primaryKey];\n  // Ensure single key is present and convert to string for map key consistency\n  return key === undefined || key === null ? undefined : String(key);\n};\n\nexport function useCacheAndRevalidate<T extends CacheItem>( // Updated generic constraint\n  { cacheTable, supabaseQuery, queryKey, supabase, sessionUserId }: UseCacheAndRevalidateProps<T>\n) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const isRevalidatingRef = useRef(false); // Use ref for isRevalidating\n\n  const data = useLiveQuery(\n    async () => {\n      const table = db[cacheTable] as any;\n      if (!sessionUserId) return [];\n\n      if (cacheTable === 'set_logs') {\n        const userSessionIds = await db.workout_sessions\n          .where({ user_id: sessionUserId })\n          .primaryKeys();\n        return userSessionIds.length > 0 ? table.where('session_id').anyOf(userSessionIds).toArray() : [];\n      }\n\n      // More specific queries for better reactivity\n      if (cacheTable === 'profiles_cache') {\n        return table.where({ id: sessionUserId }).toArray();\n      }\n      if (['workout_sessions', 'gyms_cache', 'activity_logs', 'user_achievements_cache'].includes(cacheTable)) {\n        if (cacheTable === 'workout_sessions') {\n          return table.where({ user_id: sessionUserId }).reverse().sortBy('session_date');\n        }\n        return table.where({ user_id: sessionUserId }).toArray();\n      }\n      if (['exercise_definitions_cache', 't_paths_cache'].includes(cacheTable)) {\n        // Use a filter for more complex OR logic. This is safer than chained where clauses.\n        return table.filter((item: T) => item.user_id === sessionUserId || item.user_id === null).toArray();\n      }\n      \n      // Fallback for tables without a simple user_id index (e.g., t_path_exercises, gym_exercises_cache)\n      return table.toArray();\n    },\n    [cacheTable, sessionUserId],\n    []\n  );\n\n  const fetchDataAndRevalidate = useCallback(async () => {\n    if (isRevalidatingRef.current) {\n      return;\n    }\n\n    if (sessionUserId === null || sessionUserId === undefined) {\n      setLoading(false);\n      return;\n    }\n\n    isRevalidatingRef.current = true;\n    setError(null);\n    setLoading(true);\n\n    try {\n      const { data: remoteData, error: remoteError } = await supabaseQuery(supabase);\n      if (remoteError) throw remoteError;\n\n      if (remoteData) {\n        const table = db[cacheTable] as any;\n        const primaryKey = table.schema.primKey.keyPath;\n\n        const localData = await table.toArray();\n        \n        // Create maps using the safe key getter, filtering out items with invalid keys\n        const localDataMap = new Map<string, T>();\n        for (const item of localData) {\n          const key = getItemKey(item, primaryKey);\n          if (key !== undefined) {\n            localDataMap.set(key, item);\n          }\n        }\n\n        const remoteDataMap = new Map<string, T>();\n        for (const item of remoteData) {\n          const key = getItemKey(item, primaryKey);\n          if (key !== undefined) {\n            remoteDataMap.set(key, item);\n          }\n        }\n\n        const itemsToDelete: any[] = [];\n        const itemsToPut: T[] = [];\n\n        // Check sync queue before deleting\n        const syncQueueItems = await db.sync_queue.where('table').equals(cacheTable).toArray();\n        const itemsInSyncQueue = new Set<string>();\n        for (const item of syncQueueItems) {\n            const key = getItemKey(item.payload, primaryKey);\n            if (key !== undefined) {\n                itemsInSyncQueue.add(key);\n            }\n        }\n\n        // Identify items to delete by reconstructing the original key\n        for (const [localKey, localItem] of localDataMap.entries()) {\n          if (!remoteDataMap.has(localKey) && !itemsInSyncQueue.has(localKey)) {\n            const primaryKeyValue = Array.isArray(primaryKey)\n              ? primaryKey.map(pkPart => (localItem as any)[pkPart])\n              : (localItem as any)[primaryKey];\n            \n            // Final check to ensure we don't push an invalid key\n            if (primaryKeyValue !== undefined && primaryKeyValue !== null) {\n              if (!Array.isArray(primaryKeyValue) || !primaryKeyValue.some(p => p === undefined || p === null)) {\n                itemsToDelete.push(primaryKeyValue);\n              }\n            }\n          }\n        }\n\n        // Identify items to add or update\n        for (const [remoteKey, remoteItem] of remoteDataMap.entries()) {\n          const localItem = localDataMap.get(remoteKey);\n          if (!localItem || JSON.stringify(localItem) !== JSON.stringify(remoteItem)) {\n            itemsToPut.push(remoteItem);\n          }\n        }\n\n        if (itemsToDelete.length > 0 || itemsToPut.length > 0) {\n          await db.transaction('rw', table, async () => {\n            if (itemsToDelete.length > 0) {\n              await table.bulkDelete(itemsToDelete);\n            }\n            if (itemsToPut.length > 0) {\n              await table.bulkPut(itemsToPut);\n            }\n          });\n        }\n      }\n    } catch (err: any) {\n      const errorMessage = (err && typeof err === 'object' && 'message' in err && err.message) \n                           ? err.message \n                           : (JSON.stringify(err) !== '{}' ? JSON.stringify(err) : `An unknown error occurred during ${queryKey} revalidation.`);\n      setError(errorMessage);\n      toast.error(`Failed to refresh data for ${queryKey}: ${errorMessage}`);\n    } finally {\n      setLoading(false);\n      isRevalidatingRef.current = false;\n    }\n  }, [supabase, supabaseQuery, queryKey, cacheTable, sessionUserId]);\n\n  useEffect(() => {\n    fetchDataAndRevalidate();\n  }, [fetchDataAndRevalidate]);\n\n  const refresh = useCallback(() => {\n    fetchDataAndRevalidate();\n  }, [fetchDataAndRevalidate]);\n\n  return { data: data as T[] | null, loading: loading || data === undefined, error, refresh };\n}","size_bytes":7728},"apps/web/src/hooks/use-edit-workout-exercises.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useSession } from \"@/components/session-context-provider\";\nimport { Tables } from \"@/types/supabase\";\nimport { toast } from \"sonner\";\nimport { LocalExerciseDefinition } from '@/lib/db'; // Import LocalExerciseDefinition\nimport { useWorkoutDataFetcher } from \"./use-workout-data-fetcher\"; // NEW: Import useWorkoutDataFetcher\nimport { PostgrestResponse } from '@supabase/supabase-js'; // Import PostgrestResponse\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\nexport interface WorkoutExerciseWithDetails extends ExerciseDefinition {\n  id: string; // Explicitly define id\n  name: string; // Explicitly define name\n  order_index: number;\n  is_bonus_exercise: boolean;\n  t_path_exercise_id: string; // ID from t_path_exercises table\n}\n\ninterface UseEditWorkoutExercisesProps {\n  workoutId: string;\n  onSaveSuccess: () => void; // Callback to refresh parent list\n  open: boolean; // To trigger data fetching when dialog opens\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const useEditWorkoutExercises = ({ workoutId, onSaveSuccess, open, setTempStatusMessage }: UseEditWorkoutExercisesProps) => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n  // NEW: Consume data from useWorkoutDataFetcher\n  const {\n    allAvailableExercises: fetchedAllAvailableExercises,\n    userGyms: fetchedUserGyms,\n    exerciseGymsMap: fetchedExerciseGymsMap,\n    availableMuscleGroups: fetchedAvailableMuscleGroups,\n    refreshAllData, // To trigger a full refresh if needed\n  } = useWorkoutDataFetcher();\n\n\n  const [exercises, setExercises] = useState<WorkoutExerciseWithDetails[]>([]);\n  const [selectedExerciseToAdd, setSelectedExerciseToAdd] = useState<string>(\"\");\n  const [loading, setLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [addExerciseFilter, setAddExerciseFilter] = useState<'my-exercises' | 'global-library'>('my-exercises');\n  const [selectedMuscleFilter, setSelectedMuscleFilter] = useState<string>('all');\n  const [selectedGymFilter, setSelectedGymFilter] = useState<string>('all');\n\n  const [showConfirmRemoveDialog, setShowConfirmRemoveDialog] = useState(false);\n  const [exerciseToRemove, setExerciseToRemove] = useState<{ exerciseId: string; tPathExerciseId: string; name: string } | null>(null);\n\n  const [showAddAsBonusDialog, setShowAddAsBonusDialog] = useState(false);\n  const [exerciseToAddDetails, setExerciseToAddDetails] = useState<ExerciseDefinition | null>(null);\n\n  const [showConfirmResetDialog, setShowConfirmResetDialog] = useState(false);\n\n  const fetchWorkoutData = useCallback(async () => {\n    if (!memoizedSessionUserId || !workoutId) return; // Use memoized ID\n    setLoading(true);\n    try {\n      // Fetch only t_path_exercises for this specific workout, selecting all required columns\n      const { data: tPathExercisesLinks, error: tpeError } = await supabase.from('t_path_exercises').select('id, exercise_id, order_index, is_bonus_exercise, created_at, template_id').eq('template_id', workoutId).order('order_index', { ascending: true });\n      if (tpeError) throw tpeError;\n\n      const exerciseDefMap = new Map<string, ExerciseDefinition>();\n      fetchedAllAvailableExercises.forEach(def => exerciseDefMap.set(def.id as string, def as ExerciseDefinition));\n      \n      const fetchedExercises = (tPathExercisesLinks || []).map((link: Tables<'t_path_exercises'>) => { // Explicitly type link\n        const exerciseDef = exerciseDefMap.get(link.exercise_id);\n        if (!exerciseDef) return null;\n        return {\n          ...exerciseDef,\n          id: exerciseDef.id!, // Non-null assertion\n          name: exerciseDef.name,\n          order_index: link.order_index,\n          is_bonus_exercise: link.is_bonus_exercise || false,\n          t_path_exercise_id: link.id,\n        };\n      }).filter(Boolean) as WorkoutExerciseWithDetails[];\n\n      setExercises(fetchedExercises);\n\n    } catch (err: any) {\n      console.error(\"Failed to load workout exercises:\", JSON.stringify(err, null, 2));\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  }, [memoizedSessionUserId, supabase, workoutId, fetchedAllAvailableExercises, setTempStatusMessage]); // Depend on memoized ID and fetchedAllAvailableExercises\n\n  useEffect(() => {\n    if (open) {\n      fetchWorkoutData();\n    }\n  }, [open, fetchWorkoutData]);\n\n  const filteredExercisesForDropdown = useMemo(() => {\n    if (!memoizedSessionUserId) return []; // Use memoized ID\n    return fetchedAllAvailableExercises\n      .filter(ex => { // Source filter\n        if (addExerciseFilter === 'my-exercises') return ex.user_id === memoizedSessionUserId; // Use memoized ID\n        if (addExerciseFilter === 'global-library') return ex.user_id === null;\n        return false;\n      })\n      .filter(ex => { // Muscle filter\n        return selectedMuscleFilter === 'all' || ex.main_muscle === selectedMuscleFilter;\n      })\n      .filter(ex => { // Gym filter\n        if (selectedGymFilter === 'all') return true;\n        const exerciseGyms = fetchedExerciseGymsMap[ex.id as string] || []; // Use fetchedExerciseGymsMap\n        return exerciseGyms.includes(fetchedUserGyms.find(g => g.id === selectedGymFilter)?.name || ''); // Use fetchedUserGyms\n      })\n      .filter(ex => !exercises.some(existingEx => existingEx.id === ex.id)); // Exclude already added\n  }, [fetchedAllAvailableExercises, addExerciseFilter, selectedMuscleFilter, selectedGymFilter, exercises, fetchedExerciseGymsMap, fetchedUserGyms, memoizedSessionUserId]); // Depend on memoized ID\n\n  const handleDragEnd = useCallback((event: any) => {\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      setExercises((items) => {\n        const oldIndex = items.findIndex(item => item.id === active.id);\n        const newIndex = items.findIndex(item => item.id === over.id);\n        const newItems = [...items];\n        const [movedItem] = newItems.splice(oldIndex, 1);\n        newItems.splice(newIndex, 0, movedItem);\n        return newItems;\n      });\n    }\n    setTempStatusMessage({ message: \"Order changed!\", type: 'success' });\n    setTimeout(() => setTempStatusMessage(null), 3000);\n  }, [setTempStatusMessage]);\n\n  const handleAddExerciseWithBonusStatus = useCallback(async (isBonus: boolean) => {\n    if (!exerciseToAddDetails || !memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    setIsSaving(true);\n    setShowAddAsBonusDialog(false);\n\n    try {\n      const finalExerciseId = exerciseToAddDetails.id!; // Non-null assertion\n      const newOrderIndex = exercises.length > 0 ? Math.max(...exercises.map(e => e.order_index)) + 1 : 0;\n      const tempTPathExerciseId = `temp-${Date.now()}`;\n      const newExerciseWithDetails: WorkoutExerciseWithDetails = {\n        ...exerciseToAddDetails,\n        id: finalExerciseId,\n        name: exerciseToAddDetails.name,\n        order_index: newOrderIndex,\n        is_bonus_exercise: isBonus,\n        t_path_exercise_id: tempTPathExerciseId,\n      };\n      setExercises(prev => [...prev, newExerciseWithDetails]);\n\n      const tpePayload = {\n        template_id: workoutId,\n        exercise_id: finalExerciseId,\n        order_index: newOrderIndex,\n        is_bonus_exercise: isBonus,\n      };\n\n      const { data: insertedTpe, error: insertError } = await supabase\n        .from('t_path_exercises')\n        .insert(tpePayload)\n        .select('id')\n        .single();\n\n      if (insertError) {\n        setExercises(prev => prev.filter(ex => ex.t_path_exercise_id !== tempTPathExerciseId));\n        throw insertError;\n      }\n\n      setExercises(prev => prev.map(ex => \n        ex.t_path_exercise_id === tempTPathExerciseId ? { ...ex, t_path_exercise_id: insertedTpe.id } : ex\n      ));\n\n      setTempStatusMessage({ message: \"Added!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      setSelectedExerciseToAdd(\"\");\n      setExerciseToAddDetails(null);\n      refreshAllData(); // Refresh all data after adding an exercise\n    } catch (err: any) {\n      console.error(\"Error adding exercise:\", JSON.stringify(err, null, 2));\n      let errorMessage = \"An unexpected error occurred.\";\n      if (err && typeof err === 'object') {\n        if (err.code === '23505') {\n          errorMessage = \"Duplicate!\";\n        } else if (err.message) {\n          errorMessage = \"Error!\";\n        }\n      }\n      setTempStatusMessage({ message: errorMessage, type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [memoizedSessionUserId, supabase, workoutId, exercises, exerciseToAddDetails, refreshAllData, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleSelectAndPromptBonus = useCallback(() => {\n    if (!selectedExerciseToAdd) {\n      setTempStatusMessage({ message: \"Select exercise!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    const exercise = fetchedAllAvailableExercises.find(e => e.id === selectedExerciseToAdd);\n    if (exercise) {\n      setExerciseToAddDetails(exercise as ExerciseDefinition); // Cast to ExerciseDefinition\n      setShowAddAsBonusDialog(true);\n    } else {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [selectedExerciseToAdd, fetchedAllAvailableExercises, setTempStatusMessage]);\n\n  const handleRemoveExerciseClick = useCallback((exerciseId: string, tPathExerciseId: string, name: string) => {\n    setExerciseToRemove({ exerciseId, tPathExerciseId, name });\n    setShowConfirmRemoveDialog(true);\n  }, []);\n\n  const confirmRemoveExercise = useCallback(async () => {\n    if (!exerciseToRemove) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsSaving(true);\n    setShowConfirmRemoveDialog(false);\n\n    try {\n      const previousExercises = exercises;\n      setExercises(prev => prev.filter(ex => ex.id !== exerciseToRemove.exerciseId));\n\n      const { error } = await supabase\n        .from('t_path_exercises')\n        .delete()\n        .eq('id', exerciseToRemove.tPathExerciseId);\n\n      if (error) {\n        setExercises(previousExercises);\n        throw error;\n      }\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      refreshAllData(); // Refresh all data after removing an exercise\n    } catch (err: any) {\n      console.error(\"Error removing exercise:\", JSON.stringify(err, null, 2));\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n      setExerciseToRemove(null);\n    }\n  }, [exercises, exerciseToRemove, supabase, refreshAllData, setTempStatusMessage]);\n\n  const handleToggleBonusStatus = useCallback(async (exercise: WorkoutExerciseWithDetails) => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsSaving(true);\n    const newBonusStatus = !exercise.is_bonus_exercise;\n\n    setExercises(prev => prev.map(ex =>\n      ex.id === exercise.id ? { ...ex, is_bonus_exercise: newBonusStatus } : ex\n    ));\n\n    try {\n      const { error } = await supabase\n        .from('t_path_exercises')\n        .update({ is_bonus_exercise: newBonusStatus })\n        .eq('id', exercise.t_path_exercise_id);\n\n      if (error) throw error;\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      refreshAllData(); // Refresh all data after toggling bonus status\n    } catch (err: any) {\n      console.error(\"Error toggling bonus status:\", JSON.stringify(err, null, 2));\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      setExercises(prev => prev.map(ex =>\n        ex.id === exercise.id ? { ...ex, is_bonus_exercise: !newBonusStatus } : ex\n      ));\n    } finally {\n      setIsSaving(false);\n    }\n  }, [memoizedSessionUserId, supabase, refreshAllData, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleResetToDefaults = useCallback(async () => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    setIsSaving(true);\n    setShowConfirmResetDialog(false);\n\n    try {\n      const { data: childWorkoutData, error: childWorkoutError } = await supabase\n        .from('t_paths')\n        .select('parent_t_path_id')\n        .eq('id', workoutId)\n        .eq('user_id', memoizedSessionUserId) // Use memoized ID\n        .single();\n\n      if (childWorkoutError || !childWorkoutData || !childWorkoutData.parent_t_path_id) {\n        throw new Error(\"Could not find parent T-Path for this workout.\");\n      }\n\n      const parentTPathId = childWorkoutData.parent_t_path_id;\n      \n      const response = await fetch(`/api/generate-t-path`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session?.access_token}`\n        },\n        body: JSON.stringify({ tPathId: parentTPathId })\n      });\n\n      if (!response.ok) {\n        const errorBody = await response.json();\n        throw new Error(errorBody.error || `Failed to regenerate T-Path workouts.`);\n      }\n\n      setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSaveSuccess();\n      fetchWorkoutData();\n      refreshAllData(); // Refresh all data after resetting to defaults\n    } catch (err: any) {\n      console.error(\"Error resetting exercises:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [memoizedSessionUserId, session, supabase, workoutId, onSaveSuccess, fetchWorkoutData, refreshAllData, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleSaveOrder = useCallback(async () => {\n    setIsSaving(true);\n    try {\n      const updates = exercises.map((ex, index) => ({\n        id: ex.t_path_exercise_id,\n        order_index: index,\n      }));\n\n      // Use the new RPC function instead of upsert\n      const { error } = await supabase.rpc('update_exercise_order', { updates });\n\n      if (error) throw error;\n      setTempStatusMessage({ message: \"Saved!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      onSaveSuccess();\n      refreshAllData(); // Refresh all data after saving order\n    } catch (err: any) {\n      console.error(\"Error saving order:\", JSON.stringify(err, null, 2));\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setIsSaving(false);\n    }\n  }, [exercises, supabase, onSaveSuccess, refreshAllData, setTempStatusMessage]);\n\n  return {\n    exercises,\n    allAvailableExercises: fetchedAllAvailableExercises, // Use the fetched data\n    filteredExercisesForDropdown,\n    selectedExerciseToAdd,\n    setSelectedExerciseToAdd,\n    loading,\n    isSaving,\n    addExerciseFilter,\n    setAddExerciseFilter,\n    mainMuscleGroups: fetchedAvailableMuscleGroups, // Use the fetched data\n    selectedMuscleFilter,\n    setSelectedMuscleFilter,\n    userGyms: fetchedUserGyms, // Use the fetched data\n    selectedGymFilter,\n    setSelectedGymFilter,\n    showConfirmRemoveDialog,\n    setShowConfirmRemoveDialog,\n    exerciseToRemove,\n    setExerciseToRemove,\n    showAddAsBonusDialog,\n    setShowAddAsBonusDialog,\n    exerciseToAddDetails,\n    setExerciseToAddDetails,\n    showConfirmResetDialog,\n    setShowConfirmResetDialog,\n    handleDragEnd,\n    handleAddExerciseWithBonusStatus,\n    handleSelectAndPromptBonus,\n    handleRemoveExerciseClick,\n    confirmRemoveExercise,\n    handleToggleBonusStatus,\n    handleResetToDefaults,\n    handleSaveOrder,\n    fetchWorkoutData,\n  };\n};","size_bytes":16704},"apps/web/src/hooks/use-exercise-completion.ts":{"content":"\"use client\";\n\nimport { useCallback, useMemo } from 'react';\nimport { toast } from 'sonner';\nimport { SetLogState, Tables, UserExercisePR } from '@/types/supabase';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { useSession } from '@/components/session-context-provider';\nimport { useSetSaver } from './use-set-saver'; // Import useSetSaver\nimport { useSetPersistence } from './use-set-persistence'; // Import useSetPersistence\nimport { useSetPRLogic } from './use-set-pr-logic'; // Import useSetPRLogic\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\n// Helper function to check if a set has any user input\nconst hasUserInput = (set: SetLogState): boolean => {\n  return (set.weight_kg !== null && set.weight_kg > 0) ||\n         (set.reps !== null && set.reps > 0) ||\n         (set.reps_l !== null && set.reps_l > 0) ||\n         (set.reps_r !== null && set.reps_r > 0) ||\n         (set.time_seconds !== null && set.time_seconds > 0);\n};\n\nconst isValidId = (id: string | null | undefined): id is string => {\n  return typeof id === 'string' && id.length > 0;\n};\n\ninterface UseExerciseCompletionProps {\n  exerciseId: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  currentSessionId: string | null;\n  sets: SetLogState[];\n  updateDraft: (setIndex: number, updatedSet: Partial<SetLogState>) => Promise<void>;\n  onFirstSetSaved: (timestamp: string) => Promise<string>;\n  onExerciseCompleted: (exerciseId: string, isNewPR: boolean) => void;\n  preferredWeightUnit: Profile['preferred_weight_unit'];\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\ninterface UseExerciseCompletionReturn {\n  handleCompleteExercise: () => Promise<{ success: boolean; isNewPR: boolean }>;\n  hasAchievedPRInSession: boolean;\n}\n\nexport const useExerciseCompletion = ({\n  exerciseId,\n  exerciseType,\n  exerciseCategory,\n  currentSessionId,\n  sets,\n  updateDraft,\n  onFirstSetSaved,\n  onExerciseCompleted,\n  preferredWeightUnit,\n  setTempStatusMessage, // NEW\n}: UseExerciseCompletionProps): UseExerciseCompletionReturn => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const { saveSetToDb } = useSetPersistence({\n    exerciseId,\n    exerciseType,\n    exerciseCategory,\n    supabase,\n    preferredWeightUnit,\n    setTempStatusMessage, // NEW\n  });\n  const { exercisePR, checkAndSaveSetPR } = useSetPRLogic({\n    exerciseId,\n    exerciseType,\n    supabase,\n    setTempStatusMessage, // NEW\n  });\n\n  // Derived state for trophy icon visibility\n  const hasAchievedPRInSession = useMemo(() => {\n    return sets.some(set => set.is_pb);\n  }, [sets]);\n\n  const handleCompleteExercise = useCallback(async (): Promise<{ success: boolean; isNewPR: boolean }> => {\n    if (!isValidId(exerciseId)) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { success: false, isNewPR: false };\n    }\n    if (!sets) {\n      console.error(\"Error: Sets data is null or undefined when trying to complete exercise.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { success: false, isNewPR: false };\n    }\n\n    let currentSessionIdToUse = currentSessionId;\n\n    const hasAnyData = sets.some(s => hasUserInput(s));\n    if (!hasAnyData) {\n      setTempStatusMessage({ message: \"No data to save!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { success: false, isNewPR: false };\n    }\n\n    if (!currentSessionIdToUse) {\n      try {\n        const newSessionId = await onFirstSetSaved(new Date().toISOString());\n        currentSessionIdToUse = newSessionId;\n        console.log(`[useExerciseCompletion] handleCompleteExercise: New session created with ID: ${currentSessionIdToUse}`);\n      } catch (err) {\n        console.error(\"Failed to start workout session:\", err);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return { success: false, isNewPR: false };\n      }\n    }\n\n    let hasError = false;\n    let anySetIsPR = false;\n    let localCurrentExercisePR: UserExercisePR | null = exercisePR; // Use a local variable for PR state within the loop\n\n    for (let i = 0; i < sets.length; i++) {\n      const currentSet = sets[i];\n      const hasDataForSet = hasUserInput(currentSet);\n\n      if (hasDataForSet && !currentSet.isSaved) {\n        if (!memoizedSessionUserId) { // Ensure memoizedSessionUserId is available for PR check\n          console.error(\"Session user ID is missing for PR check.\");\n          hasError = true;\n          break;\n        }\n        const { isNewPR, updatedPR } = await checkAndSaveSetPR(currentSet, memoizedSessionUserId, localCurrentExercisePR); // Pass local PR state and memoized ID\n        if (isNewPR) anySetIsPR = true;\n        localCurrentExercisePR = updatedPR; // Update local PR state for next iteration\n        console.log(`[useExerciseCompletion] handleCompleteExercise: Processing set ${i + 1}. isNewPR=${isNewPR}, anySetIsPR (cumulative)=${anySetIsPR}`);\n\n        const { savedSet } = await saveSetToDb({ ...currentSet, is_pb: isNewPR }, i, currentSessionIdToUse);\n        if (savedSet) {\n          await updateDraft(i, {\n            id: savedSet.id,\n            session_id: currentSessionIdToUse,\n            weight_kg: savedSet.weight_kg,\n            reps: savedSet.reps,\n            reps_l: savedSet.reps_l,\n            reps_r: savedSet.reps_r,\n            time_seconds: savedSet.time_seconds,\n            isSaved: true,\n            is_pb: savedSet.is_pb || false,\n          });\n          console.log(`[useExerciseCompletion] handleCompleteExercise: Set ${i + 1} saved locally with is_pb=${savedSet.is_pb}. Draft updated.`);\n        } else {\n          hasError = true;\n          console.error(`[useExerciseCompletion] handleCompleteExercise: Failed to save set ${i + 1}.`);\n        }\n      } else if (currentSet.is_pb) {\n        // If the set was already saved and was a PR, ensure it contributes to anySetIsPR\n        anySetIsPR = true;\n        console.log(`[useExerciseCompletion] handleCompleteExercise: Set ${i + 1} was already a PR. anySetIsPR (cumulative)=${anySetIsPR}`);\n      }\n    }\n\n    if (hasError) {\n      console.error(`[useExerciseCompletion] handleCompleteExercise: Encountered errors while saving sets.`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { success: false, isNewPR: false };\n    }\n\n    try {\n      console.log(`[useExerciseCompletion] handleCompleteExercise: Calling onExerciseCompleted for ${exerciseId} with anySetIsPR: ${anySetIsPR}`);\n      await onExerciseCompleted(exerciseId, anySetIsPR);\n      return { success: true, isNewPR: anySetIsPR };\n    } catch (err: any) {\n      console.error(\"[useExerciseCompletion] Error saving exercise completion:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { success: false, isNewPR: false };\n    }\n  }, [\n    exerciseId, sets, currentSessionId, exercisePR,\n    onFirstSetSaved, onExerciseCompleted, updateDraft,\n    saveSetToDb, checkAndSaveSetPR, memoizedSessionUserId, setTempStatusMessage\n  ]);\n\n  return {\n    handleCompleteExercise,\n    hasAchievedPRInSession,\n  };\n};","size_bytes":7607},"apps/web/src/hooks/use-exercise-sets.ts":{"content":"\"use client\";\n\nimport { useState, useCallback, useEffect, useRef, useMemo } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner';\nimport { Tables, SetLogState, UserExercisePR } from '@/types/supabase';\nimport { useSetPersistence } from './use-set-persistence';\nimport { useProgressionSuggestion } from './use-progression-suggestion';\nimport { useSession } from '@/components/session-context-provider';\n\n// Import new modular hooks\nimport { useSetDrafts } from './use-set-drafts';\nimport { useSetActions } from './use-set-actions';\nimport { useSetSaver } from './use-set-saver';\nimport { useExerciseCompletion } from './use-exercise-completion';\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\ntype NumericSetLogFields = 'weight_kg' | 'reps' | 'reps_l' | 'reps_r' | 'time_seconds';\n\ninterface UseExerciseSetsProps {\n  exerciseId: string;\n  exerciseName: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  currentSessionId: string | null;\n  supabase: SupabaseClient;\n  onUpdateGlobalSets: (exerciseId: string, newSets: SetLogState[]) => void;\n  preferredWeightUnit: Profile['preferred_weight_unit'];\n  onFirstSetSaved: (timestamp: string) => Promise<string>;\n  onExerciseCompleted: (exerciseId: string, isNewPR: boolean) => void;\n  workoutTemplateName: string;\n  exerciseNumber: number;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\ninterface UseExerciseSetsReturn {\n  sets: SetLogState[];\n  handleAddSet: () => Promise<void>;\n  handleInputChange: (setIndex: number, field: NumericSetLogFields, value: string) => Promise<void>;\n  handleSaveSet: (setIndex: number) => Promise<void>;\n  handleEditSet: (setIndex: number) => Promise<void>;\n  handleDeleteSet: (setIndex: number) => Promise<void>;\n  handleCompleteExercise: () => Promise<{ success: boolean; isNewPR: boolean }>;\n  exercisePR: UserExercisePR | null;\n  loadingPR: boolean;\n  handleSuggestProgression: () => Promise<void>;\n  hasAchievedPRInSession: boolean;\n}\n\nconst isValidId = (id: string | null | undefined): id is string => {\n  return typeof id === 'string' && id.length > 0;\n};\n\nexport const useExerciseSets = ({\n  exerciseId,\n  exerciseName,\n  exerciseType,\n  exerciseCategory,\n  currentSessionId,\n  supabase,\n  onUpdateGlobalSets,\n  preferredWeightUnit,\n  onFirstSetSaved,\n  onExerciseCompleted,\n  workoutTemplateName,\n  exerciseNumber,\n  setTempStatusMessage, // NEW\n}: UseExerciseSetsProps): UseExerciseSetsReturn => {\n  const { session } = useSession();\n\n  // Use the new modular hooks\n  const {\n    sets,\n    loadingDrafts,\n    updateDraft,\n    addDraft,\n    deleteDraft,\n    fetchLastSets, // Still exposed for potential external use if needed, though not directly used here anymore\n  } = useSetDrafts({\n    exerciseId,\n    exerciseName,\n    exerciseType,\n    exerciseCategory,\n    currentSessionId,\n    supabase,\n    setTempStatusMessage, // NEW\n  });\n\n  const {\n    handleAddSet,\n    handleInputChange,\n    handleEditSet,\n    handleDeleteSet,\n  } = useSetActions({\n    exerciseId,\n    exerciseType,\n    exerciseCategory,\n    currentSessionId,\n    sets,\n    updateDraft,\n    addDraft,\n    deleteDraft,\n    preferredWeightUnit,\n    setTempStatusMessage, // NEW\n  });\n\n  const {\n    handleSaveSet,\n    exercisePR,\n    loadingPR,\n  } = useSetSaver({\n    exerciseId,\n    exerciseType,\n    exerciseCategory,\n    currentSessionId,\n    sets,\n    updateDraft,\n    onFirstSetSaved,\n    preferredWeightUnit,\n    setTempStatusMessage, // NEW\n  });\n\n  const {\n    handleCompleteExercise,\n    hasAchievedPRInSession,\n  } = useExerciseCompletion({\n    exerciseId,\n    exerciseType,\n    exerciseCategory,\n    currentSessionId,\n    sets,\n    updateDraft,\n    onFirstSetSaved,\n    onExerciseCompleted,\n    preferredWeightUnit,\n    setTempStatusMessage, // NEW\n  });\n\n  const { getProgressionSuggestion } = useProgressionSuggestion({\n    exerciseId,\n    exerciseType,\n    exerciseCategory,\n    supabase,\n    preferredWeightUnit,\n    setTempStatusMessage, // NEW\n  });\n\n  useEffect(() => {\n    if (sets) {\n      onUpdateGlobalSets(exerciseId, sets);\n    }\n  }, [sets, exerciseId, onUpdateGlobalSets]);\n\n  const handleSuggestProgression = useCallback(async () => {\n    if (!isValidId(exerciseId)) {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!sets) {\n      console.error(\"Sets data is null or undefined when trying to suggest progression.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    const { newSets, message } = await getProgressionSuggestion(sets.length, currentSessionId);\n    if (newSets) {\n      // Clear existing drafts for this exercise and session\n      const draftsToDelete = sets.map((_, index) => ({ exercise_id: exerciseId, set_index: index }));\n      await Promise.all(draftsToDelete.map(d => deleteDraft(d.set_index)));\n\n      // Add new suggested drafts\n      await Promise.all(newSets.map((set, index) => addDraft({ ...set, session_id: currentSessionId, exercise_id: exerciseId })));\n      \n      setTempStatusMessage({ message: \"Suggested!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [sets, currentSessionId, getProgressionSuggestion, exerciseId, deleteDraft, addDraft, setTempStatusMessage]);\n\n  return {\n    sets: sets || [],\n    handleAddSet,\n    handleInputChange,\n    handleSaveSet,\n    handleEditSet,\n    handleDeleteSet,\n    handleCompleteExercise,\n    exercisePR,\n    loadingPR,\n    handleSuggestProgression,\n    hasAchievedPRInSession,\n  };\n};","size_bytes":5823},"apps/web/src/hooks/use-manage-exercises-data.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from \"sonner\";\nimport { Tables, FetchedExerciseDefinition } from \"@/types/supabase\";\nimport { getMaxMinutes, areSetsEqual } from '@/lib/utils'; // Keep web-specific utils; // Import getMaxMinutes and areSetsEqual\nimport { useCacheAndRevalidate } from './use-cache-and-revalidate';\nimport { LocalExerciseDefinition, LocalTPath, LocalProfile, LocalTPathExercise, LocalGym, LocalGymExercise } from '@/lib/db'; // Import LocalGym and LocalGymExercise\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ntype TPath = Tables<'t_paths'>;\n\ninterface UseManageExercisesDataProps {\n  sessionUserId: string | null;\n  supabase: SupabaseClient;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // UPDATED TYPE\n  // Removed userGyms, exerciseGymsMap, availableMuscleGroups, exerciseWorkoutsMap props\n}\n\ninterface UseManageExercisesDataReturn {\n  globalExercises: FetchedExerciseDefinition[];\n  userExercises: FetchedExerciseDefinition[];\n  loading: boolean;\n  editingExercise: FetchedExerciseDefinition | null;\n  setEditingExercise: React.Dispatch<React.SetStateAction<FetchedExerciseDefinition | null>>;\n  selectedMuscleFilter: string;\n  setSelectedMuscleFilter: React.Dispatch<React.SetStateAction<string>>;\n  availableMuscleGroups: string[];\n  exerciseWorkoutsMap: Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]>;\n  exerciseGymsMap: Record<string, string[]>;\n  userGyms: Tables<'gyms'>[];\n  selectedGymFilter: string;\n  setSelectedGymFilter: React.Dispatch<React.SetStateAction<string>>;\n  handleEditClick: (exercise: FetchedExerciseDefinition) => void;\n  handleCancelEdit: () => void;\n  handleSaveSuccess: () => void;\n  handleDeleteExercise: (exercise: FetchedExerciseDefinition) => Promise<void>;\n  handleToggleFavorite: (exercise: FetchedExerciseDefinition) => Promise<void>;\n  handleOptimisticAdd: (exerciseId: string, workoutId: string, workoutName: string, isBonus: boolean) => void;\n  handleAddFailure: (exerciseId: string, workoutId: string) => void;\n  handleRemoveFromWorkout: (workoutId: string, exerciseId: string) => Promise<void>;\n  refreshExercises: () => void;\n  refreshTPaths: () => void;\n  totalUserExercisesCount: number;\n  totalGlobalExercisesCount: number;\n  searchTerm: string;\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;\n  allAvailableExercises: FetchedExerciseDefinition[]; // ADDED\n  supabase: SupabaseClient; // ADDED\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // ADDED\n}\n\nexport const useManageExercisesData = ({ sessionUserId, supabase, setTempStatusMessage }: UseManageExercisesDataProps): UseManageExercisesDataReturn => {\n  const [globalExercises, setGlobalExercises] = useState<FetchedExerciseDefinition[]>([]);\n  const [userExercises, setUserExercises] = useState<FetchedExerciseDefinition[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [editingExercise, setEditingExercise] = useState<FetchedExerciseDefinition | null>(null);\n  const [selectedMuscleFilter, setSelectedMuscleFilter] = useState<string>('all');\n  const [selectedGymFilter, setSelectedGymFilter] = useState<string>('all');\n  const [totalUserExercisesCount, setTotalUserExercisesCount] = useState(0);\n  const [totalGlobalExercisesCount, setTotalGlobalExercisesCount] = useState(0);\n  const [searchTerm, setSearchTerm] = useState(\"\"); // NEW\n\n  const { session, memoizedSessionUserId } = useSession(); // Get session object and memoizedSessionUserId\n\n  // NEW: Fetch necessary data internally\n  const fetchExercisesSupabase = useCallback(async (client: SupabaseClient) => {\n    return client\n      .from('exercise_definitions')\n      .select('id, name, main_muscle, type, category, description, pro_tip, video_url, user_id, library_id, created_at, is_favorite, icon_url, movement_type, movement_pattern')\n      .order('name', { ascending: true });\n  }, []);\n\n  const { data: cachedExercises, loading: loadingExercises, error: exercisesError, refresh: refreshExercises } = useCacheAndRevalidate<LocalExerciseDefinition>({\n    cacheTable: 'exercise_definitions_cache',\n    supabaseQuery: fetchExercisesSupabase,\n    queryKey: 'manage_exercises_all_exercises',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Use memoized ID\n  });\n\n  const { data: cachedUserGyms, loading: loadingUserGyms, error: userGymsError, refresh: refreshUserGyms } = useCacheAndRevalidate<LocalGym>({\n    cacheTable: 'gyms_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      return client.from('gyms').select('*').eq('user_id', memoizedSessionUserId); // Use memoized ID\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'manage_exercises_user_gyms',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Use memoized ID\n  });\n\n  const { data: cachedGymExercises, loading: loadingGymExercises, error: gymExercisesError, refresh: refreshGymExercises } = useCacheAndRevalidate<LocalGymExercise>({\n    cacheTable: 'gym_exercises_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data: userGymsData, error: userGymsError } = await client.from('gyms').select('id').eq('user_id', memoizedSessionUserId); // Use memoized ID\n      if (userGymsError) throw new Error(userGymsError.message || \"Failed to fetch user gyms for gym exercises.\");\n      const gymIds = (userGymsData || []).map(g => g.id);\n      if (gymIds.length === 0) return { data: [], error: null };\n      return client.from('gym_exercises').select('gym_id, exercise_id, created_at').in('gym_id', gymIds);\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'manage_exercises_gym_exercises',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Pass memoized ID\n  });\n\n  const { data: cachedTPaths, loading: loadingTPaths, error: tPathsError, refresh: refreshTPaths } = useCacheAndRevalidate<LocalTPath>({\n    cacheTable: 't_paths_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => client.from('t_paths').select('*'), []),\n    queryKey: 'manage_exercises_all_t_paths',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Use memoized ID\n  });\n\n  const { data: cachedTPathExercises, loading: loadingTPathExercises, error: tPathExercisesError, refresh: refreshTPathExercises } = useCacheAndRevalidate<Tables<'t_path_exercises'>>({\n    cacheTable: 't_path_exercises_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data, error } = await client.from('t_path_exercises').select('id, exercise_id, template_id, order_index, is_bonus_exercise, created_at');\n      return { data: data || [], error };\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'manage_exercises_all_t_path_exercises',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Use memoized ID\n  });\n\n  const { data: cachedProfile, loading: loadingProfile, error: profileError } = useCacheAndRevalidate<LocalProfile>({\n    cacheTable: 'profiles_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null }; // Use memoized ID\n      const { data, error } = await client.from('profiles').select('*').eq('id', memoizedSessionUserId); // Use memoized ID\n      return { data: data || [], error };\n    }, [memoizedSessionUserId]), // Depend on memoized ID\n    queryKey: 'manage_exercises_user_profile',\n    supabase,\n    sessionUserId: memoizedSessionUserId, // Use memoized ID\n  });\n  const profile = cachedProfile?.[0] || null;\n\n\n  const baseLoading = useMemo(() => loadingExercises || loadingUserGyms || loadingGymExercises || loadingTPaths || loadingTPathExercises || loadingProfile, [loadingExercises, loadingUserGyms, loadingGymExercises, loadingTPaths, loadingTPathExercises, loadingProfile]);\n  const dataError = useMemo(() => exercisesError || userGymsError || gymExercisesError || tPathsError || tPathExercisesError || profileError, [exercisesError, userGymsError, gymExercisesError, tPathsError, tPathExercisesError, profileError]);\n\n  const allAvailableExercises = useMemo(() => (cachedExercises || []).map(ex => ({ ...ex, id: ex.id, is_favorited_by_current_user: false, movement_type: ex.movement_type, movement_pattern: ex.movement_pattern })), [cachedExercises]);\n  const availableMuscleGroups = useMemo(() => Array.from(new Set((cachedExercises || []).map(ex => ex.main_muscle))).sort(), [cachedExercises]);\n\n  const userGyms = useMemo(() => cachedUserGyms || [], [cachedUserGyms]);\n\n  const exerciseGymsMap = useMemo(() => {\n    const newExerciseGymsMap: Record<string, string[]> = {};\n    const gymIdToNameMap = new Map<string, string>();\n    (cachedUserGyms || []).forEach(gym => gymIdToNameMap.set(gym.id, gym.name));\n\n    (cachedGymExercises || []).forEach(link => {\n      const gymName = gymIdToNameMap.get(link.gym_id);\n      if (gymName) {\n        if (!newExerciseGymsMap[link.exercise_id]) {\n          newExerciseGymsMap[link.exercise_id] = [];\n        }\n        newExerciseGymsMap[link.exercise_id].push(gymName);\n      }\n    });\n    return newExerciseGymsMap;\n  }, [cachedUserGyms, cachedGymExercises]);\n\n  // NEW: Memoized derived sets\n  const derivedAvailableGymExerciseIds = useMemo(() => {\n    if (!profile?.active_gym_id || !cachedGymExercises) return new Set<string>();\n    return new Set(cachedGymExercises.filter(link => link.gym_id === profile.active_gym_id).map(link => link.exercise_id));\n  }, [profile?.active_gym_id, cachedGymExercises]);\n\n  const derivedAllGymExerciseIds = useMemo(() => {\n    if (!cachedGymExercises) return new Set<string>();\n    return new Set(cachedGymExercises.map(link => link.exercise_id));\n  }, [cachedGymExercises]);\n\n  // Effect to update refs only when the *content* of the derived sets changes\n  // This useEffect block was moved from useManageExercisesData to useWorkoutDataFetcher\n  // because the refs (availableGymExerciseIdsRef, allGymExerciseIdsRef) are declared in useWorkoutDataFetcher.\n  // It is now correctly placed in useWorkoutDataFetcher.\n\n  const [exerciseWorkoutsMapState, setExerciseWorkoutsMapState] = useState<Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]>>({});\n\n  // Effect to populate exerciseWorkoutsMap asynchronously\n  useEffect(() => {\n    const populateExerciseWorkoutsMap = async () => {\n      if (!memoizedSessionUserId || !profile || !cachedTPaths || !cachedTPathExercises || !cachedExercises) { // Use memoized ID\n        setExerciseWorkoutsMapState({}); // Corrected setter name\n        return;\n      }\n\n      const allTPaths = cachedTPaths || [];\n      const tPathExercisesData = cachedTPathExercises || [];\n      const activeTPathId = profile.active_t_path_id;\n      const preferredSessionLength = profile.preferred_session_length;\n      const getMaxMinutes = (sessionLength: string | null | undefined): number => {\n        switch (sessionLength) {\n          case '15-30': return 30; case '30-45': return 45;\n          case '45-60': return 60; case '60-90': return 90;\n          default: return 90;\n        }\n      };\n      const maxAllowedMinutes = getMaxMinutes(preferredSessionLength);\n\n      let activeChildWorkoutIds: string[] = [];\n      let activeWorkoutNames: string[] = [];\n      if (activeTPathId) {\n        const activeMainTPath = allTPaths.find(tp => tp.id === activeTPathId);\n        if (activeMainTPath) {\n          const childWorkouts = allTPaths.filter(tp => tp.parent_t_path_id === activeMainTPath.id && tp.is_bonus);\n          activeChildWorkoutIds = childWorkouts.map(cw => cw.id);\n          activeWorkoutNames = childWorkouts.map(cw => cw.template_name);\n        }\n      }\n\n      const { data: structureData, error: structureError } = await supabase\n        .from('workout_exercise_structure')\n        .select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group');\n      if (structureError) {\n        console.error(\"Error fetching workout structure for map:\", structureError);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return;\n      }\n      const structure = structureData || [];\n\n      const libraryIdToUuidMap = new Map<string, string>();\n      (cachedExercises || []).forEach(ex => {\n        if (ex.library_id) libraryIdToUuidMap.set(ex.library_id, ex.id);\n      });\n\n      const newMap: Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]> = {};\n\n      tPathExercisesData.forEach(tpe => {\n        if (activeChildWorkoutIds.includes(tpe.template_id)) {\n          const workout = allTPaths.find(tp => tp.id === tpe.template_id);\n          if (workout) {\n            if (!newMap[tpe.exercise_id]) newMap[tpe.exercise_id] = [];\n            if (!newMap[tpe.exercise_id].some(item => item.id === workout.id)) {\n              newMap[tpe.exercise_id].push({\n                id: workout.id,\n                name: workout.template_name,\n                isUserOwned: workout.user_id === memoizedSessionUserId, // Changed to memoizedSessionUserId\n                isBonus: !!tpe.is_bonus_exercise,\n              });\n            }\n          }\n        }\n      });\n\n      structure.forEach(s => {\n        if (activeWorkoutNames.includes(s.workout_name)) {\n          const isIncludedAsMain = s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes;\n          const isIncludedAsBonus = s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group;\n          if (isIncludedAsMain || isIncludedAsBonus) {\n            const exerciseUuid = libraryIdToUuidMap.get(s.exercise_library_id);\n            if (exerciseUuid) {\n              if (!newMap[exerciseUuid]) newMap[exerciseUuid] = [];\n              if (!newMap[exerciseUuid].some(item => item.name === s.workout_name)) {\n                newMap[exerciseUuid].push({\n                  id: `global_${s.workout_name}`, // Use a unique ID for global workouts\n                  name: s.workout_name,\n                  isUserOwned: false,\n                  isBonus: false,\n                });\n              }\n            }\n          }\n        }\n      });\n      // Only update state if the map has actually changed to prevent re-renders\n      if (JSON.stringify(newMap) !== JSON.stringify(exerciseWorkoutsMapState)) {\n        setExerciseWorkoutsMapState(newMap);\n      }\n    };\n    populateExerciseWorkoutsMap();\n  }, [memoizedSessionUserId, profile, cachedTPaths, cachedTPathExercises, cachedExercises, supabase, exerciseWorkoutsMapState, setTempStatusMessage]);\n\n\n  const fetchPageData = useCallback(async () => {\n    if (!memoizedSessionUserId || baseLoading) return; // Use memoized ID\n\n    setLoading(true);\n    try {\n      if (dataError) throw new Error(dataError);\n\n      const { data: userGlobalFavorites, error: favoritesError } = await supabase\n        .from('user_global_favorites')\n        .select('exercise_id')\n        .eq('user_id', memoizedSessionUserId); // Use memoized ID\n\n      if (favoritesError) throw new Error(favoritesError.message);\n      const favoritedGlobalExerciseIds = new Set(userGlobalFavorites?.map(fav => fav.exercise_id));\n\n      const userOwnedExercisesList: FetchedExerciseDefinition[] = [];\n      const globalExercisesList: FetchedExerciseDefinition[] = [];\n\n      (cachedExercises || []).forEach(ex => {\n        if (ex.user_id === memoizedSessionUserId && ex.library_id === null) { // Use memoized ID\n          userOwnedExercisesList.push({ ...ex, id: ex.id, is_favorite: !!ex.is_favorite, movement_type: ex.movement_type, movement_pattern: ex.movement_pattern });\n        } else if (ex.user_id === null) {\n          globalExercisesList.push({\n            ...ex,\n            id: ex.id,\n            is_favorited_by_current_user: favoritedGlobalExerciseIds.has(ex.id),\n            movement_type: ex.movement_type,\n            movement_pattern: ex.movement_pattern,\n          });\n        }\n      });\n\n      setTotalUserExercisesCount(userOwnedExercisesList.length);\n      setTotalGlobalExercisesCount(globalExercisesList.length);\n\n      let finalUserExercises = userOwnedExercisesList;\n      let finalGlobalExercises = globalExercisesList;\n\n      if (selectedMuscleFilter === 'favorites') {\n        finalUserExercises = finalUserExercises.filter(ex => ex.is_favorite);\n        finalGlobalExercises = finalGlobalExercises.filter(ex => ex.is_favorited_by_current_user);\n      } else if (selectedMuscleFilter !== 'all') {\n        finalUserExercises = finalUserExercises.filter(ex => ex.main_muscle === selectedMuscleFilter);\n        finalGlobalExercises = finalGlobalExercises.filter(ex => ex.main_muscle === selectedMuscleFilter);\n      }\n\n      if (selectedGymFilter !== 'all') {\n        const exerciseIdsInSelectedGym = new Set<string>();\n        Object.entries(exerciseGymsMap).forEach(([exerciseId, gymNames]) => {\n            const gym = userGyms.find(g => g.id === selectedGymFilter);\n            if (gym && gymNames.includes(gym.name)) {\n                exerciseIdsInSelectedGym.add(exerciseId);\n            }\n        });\n        finalUserExercises = finalUserExercises.filter(ex => ex.id && exerciseIdsInSelectedGym.has(ex.id));\n        finalGlobalExercises = finalGlobalExercises.filter(ex => ex.id && exerciseIdsInSelectedGym.has(ex.id));\n      }\n\n      // NEW: Search term filter\n      if (searchTerm.trim() !== \"\") {\n        const lowerCaseSearchTerm = searchTerm.toLowerCase();\n        finalUserExercises = finalUserExercises.filter(ex => ex.name.toLowerCase().includes(lowerCaseSearchTerm));\n        finalGlobalExercises = finalGlobalExercises.filter(ex => ex.name.toLowerCase().includes(lowerCaseSearchTerm));\n      }\n\n      finalUserExercises.sort((a, b) => a.name.localeCompare(b.name));\n      finalGlobalExercises.sort((a, b) => a.name.localeCompare(b.name));\n\n      setUserExercises(finalUserExercises);\n      setGlobalExercises(finalGlobalExercises);\n\n    } catch (err: any) {\n      console.error(\"ManageExercises: Error in fetchPageData:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    } finally {\n      setLoading(false);\n    }\n  }, [memoizedSessionUserId, supabase, selectedMuscleFilter, selectedGymFilter, cachedExercises, dataError, baseLoading, userGyms, exerciseGymsMap, searchTerm, profile, setTempStatusMessage]); // Depend on memoized ID\n\n  useEffect(() => {\n    if (!baseLoading) { // Only fetch page data once base data is loaded\n      fetchPageData();\n    }\n  }, [fetchPageData, baseLoading]);\n\n  const handleEditClick = useCallback((exercise: FetchedExerciseDefinition) => {\n    setEditingExercise(exercise.user_id === memoizedSessionUserId ? exercise : { ...exercise, id: null, user_id: memoizedSessionUserId, is_favorite: false, library_id: null }); // Use memoized ID\n  }, [memoizedSessionUserId]);\n\n  const handleCancelEdit = useCallback(() => {\n    setEditingExercise(null);\n  }, []);\n\n  const handleSaveSuccess = useCallback(() => {\n    setEditingExercise(null);\n    refreshExercises();\n    refreshUserGyms();\n    refreshGymExercises();\n    refreshTPaths();\n    refreshTPathExercises();\n  }, [refreshExercises, refreshUserGyms, refreshGymExercises, refreshTPaths, refreshTPathExercises]);\n\n  const handleDeleteExercise = useCallback(async (exercise: FetchedExerciseDefinition) => {\n    if (!memoizedSessionUserId || !exercise.id || exercise.user_id !== memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    \n    try {\n      const { error } = await supabase.from('exercise_definitions').delete().eq('id', exercise.id).eq('user_id', memoizedSessionUserId); // Use memoized ID\n      if (error) throw new Error(error.message);\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      handleSaveSuccess(); // Refresh all related data\n    } catch (err: any) {\n      console.error(\"Failed to delete exercise:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [memoizedSessionUserId, supabase, handleSaveSuccess, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleToggleFavorite = useCallback(async (exercise: FetchedExerciseDefinition) => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    const isUserOwned = exercise.user_id === memoizedSessionUserId; // Use memoized ID\n    const isCurrentlyFavorited = isUserOwned ? exercise.is_favorite : exercise.is_favorited_by_current_user;\n    const newFavoriteStatus = !isCurrentlyFavorited;\n\n    const updatedExercise = {\n      ...exercise,\n      is_favorite: isUserOwned ? newFavoriteStatus : exercise.is_favorite,\n      is_favorited_by_current_user: !isUserOwned ? newFavoriteStatus : exercise.is_favorited_by_current_user,\n    };\n\n    if (isUserOwned) {\n      setUserExercises(prev => prev.map(ex => ex.id === exercise.id ? updatedExercise : ex));\n    } else {\n      setGlobalExercises(prev => prev.map(ex => ex.id === exercise.id ? updatedExercise : ex));\n    }\n\n    setTempStatusMessage({ message: newFavoriteStatus ? \"Added!\" : \"Removed!\", type: newFavoriteStatus ? 'added' : 'removed' });\n    setTimeout(() => setTempStatusMessage(null), 3000);\n\n    try {\n      if (isUserOwned) {\n        const { error } = await supabase.from('exercise_definitions').update({ is_favorite: newFavoriteStatus }).eq('id', exercise.id as string).eq('user_id', memoizedSessionUserId); // Use memoized ID\n        if (error) throw error;\n      } else {\n        if (newFavoriteStatus) {\n          const { error } = await supabase.from('user_global_favorites').insert({ user_id: memoizedSessionUserId, exercise_id: exercise.id as string });\n          if (error) throw error;\n        } else {\n          const { error } = await supabase.from('user_global_favorites').delete().eq('user_id', memoizedSessionUserId).eq('exercise_id', exercise.id as string);\n          if (error) throw error;\n        }\n      }\n    } catch (err: any) {\n      console.error(\"Failed to toggle favourite status:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      if (isUserOwned) {\n        setUserExercises(prev => prev.map(ex => ex.id === exercise.id ? exercise : ex));\n      } else {\n        setGlobalExercises(prev => prev.map(ex => ex.id === exercise.id ? exercise : ex));\n      }\n    }\n  }, [memoizedSessionUserId, supabase, setTempStatusMessage]); // Depend on memoized ID\n\n  const handleOptimisticAdd = useCallback((exerciseId: string, workoutId: string, workoutName: string, isBonus: boolean) => {\n    handleSaveSuccess(); // Refresh to get latest data\n  }, [handleSaveSuccess]);\n\n  const handleAddFailure = useCallback((exerciseId: string, workoutId: string) => {\n    handleSaveSuccess(); // Refresh to get latest data\n  }, [handleSaveSuccess]);\n\n  const handleRemoveFromWorkout = useCallback(async (workoutId: string, exerciseId: string) => {\n    if (!memoizedSessionUserId) { // Use memoized ID\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!confirm(\"Are you sure you want to remove this exercise from the workout? This action cannot be undone.\")) {\n      return;\n    }\n    \n    try {\n      const { error } = await supabase.from('t_path_exercises').delete().eq('template_id', workoutId).eq('exercise_id', exerciseId);\n      if (error) throw new Error(error.message);\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      handleSaveSuccess(); // Refresh all related data\n    } catch (err: any) {\n      console.error(\"Failed to remove exercise from workout:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [memoizedSessionUserId, supabase, handleSaveSuccess, setTempStatusMessage]); // Depend on memoized ID\n\n  return {\n    globalExercises,\n    userExercises,\n    loading: baseLoading || loading,\n    editingExercise,\n    setEditingExercise,\n    selectedMuscleFilter,\n    setSelectedMuscleFilter,\n    availableMuscleGroups,\n    exerciseWorkoutsMap: exerciseWorkoutsMapState, // Use the state for the map\n    exerciseGymsMap,\n    userGyms,\n    selectedGymFilter,\n    setSelectedGymFilter,\n    handleEditClick,\n    handleCancelEdit,\n    handleSaveSuccess,\n    handleDeleteExercise,\n    handleToggleFavorite,\n    handleOptimisticAdd,\n    handleAddFailure,\n    handleRemoveFromWorkout,\n    refreshExercises: handleSaveSuccess, // Use handleSaveSuccess to trigger full refresh\n    refreshTPaths: handleSaveSuccess, // Use handleSaveSuccess to trigger full refresh\n    totalUserExercisesCount,\n    totalGlobalExercisesCount,\n    searchTerm, // NEW\n    setSearchTerm, // NEW\n    allAvailableExercises, // ADDED\n    supabase, // ADDED\n    setTempStatusMessage, // ADDED\n  };\n};","size_bytes":25806},"apps/web/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"apps/web/src/hooks/use-progression-suggestion.ts":{"content":"\"use client\";\n\nimport { useCallback } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner';\nimport { Tables, SetLogState } from '@/types/supabase';\nimport { convertWeight, formatWeight } from '@/lib/unit-conversions';\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\ninterface UseProgressionSuggestionProps {\n  exerciseId: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  supabase: SupabaseClient;\n  preferredWeightUnit: Profile['preferred_weight_unit'];\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nconst MAX_SETS = 5;\nconst DEFAULT_INITIAL_SETS = 3;\n\nexport const useProgressionSuggestion = ({\n  exerciseId,\n  exerciseType,\n  exerciseCategory,\n  supabase,\n  preferredWeightUnit,\n  setTempStatusMessage, // NEW\n}: UseProgressionSuggestionProps) => {\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const getProgressionSuggestion = useCallback(async (currentSetsLength: number, internalSessionId: string | null): Promise<{ newSets: SetLogState[] | null; message: string }> => {\n    if (!supabase) {\n      console.error(\"[useProgressionSuggestion] Supabase client not available.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { newSets: null, message: \"Error: Supabase client not available.\" };\n    }\n    if (!memoizedSessionUserId) { // Ensure user is logged in\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { newSets: null, message: \"Error: User not authenticated.\" };\n    }\n\n    try {\n      const { data: previousSets, error: fetchError } = await supabase\n        .from('set_logs')\n        .select('weight_kg, reps, reps_l, reps_r, time_seconds')\n        .eq('exercise_id', exerciseId)\n        .order('created_at', { ascending: false })\n        .limit(5);\n\n      if (fetchError) throw fetchError;\n\n      let suggestedWeight: number | null = null;\n      let suggestedReps: number | null = null;\n      let suggestedRepsL: number | null = null;\n      let suggestedRepsR: number | null = null;\n      let suggestedTime: number | null = null;\n      let suggestedNumSets = DEFAULT_INITIAL_SETS;\n      let suggestionMessage = \"Focus on mastering your form!\";\n\n      if (previousSets && previousSets.length > 0) {\n        const lastSet = previousSets[0];\n\n        if (exerciseType === 'weight') {\n          const lastWeight = lastSet.weight_kg || 0;\n          const lastReps = lastSet.reps || 0;\n\n          if (lastReps >= 8 && lastWeight > 0) {\n            suggestedWeight = lastWeight + 2.5;\n            suggestedReps = 8;\n            suggestionMessage = `Great work! Try increasing the weight to ${formatWeight(convertWeight(suggestedWeight, 'kg', preferredWeightUnit as 'kg' | 'lbs'), preferredWeightUnit as 'kg' | 'lbs')} for 8 reps.`;\n          } else if (lastReps >= 5 && lastReps < 8 && lastWeight > 0) {\n            suggestedWeight = lastWeight;\n            suggestedReps = lastReps + 1;\n            suggestionMessage = `Good effort! Try to hit ${suggestedReps} reps with ${formatWeight(convertWeight(suggestedWeight, 'kg', preferredWeightUnit as 'kg' | 'lbs'), preferredWeightUnit as 'kg' | 'lbs')} next time.`;\n          } else {\n            suggestedWeight = lastWeight;\n            suggestedReps = lastReps;\n            suggestionMessage = `Consider maintaining ${formatWeight(convertWeight(suggestedWeight, 'kg', preferredWeightUnit as 'kg' | 'lbs'), preferredWeightUnit as 'kg' | 'lbs')} and focusing on form, or slightly reducing weight to hit more reps.`;\n          }\n\n          if (exerciseCategory === 'Unilateral') {\n            suggestedRepsL = suggestedReps;\n            suggestedRepsR = suggestedReps;\n            suggestedReps = null;\n          }\n\n          if (currentSetsLength < MAX_SETS && previousSets.length >= 3) {\n            const allPreviousSetsHitTarget = previousSets.slice(0, 3).every(s => (s.reps || 0) >= 8);\n            if (allPreviousSetsHitTarget) {\n              suggestedNumSets = Math.min(currentSetsLength + 1, MAX_SETS);\n              suggestionMessage += ` You're consistent! Consider adding a set.`;\n            }\n          }\n\n        } else if (exerciseType === 'timed') {\n          const lastTime = lastSet.time_seconds || 0;\n          if (lastTime > 0) {\n            suggestedTime = lastTime + 5;\n            suggestionMessage = `Nice! Try to hold for ${suggestedTime} seconds next time.`;\n          } else {\n            suggestedTime = 30;\n            suggestionMessage = \"Let's aim for 30 seconds on this timed exercise!\";\n          }\n\n          if (currentSetsLength < MAX_SETS && previousSets.length >= 3) {\n            const allPreviousSetsHitTarget = previousSets.slice(0, 3).every(s => (s.time_seconds || 0) >= (suggestedTime || 0) - 5);\n            if (allPreviousSetsHitTarget) {\n              suggestedNumSets = Math.min(currentSetsLength + 1, MAX_SETS);\n              suggestionMessage += ` You're consistent! Consider adding a set.`;\n            }\n          }\n        }\n      } else {\n        if (exerciseType === 'weight') {\n          suggestedWeight = 10;\n          suggestedReps = 8;\n          if (exerciseCategory === 'Unilateral') {\n            suggestedRepsL = suggestedReps;\n            suggestedRepsR = suggestedReps;\n            suggestedReps = null;\n          }\n          suggestionMessage = \"No previous sets found. Let's start with 10kg for 8 reps and focus on form!\";\n        } else if (exerciseType === 'timed') {\n          suggestedTime = 30;\n          suggestionMessage = \"No previous sets found. Let's aim for 30 seconds and focus on form!\";\n        }\n      }\n      \n      const newSets: SetLogState[] = [];\n      for (let i = 0; i < suggestedNumSets; i++) {\n        newSets.push({\n          id: null, created_at: null, session_id: internalSessionId, exercise_id: exerciseId,\n          weight_kg: suggestedWeight, reps: suggestedReps, reps_l: suggestedRepsL, reps_r: suggestedRepsR, time_seconds: suggestedTime,\n          is_pb: false, isSaved: false, isPR: false,\n          lastWeight: suggestedWeight, lastReps: suggestedReps, lastRepsL: suggestedRepsL, lastRepsR: suggestedRepsR, lastTimeSeconds: suggestedTime,\n        });\n      }\n      \n      return { newSets, message: suggestionMessage };\n\n    } catch (err: any) {\n      console.error(\"Failed to generate progression suggestion:\", err);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { newSets: null, message: \"Failed to generate suggestion.\" };\n    }\n  }, [exerciseId, exerciseType, exerciseCategory, supabase, preferredWeightUnit, memoizedSessionUserId, setTempStatusMessage]); // Depend on memoized ID\n\n  return { getProgressionSuggestion };\n};","size_bytes":7127},"apps/web/src/hooks/use-scroll-position.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\n\nconst SCROLL_THRESHOLD = 10; // Pixels scrolled before activating effect\n\nexport function useScrollPosition() {\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  const handleScroll = useCallback(() => {\n    setIsScrolled(window.scrollY > SCROLL_THRESHOLD);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    // Set initial state in case the page loads already scrolled\n    handleScroll(); \n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [handleScroll]);\n\n  return isScrolled;\n}","size_bytes":658},"apps/web/src/hooks/use-set-actions.ts":{"content":"\"use client\";\n\nimport { useCallback } from 'react';\nimport { toast } from 'sonner';\nimport { SetLogState, Tables } from '@/types/supabase';\nimport { useSetDrafts } from './use-set-drafts';\nimport { convertWeight } from '@/lib/unit-conversions';\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\ntype NumericSetLogFields = 'weight_kg' | 'reps' | 'reps_l' | 'reps_r' | 'time_seconds';\n\nconst MAX_SETS = 5;\n\ninterface UseSetActionsProps {\n  exerciseId: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  currentSessionId: string | null;\n  sets: SetLogState[];\n  updateDraft: (setIndex: number, updatedSet: Partial<SetLogState>) => Promise<void>;\n  addDraft: (newSet: SetLogState) => Promise<void>;\n  deleteDraft: (setIndex: number) => Promise<void>;\n  preferredWeightUnit: Profile['preferred_weight_unit'];\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\ninterface UseSetActionsReturn {\n  handleAddSet: () => Promise<void>;\n  handleInputChange: (setIndex: number, field: NumericSetLogFields, value: string) => Promise<void>;\n  handleEditSet: (setIndex: number) => Promise<void>;\n  handleDeleteSet: (setIndex: number) => Promise<void>;\n}\n\nexport const useSetActions = ({\n  exerciseId,\n  exerciseType,\n  exerciseCategory,\n  currentSessionId,\n  sets,\n  updateDraft,\n  addDraft,\n  deleteDraft,\n  preferredWeightUnit,\n  setTempStatusMessage, // NEW\n}: UseSetActionsProps): UseSetActionsReturn => {\n\n  const handleAddSet = useCallback(async () => {\n    if (!isValidId(exerciseId)) {\n      console.error(\"Cannot add set: exercise information is incomplete.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (sets.length >= MAX_SETS) {\n      setTempStatusMessage({ message: \"Max 5 sets!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    \n    const lastSet = sets[sets.length - 1];\n\n    const newSet: SetLogState = {\n      id: null, created_at: null, session_id: currentSessionId, exercise_id: exerciseId,\n      weight_kg: null, reps: null, reps_l: null, reps_r: null, time_seconds: null,\n      is_pb: false, isSaved: false, isPR: false,\n      lastWeight: lastSet?.weight_kg, lastReps: lastSet?.reps, lastRepsL: lastSet?.reps_l, lastRepsR: lastSet?.reps_r, lastTimeSeconds: lastSet?.time_seconds,\n    };\n    await addDraft(newSet);\n  }, [exerciseId, currentSessionId, sets, addDraft, setTempStatusMessage]);\n\n  const handleInputChange = useCallback(async (setIndex: number, field: NumericSetLogFields, value: string) => {\n    if (!isValidId(exerciseId)) {\n      console.error(\"Cannot update set: exercise information is incomplete.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!sets[setIndex]) {\n      console.error(`Set at index ${setIndex} not found for input change.`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    let parsedValue: number | null = parseFloat(value);\n    if (isNaN(parsedValue)) parsedValue = null;\n\n    const updatedSet: Partial<SetLogState> = { isSaved: false }; // Mark as unsaved when input changes\n    if (field === 'weight_kg' && parsedValue !== null) {\n      updatedSet[field] = convertWeight(parsedValue, preferredWeightUnit as 'kg' | 'lbs', 'kg');\n    } else {\n      updatedSet[field] = parsedValue;\n    }\n    \n    await updateDraft(setIndex, updatedSet);\n  }, [exerciseId, sets, updateDraft, preferredWeightUnit, setTempStatusMessage]);\n\n  const handleEditSet = useCallback(async (setIndex: number) => {\n    if (!isValidId(exerciseId)) {\n      console.error(\"Cannot edit set: exercise information is incomplete.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!sets[setIndex]) {\n      console.error(`Set at index ${setIndex} not found for edit.`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    await updateDraft(setIndex, { isSaved: false }); // Mark as unsaved to allow editing\n    console.log(`[useSetActions] handleEditSet: Set ${setIndex + 1} marked for edit. Draft updated.`);\n  }, [exerciseId, sets, updateDraft, setTempStatusMessage]);\n\n  const handleDeleteSet = useCallback(async (setIndex: number) => {\n    if (!isValidId(exerciseId)) {\n      console.error(\"Cannot delete set: exercise information is incomplete.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!sets[setIndex]) {\n      console.error(`Set at index ${setIndex} not found for delete.`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    const setToDelete = sets[setIndex];\n    \n    await deleteDraft(setIndex);\n    setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n    setTimeout(() => setTempStatusMessage(null), 3000);\n\n    if (setToDelete.id) {\n      // If the set was already saved to DB, queue its deletion\n      // This logic is now handled by useSetPersistence directly\n    }\n  }, [exerciseId, sets, deleteDraft, setTempStatusMessage]);\n\n  return {\n    handleAddSet,\n    handleInputChange,\n    handleEditSet,\n    handleDeleteSet,\n  };\n};\n\nconst isValidId = (id: string | null | undefined): id is string => {\n  return typeof id === 'string' && id.length > 0;\n};","size_bytes":5847},"apps/web/src/hooks/use-set-drafts.ts":{"content":"\"use client\";\n\nimport { useState, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { db, LocalDraftSetLog } from '@/lib/db';\nimport { SetLogState, Tables, GetLastExerciseSetsForExerciseReturns } from '@/types/supabase';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { useSession } from '@/components/session-context-provider';\nimport { toast } from 'sonner'; // Import toast\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\nconst DEFAULT_INITIAL_SETS = 3;\n\nconst isValidId = (id: string | null | undefined): id is string => {\n  return typeof id === 'string' && id.length > 0;\n};\n\nconst isValidDraftKey = (exerciseId: string | null | undefined, setIndex: number | null | undefined): boolean => {\n  return isValidId(exerciseId) && typeof setIndex === 'number' && setIndex >= 0;\n};\n\ninterface UseSetDraftsProps {\n  exerciseId: string;\n  exerciseName: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  currentSessionId: string | null;\n  supabase: SupabaseClient;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\ninterface UseSetDraftsReturn {\n  sets: SetLogState[];\n  loadingDrafts: boolean;\n  updateDraft: (setIndex: number, updatedSet: Partial<SetLogState>) => Promise<void>;\n  addDraft: (newSet: SetLogState) => Promise<void>;\n  deleteDraft: (setIndex: number) => Promise<void>;\n  fetchLastSets: () => Promise<Map<string, GetLastExerciseSetsForExerciseReturns>>;\n}\n\nexport const useSetDrafts = ({\n  exerciseId,\n  exerciseName,\n  exerciseType,\n  exerciseCategory,\n  currentSessionId,\n  supabase,\n  setTempStatusMessage, // NEW\n}: UseSetDraftsProps): UseSetDraftsReturn => {\n  const { session, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const drafts = useLiveQuery(async () => {\n    if (!isValidId(exerciseId)) {\n      return [];\n    }\n    try {\n      const fetchedDrafts = await db.draft_set_logs\n        .where('exercise_id').equals(exerciseId)\n        // Removed the filter by session_id here to always fetch all drafts for the exercise\n        .sortBy('set_index');\n      return fetchedDrafts;\n    } catch (error) {\n      console.error(`Error fetching draft set logs for exercise ${exerciseId}:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return [];\n    }\n  }, [exerciseId, setTempStatusMessage]); // currentSessionId is no longer a dependency here\n\n  const [sets, setSets] = useState<SetLogState[]>([]);\n  const loadingDrafts = drafts === undefined;\n\n  const createInitialDrafts = useCallback(async () => {\n    if (!isValidId(exerciseId)) {\n      return;\n    }\n    try {\n      // Check for existing drafts for this exercise, regardless of session_id\n      const existingDraftsCheck = await db.draft_set_logs\n        .where('exercise_id').equals(exerciseId)\n        .count();\n\n      if (existingDraftsCheck > 0) {\n        return;\n      }\n\n      const draftPayloads: LocalDraftSetLog[] = [];\n      for (let i = 0; i < DEFAULT_INITIAL_SETS; i++) {\n        const newSet: SetLogState = {\n          id: null, created_at: null, session_id: currentSessionId, exercise_id: exerciseId,\n          weight_kg: null, reps: null, reps_l: null, reps_r: null, time_seconds: null,\n          is_pb: false, isSaved: false, isPR: false, lastWeight: null, lastReps: null, lastRepsL: null, lastRepsR: null, lastTimeSeconds: null,\n        };\n        draftPayloads.push({\n          exercise_id: exerciseId, set_index: i, session_id: newSet.session_id, // Use newSet.session_id (which is currentSessionId)\n          weight_kg: newSet.weight_kg, reps: newSet.reps, reps_l: newSet.reps_l, reps_r: newSet.reps_r, time_seconds: newSet.time_seconds,\n          isSaved: false, set_log_id: null,\n          is_pb: false,\n        });\n      }\n      await db.draft_set_logs.bulkPut(draftPayloads);\n    } catch (error) {\n      console.error(`Error creating initial draft sets for exercise ${exerciseId}:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [exerciseId, currentSessionId, setTempStatusMessage]); // currentSessionId is a dependency here because it's used in the payload\n\n  const fetchLastSets = useCallback(async () => {\n    if (!memoizedSessionUserId || !isValidId(exerciseId)) return new Map<string, GetLastExerciseSetsForExerciseReturns>(); // Use memoized ID\n    \n    try {\n      const { data: lastExerciseSets, error: rpcError } = await supabase.rpc('get_last_exercise_sets_for_exercise', {\n        p_user_id: memoizedSessionUserId, // Use memoized ID\n        p_exercise_id: exerciseId,\n      });\n\n      if (rpcError && rpcError.code !== 'PGRST116') { \n        console.error(`Error fetching last sets for exercise ${exerciseName}:`, rpcError);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return new Map<string, GetLastExerciseSetsForExerciseReturns>();\n      }\n      \n      const lastSetsMap = new Map<string, GetLastExerciseSetsForExerciseReturns>();\n      if (lastExerciseSets) {\n        lastSetsMap.set(exerciseId, lastExerciseSets);\n      }\n      return lastSetsMap;\n    } catch (error) {\n      console.error(`Unexpected error in fetchLastSets for exercise ${exerciseId}:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return new Map<string, GetLastExerciseSetsForExerciseReturns>();\n    }\n  }, [memoizedSessionUserId, supabase, exerciseId, exerciseName, setTempStatusMessage]); // Depend on memoized ID\n\n  // Ref to track if session_id update has already been attempted for the current exerciseId\n  const sessionUpdateAttemptedRef = useRef<string | null>(null);\n\n  useEffect(() => {\n    const updateDraftSessionIds = async () => {\n      if (!isValidId(exerciseId) || !currentSessionId) {\n        return;\n      }\n\n      // Only run if currentSessionId is new for this exerciseId\n      if (sessionUpdateAttemptedRef.current === `${exerciseId}-${currentSessionId}`) {\n        return;\n      }\n\n      // Fetch drafts that need updating (session_id is null) for the current exercise\n      const draftsToUpdate = await db.draft_set_logs\n        .where('exercise_id').equals(exerciseId)\n        .and(d => d.session_id === null)\n        .toArray();\n\n      if (draftsToUpdate.length > 0) {\n        console.log(`[useSetDrafts] Updating ${draftsToUpdate.length} drafts to new session_id: ${currentSessionId}`);\n        await db.transaction('rw', db.draft_set_logs, async () => {\n          for (const draft of draftsToUpdate) {\n            await db.draft_set_logs.update([draft.exercise_id, draft.set_index], { session_id: currentSessionId });\n          }\n        });\n        sessionUpdateAttemptedRef.current = `${exerciseId}-${currentSessionId}`; // Mark as attempted\n      }\n    };\n    updateDraftSessionIds();\n  }, [exerciseId, currentSessionId]); // Dependencies: exerciseId, currentSessionId\n\n  useEffect(() => {\n    const processAndSetSets = async () => {\n      if (loadingDrafts || !isValidId(exerciseId)) {\n        return;\n      }\n\n      if (drafts.length === 0) {\n        // No drafts found for this exerciseId. Create initial ones.\n        // The createInitialDrafts function already has an internal check\n        // to prevent creating duplicates if another instance already did.\n        createInitialDrafts();\n        // Do NOT setSets here, as createInitialDrafts will trigger a new liveQuery update,\n        // and this useEffect will run again with the new drafts.\n        return;\n      }\n\n      // If drafts exist, process them and set the state.\n      const loadedSets = drafts.map((draft: LocalDraftSetLog) => ({\n        id: draft.set_log_id || null,\n        created_at: null,\n        session_id: draft.session_id,\n        exercise_id: draft.exercise_id,\n        weight_kg: draft.weight_kg,\n        reps: draft.reps,\n        reps_l: draft.reps_l,\n        reps_r: draft.reps_r,\n        time_seconds: draft.time_seconds,\n        is_pb: draft.is_pb || false,\n        isSaved: draft.isSaved || false,\n        isPR: draft.is_pb || false,\n        lastWeight: null, lastReps: null, lastRepsL: null, lastRepsR: null, lastTimeSeconds: null,\n      }));\n\n      const lastSetsMap = await fetchLastSets();\n      const finalSets = loadedSets.map((set, setIndex) => {\n        const correspondingLastSet = lastSetsMap.get(exerciseId)?.[setIndex];\n        return {\n          ...set,\n          lastWeight: correspondingLastSet?.weight_kg || null,\n          lastReps: correspondingLastSet?.reps || null,\n          lastRepsL: correspondingLastSet?.reps_l || null,\n          lastRepsR: correspondingLastSet?.reps_r || null,\n          lastTimeSeconds: correspondingLastSet?.time_seconds || null,\n        };\n      });\n      setSets(finalSets);\n    };\n\n    processAndSetSets();\n  }, [drafts, loadingDrafts, exerciseId, createInitialDrafts, fetchLastSets]); // Dependencies: drafts, loadingDrafts, exerciseId, createInitialDrafts, fetchLastSets\n\n  const updateDraft = useCallback(async (setIndex: number, updatedSet: Partial<SetLogState>) => {\n    if (!isValidDraftKey(exerciseId, setIndex)) {\n      console.error(`Invalid draft key for updateDraft: exerciseId=${exerciseId}, setIndex=${setIndex}`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    try {\n      const currentDraft = await db.draft_set_logs.get([exerciseId, setIndex]);\n      if (!currentDraft) {\n        console.warn(`Draft not found for update: exerciseId=${exerciseId}, setIndex=${setIndex}`);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return;\n      }\n\n      const newDraft: LocalDraftSetLog = {\n        ...currentDraft,\n        weight_kg: updatedSet.weight_kg !== undefined ? updatedSet.weight_kg : currentDraft.weight_kg,\n        reps: updatedSet.reps !== undefined ? updatedSet.reps : currentDraft.reps,\n        reps_l: updatedSet.reps_l !== undefined ? updatedSet.reps_l : currentDraft.reps_l,\n        reps_r: updatedSet.reps_r !== undefined ? updatedSet.reps_r : currentDraft.reps_r,\n        time_seconds: updatedSet.time_seconds !== undefined ? updatedSet.time_seconds : currentDraft.time_seconds,\n        isSaved: updatedSet.isSaved !== undefined ? updatedSet.isSaved : currentDraft.isSaved,\n        is_pb: updatedSet.is_pb !== undefined ? updatedSet.is_pb : currentDraft.is_pb,\n        \n        exercise_id: exerciseId, \n        set_index: setIndex, \n        session_id: updatedSet.session_id !== undefined ? updatedSet.session_id : currentDraft.session_id,\n        set_log_id: updatedSet.id !== undefined ? updatedSet.id : currentDraft.set_log_id,\n      };\n      await db.draft_set_logs.put(newDraft);\n    } catch (error) {\n      console.error(`Error updating draft set log for exercise ${exerciseId}, set ${setIndex}:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [exerciseId, setTempStatusMessage]);\n\n  const addDraft = useCallback(async (newSet: SetLogState) => {\n    const newSetIndex = drafts ? drafts.length : 0; // Use drafts.length for the new index\n    if (!isValidDraftKey(exerciseId, newSetIndex)) {\n      console.error(`Invalid draft key for addDraft: exerciseId=${exerciseId}, newSetIndex=${newSetIndex}`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    try {\n      const draftPayload: LocalDraftSetLog = {\n        exercise_id: exerciseId, set_index: newSetIndex, session_id: currentSessionId,\n        weight_kg: newSet.weight_kg, reps: newSet.reps, reps_l: newSet.reps_l, reps_r: newSet.reps_r, time_seconds: newSet.time_seconds,\n        isSaved: newSet.isSaved, set_log_id: newSet.id, is_pb: newSet.is_pb,\n      };\n      await db.draft_set_logs.put(draftPayload);\n    } catch (error) {\n      console.error(`Error adding draft set log for exercise ${exerciseId}, set ${newSetIndex}:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [exerciseId, currentSessionId, drafts, setTempStatusMessage]); // Depend on drafts for length\n\n  const deleteDraft = useCallback(async (setIndex: number) => {\n    if (!isValidDraftKey(exerciseId, setIndex)) {\n      console.error(`Invalid draft key for deleteDraft: exerciseId=${exerciseId}, setIndex=${setIndex}`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    try {\n      await db.draft_set_logs.delete([exerciseId, setIndex]);\n      // After deleting, re-index the remaining drafts to maintain sequential order\n      const remainingDrafts = await db.draft_set_logs.where('exercise_id').equals(exerciseId).sortBy('set_index');\n      await db.transaction('rw', db.draft_set_logs, async () => {\n        for (let i = 0; i < remainingDrafts.length; i++) {\n          const draft = remainingDrafts[i];\n          if (draft.set_index !== i) {\n            // Delete old entry and create new with correct index\n            await db.draft_set_logs.delete([draft.exercise_id, draft.set_index]);\n            await db.draft_set_logs.put({ ...draft, set_index: i });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(`Error deleting draft set log for exercise ${exerciseId}, set ${setIndex}:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n    }\n  }, [exerciseId, setTempStatusMessage]);\n\n  return {\n    sets,\n    loadingDrafts,\n    updateDraft,\n    addDraft,\n    deleteDraft,\n    fetchLastSets,\n  };\n};","size_bytes":14167},"apps/web/src/hooks/use-set-persistence.ts":{"content":"\"use client\";\n\nimport { useCallback } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner';\nimport { v4 as uuidv4 } from 'uuid';\nimport { TablesInsert, TablesUpdate, SetLogState, Tables } from '@/types/supabase';\nimport { convertWeight } from '@/lib/unit-conversions';\nimport { db, addToSyncQueue } from '@/lib/db';\n\ninterface UseSetPersistenceProps {\n  exerciseId: string;\n  exerciseType: Tables<'exercise_definitions'>['type'];\n  exerciseCategory?: Tables<'exercise_definitions'>['category'] | null;\n  supabase: SupabaseClient;\n  preferredWeightUnit: Tables<'profiles'>['preferred_weight_unit'];\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const useSetPersistence = ({\n  exerciseId,\n  exerciseType,\n  exerciseCategory,\n  supabase,\n  preferredWeightUnit,\n  setTempStatusMessage, // NEW\n}: UseSetPersistenceProps) => {\n\n  const saveSetToDb = useCallback(async (set: SetLogState, setIndex: number, sessionIdToUse: string): Promise<{ savedSet: SetLogState | null }> => {\n    // Validation logic remains the same\n    if (exerciseType === 'weight') {\n      if (set.weight_kg === null || set.weight_kg <= 0) {\n        setTempStatusMessage({ message: \"Invalid weight!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return { savedSet: null };\n      }\n      if (exerciseCategory === 'Unilateral') {\n        if (set.reps_l === null || set.reps_r === null || set.reps_l < 0 || set.reps_r < 0) {\n          setTempStatusMessage({ message: \"Invalid reps!\", type: 'error' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n          return { savedSet: null };\n        }\n      } else {\n        if (set.reps === null || set.reps <= 0) {\n          setTempStatusMessage({ message: \"Invalid reps!\", type: 'error' });\n          setTimeout(() => setTempStatusMessage(null), 3000);\n          return { savedSet: null };\n        }\n      }\n    } else if (exerciseType === 'timed') {\n      if (set.time_seconds === null || set.time_seconds <= 0) {\n        setTempStatusMessage({ message: \"Invalid time!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return { savedSet: null };\n      }\n    }\n\n    const isNewSet = !set.id;\n    const setId = set.id || uuidv4();\n\n    const setLogData = {\n      id: setId,\n      session_id: sessionIdToUse,\n      exercise_id: exerciseId,\n      weight_kg: set.weight_kg,\n      reps: set.reps,\n      reps_l: set.reps_l,\n      reps_r: set.reps_r,\n      time_seconds: set.time_seconds,\n      is_pb: set.is_pb,\n      created_at: set.created_at || new Date().toISOString(),\n    };\n\n    console.log(`[useSetPersistence] Attempting to save setLogData:`, setLogData);\n\n    try {\n      await db.set_logs.put(setLogData);\n      await addToSyncQueue(isNewSet ? 'create' : 'update', 'set_logs', setLogData);\n      console.log(`[useSetPersistence] Set ${setIndex + 1} saved locally and added to sync queue.`);\n      return { savedSet: { ...set, ...setLogData, isSaved: true } };\n    } catch (error: any) {\n      console.error(`[useSetPersistence] ERROR saving set ${setIndex + 1} locally:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return { savedSet: null };\n    }\n  }, [exerciseId, exerciseType, exerciseCategory, supabase, preferredWeightUnit, setTempStatusMessage]);\n\n  const deleteSetFromDb = useCallback(async (setId: string): Promise<boolean> => {\n    try {\n      await db.set_logs.delete(setId);\n      await addToSyncQueue('delete', 'set_logs', { id: setId });\n      setTempStatusMessage({ message: \"Removed!\", type: 'removed' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return true;\n    } catch (error: any) {\n      console.error(`[useSetPersistence] ERROR deleting set ${setId} locally:`, error);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return false;\n    }\n  }, [supabase, setTempStatusMessage]);\n\n  return { saveSetToDb, deleteSetFromDb };\n};","size_bytes":4191},"apps/web/src/hooks/use-set-pr-logic.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner';\nimport { Tables, SetLogState, UserExercisePR, UserExercisePRInsert, UserExercisePRUpdate } from '@/types/supabase';\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\n\ninterface UseSetPRLogicProps {\n  exerciseId: string;\n  exerciseType: ExerciseDefinition['type'];\n  supabase: SupabaseClient;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\nexport const useSetPRLogic = ({ exerciseId, exerciseType, supabase, setTempStatusMessage }: UseSetPRLogicProps) => {\n  const { session, memoizedSessionUserId } = useSession(); // Get session to access user ID\n  const [exercisePR, setExercisePR] = useState<UserExercisePR | null>(null);\n  const [loadingPR, setLoadingPR] = useState(true);\n\n  useEffect(() => {\n    const fetchExercisePR = async () => {\n      if (!memoizedSessionUserId) { // Use memoized ID\n        setLoadingPR(false);\n        console.log(`[useSetPRLogic] No user session, skipping PB fetch for ${exerciseId}`);\n        return;\n      }\n\n      setLoadingPR(true);\n      console.log(`[useSetPRLogic] Fetching PB for exercise ${exerciseId} for user ${memoizedSessionUserId}`); // Use memoized ID\n      const { data, error } = await supabase\n        .from('user_exercise_prs')\n        .select('id, user_id, exercise_id, best_volume_kg, best_time_seconds, last_achieved_date, created_at, updated_at')\n        .eq('exercise_id', exerciseId)\n        .eq('user_id', memoizedSessionUserId) // Explicitly filter by user_id using memoized ID\n        .limit(1); // Fetch up to one record\n\n      if (error && error.code !== 'PGRST116') { // PGRST116 means no rows found\n        console.error(`[useSetPRLogic] Error fetching exercise PB for ${exerciseId}:`, error);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        setExercisePR(null);\n      } else if (data && data.length > 0) {\n        setExercisePR(data[0] as UserExercisePR); // Take the first (and only) record\n        console.log(`[useSetPRLogic] Found existing PB for ${exerciseId}:`, data[0]);\n      } else {\n        setExercisePR(null);\n        console.log(`[useSetPRLogic] No existing PB found for ${exerciseId}.`);\n      }\n      setLoadingPR(false);\n    };\n    fetchExercisePR();\n  }, [exerciseId, supabase, memoizedSessionUserId, setTempStatusMessage]); // Depend on memoized ID\n\n  const checkAndSaveSetPR = useCallback(async (\n    set: SetLogState,\n    userId: string,\n    currentPRState: UserExercisePR | null // New argument\n  ): Promise<{ isNewPR: boolean; updatedPR: UserExercisePR | null }> => {\n    let currentSetPerformance: number | null = null;\n\n    if (exerciseType === 'weight') {\n      currentSetPerformance = (set.weight_kg || 0) * (set.reps || 0);\n    } else if (exerciseType === 'timed') {\n      currentSetPerformance = set.time_seconds || 0;\n    }\n\n    console.log(`[useSetPRLogic] checkAndSaveSetPB for ${exerciseId}, set performance: ${currentSetPerformance}, currentPRState:`, currentPRState);\n\n    if (currentSetPerformance === null || currentSetPerformance <= 0) {\n      console.log(`[useSetPRLogic] No valid performance for PB check for ${exerciseId}.`);\n      return { isNewPR: false, updatedPR: currentPRState };\n    }\n\n    let isNewPR = false;\n    if (!currentPRState) { // Use currentPRState for comparison\n      isNewPR = true;\n      console.log(`[useSetPRLogic] No previous PB, so this is a new PB for ${exerciseId}.`);\n    } else if (exerciseType === 'weight' && currentPRState.best_volume_kg !== null) {\n      isNewPR = currentSetPerformance > currentPRState.best_volume_kg;\n      console.log(`[useSetPRLogic] Weight PB check: current ${currentSetPerformance} vs previous ${currentPRState.best_volume_kg}. New PB: ${isNewPR}`);\n    } else if (exerciseType === 'timed' && currentPRState.best_time_seconds !== null) {\n      isNewPR = currentSetPerformance > currentPRState.best_time_seconds;\n      console.log(`[useSetPRLogic] Timed PB check: current ${currentSetPerformance} vs previous ${currentPRState.best_time_seconds}. New PB: ${isNewPR}`);\n    } else {\n      // This case handles when there's a PB record but the relevant field is null (e.g., first time doing a timed exercise)\n      isNewPR = true;\n      console.log(`[useSetPRLogic] Existing PB record but relevant field is null, so this is a new PB for ${exerciseId}.`);\n    }\n\n    if (isNewPR) {\n      console.log(`[useSetPRLogic] New PB detected for exercise ${exerciseId}! Performance: ${currentSetPerformance}`);\n      const prData: UserExercisePRInsert | UserExercisePRUpdate = {\n        user_id: userId,\n        exercise_id: exerciseId,\n        last_achieved_date: new Date().toISOString(),\n        best_volume_kg: exerciseType === 'weight' ? currentSetPerformance : (currentPRState?.best_volume_kg || null),\n        best_time_seconds: exerciseType === 'timed' ? currentSetPerformance : (currentPRState?.best_time_seconds || null),\n      };\n\n      const { error: upsertError, data: updatedPR } = await supabase\n        .from('user_exercise_prs')\n        .upsert(prData, { onConflict: 'user_id,exercise_id' })\n        .select()\n        .single();\n\n      if (upsertError) {\n        console.error(`[useSetPRLogic] Error saving set PB for ${exerciseId}:`, upsertError);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return { isNewPR: false, updatedPR: currentPRState }; // Return original if error\n      }\n      setExercisePR(updatedPR as UserExercisePR); // Update internal state\n      console.log(`[useSetPRLogic] Successfully upserted PB for ${exerciseId}. New PB record:`, updatedPR);\n      return { isNewPR: true, updatedPR: updatedPR as UserExercisePR };\n    }\n    console.log(`[useSetPRLogic] No new PB for ${exerciseId}.`);\n    return { isNewPR: false, updatedPR: currentPRState };\n  }, [exerciseId, exerciseType, supabase, setTempStatusMessage]);\n\n  return { exercisePR, loadingPR, checkAndSaveSetPR };\n};","size_bytes":6277},"apps/web/src/hooks/use-set-saver.ts":{"content":"\"use client\";\n\nimport { useCallback } from 'react';\nimport { toast } from 'sonner';\nimport { SetLogState, Tables, UserExercisePR } from '@/types/supabase';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { useSession } from '@/components/session-context-provider';\nimport { useSetPersistence } from './use-set-persistence';\nimport { useSetPRLogic } from './use-set-pr-logic'; // Import useSetPRLogic\nimport { useSetDrafts } from './use-set-drafts'; // Import useSetDrafts\n\ntype ExerciseDefinition = Tables<'exercise_definitions'>;\ntype Profile = Tables<'profiles'>;\n\n// NEW: Helper function to check if a set has any user input\nconst hasUserInput = (set: SetLogState): boolean => {\n  return (set.weight_kg !== null && set.weight_kg > 0) ||\n         (set.reps !== null && set.reps > 0) ||\n         (set.reps_l !== null && set.reps_l > 0) ||\n         (set.reps_r !== null && set.reps_r > 0) ||\n         (set.time_seconds !== null && set.time_seconds > 0);\n};\n\nconst isValidId = (id: string | null | undefined): id is string => {\n  return typeof id === 'string' && id.length > 0;\n};\n\ninterface UseSetSaverProps {\n  exerciseId: string;\n  exerciseType: ExerciseDefinition['type'];\n  exerciseCategory?: ExerciseDefinition['category'] | null;\n  currentSessionId: string | null;\n  sets: SetLogState[];\n  updateDraft: (setIndex: number, updatedSet: Partial<SetLogState>) => Promise<void>;\n  onFirstSetSaved: (timestamp: string) => Promise<string>;\n  preferredWeightUnit: Profile['preferred_weight_unit'];\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void; // NEW\n}\n\ninterface UseSetSaverReturn {\n  handleSaveSet: (setIndex: number) => Promise<void>;\n  exercisePR: UserExercisePR | null;\n  loadingPR: boolean;\n}\n\nexport const useSetSaver = ({\n  exerciseId,\n  exerciseType,\n  exerciseCategory,\n  currentSessionId,\n  sets,\n  updateDraft,\n  onFirstSetSaved,\n  preferredWeightUnit,\n  setTempStatusMessage, // NEW\n}: UseSetSaverProps): UseSetSaverReturn => {\n  const { session, supabase, memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const { saveSetToDb } = useSetPersistence({\n    exerciseId,\n    exerciseType,\n    exerciseCategory,\n    supabase,\n    preferredWeightUnit,\n    setTempStatusMessage, // NEW\n  });\n  const { exercisePR, loadingPR, checkAndSaveSetPR } = useSetPRLogic({\n    exerciseId,\n    exerciseType,\n    supabase,\n    setTempStatusMessage, // NEW\n  });\n\n  const handleSaveSet = useCallback(async (setIndex: number) => {\n    console.log(`[useSetSaver] handleSaveSet called for setIndex: ${setIndex}. Initial currentSessionId: ${currentSessionId}`);\n\n    if (!isValidId(exerciseId)) {\n      console.error(\"Cannot save set: exercise information is incomplete.\");\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n    if (!sets[setIndex]) {\n      console.error(`Set at index ${setIndex} not found for saving.`);\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    let currentSet = { ...sets[setIndex] }; // Create a mutable copy\n\n    if (!hasUserInput(currentSet)) {\n      setTempStatusMessage({ message: \"No data to save!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      return;\n    }\n\n    let sessionIdToUse = currentSessionId;\n    if (!sessionIdToUse) {\n      console.log(`[useSetSaver] currentSessionId is null. Calling onFirstSetSaved.`);\n      try {\n        const newSessionId = await onFirstSetSaved(new Date().toISOString());\n        sessionIdToUse = newSessionId;\n        console.log(`[useSetSaver] New sessionId generated: ${sessionIdToUse}`);\n        currentSet.session_id = newSessionId; // IMPORTANT: Update session_id in the currentSet copy\n      } catch (err) {\n        console.error(\"Failed to start workout session:\", err);\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        return;\n      }\n    } else {\n      console.log(`[useSetSaver] Using existing sessionId: ${sessionIdToUse}`);\n      currentSet.session_id = sessionIdToUse; // Ensure it's set even if not new\n    }\n\n    let isNewSetPR = false; // Declare isNewSetPR here\n    let localCurrentExercisePR: UserExercisePR | null = exercisePR;\n    if (memoizedSessionUserId) { // Use memoized ID\n      // Pass the updated currentSet to PR check\n      const { isNewPR: currentSetIsNewPR, updatedPR } = await checkAndSaveSetPR(currentSet, memoizedSessionUserId, localCurrentExercisePR); // Use memoized ID\n      if (currentSetIsNewPR) isNewSetPR = true; // Assign to declared variable\n      localCurrentExercisePR = updatedPR; // Update local PR state for next iteration\n      console.log(`[useSetSaver] handleSaveSet: Set ${setIndex + 1} PR check result: isNewPR=${currentSetIsNewPR}, updatedPR=`, updatedPR);\n    }\n\n    // Pass the updated currentSet to saveSetToDb\n    const { savedSet } = await saveSetToDb({ ...currentSet, is_pb: isNewSetPR }, setIndex, sessionIdToUse);\n    if (savedSet) {\n      console.log(`[useSetSaver] saveSetToDb returned savedSet:`, savedSet);\n      await updateDraft(setIndex, {\n        id: savedSet.id,\n        session_id: sessionIdToUse,\n        weight_kg: savedSet.weight_kg,\n        reps: savedSet.reps,\n        reps_l: savedSet.reps_l,\n        reps_r: savedSet.reps_r,\n        time_seconds: savedSet.time_seconds,\n        isSaved: true,\n        is_pb: savedSet.is_pb || false,\n      });\n      setTempStatusMessage({ message: \"Saved!\", type: 'success' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      console.log(`[useSetSaver] handleSaveSet: Set ${setIndex + 1} saved locally with is_pb=${savedSet.is_pb}. Draft updated.`);\n    } else {\n      setTempStatusMessage({ message: \"Error!\", type: 'error' });\n      setTimeout(() => setTempStatusMessage(null), 3000);\n      await updateDraft(setIndex, { isSaved: false }); // Rollback saved status\n      console.log(`[useSetSaver] handleSaveSet: Set ${setIndex + 1} failed to save. Draft rolled back.`);\n    }\n  }, [exerciseId, currentSessionId, sets, updateDraft, onFirstSetSaved, memoizedSessionUserId, checkAndSaveSetPR, exercisePR, saveSetToDb, setTempStatusMessage]); // Depend on memoized ID\n\n  return {\n    handleSaveSet,\n    exercisePR,\n    loadingPR,\n  };\n};","size_bytes":6457},"apps/web/src/hooks/use-workout-data-fetcher.ts":{"content":"\"use client\";\n\nimport { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { toast } from 'sonner';\nimport { Tables, WorkoutExercise, WorkoutWithLastCompleted, GroupedTPath, LocalUserAchievement, Profile, FetchedExerciseDefinition } from '@/types/supabase';\nimport { useCacheAndRevalidate } from './use-cache-and-revalidate';\nimport { db, LocalExerciseDefinition, LocalTPath, LocalProfile, LocalTPathExercise, LocalGym, LocalGymExercise, LocalWorkoutSession, LocalActivityLog } from '@/lib/db';\nimport { useSession } from '@/components/session-context-provider';\nimport { useUserProfile } from '@/hooks/data/useUserProfile';\nimport { useLiveQuery } from 'dexie-react-hooks';\nimport { getMaxMinutes, areSetsEqual } from '@/lib/utils'; // Keep web-specific utils; // Import getMaxMinutes and areSetsEqual\n\nconst ULUL_ORDER = ['Upper Body A', 'Lower Body A', 'Upper Body B', 'Lower Body B'];\nconst PPL_ORDER = ['Push', 'Pull', 'Legs'];\n\ninterface WeeklySummary {\n  completed_workouts: { id: string; name: string }[];\n  goal_total: number;\n  programme_type: 'ulul' | 'ppl';\n  completed_activities: any[]; // Keep this flexible for now\n}\n\ninterface UseWorkoutDataFetcherReturn {\n  allAvailableExercises: FetchedExerciseDefinition[];\n  groupedTPaths: GroupedTPath[];\n  workoutExercisesCache: Record<string, WorkoutExercise[]>;\n  loadingData: boolean;\n  dataError: string | null;\n  refreshAllData: () => Promise<void>;\n  profile: Profile | null;\n  refreshProfile: () => void;\n  refreshAchievements: () => void;\n  refreshTPaths: () => void;\n  refreshTPathExercises: () => void;\n  isGeneratingPlan: boolean;\n  tempStatusMessage: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null;\n  setTempStatusMessage: (message: { message: string; type: 'added' | 'removed' | 'success' | 'error' } | null) => void;\n  availableMuscleGroups: string[];\n  userGyms: Tables<'gyms'>[];\n  exerciseGymsMap: Record<string, string[]>;\n  exerciseWorkoutsMap: Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]>;\n  availableGymExerciseIds: Set<string>;\n  allGymExerciseIds: Set<string>;\n  weeklySummary: WeeklySummary | null;\n  loadingWeeklySummary: boolean;\n  addActivityToWeeklySummary: (newActivity: Tables<'activity_logs'>) => void;\n}\n\n// Helper to get the start of the week (Monday) in UTC\nconst getStartOfWeekUTC = (date: Date): Date => {\n  const d = new Date(date);\n  d.setUTCHours(0, 0, 0, 0);\n  const day = d.getUTCDay();\n  const diff = d.getUTCDate() - day + (day === 0 ? -6 : 1);\n  d.setUTCDate(diff);\n  return d;\n};\n\nexport const useWorkoutDataFetcher = (): UseWorkoutDataFetcherReturn => {\n  const { session, supabase, memoizedSessionUserId } = useSession();\n  const [isGeneratingPlan, setIsGeneratingPlan] = useState(false);\n  const pollingRef = useRef<NodeJS.Timeout | null>(null);\n  const prevStatusRef = useRef<string | null>(null);\n  const [tempStatusMessage, setTempStatusMessage] = useState<{ message: string; type: 'added' | 'removed' | 'success' | 'error' } | null>(null);\n  const [exerciseWorkoutsMap, setExerciseWorkoutsMap] = useState<Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]>>({});\n  const [isProcessingDerivedData, setIsProcessingDerivedData] = useState(true);\n\n  const [weeklySummary, setWeeklySummary] = useState<WeeklySummary | null>(null);\n  const [loadingWeeklySummary, setLoadingWeeklySummary] = useState(true);\n\n  const availableGymExerciseIdsRef = useRef<Set<string>>(new Set());\n  const allGymExerciseIdsRef = useRef<Set<string>>(new Set());\n\n  const { data: cachedExercises, loading: loadingExercises, error: exercisesError, refresh: refreshExercises } = useCacheAndRevalidate<LocalExerciseDefinition>({\n    cacheTable: 'exercise_definitions_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => client.from('exercise_definitions').select('*').order('name', { ascending: true }), []),\n    queryKey: 'all_exercises',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const { data: cachedTPaths, loading: loadingTPaths, error: tPathsError, refresh: refreshTPaths } = useCacheAndRevalidate<LocalTPath>({\n    cacheTable: 't_paths_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => client.from('t_paths').select('*'), []),\n    queryKey: 'all_t_paths',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const { profile, isLoading: loadingProfile, error: profileError, refresh: refreshProfile } = useUserProfile();\n  const cachedProfile = profile ? [profile] : null;\n\n  const { data: cachedTPathExercises, loading: loadingTPathExercises, error: tPathExercisesError, refresh: refreshTPathExercises } = useCacheAndRevalidate<Tables<'t_path_exercises'>>({\n    cacheTable: 't_path_exercises_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null };\n      const { data, error } = await client.from('t_path_exercises').select('id, exercise_id, template_id, order_index, is_bonus_exercise, created_at');\n      return { data: data || [], error };\n    }, [memoizedSessionUserId]),\n    queryKey: 'all_t_path_exercises',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const { data: cachedAchievements, loading: loadingAchievements, error: achievementsError, refresh: refreshAchievements } = useCacheAndRevalidate<LocalUserAchievement>({\n    cacheTable: 'user_achievements_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null };\n      const { data, error } = await client.from('user_achievements').select('id, user_id, achievement_id, unlocked_at').eq('user_id', memoizedSessionUserId);\n      return { data: data as LocalUserAchievement[] || [], error };\n    }, [memoizedSessionUserId]),\n    queryKey: 'user_achievements',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const { data: cachedUserGyms, loading: loadingUserGyms, error: userGymsError, refresh: refreshUserGyms } = useCacheAndRevalidate<Tables<'gyms'>>({\n    cacheTable: 'gyms_cache',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null };\n      return client.from('gyms').select('*').eq('user_id', memoizedSessionUserId);\n    }, [memoizedSessionUserId]),\n    queryKey: 'user_gyms_fetcher',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const [cachedGymExercises, setCachedGymExercises] = useState<LocalGymExercise[] | null>(null);\n  const [loadingGymExercises, setLoadingGymExercises] = useState(true);\n  const [gymExercisesError, setGymExercisesError] = useState<string | null>(null);\n\n  const fetchGymExercises = useCallback(async () => {\n    if (!memoizedSessionUserId) {\n      setCachedGymExercises([]);\n      setLoadingGymExercises(false);\n      return;\n    }\n    setLoadingGymExercises(true);\n    setGymExercisesError(null);\n    try {\n      const { data: userGymsData, error: userGymsError } = await supabase.from('gyms').select('id').eq('user_id', memoizedSessionUserId);\n      if (userGymsError) throw new Error(userGymsError.message || \"Failed to fetch user gyms for gym exercises.\");\n      const gymIds = (userGymsData || []).map(g => g.id);\n      if (gymIds.length === 0) {\n        setCachedGymExercises([]);\n        return;\n      }\n      const { data, error } = await supabase.from('gym_exercises').select('gym_id, exercise_id, created_at').in('gym_id', gymIds);\n      if (error) throw new Error(error.message || \"Failed to fetch gym exercises.\");\n      \n      await db.transaction('rw', db.gym_exercises_cache, async () => {\n        await db.gym_exercises_cache.clear();\n        await db.gym_exercises_cache.bulkPut(data || []);\n      });\n      setCachedGymExercises(data || []);\n    } catch (err: any) {\n      console.error(\"[WorkoutDataFetcher] Error fetching gym exercises:\", err);\n      setGymExercisesError(err.message || \"Failed to load gym exercises.\");\n      toast.error(`Failed to load gym exercises: ${err.message}`);\n    } finally {\n      setLoadingGymExercises(false);\n    }\n  }, [memoizedSessionUserId, supabase]);\n\n  useEffect(() => {\n    fetchGymExercises();\n  }, [fetchGymExercises]);\n\n  const liveCachedGymExercises = useLiveQuery(async () => {\n    if (!memoizedSessionUserId) return [];\n    return db.gym_exercises_cache.toArray();\n  }, [memoizedSessionUserId]);\n\n  useEffect(() => {\n    if (liveCachedGymExercises !== undefined) {\n      setCachedGymExercises(liveCachedGymExercises);\n    }\n  }, [liveCachedGymExercises]);\n\n  const { data: cachedSessions, loading: loadingSessions, error: sessionsError, refresh: refreshSessions } = useCacheAndRevalidate<LocalWorkoutSession>({\n    cacheTable: 'workout_sessions',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null };\n      return client.from('workout_sessions').select('*').eq('user_id', memoizedSessionUserId);\n    }, [memoizedSessionUserId]),\n    queryKey: 'data_fetcher_sessions',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const { data: cachedActivities, loading: loadingActivities, error: activitiesError, refresh: refreshActivities } = useCacheAndRevalidate<LocalActivityLog>({\n    cacheTable: 'activity_logs',\n    supabaseQuery: useCallback(async (client: SupabaseClient) => {\n      if (!memoizedSessionUserId) return { data: [], error: null };\n      return client.from('activity_logs').select('*').eq('user_id', memoizedSessionUserId);\n    }, [memoizedSessionUserId]),\n    queryKey: 'data_fetcher_activities',\n    supabase,\n    sessionUserId: memoizedSessionUserId,\n  });\n\n  const baseLoading = useMemo(() => loadingExercises || loadingTPaths || loadingProfile || loadingTPathExercises || loadingAchievements || loadingUserGyms || loadingGymExercises || loadingSessions || loadingActivities, [loadingExercises, loadingTPaths, loadingProfile, loadingTPathExercises, loadingAchievements, loadingUserGyms, loadingGymExercises, loadingSessions, loadingActivities]);\n  const dataError = useMemo(() => exercisesError || tPathsError || profileError || tPathExercisesError || achievementsError || userGymsError || gymExercisesError || sessionsError || activitiesError, [exercisesError, tPathsError, profileError, tPathExercisesError, achievementsError, userGymsError, gymExercisesError, sessionsError, activitiesError]);\n\n  const allAvailableExercises = useMemo(() => (cachedExercises || []).map(ex => ({ ...ex, id: ex.id, is_favorited_by_current_user: false, movement_type: ex.movement_type, movement_pattern: ex.movement_pattern })), [cachedExercises]);\n  const availableMuscleGroups = useMemo(() => Array.from(new Set((cachedExercises || []).map(ex => ex.main_muscle))).sort(), [cachedExercises]);\n\n  const userGyms = useMemo(() => cachedUserGyms || [], [cachedUserGyms]);\n\n  const exerciseGymsMap = useMemo(() => {\n    const newExerciseGymsMap: Record<string, string[]> = {};\n    const gymIdToNameMap = new Map<string, string>();\n    (cachedUserGyms || []).forEach(gym => gymIdToNameMap.set(gym.id, gym.name));\n\n    (cachedGymExercises || []).forEach(link => {\n      const gymName = gymIdToNameMap.get(link.gym_id);\n      if (gymName) {\n        if (!newExerciseGymsMap[link.exercise_id]) {\n          newExerciseGymsMap[link.exercise_id] = [];\n        }\n        newExerciseGymsMap[link.exercise_id].push(gymName);\n      }\n    });\n    return newExerciseGymsMap;\n  }, [cachedUserGyms, cachedGymExercises]);\n\n  const derivedAvailableGymExerciseIds = useMemo(() => {\n    if (!profile?.active_gym_id || !cachedGymExercises) return new Set<string>();\n    return new Set(cachedGymExercises.filter(link => link.gym_id === profile.active_gym_id).map(link => link.exercise_id));\n  }, [profile?.active_gym_id, cachedGymExercises]);\n\n  const derivedAllGymExerciseIds = useMemo(() => {\n    if (!cachedGymExercises) return new Set<string>();\n    return new Set(cachedGymExercises.map(link => link.exercise_id));\n  }, [cachedGymExercises]);\n\n  useEffect(() => {\n    if (!areSetsEqual(derivedAvailableGymExerciseIds, availableGymExerciseIdsRef.current)) {\n      availableGymExerciseIdsRef.current = derivedAvailableGymExerciseIds;\n    }\n    if (!areSetsEqual(derivedAllGymExerciseIds, allGymExerciseIdsRef.current)) {\n      allGymExerciseIdsRef.current = derivedAllGymExerciseIds;\n    }\n  }, [derivedAvailableGymExerciseIds, derivedAllGymExerciseIds]);\n\n  const [groupedTPaths, setGroupedTPaths] = useState<GroupedTPath[]>([]);\n\n  const workoutExercisesCache = useMemo(() => {\n    if (baseLoading || dataError || !memoizedSessionUserId || !cachedTPaths || !cachedTPathExercises || !cachedExercises) {\n      return {};\n    }\n    const exerciseDefMap = new Map<string, LocalExerciseDefinition>();\n    (cachedExercises || []).forEach(def => exerciseDefMap.set(def.id, def as LocalExerciseDefinition));\n\n    const newWorkoutExercisesCache: Record<string, WorkoutExercise[]> = {};\n    const allChildWorkouts = (cachedTPaths || []).filter(tp => tp.user_id === memoizedSessionUserId && tp.parent_t_path_id);\n    for (const workout of allChildWorkouts) {\n      const exercisesForWorkout = (cachedTPathExercises || [])\n        .filter(tpe => tpe.template_id === workout.id)\n        .sort((a, b) => a.order_index - b.order_index)\n        .map(tpe => {\n          const exerciseDef = exerciseDefMap.get(tpe.exercise_id);\n          if (!exerciseDef) return null;\n          return { ...exerciseDef, is_bonus_exercise: tpe.is_bonus_exercise || false };\n        })\n        .filter(Boolean) as WorkoutExercise[];\n      newWorkoutExercisesCache[workout.id] = exercisesForWorkout;\n    }\n    return newWorkoutExercisesCache;\n  }, [baseLoading, dataError, memoizedSessionUserId, cachedTPaths, cachedTPathExercises, cachedExercises]);\n\n  useEffect(() => {\n    if (baseLoading || dataError || !profile) {\n      setLoadingWeeklySummary(baseLoading);\n      return;\n    }\n\n    setLoadingWeeklySummary(true);\n    \n    let programmeType = profile?.programme_type;\n    if (profile?.active_t_path_id) {\n      const activeTPath = (cachedTPaths || []).find(tp => tp.id === profile.active_t_path_id);\n      if (activeTPath?.settings && typeof activeTPath.settings === 'object' && 'tPathType' in activeTPath.settings) {\n        programmeType = (activeTPath.settings as { tPathType: string }).tPathType;\n      }\n    }\n\n    if (!programmeType) {\n      setWeeklySummary(null);\n      setLoadingWeeklySummary(false);\n      return;\n    }\n\n    const goal_total = programmeType === 'ulul' ? 4 : 3;\n    const startOfWeek = getStartOfWeekUTC(new Date());\n\n    const completed_workouts_sorted = (cachedSessions || [])\n      .filter(s => s.completed_at && new Date(s.completed_at) >= startOfWeek)\n      .sort((a, b) => new Date(a.completed_at!).getTime() - new Date(b.completed_at!).getTime())\n      .map(s => ({ id: s.id, name: s.template_name || 'Ad Hoc Workout' }));\n\n    const completed_activities = (cachedActivities || [])\n      .filter(a => new Date(a.log_date) >= startOfWeek)\n      .map(a => ({\n        id: a.id,\n        type: a.activity_type,\n        distance: a.distance,\n        time: a.time,\n        date: a.log_date,\n      }));\n\n    setWeeklySummary({\n      completed_workouts: completed_workouts_sorted,\n      goal_total,\n      programme_type: programmeType as 'ulul' | 'ppl',\n      completed_activities,\n    });\n\n    setLoadingWeeklySummary(false);\n\n  }, [baseLoading, dataError, profile, cachedSessions, cachedActivities, cachedTPaths]);\n\n  const addActivityToWeeklySummary = useCallback(async (newActivity: Tables<'activity_logs'>) => {\n    try {\n      await db.activity_logs.put({\n        ...newActivity,\n        user_id: newActivity.user_id!,\n        created_at: newActivity.created_at || new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error(\"Failed to add new activity to local cache:\", error);\n    }\n  }, []);\n\n  useEffect(() => {\n    const processDerivedData = async () => {\n      if (baseLoading || dataError || !memoizedSessionUserId || !cachedTPaths || !cachedTPathExercises || !profile || !cachedExercises) {\n        setGroupedTPaths([]);\n        setExerciseWorkoutsMap({});\n        setIsProcessingDerivedData(false);\n        return;\n      }\n\n      setIsProcessingDerivedData(true);\n      try {\n        const allTPaths = cachedTPaths || [];\n        const tPathExercisesData = cachedTPathExercises || [];\n        const activeTPathId = profile.active_t_path_id;\n        const preferredSessionLength = profile.preferred_session_length;\n        const maxAllowedMinutes = getMaxMinutes(preferredSessionLength);\n\n        const allChildWorkouts = allTPaths.filter(tp => tp.user_id === memoizedSessionUserId && tp.parent_t_path_id);\n        const userMainTPaths = allTPaths.filter(tp => tp.user_id === memoizedSessionUserId && !tp.parent_t_path_id);\n        const newGroupedTPaths: GroupedTPath[] = await Promise.all(\n          userMainTPaths.map(async (mainTPath) => {\n            let childWorkouts = allChildWorkouts.filter(tp => tp.parent_t_path_id === mainTPath.id);\n            const enrichedChildWorkouts = await Promise.all(\n              childWorkouts.map(async (workout) => {\n                try {\n                  const { data: lastSessionDate, error: rpcError } = await supabase.rpc('get_last_workout_date_for_t_path', { p_t_path_id: workout.id });\n                  if (rpcError && rpcError.code !== 'PGRST116') throw rpcError;\n                  return { ...workout, last_completed_at: lastSessionDate?.[0]?.last_completed_at || null };\n                } catch (err) {\n                  console.error(`[WorkoutDataFetcher] Error fetching last completed date for workout ${workout.id}:`, err);\n                  toast.error(`Failed to load last completion date for workout ${workout.template_name}.`);\n                  return { ...workout, last_completed_at: null };\n                }\n              })\n            );\n            const tPathSettings = mainTPath.settings as { tPathType?: string };\n            if (tPathSettings?.tPathType === 'ppl') {\n              enrichedChildWorkouts.sort((a, b) => PPL_ORDER.indexOf(a.template_name) - PPL_ORDER.indexOf(b.template_name));\n            } else if (tPathSettings?.tPathType === 'ulul') {\n              enrichedChildWorkouts.sort((a, b) => ULUL_ORDER.indexOf(a.template_name) - ULUL_ORDER.indexOf(b.template_name));\n            }\n            return { mainTPath, childWorkouts: enrichedChildWorkouts };\n          })\n        );\n        if (JSON.stringify(newGroupedTPaths) !== JSON.stringify(groupedTPaths)) {\n          setGroupedTPaths(newGroupedTPaths);\n        }\n\n        const { data: structureData, error: structureError } = await supabase\n          .from('workout_exercise_structure')\n          .select('exercise_library_id, workout_name, min_session_minutes, bonus_for_time_group');\n        if (structureError) throw structureError;\n        const structure = structureData || [];\n\n        const libraryIdToUuidMap = new Map<string, string>();\n        (cachedExercises || []).forEach(ex => {\n          if (ex.library_id) libraryIdToUuidMap.set(ex.library_id, ex.id);\n        });\n\n        const newMap: Record<string, { id: string; name: string; isUserOwned: boolean; isBonus: boolean }[]> = {};\n        const activeChildWorkoutIds = activeTPathId ? allTPaths.filter(tp => tp.parent_t_path_id === activeTPathId).map(cw => cw.id) : [];\n        const activeWorkoutNames = activeTPathId ? allTPaths.filter(tp => tp.parent_t_path_id === activeTPathId).map(cw => cw.template_name) : [];\n\n        tPathExercisesData.forEach(tpe => {\n          if (activeChildWorkoutIds.includes(tpe.template_id)) {\n            const workout = allTPaths.find(tp => tp.id === tpe.template_id);\n            if (workout) {\n              if (!newMap[tpe.exercise_id]) newMap[tpe.exercise_id] = [];\n              if (!newMap[tpe.exercise_id].some(item => item.id === workout.id)) {\n                newMap[tpe.exercise_id].push({\n                  id: workout.id,\n                  name: workout.template_name,\n                  isUserOwned: workout.user_id === memoizedSessionUserId,\n                  isBonus: !!tpe.is_bonus_exercise,\n                });\n              }\n            }\n          }\n        });\n\n        structure.forEach(s => {\n          if (activeWorkoutNames.includes(s.workout_name)) {\n            const isIncludedAsMain = s.min_session_minutes !== null && maxAllowedMinutes >= s.min_session_minutes;\n            const isIncludedAsBonus = s.bonus_for_time_group !== null && maxAllowedMinutes >= s.bonus_for_time_group;\n            if (isIncludedAsMain || isIncludedAsBonus) {\n              const exerciseUuid = libraryIdToUuidMap.get(s.exercise_library_id);\n              if (exerciseUuid) {\n                if (!newMap[exerciseUuid]) newMap[exerciseUuid] = [];\n                if (!newMap[exerciseUuid].some(item => item.name === s.workout_name)) {\n                  newMap[exerciseUuid].push({\n                    id: `global_${s.workout_name}`,\n                    name: s.workout_name,\n                    isUserOwned: false,\n                    isBonus: false,\n                  });\n                }\n              }\n            }\n          }\n        });\n        if (JSON.stringify(newMap) !== JSON.stringify(exerciseWorkoutsMap)) {\n          setExerciseWorkoutsMap(newMap);\n        }\n      } catch (enrichError: any) {\n        console.error(\"[WorkoutDataFetcher] Failed to process derived data:\", enrichError);\n        toast.error(\"Could not load workout plans.\");\n      } finally {\n        setIsProcessingDerivedData(false);\n      }\n    };\n    processDerivedData();\n  }, [\n    memoizedSessionUserId, supabase, profile,\n    cachedExercises, cachedTPaths, cachedTPathExercises,\n    baseLoading, dataError\n  ]);\n\n  const refreshAllData = useCallback(async () => {\n    await Promise.all([\n      refreshExercises(),\n      refreshTPaths(),\n      refreshProfile(),\n      refreshTPathExercises(),\n      refreshAchievements(),\n      refreshUserGyms(),\n      fetchGymExercises(),\n      refreshSessions(),\n      refreshActivities(),\n    ]);\n  }, [refreshExercises, refreshTPaths, refreshProfile, refreshTPathExercises, refreshAchievements, refreshUserGyms, fetchGymExercises, refreshSessions, refreshActivities]);\n\n  const status = profile?.t_path_generation_status;\n  useEffect(() => {\n    const stopPolling = (finalStatus?: 'completed' | 'failed') => {\n      if (pollingRef.current) {\n        clearInterval(pollingRef.current);\n        pollingRef.current = null;\n      }\n      setIsGeneratingPlan(false);\n      if (finalStatus === 'completed') {\n        setTempStatusMessage({ message: \"Updated!\", type: 'success' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n        refreshAllData();\n      } else if (finalStatus === 'failed') {\n        setTempStatusMessage({ message: \"Error!\", type: 'error' });\n        setTimeout(() => setTempStatusMessage(null), 3000);\n      }\n    };\n    if (status === 'in_progress') {\n      if (!pollingRef.current) {\n        setIsGeneratingPlan(true);\n        pollingRef.current = setInterval(() => refreshProfile(), 3000);\n      }\n    } else if (prevStatusRef.current === 'in_progress' && (status === 'completed' || status === 'failed')) {\n      stopPolling(status);\n    } else if (prevStatusRef.current !== 'completed' && status === 'completed') {\n      refreshAllData();\n      stopPolling();\n    } else {\n      stopPolling();\n    }\n    prevStatusRef.current = status || null;\n    return () => {\n      if (pollingRef.current) clearInterval(pollingRef.current);\n    };\n  }, [status, refreshProfile, refreshAllData, profile?.t_path_generation_error]);\n\n  return useMemo(() => ({\n    allAvailableExercises,\n    groupedTPaths,\n    workoutExercisesCache,\n    loadingData: baseLoading || isProcessingDerivedData,\n    dataError,\n    refreshAllData,\n    profile: profile || null,\n    refreshProfile,\n    refreshAchievements,\n    refreshTPaths,\n    refreshTPathExercises,\n    isGeneratingPlan,\n    tempStatusMessage,\n    setTempStatusMessage,\n    availableMuscleGroups,\n    userGyms: cachedUserGyms || [],\n    exerciseGymsMap,\n    exerciseWorkoutsMap,\n    availableGymExerciseIds: availableGymExerciseIdsRef.current,\n    allGymExerciseIds: allGymExerciseIdsRef.current,\n    weeklySummary,\n    loadingWeeklySummary,\n    addActivityToWeeklySummary,\n  }), [\n    allAvailableExercises,\n    groupedTPaths,\n    workoutExercisesCache,\n    baseLoading,\n    isProcessingDerivedData,\n    dataError,\n    refreshAllData,\n    profile,\n    refreshProfile,\n    refreshAchievements,\n    refreshTPaths,\n    refreshTPathExercises,\n    isGeneratingPlan,\n    tempStatusMessage,\n    setTempStatusMessage,\n    availableMuscleGroups,\n    cachedUserGyms,\n    exerciseGymsMap,\n    exerciseWorkoutsMap,\n    weeklySummary,\n    loadingWeeklySummary,\n    addActivityToWeeklySummary,\n  ]);\n};","size_bytes":24929},"apps/web/src/hooks/use-workout-flow-manager.ts":{"content":"\"use client\";\n\nimport React, { createContext, useContext, useMemo, useCallback, useState, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useWorkoutDataFetcher } from '@/hooks/use-workout-data-fetcher';\nimport { useActiveWorkoutSession } from './data/useActiveWorkoutSession';\nimport { Tables, WorkoutExercise } from '@/types/supabase';\nimport { useSession } from '@/components/session-context-provider'; // Import useSession\n\ninterface UseWorkoutFlowManagerProps {\n  router: ReturnType<typeof useRouter>;\n}\n\nexport const useWorkoutFlowManager = ({ router }: UseWorkoutFlowManagerProps) => {\n  const workoutData = useWorkoutDataFetcher();\n  const { memoizedSessionUserId } = useSession(); // Destructure memoizedSessionUserId\n\n  const activeSession = useActiveWorkoutSession({\n    groupedTPaths: workoutData.groupedTPaths,\n    workoutExercisesCache: workoutData.workoutExercisesCache,\n    availableGymExerciseIds: workoutData.availableGymExerciseIds, // NEW\n    allGymExerciseIds: workoutData.allGymExerciseIds, // NEW\n  });\n\n  const [pendingNavigationPath, setPendingNavigationPath] = useState<string | null>(null);\n  const [showUnsavedChangesDialog, setShowUnsavedChangesDialog] = useState(false);\n  const resolveNavigationPromise = useRef<((value: boolean) => void) | null>(null);\n\n  const [isEditWorkoutDialogOpen, setIsEditWorkoutDialogOpen] = useState(false);\n  const [selectedWorkoutToEdit, setSelectedWorkoutToEdit] = useState<{ id: string; name: string } | null>(null);\n\n  const handleOpenEditWorkoutDialog = useCallback((workoutId: string, workoutName: string) => {\n    setSelectedWorkoutToEdit({ id: workoutId, name: workoutName });\n    setIsEditWorkoutDialogOpen(true);\n  }, []);\n\n  const handleEditWorkoutSaveSuccess = useCallback(async () => {\n    setIsEditWorkoutDialogOpen(false);\n    await workoutData.refreshAllData();\n    if (activeSession.activeWorkout?.id) {\n      await activeSession.selectWorkout(activeSession.activeWorkout.id);\n    }\n  }, [activeSession, workoutData]);\n\n  const selectWorkout = useCallback(async (workoutId: string | null) => {\n    if (activeSession.isWorkoutActive && activeSession.hasUnsavedChanges) {\n      const shouldBlock = await new Promise<boolean>(resolve => {\n        setPendingNavigationPath(`/workout?workoutId=${workoutId}`);\n        setShowUnsavedChangesDialog(true);\n        resolveNavigationPromise.current = resolve;\n      });\n      if (shouldBlock) return;\n    }\n    await activeSession.selectWorkout(workoutId);\n  }, [activeSession]);\n\n  const promptBeforeNavigation = useCallback(async (path: string): Promise<boolean> => {\n    const allowedPathsWithoutWarning = ['/workout'];\n    if (activeSession.hasUnsavedChanges && !allowedPathsWithoutWarning.some(p => path.startsWith(p))) {\n      setPendingNavigationPath(path);\n      setShowUnsavedChangesDialog(true);\n      return new Promise<boolean>(resolve => {\n        resolveNavigationPromise.current = resolve;\n      });\n    }\n    return Promise.resolve(false);\n  }, [activeSession.hasUnsavedChanges]);\n\n  const handleConfirmLeave = useCallback(async () => {\n    setShowUnsavedChangesDialog(false);\n    if (pendingNavigationPath) {\n      await activeSession.resetWorkoutSession();\n      router.push(pendingNavigationPath);\n    }\n    if (resolveNavigationPromise.current) {\n      resolveNavigationPromise.current(false);\n      resolveNavigationPromise.current = null;\n    }\n    setPendingNavigationPath(null);\n  }, [pendingNavigationPath, router, activeSession]);\n\n  const handleCancelLeave = useCallback(() => {\n    setShowUnsavedChangesDialog(false);\n    if (resolveNavigationPromise.current) {\n      resolveNavigationPromise.current(true);\n      resolveNavigationPromise.current = null;\n    }\n    setPendingNavigationPath(null);\n  }, []);\n\n  // NEW: Create a wrapped substituteExercise function\n  const substituteExercise = useCallback(async (oldExerciseId: string, newExercise: WorkoutExercise) => {\n    await activeSession.substituteExercise(oldExerciseId, newExercise);\n    workoutData.setTempStatusMessage({ message: 'Added!', type: 'success' });\n    setTimeout(() => workoutData.setTempStatusMessage(null), 3000);\n  }, [activeSession, workoutData]);\n\n  // NEW: Create a wrapped removeExerciseFromSession function\n  const removeExerciseFromSession = useCallback(async (exerciseId: string) => {\n    await activeSession.removeExerciseFromSession(exerciseId);\n    workoutData.setTempStatusMessage({ message: 'Removed!', type: 'removed' });\n    setTimeout(() => workoutData.setTempStatusMessage(null), 3000);\n  }, [activeSession, workoutData]);\n\n  return useMemo(() => ({\n    ...workoutData,\n    ...activeSession,\n    selectWorkout, // Overridden version\n    substituteExercise, // Overridden version\n    removeExerciseFromSession, // Overridden version\n    promptBeforeNavigation,\n    handleConfirmLeave,\n    handleCancelLeave,\n    showUnsavedChangesDialog,\n    isEditWorkoutDialogOpen,\n    selectedWorkoutToEdit,\n    handleOpenEditWorkoutDialog,\n    handleEditWorkoutSaveSuccess,\n    setIsEditWorkoutDialogOpen,\n    setTempStatusMessage: workoutData.setTempStatusMessage, // Pass down the setter\n  }), [\n    workoutData,\n    activeSession,\n    selectWorkout,\n    substituteExercise,\n    removeExerciseFromSession,\n    promptBeforeNavigation,\n    handleConfirmLeave,\n    handleCancelLeave,\n    showUnsavedChangesDialog,\n    isEditWorkoutDialogOpen,\n    selectedWorkoutToEdit,\n    handleOpenEditWorkoutDialog,\n    handleEditWorkoutSaveSuccess,\n    setIsEditWorkoutDialogOpen,\n  ]);\n};","size_bytes":5525},"apps/web/src/integrations/supabase/client.ts":{"content":"// This file is automatically generated. Do not edit it directly.\nimport { createClient } from '@supabase/supabase-js';\n\nconst SUPABASE_URL = \"https://mgbfevrzrbjjiajkqpti.supabase.co\";\nconst SUPABASE_PUBLISHABLE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1nYmZldnJ6cmJqamlhamtxcHRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyMDA0NTIsImV4cCI6MjA3MDc3NjQ1Mn0.TBOWI0Q3pXfSVWsL2yHuHEnQUfPV6tHefU6-gqUblUI\";\n\n// Import the supabase client like this:\n// import { supabase } from \"@/integrations/supabase/client\";\n\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);","size_bytes":613},"apps/web/src/lib/achievements.ts":{"content":"export const ACHIEVEMENT_IDS = {\n  FIRST_WORKOUT: 'first_workout',\n  TEN_DAY_STREAK: 'ten_day_streak',\n  TWENTY_FIVE_WORKOUTS: 'twenty_five_workouts',\n  FIFTY_WORKOUTS: 'fifty_workouts',\n  PERFECT_WEEK: 'perfect_week',\n  BEAST_MODE: 'beast_mode',\n  WEEKEND_WARRIOR: 'weekend_warrior',\n  EARLY_BIRD: 'early_bird',\n  THIRTY_DAY_STREAK: 'thirty_day_streak',\n  VOLUME_MASTER: 'volume_master',\n  CENTURY_CLUB: 'century_club',\n  AI_APPRENTICE: 'ai_apprentice',\n};\n\nexport const ACHIEVEMENT_DISPLAY_INFO: Record<string, { name: string; icon: string; description: string }> = {\n  [ACHIEVEMENT_IDS.FIRST_WORKOUT]: { \n    name: 'First Workout', \n    icon: '🏃', \n    description: 'Complete your very first workout session.' \n  },\n  [ACHIEVEMENT_IDS.TEN_DAY_STREAK]: { \n    name: '10 Day Streak', \n    icon: '🔥', \n    description: 'Log an activity for 10 consecutive days.' \n  },\n  [ACHIEVEMENT_IDS.TWENTY_FIVE_WORKOUTS]: { \n    name: '25 Workouts', \n    icon: '💪', \n    description: 'Complete 25 workout sessions.' \n  },\n  [ACHIEVEMENT_IDS.FIFTY_WORKOUTS]: { \n    name: '50 Workouts', \n    icon: '🏆', \n    description: 'Complete 50 workout sessions.' \n  },\n  [ACHIEVEMENT_IDS.PERFECT_WEEK]: { \n    name: 'Perfect Week', \n    icon: '🗓️', \n    description: 'Complete all workouts in your active Transformation Path within a single week.' \n  },\n  [ACHIEVEMENT_IDS.BEAST_MODE]: { \n    name: 'Beast Mode', \n    icon: '💥', \n    description: 'Complete two or more workout sessions in a single day.' \n  },\n  [ACHIEVEMENT_IDS.WEEKEND_WARRIOR]: { \n    name: 'Weekend Warrior', \n    icon: '🎉', \n    description: 'Log 10 activities on a Saturday or Sunday.' \n  },\n  [ACHIEVEMENT_IDS.EARLY_BIRD]: { \n    name: 'Early Bird', \n    icon: '🌅', \n    description: 'Log 10 activities before 8 AM.' \n  },\n  [ACHIEVEMENT_IDS.THIRTY_DAY_STREAK]: { \n    name: 'Consistency King', \n    icon: '👑', \n    description: 'Log an activity for 30 consecutive days.' \n  },\n  [ACHIEVEMENT_IDS.VOLUME_MASTER]: { \n    name: 'Volume Master', \n    icon: '🏋️', \n    description: 'Log a total of 100 sets across all your workouts.' \n  },\n  [ACHIEVEMENT_IDS.CENTURY_CLUB]: { \n    name: 'Century Club', \n    icon: '💯', \n    description: 'Reach 1000 total points (equivalent to 100 workouts).' \n  },\n  [ACHIEVEMENT_IDS.AI_APPRENTICE]: { \n    name: 'AI Apprentice', \n    icon: '🤖', \n    description: 'Use the AI Coach at least once a week for 3 consecutive weeks.' \n  },\n};\n\nexport const achievementsList = [\n  { id: ACHIEVEMENT_IDS.FIRST_WORKOUT, name: 'First Workout', icon: '🏃' },\n  { id: ACHIEVEMENT_IDS.AI_APPRENTICE, name: 'AI Apprentice', icon: '🤖' },\n  { id: ACHIEVEMENT_IDS.TEN_DAY_STREAK, name: '10 Day Streak', icon: '🔥' },\n  { id: ACHIEVEMENT_IDS.THIRTY_DAY_STREAK, name: 'Consistency King', icon: '👑' },\n  { id: ACHIEVEMENT_IDS.TWENTY_FIVE_WORKOUTS, name: '25 Workouts', icon: '💪' },\n  { id: ACHIEVEMENT_IDS.FIFTY_WORKOUTS, name: '50 Workouts', icon: '🏆' },\n  { id: ACHIEVEMENT_IDS.CENTURY_CLUB, name: 'Century Club', icon: '💯' },\n  { id: ACHIEVEMENT_IDS.PERFECT_WEEK, name: 'Perfect Week', icon: '🗓️' },\n  { id: ACHIEVEMENT_IDS.BEAST_MODE, name: 'Beast Mode', icon: '💥' },\n  { id: ACHIEVEMENT_IDS.WEEKEND_WARRIOR, name: 'Weekend Warrior', icon: '🎉' },\n  { id: ACHIEVEMENT_IDS.EARLY_BIRD, name: 'Early Bird', icon: '🌅' },\n  { id: ACHIEVEMENT_IDS.VOLUME_MASTER, name: 'Volume Master', icon: '🏋️' },\n];\n","size_bytes":3438},"apps/web/src/lib/db.ts":{"content":"\"use client\";\n\nimport Dexie, { Table } from 'dexie';\nimport { TablesInsert, TablesUpdate, Tables } from '@/types/supabase'; // Import Tables\nimport { Session } from '@supabase/supabase-js'; // Import Session type\nimport { UserAchievementsRow } from '@/types/supabase-generated/tables/user_achievements'; // Import UserAchievementsRow\nimport { Json } from '@/types/supabase-generated/json'; // Import Json type\n\nexport interface SyncQueueItem {\n  id?: number;\n  operation: 'create' | 'update' | 'delete';\n  table: 'workout_sessions' | 'set_logs';\n  payload: { id: string; [key: string]: any }; // The data to sync, must have an ID\n  timestamp: number;\n  attempts: number;\n  error?: string;\n}\n\n// Local versions of tables will have a string UUID as primary key\nexport interface LocalWorkoutSession extends Tables<'workout_sessions'> {\n  id: string;\n  user_id: string; // Must be non-null for local cache\n  session_date: string;\n  template_name: string | null;\n  completed_at: string | null;\n  rating: number | null;\n  duration_string: string | null;\n  t_path_id: string | null;\n  created_at: string; // Must be non-null for local cache\n}\nexport interface LocalSetLog extends Tables<'set_logs'> {\n  id: string;\n  session_id: string; // Must be non-null for local cache\n  exercise_id: string; // Must be non-null for local cache\n  weight_kg: number | null;\n  reps: number | null;\n  reps_l: number | null;\n  reps_r: number | null;\n  time_seconds: number | null;\n  is_pb: boolean | null;\n  created_at: string; // Must be non-null for local cache\n}\n\nexport interface LocalDraftSetLog {\n  exercise_id: string;\n  set_index: number; // To uniquely identify a draft set within an exercise\n  session_id: string | null; // Can be null if workout session hasn't started yet\n  weight_kg: number | null;\n  reps: number | null;\n  reps_l: number | null;\n  reps_r: number | null;\n  time_seconds: number | null;\n  isSaved?: boolean | null; // NEW: Flag to indicate if this draft corresponds to a saved set_log\n  set_log_id?: string | null; // NEW: Link to the actual set_log ID if saved\n  is_pb?: boolean | null; // NEW: Flag to store PR status\n}\n\n// New interface for storing the Supabase session\nexport interface LocalSupabaseSession {\n  id: string; // A fixed ID, e.g., 'current_session'\n  session: Session;\n  last_updated: number; // Timestamp for when it was last updated\n}\n\n// New interfaces for cached data\nexport interface LocalExerciseDefinition extends Tables<'exercise_definitions'> {\n  id: string;\n  user_id: string | null;\n  library_id: string | null;\n  name: string;\n  main_muscle: string;\n  type: string;\n  is_favorite: boolean | null;\n  category: string | null; // Added category\n  created_at: string; // Must be non-null for local cache\n  movement_type: string | null; // NEW: Added movement_type\n  movement_pattern: string | null; // NEW: Added movement_pattern\n}\nexport interface LocalTPath extends Tables<'t_paths'> {\n  id: string;\n  user_id: string | null;\n  template_name: string;\n  is_bonus: boolean | null;\n  parent_t_path_id: string | null;\n  created_at: string; // Must be non-null for local cache\n  version: number | null; // Added missing property\n  settings: Json | null; // Added missing property\n  progression_settings: Json | null; // Added missing property\n  gym_id: string | null;\n}\nexport interface LocalProfile extends Tables<'profiles'> {\n  id: string;\n  active_t_path_id: string | null;\n  preferred_session_length: string | null;\n  created_at: string; // Must be non-null for local cache\n  first_name: string | null; // Added missing property\n  last_name: string | null; // Added missing property\n  full_name: string | null; // Added missing property\n  height_cm: number | null; // Added missing property\n  weight_kg: number | null; // Added missing property\n  body_fat_pct: number | null; // Added missing property\n  primary_goal: string | null; // Added missing property\n  health_notes: string | null; // Added missing property\n  default_rest_time_seconds: number | null; // Added missing property\n  preferred_distance_unit: string | null; // Added missing property\n  preferred_muscles: string | null; // Added missing property\n  preferred_weight_unit: string | null; // Added missing property\n  target_date: string | null; // Added missing property\n  updated_at: string | null; // Added missing property\n  last_ai_coach_use_at: string | null; // Added missing property\n  total_points: number | null; // Added missing property\n  current_streak: number | null; // Added missing property\n  longest_streak: number | null; // Added missing property\n  last_workout_date: string | null; // Added missing property\n  rolling_workout_status: string | null; // Added missing property\n  t_path_generation_status: string | null; // NEW\n  t_path_generation_error: string | null; // NEW\n}\nexport interface LocalTPathExercise extends Tables<'t_path_exercises'> {\n  id: string;\n  template_id: string;\n  exercise_id: string;\n  order_index: number;\n  is_bonus_exercise: boolean | null;\n  created_at: string; // Must be non-null for local cache\n}\n// NEW: LocalUserAchievement\nexport interface LocalUserAchievement extends UserAchievementsRow {\n  id: string;\n  user_id: string;\n  achievement_id: string;\n  unlocked_at: string | null;\n}\n\n// NEW: LocalUserAlert\nexport interface LocalUserAlert extends Tables<'user_alerts'> {\n  id: string;\n  user_id: string;\n  title: string;\n  message: string;\n  type: string | null;\n  created_at: string;\n  is_read: boolean | null;\n}\n\n// NEW: LocalGym\nexport interface LocalGym extends Tables<'gyms'> {\n  id: string;\n  user_id: string;\n  name: string;\n  created_at: string;\n}\n\n// NEW: LocalActivityLog\nexport interface LocalActivityLog extends Tables<'activity_logs'> {\n  id: string;\n  user_id: string;\n  log_date: string;\n  activity_type: string;\n  created_at: string;\n}\n\n// NEW: LocalGymExercise - uses composite key\nexport interface LocalGymExercise extends Tables<'gym_exercises'> {\n  gym_id: string;\n  exercise_id: string;\n  created_at: string;\n}\n\n\nexport class AppDatabase extends Dexie {\n  workout_sessions!: Table<LocalWorkoutSession, string>;\n  set_logs!: Table<LocalSetLog, string>;\n  sync_queue!: Table<SyncQueueItem, number>;\n  draft_set_logs!: Table<LocalDraftSetLog, [string, number]>; // Composite primary key\n  supabase_session!: Table<LocalSupabaseSession, string>; // New table for Supabase session\n  exercise_definitions_cache!: Table<LocalExerciseDefinition, string>; // New table for caching exercises\n  t_paths_cache!: Table<LocalTPath, string>; // New table for caching T-Paths\n  profiles_cache!: Table<LocalProfile, string>; // New: Cache Profile\n  t_path_exercises_cache!: Table<LocalTPathExercise, string>; // New: Cache TPathExercises\n  user_achievements_cache!: Table<LocalUserAchievement, string>; // NEW: Cache user achievements\n  user_alerts!: Table<LocalUserAlert, string>; // NEW: User Alerts table\n  gyms_cache!: Table<LocalGym, string>; // NEW: Gyms cache table\n  activity_logs!: Table<LocalActivityLog, string>; // NEW: Activity Logs cache table\n  gym_exercises_cache!: Table<LocalGymExercise, [string, string]>; // NEW: Cache gym_exercises with composite key\n\n  constructor() {\n    super('WorkoutTrackerDB');\n    this.version(14).stores({ // Increment version number\n      workout_sessions: '&id, user_id, session_date, t_path_id, template_name',\n      set_logs: '&id, session_id, exercise_id',\n      sync_queue: '++id, timestamp, table', // ADDED 'table' INDEX\n      draft_set_logs: '[exercise_id+set_index], session_id, exercise_id',\n      supabase_session: '&id',\n      exercise_definitions_cache: '&id, user_id, library_id',\n      t_paths_cache: '&id, user_id, parent_t_path_id',\n      profiles_cache: '&id',\n      t_path_exercises_cache: '&id, template_id, exercise_id',\n      user_achievements_cache: '&id, user_id, achievement_id',\n      user_alerts: '&id, user_id, created_at',\n      gyms_cache: '&id, user_id',\n      activity_logs: '&id, user_id, log_date',\n      gym_exercises_cache: '[gym_id+exercise_id]', // NEW: Define primary key for gym_exercises_cache\n    });\n  }\n}\n\nexport const db = new AppDatabase();\n\n// Helper function to add an operation to the sync queue\nexport const addToSyncQueue = async (\n  operation: 'create' | 'update' | 'delete',\n  table: 'workout_sessions' | 'set_logs',\n  payload: { id: string; [key: string]: any }\n) => {\n  await db.sync_queue.add({\n    operation,\n    table,\n    payload,\n    timestamp: Date.now(),\n    attempts: 0,\n  });\n};","size_bytes":8446},"apps/web/src/lib/unit-conversions.ts":{"content":"export const KG_TO_LBS = 2.20462;\nexport const KM_TO_MILES = 0.621371;\n\nexport function convertWeight(value: number | null | undefined, fromUnit: 'kg' | 'lbs', toUnit: 'kg' | 'lbs'): number | null {\n  if (value === null || value === undefined) return null;\n  if (fromUnit === toUnit) return value;\n\n  if (fromUnit === 'kg' && toUnit === 'lbs') {\n    return value * KG_TO_LBS;\n  } else if (fromUnit === 'lbs' && toUnit === 'kg') {\n    return value / KG_TO_LBS;\n  }\n  return value;\n}\n\nexport function convertDistance(value: number | null | undefined, fromUnit: 'km' | 'miles', toUnit: 'km' | 'miles'): number | null {\n  if (value === null || value === undefined) return null;\n  if (fromUnit === toUnit) return value;\n\n  if (fromUnit === 'km' && toUnit === 'miles') {\n    return value * KM_TO_MILES;\n  } else if (fromUnit === 'miles' && toUnit === 'km') {\n    return value / KM_TO_MILES;\n  }\n  return value;\n}\n\nexport function formatWeight(value: number | null | undefined, unit: 'kg' | 'lbs', decimals: number = 1): string {\n  if (value === null || value === undefined) return '-';\n  return `${value.toFixed(decimals)} ${unit}`;\n}\n\nexport function formatDistance(value: number | null | undefined, unit: 'km' | 'miles', decimals: number = 1): string {\n  if (value === null || value === undefined) return '-';\n  return `${value.toFixed(decimals)} ${unit}`;\n}\n\nexport function formatTime(seconds: number | null | undefined): string {\n  if (seconds === null || seconds === undefined) return '-';\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}m ${remainingSeconds}s`;\n}\n\nexport function cmToFeetAndInches(cm: number | null | undefined): string {\n  if (cm === null || cm === undefined) return '';\n  const totalInches = cm / 2.54;\n  let feet = Math.floor(totalInches / 12);\n  let inches = Math.round(totalInches % 12);\n  if (inches === 12) {\n    feet += 1;\n    inches = 0;\n  }\n  return `${feet} ft ${inches} in`;\n}\n","size_bytes":1965},"apps/web/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { ArrowUp, ArrowDown, ArrowRight, ArrowLeft, Footprints, LucideIcon, Star, Dumbbell, ChevronUp, ChevronDown, ArrowUpRight, ArrowDownLeft, Zap } from \"lucide-react\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function getWorkoutColorClass(workoutName: string, type: 'text' | 'border' | 'bg' | 'gradient' = 'text'): string | { from: string, to: string } {\n  let colorKey: string;\n  switch (workoutName) {\n    case 'Upper Body A':\n    case 'Upper A': // Shortened name\n    case '4-Day Upper/Lower': // Map main T-Path to its first workout's color\n      colorKey = 'upper-body-a';\n      break;\n    case 'Lower Body A':\n    case 'Lower A': // Shortened name\n      colorKey = 'lower-body-a'; // Distinct key for Lower Body A\n      break;\n    case 'Upper Body B':\n    case 'Upper B': // Shortened name\n      colorKey = 'upper-body-b';\n      break;\n    case 'Lower Body B':\n    case 'Lower B': // Shortened name\n      colorKey = 'lower-body-b';\n      break;\n    case 'Push':\n    case '3-Day Push/Pull/Legs': // Map main T-Path to its first workout's color\n      colorKey = 'push';\n      break;\n    case 'Pull':\n      colorKey = 'pull';\n      break;\n    case 'Legs':\n      colorKey = 'legs';\n      break;\n    case 'Bonus': // New case for bonus exercises\n      colorKey = 'bonus';\n      break;\n    case 'Ad Hoc Workout': // Handle Ad Hoc workout explicitly\n      colorKey = 'ad-hoc';\n      break;\n    default: return ''; // No specific color for other workouts\n  }\n\n  if (type === 'gradient') {\n    return { from: `from-workout-${colorKey}`, to: `to-workout-${colorKey}-light` };\n  } else if (type === 'text') {\n    return `text-workout-${colorKey}`;\n  } else if (type === 'bg') {\n    return `bg-workout-${colorKey}`;\n  } else if (type === 'border') {\n    return `border-workout-${colorKey}`;\n  }\n  return '';\n}\n\nexport function getWorkoutIcon(workoutName: string): LucideIcon | null {\n  switch (workoutName) {\n    case 'Upper Body A':\n    case 'Upper A':\n    case 'Upper Body B':\n    case 'Upper B':\n      return ArrowUp;\n    case 'Lower Body A':\n    case 'Lower A':\n    case 'Lower Body B':\n    case 'Lower B':\n      return ArrowDown;\n    case 'Push':\n      return ArrowUpRight; // Swapped from ArrowDownLeft\n    case 'Pull':\n      return ArrowDownLeft; // Swapped from ArrowUpRight\n    case 'Legs':\n      return Footprints;\n    case 'Bonus':\n      return Star;\n    case '4-Day Upper/Lower':\n    case '3-Day Push/Pull/Legs':\n    case 'Ad Hoc Workout': // Generic icon for main T-Paths and Ad Hoc\n      return Dumbbell; \n    default:\n      return null;\n  }\n}\n\n// Helper to get max minutes from sessionLength string\nexport function getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30;\n    case '30-45': return 45;\n    case '45-60': return 60;\n    case '60-90': return 90;\n    default: return 90; // Default to longest if unknown or null\n  }\n}\n\n// NEW: Helper to get default exercise counts from sessionLength string\nexport function getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 };\n    case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 };\n    case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 }; // Default if unknown or null\n  }\n}\n\n// New utility function to format time ago\nexport const formatTimeAgo = (date: Date | null): string => {\n  if (!date) return 'Never';\n  const now = new Date();\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / 60000);\n  \n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n  return `${Math.floor(diffInMinutes / 1440)}d ago`;\n};\n\n// New utility function to get color and icon classes for the new pill\ntype WorkoutPillCategory = 'upper' | 'lower' | 'push' | 'pull' | 'legs';\ntype WorkoutPillVariant = 'a' | 'b';\n\nexport const getPillStyles = (workoutType: 'upper-lower' | 'push-pull-legs', category: WorkoutPillCategory, variant?: WorkoutPillVariant) => {\n  let Icon: LucideIcon = Zap; // Default\n  let colorKey = '';\n\n  if (workoutType === 'upper-lower') {\n    if (category === 'upper') {\n      Icon = ArrowUp; // Changed from ChevronUp\n      colorKey = variant === 'a' ? 'upper-body-a' : 'upper-body-b';\n    } else if (category === 'lower') {\n      Icon = ArrowDown; // Changed from ChevronDown\n      colorKey = variant === 'a' ? 'lower-body-a' : 'lower-body-b';\n    }\n  } else if (workoutType === 'push-pull-legs') {\n    if (category === 'push') {\n      Icon = ArrowUpRight; // Swapped from ArrowDownLeft\n      colorKey = 'push';\n    } else if (category === 'pull') {\n      Icon = ArrowDownLeft; // Swapped from ArrowUpRight\n      colorKey = 'pull';\n    } else if (category === 'legs') {\n      Icon = Footprints;\n      colorKey = 'legs';\n    }\n  }\n\n  // Default to a bonus color if no specific workout type/category matches\n  if (!colorKey) {\n    colorKey = 'bonus';\n    Icon = Star; // Default bonus icon\n  }\n\n  const selectedBgClass = `bg-workout-${colorKey}`;\n  const selectedTextClass = `text-white`;\n  const selectedBorderClass = `border-transparent`;\n  const selectedShadowClass = `shadow-workout-pill-selected`;\n\n  const unselectedBgClass = `bg-muted`; // Changed from `bg-card` to `bg-muted`\n  const unselectedTextClass = `text-workout-${colorKey}`;\n  const unselectedBorderClass = `border-workout-${colorKey}`;\n  const unselectedShadowClass = `shadow-none`;\n\n  return {\n    Icon,\n    selectedBgClass,\n    selectedTextClass,\n    selectedBorderClass,\n    selectedShadowClass,\n    unselectedBgClass,\n    unselectedTextClass,\n    unselectedBorderClass,\n    unselectedShadowClass,\n  };\n};\n\n// NEW: Utility function to get the CSS variable for calendar item colors\nexport function getCalendarItemColorCssVar(name: string | null | undefined, type: 'workout' | 'activity' | 'ad-hoc'): string {\n  let colorKey: string | undefined;\n  let colorCategory: 'workout' | 'activity' = 'workout';\n\n  if (type === 'workout') {\n    colorCategory = 'workout';\n    switch (name) {\n      case 'Upper Body A':\n      case 'Upper A':\n        colorKey = 'upper-body-a';\n        break;\n      case 'Lower Body A':\n      case 'Lower A':\n        colorKey = 'lower-body-a';\n        break;\n      case 'Upper Body B':\n      case 'Upper B':\n        colorKey = 'upper-body-b';\n        break;\n      case 'Lower Body B':\n      case 'Lower B':\n        colorKey = 'lower-body-b';\n        break;\n      case 'Push':\n        colorKey = 'push';\n        break;\n      case 'Pull':\n        colorKey = 'pull';\n        break;\n      case 'Legs':\n        colorKey = 'legs';\n        break;\n      case 'Bonus':\n        colorKey = 'bonus';\n        break;\n      default:\n        colorKey = 'ad-hoc'; // Fallback for unknown workout names\n        break;\n    }\n  } else if (type === 'activity') {\n    colorCategory = 'activity';\n    switch (name) {\n      case 'Running':\n        colorKey = 'running';\n        break;\n      case 'Cycling':\n        colorKey = 'cycling';\n        break;\n      case 'Swimming':\n        colorKey = 'swimming';\n        break;\n      case 'Tennis':\n        colorKey = 'tennis';\n        break;\n      default:\n        colorKey = 'activity'; // Fallback for unknown activity types\n        break;\n    }\n  } else if (type === 'ad-hoc') {\n    colorCategory = 'workout'; // Ad-hoc uses workout colors\n    colorKey = 'ad-hoc';\n  }\n\n  return `hsl(var(--${colorCategory}-${colorKey || 'ad-hoc'}))`;\n}\n\n// NEW: Utility function to get the display name for calendar items\nexport function getCalendarItemDisplayName(name: string | null | undefined, type: 'workout' | 'activity' | 'ad-hoc'): string {\n  if (type === 'ad-hoc') return 'Ad Hoc Workout';\n  if (!name) return 'Unknown';\n\n  // Shorten workout names\n  switch (name) {\n    case 'Upper Body A': return 'Upper A';\n    case 'Upper Body B': return 'Upper B';\n    case 'Lower Body A': return 'Lower A';\n    case 'Lower Body B': return 'Lower B';\n    default: return name;\n  }\n}\n\n// NEW: Utility function to get fitness level from points\nexport function getLevelFromPoints(totalPoints: number): { level: string; color: string } {\n  if (totalPoints < 100) {\n    return { level: 'Rookie', color: 'bg-gray-500' };\n  } else if (totalPoints < 300) {\n    return { level: 'Warrior', color: 'bg-blue-500' };\n  } else if (totalPoints < 600) {\n    return { level: 'Champion', color: 'bg-purple-500' };\n  } else {\n    return { level: 'Legend', color: 'bg-yellow-500' };\n  }\n}\n\n// Helper for deep comparison of Sets\nexport const areSetsEqual = (set1: Set<string>, set2: Set<string>): boolean => {\n  if (set1.size !== set2.size) return false;\n  for (const item of set1) {\n    if (!set2.has(item)) return false;\n  }\n  return true;\n};\n\n/**\n * Formats a full name into \"Athlete [Initials]\".\n * - One name: \"Athlete C\"\n * - Two names: \"Athlete CD\"\n * - Three+ names: \"Athlete CDD\" (takes first three initials)\n */\nexport function formatAthleteName(fullName: string | null | undefined): string {\n  if (!fullName) {\n    return \"Athlete\";\n  }\n\n  const nameParts = fullName.split(' ').filter(part => part.length > 0);\n  if (nameParts.length === 0) {\n    return \"Athlete\";\n  }\n\n  const initials = nameParts.map(part => part[0].toUpperCase());\n\n  if (initials.length === 1) {\n    return `Athlete ${initials[0]}`;\n  } else if (initials.length === 2) {\n    return `Athlete ${initials[0]}${initials[1]}`;\n  } else { // Three or more names\n    return `Athlete ${initials.slice(0, 3).join('')}`;\n  }\n}\n\nexport function getYouTubeEmbedUrl(url: string | null | undefined): string | null {\n  if (!url) return null;\n  // Check if it's already an embed link\n  if (url.includes('youtube.com/embed/')) {\n    return url;\n  }\n  const regExp = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)\\/(?:watch\\?v=|embed\\/|v\\/|)([a-zA-Z0-9_-]{11})(?:\\S+)?/;\n  const match = url.match(regExp);\n  // If it's a valid YouTube link, convert it. Otherwise, return the original URL.\n  return match && match[1] ? `https://www.youtube.com/embed/${match[1]}` : url;\n}","size_bytes":10305},"apps/web/src/types/supabase-generated/database.ts":{"content":"/**\n * This file contains the core Supabase Database schema definition.\n * It is automatically generated by Supabase CLI, refactored for modularity.\n */\n\nimport { Json } from \"./json\";\n\nexport type Database = {\n  public: {\n    Tables: {\n      activity_logs: {\n        Row: {\n          activity_type: string;\n          avg_time: number | null;\n          created_at: string | null;\n          distance: string | null;\n          id: string;\n          is_pb: boolean | null;\n          log_date: string;\n          time: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          activity_type: string;\n          avg_time?: number | null;\n          created_at?: string | null;\n          distance?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          log_date: string;\n          time?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          activity_type?: string;\n          avg_time?: number | null;\n          created_at?: string | null;\n          distance?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          log_date?: string;\n          time?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"activity_logs_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      ai_coach_usage_logs: {\n        Row: {\n          id: string;\n          user_id: string | null;\n          used_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          user_id?: string | null;\n          used_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          user_id?: string | null;\n          used_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"ai_coach_usage_logs_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      app_metadata: {\n        Row: {\n          id: string;\n          last_source_sync_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          last_source_sync_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          last_source_sync_at?: string | null;\n        };\n        Relationships: [];\n      };\n      body_fat_reference_images: {\n        Row: {\n          id: string;\n          percentage: number;\n          image_url: string;\n          description: string | null;\n          created_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          percentage: number;\n          image_url: string;\n          description?: string | null;\n          created_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          percentage?: number;\n          image_url?: string;\n          description?: string | null;\n          created_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"body_fat_reference_images_id_fkey\";\n            columns: [\"id\"];\n            isOneToOne: true;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      exercise_definitions: {\n        Row: {\n          category: string | null;\n          created_at: string | null;\n          description: string | null;\n          id: string;\n          main_muscle: string;\n          name: string;\n          pro_tip: string | null;\n          type: string;\n          user_id: string | null;\n          video_url: string | null;\n          library_id: string | null;\n          is_favorite: boolean | null;\n          icon_url: string | null;\n          movement_type: string | null;\n          movement_pattern: string | null;\n        };\n        Insert: {\n          category?: string | null;\n          created_at?: string | null;\n          description?: string | null;\n          id?: string;\n          main_muscle: string;\n          name: string;\n          pro_tip?: string | null;\n          type?: string;\n          user_id?: string | null;\n          video_url?: string | null;\n          library_id?: string | null;\n          is_favorite?: boolean | null;\n          icon_url?: string | null;\n          movement_type?: string | null;\n          movement_pattern?: string | null;\n        };\n        Update: {\n          category?: string | null;\n          created_at?: string | null;\n          description?: string | null;\n          id?: string;\n          main_muscle?: string;\n          name?: string;\n          pro_tip?: string | null;\n          type?: string;\n          user_id?: string | null;\n          video_url?: string | null;\n          library_id?: string | null;\n          is_favorite?: boolean | null;\n          icon_url?: string | null;\n          movement_type?: string | null;\n          movement_pattern?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"exercise_definitions_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      gym_exercises: {\n        Row: {\n          created_at: string;\n          exercise_id: string;\n          gym_id: string;\n        };\n        Insert: {\n          created_at?: string;\n          exercise_id: string;\n          gym_id: string;\n        };\n        Update: {\n          created_at?: string;\n          exercise_id?: string;\n          gym_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"gym_exercises_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"gym_exercises_gym_id_fkey\";\n            columns: [\"gym_id\"];\n            isOneToOne: false;\n            referencedRelation: \"gyms\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      gyms: {\n        Row: {\n          created_at: string;\n          id: string;\n          name: string;\n          user_id: string;\n        };\n        Insert: {\n          created_at?: string;\n          id?: string;\n          name: string;\n          user_id: string;\n        };\n        Update: {\n          created_at?: string;\n          id?: string;\n          name?: string;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"gyms_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      media_posts: {\n        Row: {\n          id: string;\n          title: string;\n          description: string | null;\n          video_url: string;\n          creator_name: string | null;\n          created_at: string;\n          category: string | null;\n        };\n        Insert: {\n          id?: string;\n          title: string;\n          description?: string | null;\n          video_url: string;\n          creator_name?: string | null;\n          created_at?: string;\n          category?: string | null;\n        };\n        Update: {\n          id?: string;\n          title?: string;\n          description?: string | null;\n          video_url?: string;\n          creator_name?: string | null;\n          created_at?: string;\n          category?: string | null;\n        };\n        Relationships: [];\n      };\n      notifications: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          message: string;\n          title: string;\n          type: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          message: string;\n          title: string;\n          type?: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          message?: string;\n          title?: string;\n          type?: string;\n        };\n        Relationships: [];\n      };\n      progress_photos: {\n        Row: {\n          id: string;\n          user_id: string;\n          photo_path: string;\n          notes: string | null;\n          created_at: string;\n          workouts_since_last_photo: number | null;\n        };\n        Insert: {\n          id?: string;\n          user_id: string;\n          photo_path: string;\n          notes?: string | null;\n          created_at?: string;\n          workouts_since_last_photo?: number | null;\n        };\n        Update: {\n          id?: string;\n          user_id?: string;\n          photo_path?: string;\n          notes?: string | null;\n          created_at?: string;\n          workouts_since_last_photo?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"progress_photos_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      profiles: {\n        Row: {\n          active_gym_id: string | null;\n          active_t_path_id: string | null;\n          body_fat_pct: number | null;\n          created_at: string | null;\n          current_streak: number | null;\n          default_rest_time_seconds: number | null;\n          first_name: string | null;\n          full_name: string | null;\n          health_notes: string | null;\n          height_cm: number | null;\n          id: string;\n          last_ai_coach_use_at: string | null;\n          last_name: string | null;\n          last_workout_date: string | null;\n          preferred_distance_unit: string | null;\n          preferred_muscles: string | null;\n          preferred_session_length: string | null;\n          preferred_weight_unit: string | null;\n          primary_goal: string | null;\n          programme_type: string | null;\n          rolling_workout_status: string | null;\n          target_date: string | null;\n          total_points: number | null;\n          updated_at: string | null;\n          weight_kg: number | null;\n        };\n        Insert: {\n          active_gym_id?: string | null;\n          active_t_path_id?: string | null;\n          body_fat_pct?: number | null;\n          created_at?: string | null;\n          current_streak?: number | null;\n          default_rest_time_seconds?: number | null;\n          first_name?: string | null;\n          full_name?: string | null;\n          health_notes?: string | null;\n          height_cm?: number | null;\n          id: string;\n          last_ai_coach_use_at?: string | null;\n          last_name?: string | null;\n          last_workout_date?: string | null;\n          preferred_distance_unit?: string | null;\n          preferred_muscles?: string | null;\n          preferred_session_length?: string | null;\n          preferred_weight_unit?: string | null;\n          primary_goal?: string | null;\n          programme_type?: string | null;\n          rolling_workout_status?: string | null;\n          target_date?: string | null;\n          total_points?: number | null;\n          updated_at?: string | null;\n          weight_kg?: number | null;\n        };\n        Update: {\n          active_gym_id?: string | null;\n          active_t_path_id?: string | null;\n          body_fat_pct?: number | null;\n          created_at?: string | null;\n          current_streak?: number | null;\n          default_rest_time_seconds?: number | null;\n          first_name?: string | null;\n          full_name?: string | null;\n          health_notes?: string | null;\n          height_cm?: number | null;\n          id?: string;\n          last_ai_coach_use_at?: string | null;\n          last_name?: string | null;\n          last_workout_date?: string | null;\n          preferred_distance_unit?: string | null;\n          preferred_muscles?: string | null;\n          preferred_session_length?: string | null;\n          primary_goal?: string | null;\n          programme_type?: string | null;\n          rolling_workout_status?: string | null;\n          target_date?: string | null;\n          total_points?: number | null;\n          updated_at?: string | null;\n          weight_kg?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"profiles_id_fkey\";\n            columns: [\"id\"];\n            isOneToOne: true;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      set_logs: {\n        Row: {\n          created_at: string | null;\n          exercise_id: string | null;\n          id: string;\n          is_pb: boolean | null;\n          reps: number | null;\n          reps_l: number | null;\n          reps_r: number | null;\n          session_id: string | null;\n          time_seconds: number | null;\n          weight_kg: number | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          exercise_id?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          reps?: number | null;\n          reps_l?: number | null;\n          reps_r?: number | null;\n          session_id?: string | null;\n          time_seconds?: number | null;\n          weight_kg?: number | null;\n        };\n        Update: {\n          created_at?: string | null;\n          exercise_id?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          reps?: number | null;\n          reps_l?: number | null;\n          reps_r?: number | null;\n          session_id?: string | null;\n          time_seconds?: number | null;\n          weight_kg?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"set_logs_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"set_logs_session_id_fkey\";\n            columns: [\"session_id\"];\n            isOneToOne: false;\n            referencedRelation: \"workout_sessions\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      t_path_exercises: {\n        Row: {\n          created_at: string | null;\n          exercise_id: string;\n          id: string;\n          is_bonus_exercise: boolean | null;\n          order_index: number;\n          template_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          exercise_id: string;\n          id?: string;\n          is_bonus_exercise?: boolean | null;\n          order_index: number;\n          template_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          exercise_id?: string;\n          id?: string;\n          is_bonus_exercise?: boolean | null;\n          order_index?: number;\n          template_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"t_path_exercises_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"t_path_exercises_template_id_fkey\";\n            columns: [\"template_id\"];\n            isOneToOne: false;\n            referencedRelation: \"t_paths\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      t_paths: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          is_bonus: boolean | null;\n          parent_t_path_id: string | null;\n          progression_settings: Json | null;\n          settings: Json | null;\n          template_name: string;\n          user_id: string | null;\n          version: number | null;\n          gym_id: string | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          is_bonus?: boolean | null;\n          parent_t_path_id?: string | null;\n          progression_settings?: Json | null;\n          settings?: Json | null;\n          template_name: string;\n          user_id?: string | null;\n          version?: number | null;\n          gym_id?: string | null;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          is_bonus?: boolean | null;\n          parent_t_path_id?: string | null;\n          progression_settings?: Json | null;\n          settings?: Json | null;\n          template_name?: string;\n          user_id?: string | null;\n          version?: number | null;\n          gym_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"t_paths_parent_t_path_id_fkey\";\n            columns: [\"parent_t_path_id\"];\n            isOneToOne: false;\n            referencedRelation: \"t_paths\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"workout_templates_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_achievements: {\n        Row: {\n          achievement_id: string;\n          id: string;\n          unlocked_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          achievement_id: string;\n          id?: string;\n          unlocked_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          achievement_id?: string;\n          id?: string;\n          unlocked_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_achievements_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_alerts: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          is_read: boolean | null;\n          message: string;\n          title: string;\n          type: string | null;\n          user_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          is_read?: boolean | null;\n          message: string;\n          title: string;\n          type?: string | null;\n          user_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          is_read?: boolean | null;\n          message?: string;\n          title?: string;\n          type?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_alerts_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_exercise_prs: {\n        Row: {\n          best_time_seconds: number | null;\n          best_volume_kg: number | null;\n          created_at: string | null;\n          exercise_id: string;\n          id: string;\n          last_achieved_date: string;\n          updated_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          best_time_seconds?: number | null;\n          best_volume_kg?: number | null;\n          created_at?: string | null;\n          exercise_id: string;\n          id?: string;\n          last_achieved_date?: string;\n          updated_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          best_time_seconds?: number | null;\n          best_volume_kg?: number | null;\n          created_at?: string | null;\n          exercise_id?: string;\n          id?: string;\n          last_achieved_date?: string;\n          updated_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_exercise_prs_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"user_exercise_prs_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_global_favorites: {\n        Row: {\n          created_at: string | null;\n          exercise_id: string;\n          user_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          exercise_id: string;\n          user_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          exercise_id?: string;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_global_favorites_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"user_global_favorites_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_notifications: {\n        Row: {\n          id: string;\n          notification_id: string;\n          read_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          id?: string;\n          notification_id: string;\n          read_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          id?: string;\n          notification_id?: string;\n          read_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_notifications_notification_id_fkey\";\n            columns: [\"notification_id\"];\n            isOneToOne: false;\n            referencedRelation: \"notifications\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"user_notifications_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      workout_exercise_structure: {\n        Row: {\n          bonus_for_time_group: number | null;\n          created_at: string | null;\n          exercise_library_id: string;\n          id: string;\n          min_session_minutes: number | null;\n          workout_name: string;\n          workout_split: string;\n        };\n        Insert: {\n          bonus_for_time_group?: number | null;\n          created_at?: string | null;\n          exercise_library_id: string;\n          id?: string;\n          min_session_minutes?: number | null;\n          workout_name: string;\n          workout_split: string;\n        };\n        Update: {\n          bonus_for_time_group?: number | null;\n          created_at?: string | null;\n          exercise_library_id?: string;\n          id?: string;\n          min_session_minutes?: number | null;\n          workout_name?: string;\n          workout_split?: string;\n        };\n        Relationships: [];\n      };\n      workout_sessions: {\n        Row: {\n          completed_at: string | null;\n          created_at: string | null;\n          duration_string: string | null;\n          id: string;\n          rating: number | null;\n          session_date: string;\n          t_path_id: string | null;\n          template_name: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          completed_at?: string | null;\n          created_at?: string | null;\n          duration_string?: string | null;\n          id?: string;\n          rating?: number | null;\n          session_date: string;\n          t_path_id?: string | null;\n          template_name?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          completed_at?: string | null;\n          created_at?: string | null;\n          duration_string?: string | null;\n          id?: string;\n          rating?: number | null;\n          session_date?: string;\n          t_path_id?: string | null;\n          template_name?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"workout_sessions_t_path_id_fkey\";\n            columns: [\"t_path_id\"];\n            isOneToOne: false;\n            referencedRelation: \"t_paths\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"workout_sessions_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      get_notifications_with_read_status: {\n        Args: Record<PropertyKey, never>;\n        Returns: {\n          created_at: string;\n          id: string;\n          is_read: boolean;\n          message: string;\n          title: string;\n          type: string;\n        }[];\n      };\n      get_user_personal_records: {\n        Args: {\n          p_user_id: string;\n          p_limit?: number;\n        };\n        Returns: {\n          exercise_name: string;\n          exercise_type: string;\n          best_value: number;\n          unit: string;\n          last_achieved_date: string;\n        }[];\n      };\n      handle_new_user: {\n        Args: Record<PropertyKey, never>;\n        Returns: string;\n      };\n      get_total_completed_exercise_instances: {\n        Args: {\n          p_user_id: string;\n        };\n        Returns: number;\n      };\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};","size_bytes":26040},"apps/web/src/types/supabase-generated/enums.ts":{"content":"/**\n * This file contains utility types for accessing Supabase enum data.\n * It is part of the Supabase generated types, refactored for modularity.\n */\n\nimport { Database } from \"./database\";\n\ntype PublicSchema = Database[\"public\"];\n\nexport type Enums<\n  PublicEnumNameOrOptions extends\n    | keyof PublicSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }\n    ? keyof Database[PublicEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = PublicEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : PublicEnumNameOrOptions extends keyof PublicSchema[\"Enums\"]\n    ? PublicSchema[\"Enums\"][PublicEnumNameOrOptions]\n    : never;","size_bytes":778},"apps/web/src/types/supabase-generated/functions/get_last_exercise_sets_for_exercise.ts":{"content":"import { Json } from \"../json\";\n\nexport type GetLastExerciseSetsForExerciseArgs = {\n  p_user_id: string;\n  p_exercise_id: string;\n};\nexport type GetLastExerciseSetsForExerciseReturns = {\n  set_id: string;\n  weight_kg: number | null;\n  reps: number | null;\n  reps_l: number | null;\n  reps_r: number | null;\n  time_seconds: number | null;\n  created_at: string;\n}[];","size_bytes":363},"apps/web/src/types/supabase-generated/functions/get_notifications_with_read_status.ts":{"content":"import { Json } from \"../json\";\n\nexport type GetNotificationsWithReadStatusArgs = Record<PropertyKey, never>;\nexport type GetNotificationsWithReadStatusReturns = {\n  created_at: string;\n  id: string;\n  is_read: boolean;\n  message: string;\n  title: string;\n  type: string;\n}[];","size_bytes":276},"apps/web/src/types/supabase-generated/functions/get_total_completed_exercise_instances.ts":{"content":"import { Json } from \"../json\";\n\nexport type GetTotalCompletedExerciseInstancesArgs = {\n  p_user_id: string;\n};\nexport type GetTotalCompletedExerciseInstancesReturns = number;","size_bytes":175},"apps/web/src/types/supabase-generated/functions/handle_new_user.ts":{"content":"import { Json } from \"../json\";\n\nexport type HandleNewUserArgs = Record<PropertyKey, never>;\nexport type HandleNewUserReturns = string;","size_bytes":135},"apps/web/src/types/supabase-generated/index.ts":{"content":"/**\n * This file contains the core Supabase Database schema definition.\n * It is automatically generated by Supabase CLI, refactored for modularity.\n */\n\nimport { Json } from \"./json\";\n\nexport type Database = {\n  public: {\n    Tables: {\n      activity_logs: {\n        Row: {\n          activity_type: string;\n          avg_time: number | null;\n          created_at: string | null;\n          distance: string | null;\n          id: string;\n          is_pb: boolean | null;\n          log_date: string;\n          time: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          activity_type: string;\n          avg_time?: number | null;\n          created_at?: string | null;\n          distance?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          log_date: string;\n          time?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          activity_type?: string;\n          avg_time?: number | null;\n          created_at?: string | null;\n          distance?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          log_date?: string;\n          time?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"activity_logs_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      ai_coach_usage_logs: {\n        Row: {\n          id: string;\n          user_id: string | null;\n          used_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          user_id?: string | null;\n          used_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          user_id?: string | null;\n          used_at?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"ai_coach_usage_logs_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      app_metadata: {\n        Row: {\n          id: string;\n          last_source_sync_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          last_source_sync_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          last_source_sync_at?: string | null;\n        };\n        Relationships: [];\n      };\n      body_fat_reference_images: {\n        Row: {\n          id: string;\n          percentage: number;\n          image_url: string;\n          description: string | null;\n          created_at: string | null;\n        };\n        Insert: {\n          id?: string;\n          percentage: number;\n          image_url: string;\n          description?: string | null;\n          created_at?: string | null;\n        };\n        Update: {\n          id?: string;\n          percentage?: number;\n          image_url?: string;\n          description?: string | null;\n          created_at?: string | null;\n        };\n        Relationships: [];\n      };\n      exercise_definitions: {\n        Row: {\n          category: string | null;\n          created_at: string | null;\n          description: string | null;\n          id: string;\n          main_muscle: string;\n          name: string;\n          pro_tip: string | null;\n          type: string;\n          user_id: string | null;\n          video_url: string | null;\n          library_id: string | null;\n          is_favorite: boolean | null;\n          icon_url: string | null;\n        };\n        Insert: {\n          category?: string | null;\n          created_at?: string | null;\n          description?: string | null;\n          id?: string;\n          main_muscle: string;\n          name: string;\n          pro_tip?: string | null;\n          type?: string;\n          user_id?: string | null;\n          video_url?: string | null;\n          library_id?: string | null;\n          is_favorite?: boolean | null;\n          icon_url?: string | null;\n        };\n        Update: {\n          category?: string | null;\n          created_at?: string | null;\n          description?: string | null;\n          id?: string;\n          main_muscle?: string;\n          name?: string;\n          pro_tip?: string | null;\n          type?: string;\n          user_id?: string | null;\n          video_url?: string | null;\n          library_id?: string | null;\n          is_favorite?: boolean | null;\n          icon_url?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"exercise_definitions_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      notifications: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          message: string;\n          title: string;\n          type: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          message: string;\n          title: string;\n          type?: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          message?: string;\n          title?: string;\n          type?: string;\n        };\n        Relationships: [];\n      };\n      profiles: {\n        Row: {\n          active_t_path_id: string | null;\n          body_fat_pct: number | null;\n          created_at: string | null;\n          current_streak: number | null;\n          default_rest_time_seconds: number | null;\n          first_name: string | null;\n          full_name: string | null;\n          health_notes: string | null;\n          height_cm: number | null;\n          id: string;\n          last_ai_coach_use_at: string | null;\n          last_name: string | null;\n          last_workout_date: string | null;\n          preferred_distance_unit: string | null;\n          preferred_muscles: string | null;\n          preferred_session_length: string | null;\n          preferred_weight_unit: string | null;\n          primary_goal: string | null;\n          rolling_workout_status: string | null;\n          target_date: string | null;\n          total_points: number | null;\n          updated_at: string | null;\n          weight_kg: number | null;\n        };\n        Insert: {\n          active_t_path_id?: string | null;\n          body_fat_pct?: number | null;\n          created_at?: string | null;\n          current_streak?: number | null;\n          default_rest_time_seconds?: number | null;\n          first_name?: string | null;\n          full_name?: string | null;\n          health_notes?: string | null;\n          height_cm?: number | null;\n          id: string;\n          last_ai_coach_use_at?: string | null;\n          last_name?: string | null;\n          last_workout_date?: string | null;\n          preferred_distance_unit?: string | null;\n          preferred_muscles?: string | null;\n          preferred_session_length?: string | null;\n          preferred_weight_unit?: string | null;\n          primary_goal?: string | null;\n          rolling_workout_status?: string | null;\n          target_date?: string | null;\n          total_points?: number | null;\n          updated_at?: string | null;\n          weight_kg?: number | null;\n        };\n        Update: {\n          active_t_path_id?: string | null;\n          body_fat_pct?: number | null;\n          created_at?: string | null;\n          current_streak?: number | null;\n          default_rest_time_seconds?: number | null;\n          first_name?: string | null;\n          full_name?: string | null;\n          health_notes?: string | null;\n          height_cm?: number | null;\n          id?: string;\n          last_ai_coach_use_at?: string | null;\n          last_name?: string | null;\n          last_workout_date?: string | null;\n          preferred_distance_unit?: string | null;\n          preferred_muscles?: string | null;\n          preferred_session_length?: string | null;\n          preferred_weight_unit?: string | null;\n          primary_goal?: string | null;\n          rolling_workout_status?: string | null;\n          target_date?: string | null;\n          total_points?: number | null;\n          updated_at?: string | null;\n          weight_kg?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"profiles_id_fkey\";\n            columns: [\"id\"];\n            isOneToOne: true;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      set_logs: {\n        Row: {\n          created_at: string | null;\n          exercise_id: string | null;\n          id: string;\n          is_pb: boolean | null;\n          reps: number | null;\n          reps_l: number | null;\n          reps_r: number | null;\n          session_id: string | null;\n          time_seconds: number | null;\n          weight_kg: number | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          exercise_id?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          reps?: number | null;\n          reps_l?: number | null;\n          reps_r?: number | null;\n          session_id?: string | null;\n          time_seconds?: number | null;\n          weight_kg?: number | null;\n        };\n        Update: {\n          created_at?: string | null;\n          exercise_id?: string | null;\n          id?: string;\n          is_pb?: boolean | null;\n          reps?: number | null;\n          reps_l?: number | null;\n          reps_r?: number | null;\n          session_id?: string | null;\n          time_seconds?: number | null;\n          weight_kg?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"set_logs_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"set_logs_session_id_fkey\";\n            columns: [\"session_id\"];\n            isOneToOne: false;\n            referencedRelation: \"workout_sessions\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      t_path_exercises: {\n        Row: {\n          created_at: string | null;\n          exercise_id: string;\n          id: string;\n          is_bonus_exercise: boolean | null;\n          order_index: number;\n          template_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          exercise_id: string;\n          id?: string;\n          is_bonus_exercise?: boolean | null;\n          order_index: number;\n          template_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          exercise_id?: string;\n          id?: string;\n          is_bonus_exercise?: boolean | null;\n          order_index?: number;\n          template_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"t_path_exercises_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"t_path_exercises_template_id_fkey\";\n            columns: [\"template_id\"];\n            isOneToOne: false;\n            referencedRelation: \"t_paths\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      t_paths: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          is_bonus: boolean | null;\n          parent_t_path_id: string | null;\n          progression_settings: Json | null;\n          settings: Json | null;\n          template_name: string;\n          user_id: string | null;\n          version: number | null;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          is_bonus?: boolean | null;\n          parent_t_path_id?: string | null;\n          progression_settings?: Json | null;\n          settings?: Json | null;\n          template_name: string;\n          user_id?: string | null;\n          version?: number | null;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          is_bonus?: boolean | null;\n          parent_t_path_id?: string | null;\n          progression_settings?: Json | null;\n          settings?: Json | null;\n          template_name?: string;\n          user_id?: string | null;\n          version?: number | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"t_paths_parent_t_path_id_fkey\";\n            columns: [\"parent_t_path_id\"];\n            isOneToOne: false;\n            referencedRelation: \"t_paths\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"workout_templates_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_achievements: {\n        Row: {\n          achievement_id: string;\n          id: string;\n          unlocked_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          achievement_id: string;\n          id?: string;\n          unlocked_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          achievement_id?: string;\n          id?: string;\n          unlocked_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_achievements_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_alerts: {\n        Row: {\n          created_at: string | null;\n          id: string;\n          is_read: boolean | null;\n          message: string;\n          title: string;\n          type: string | null;\n          user_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          id?: string;\n          is_read?: boolean | null;\n          message: string;\n          title: string;\n          type?: string | null;\n          user_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          id?: string;\n          is_read?: boolean | null;\n          message?: string;\n          title?: string;\n          type?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_alerts_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"users\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_exercise_prs: {\n        Row: {\n          best_time_seconds: number | null;\n          best_volume_kg: number | null;\n          created_at: string | null;\n          exercise_id: string;\n          id: string;\n          last_achieved_date: string;\n          updated_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          best_time_seconds?: number | null;\n          best_volume_kg?: number | null;\n          created_at?: string | null;\n          exercise_id: string;\n          id?: string;\n          last_achieved_date?: string;\n          updated_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          best_time_seconds?: number | null;\n          best_volume_kg?: number | null;\n          created_at?: string | null;\n          exercise_id?: string;\n          id?: string;\n          last_achieved_date?: string;\n          updated_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_exercise_prs_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"user_exercise_prs_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_global_favorites: {\n        Row: {\n          created_at: string | null;\n          exercise_id: string;\n          user_id: string;\n        };\n        Insert: {\n          created_at?: string | null;\n          exercise_id: string;\n          user_id: string;\n        };\n        Update: {\n          created_at?: string | null;\n          exercise_id?: string;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_global_favorites_exercise_id_fkey\";\n            columns: [\"exercise_id\"];\n            isOneToOne: false;\n            referencedRelation: \"exercise_definitions\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"user_global_favorites_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      user_notifications: {\n        Row: {\n          id: string;\n          notification_id: string;\n          read_at: string | null;\n          user_id: string;\n        };\n        Insert: {\n          id?: string;\n          notification_id: string;\n          read_at?: string | null;\n          user_id: string;\n        };\n        Update: {\n          id?: string;\n          notification_id?: string;\n          read_at?: string | null;\n          user_id?: string;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"user_notifications_notification_id_fkey\";\n            columns: [\"notification_id\"];\n            isOneToOne: false;\n            referencedRelation: \"notifications\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"user_notifications_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n      workout_exercise_structure: {\n        Row: {\n          bonus_for_time_group: number | null;\n          created_at: string | null;\n          exercise_library_id: string;\n          id: string;\n          min_session_minutes: number | null;\n          workout_name: string;\n          workout_split: string;\n        };\n        Insert: {\n          bonus_for_time_group?: number | null;\n          created_at?: string | null;\n          exercise_library_id: string;\n          id?: string;\n          min_session_minutes?: number | null;\n          workout_name: string;\n          workout_split: string;\n        };\n        Update: {\n          bonus_for_time_group?: number | null;\n          created_at?: string | null;\n          exercise_library_id?: string;\n          id?: string;\n          min_session_minutes?: number | null;\n          workout_name?: string;\n          workout_split?: string;\n        };\n        Relationships: [];\n      };\n      workout_sessions: {\n        Row: {\n          completed_at: string | null;\n          created_at: string | null;\n          duration_string: string | null;\n          id: string;\n          rating: number | null;\n          session_date: string;\n          t_path_id: string | null;\n          template_name: string | null;\n          user_id: string | null;\n        };\n        Insert: {\n          completed_at?: string | null;\n          created_at?: string | null;\n          duration_string?: string | null;\n          id?: string;\n          rating?: number | null;\n          session_date: string;\n          t_path_id?: string | null;\n          template_name?: string | null;\n          user_id?: string | null;\n        };\n        Update: {\n          completed_at?: string | null;\n          created_at?: string | null;\n          duration_string?: string | null;\n          id?: string;\n          rating?: number | null;\n          session_date?: string;\n          t_path_id?: string | null;\n          template_name?: string | null;\n          user_id?: string | null;\n        };\n        Relationships: [\n          {\n            foreignKeyName: \"workout_sessions_t_path_id_fkey\";\n            columns: [\"t_path_id\"];\n            isOneToOne: false;\n            referencedRelation: \"t_paths\";\n            referencedColumns: [\"id\"];\n          },\n          {\n            foreignKeyName: \"workout_sessions_user_id_fkey\";\n            columns: [\"user_id\"];\n            isOneToOne: false;\n            referencedRelation: \"profiles\";\n            referencedColumns: [\"id\"];\n          },\n        ];\n      };\n    };\n    Views: {\n      [_ in never]: never;\n    };\n    Functions: {\n      get_notifications_with_read_status: {\n        Args: Record<PropertyKey, never>;\n        Returns: {\n          created_at: string;\n          id: string;\n          is_read: boolean;\n          message: string;\n          title: string;\n          type: string;\n        }[];\n      };\n      get_user_personal_records: {\n        Args: {\n          p_user_id: string;\n          p_limit?: number;\n        };\n        Returns: {\n          exercise_name: string;\n          exercise_type: string;\n          best_value: number;\n          unit: string;\n          last_achieved_date: string;\n        }[];\n      };\n      handle_new_user: {\n        Args: Record<PropertyKey, never>;\n        Returns: string;\n      };\n      get_total_completed_exercise_instances: {\n        Args: {\n          p_user_id: string;\n        };\n        Returns: number;\n      };\n    };\n    Enums: {\n      [_ in never]: never;\n    };\n    CompositeTypes: {\n      [_ in never]: never;\n    };\n  };\n};","size_bytes":21900},"apps/web/src/types/supabase-generated/json.ts":{"content":"/**\n * This file contains the Json type definition.\n * It is part of the Supabase generated types, refactored for modularity.\n */\n\nexport type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]","size_bytes":243},"apps/web/src/types/supabase-generated/tables.ts":{"content":"/**\n * This file contains utility types for accessing Supabase table data.\n * It is part of the Supabase generated types, refactored for modularity.\n */\n\nimport { Database } from \"./database\";\n\ntype PublicSchema = Database[\"public\"];\n\nexport type Tables<\n  PublicTableNameOrOptions extends\n    | keyof (PublicSchema[\"Tables\"] & PublicSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }\n    ? keyof (Database[PublicTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[PublicTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = PublicTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[PublicTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[PublicTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R;\n    }\n    ? R\n    : never\n  : PublicTableNameOrOptions extends keyof (PublicSchema[\"Tables\"] &\n        PublicSchema[\"Views\"])\n    ? (PublicSchema[\"Tables\"] &\n        PublicSchema[\"Views\"])[PublicTableNameOrOptions] extends {\n            Row: infer R;\n          }\n      ? R\n      : never\n    : never;\n\nexport type TablesInsert<\n  PublicTableNameOrOptions extends\n    | keyof PublicSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }\n    ? keyof Database[PublicTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = PublicTableNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I;\n    }\n    ? I\n    : never\n  : PublicTableNameOrOptions extends keyof PublicSchema[\"Tables\"]\n    ? PublicSchema[\"Tables\"][PublicTableNameOrOptions] extends {\n        Insert: infer I;\n      }\n      ? I\n      : never\n    : never;\n\nexport type TablesUpdate<\n  PublicTableNameOrOptions extends\n    | keyof PublicSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }\n    ? keyof Database[PublicTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = PublicTableNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U;\n    }\n    ? U\n    : never\n  : PublicTableNameOrOptions extends keyof PublicSchema[\"Tables\"]\n    ? PublicSchema[\"Tables\"][PublicTableNameOrOptions] extends {\n        Update: infer U;\n      }\n      ? U\n      : never\n    : never;","size_bytes":2532},"apps/web/src/types/supabase-generated/tables/activity_logs.ts":{"content":"import { Json } from \"../json\";\n\nexport type ActivityLogsRow = {\n  activity_type: string;\n  avg_time: number | null;\n  created_at: string | null;\n  distance: string | null;\n  id: string;\n  is_pb: boolean | null;\n  log_date: string;\n  time: string | null;\n  user_id: string | null;\n};\nexport type ActivityLogsInsert = {\n  activity_type: string;\n  avg_time?: number | null;\n  created_at?: string | null;\n  distance?: string | null;\n  id?: string;\n  is_pb?: boolean | null;\n  log_date: string;\n  time?: string | null;\n  user_id?: string | null;\n};\nexport type ActivityLogsUpdate = {\n  activity_type?: string;\n  avg_time?: number | null;\n  created_at?: string | null;\n  distance?: string | null;\n  id?: string;\n  is_pb?: boolean | null;\n  log_date?: string;\n  time?: string | null;\n  user_id?: string | null;\n};","size_bytes":807},"apps/web/src/types/supabase-generated/tables/ai_coach_usage_logs.ts":{"content":"import { Json } from \"../json\";\n\nexport type AiCoachUsageLogsRow = {\n  id: string;\n  user_id: string | null;\n  used_at: string | null;\n};\nexport type AiCoachUsageLogsInsert = {\n  id?: string;\n  user_id?: string | null;\n  used_at?: string | null;\n};\nexport type AiCoachUsageLogsUpdate = {\n  id?: string;\n  user_id?: string | null;\n  used_at?: string | null;\n};","size_bytes":359},"apps/web/src/types/supabase-generated/tables/body_fat_reference_images.ts":{"content":"import { Json } from \"../json\";\n\nexport type BodyFatReferenceImagesRow = {\n  id: string;\n  percentage: number;\n  image_url: string;\n  description: string | null;\n  created_at: string | null;\n};\nexport type BodyFatReferenceImagesInsert = {\n  id?: string;\n  percentage: number;\n  image_url: string;\n  description?: string | null;\n  created_at?: string | null;\n};\nexport type BodyFatReferenceImagesUpdate = {\n  id?: string;\n  percentage?: number;\n  image_url?: string;\n  description?: string | null;\n  created_at?: string | null;\n};","size_bytes":529},"apps/web/src/types/supabase-generated/tables/exercise_definitions.ts":{"content":"import { Json } from \"../json\";\n\nexport type ExerciseDefinitionsRow = {\n  category: string | null;\n  created_at: string | null;\n  description: string | null;\n  id: string;\n  main_muscle: string;\n  name: string;\n  pro_tip: string | null;\n  type: string;\n  user_id: string | null;\n  video_url: string | null;\n  library_id: string | null;\n  is_favorite: boolean | null;\n  icon_url: string | null;\n  movement_type: string | null; // ADDED\n  movement_pattern: string | null; // ADDED\n};\nexport type ExerciseDefinitionsInsert = {\n  category?: string | null;\n  created_at?: string | null;\n  description?: string | null;\n  id?: string;\n  main_muscle: string;\n  name: string;\n  pro_tip?: string | null;\n  type?: string;\n  user_id?: string | null;\n  video_url?: string | null;\n  library_id?: string | null;\n  is_favorite?: boolean | null;\n  icon_url?: string | null;\n  movement_type?: string | null; // ADDED\n  movement_pattern?: string | null; // ADDED\n};\nexport type ExerciseDefinitionsUpdate = {\n  category?: string | null;\n  created_at?: string | null;\n  description?: string | null;\n  id?: string;\n  main_muscle?: string;\n  name?: string;\n  pro_tip?: string | null;\n  type?: string;\n  user_id?: string | null;\n  video_url?: string | null;\n  library_id?: string | null;\n  is_favorite?: boolean | null;\n  icon_url?: string | null;\n  movement_type?: string | null; // ADDED\n  movement_pattern?: string | null; // ADDED\n};","size_bytes":1413},"apps/web/src/types/supabase-generated/tables/gym_exercises.ts":{"content":"import { Json } from \"../json\";\n\nexport type GymExercisesRow = {\n  created_at: string;\n  exercise_id: string;\n  gym_id: string;\n};\nexport type GymExercisesInsert = {\n  created_at?: string;\n  exercise_id: string;\n  gym_id: string;\n};\nexport type GymExercisesUpdate = {\n  created_at?: string;\n  exercise_id?: string;\n  gym_id?: string;\n};","size_bytes":336},"apps/web/src/types/supabase-generated/tables/media_posts.ts":{"content":"import { Json } from \"../json\";\n\nexport type MediaPostsRow = {\n  id: string;\n  title: string;\n  description: string | null;\n  video_url: string;\n  creator_name: string | null;\n  created_at: string;\n  category: string | null; // ADDED\n};\nexport type MediaPostsInsert = {\n  id?: string;\n  title: string;\n  description?: string | null;\n  video_url: string;\n  creator_name?: string | null;\n  created_at?: string;\n  category?: string | null; // ADDED\n};\nexport type MediaPostsUpdate = {\n  id?: string;\n  title?: string;\n  description?: string | null;\n  video_url?: string;\n  creator_name?: string | null;\n  created_at?: string;\n  category?: string | null; // ADDED\n};","size_bytes":662},"apps/web/src/types/supabase-generated/tables/notifications.ts":{"content":"import { Json } from \"../json\";\n\nexport type NotificationsRow = {\n  id: string;\n  title: string;\n  message: string;\n  type: string;\n  created_at: string | null;\n};\nexport type NotificationsInsert = {\n  id?: string;\n  title: string;\n  message: string;\n  type?: string;\n  created_at?: string | null;\n};\nexport type NotificationsUpdate = {\n  id?: string;\n  title?: string;\n  message?: string;\n  type?: string;\n  created_at?: string | null;\n};","size_bytes":439},"apps/web/src/types/supabase-generated/tables/profiles.ts":{"content":"import { Json } from \"../json\";\n\nexport type ProfilesRow = {\n  body_fat_pct: number | null;\n  created_at: string | null;\n  default_rest_time_seconds: number | null;\n  first_name: string | null;\n  full_name: string | null;\n  health_notes: string | null;\n  height_cm: number | null;\n  id: string;\n  last_ai_coach_use_at: string | null;\n  last_name: string | null;\n  preferred_distance_unit: string | null;\n  preferred_muscles: string | null;\n  preferred_weight_unit: string | null;\n  primary_goal: string | null;\n  target_date: string | null;\n  updated_at: string | null;\n  preferred_session_length: string | null;\n  active_t_path_id: string | null;\n  weight_kg: number | null;\n  total_points: number | null;\n  current_streak: number | null;\n  longest_streak: number | null;\n  last_workout_date: string | null;\n  rolling_workout_status: string | null;\n  active_gym_id: string | null;\n  t_path_generation_status: string | null;\n  t_path_generation_error: string | null;\n  programme_type: string | null;\n};\nexport type ProfilesInsert = {\n  body_fat_pct?: number | null;\n  created_at?: string | null;\n  default_rest_time_seconds?: number | null;\n  first_name?: string | null;\n  full_name?: string | null;\n  health_notes?: string | null;\n  height_cm?: number | null;\n  id: string;\n  last_ai_coach_use_at?: string | null;\n  last_name?: string | null;\n  preferred_distance_unit?: string | null;\n  preferred_muscles?: string | null;\n  preferred_weight_unit?: string | null;\n  primary_goal?: string | null;\n  target_date?: string | null;\n  updated_at?: string | null;\n  weight_kg?: number | null;\n  preferred_session_length?: string | null;\n  active_t_path_id?: string | null;\n  total_points?: number | null;\n  current_streak?: number | null;\n  longest_streak?: number | null;\n  last_workout_date?: string | null;\n  rolling_workout_status?: string | null;\n  active_gym_id?: string | null;\n  t_path_generation_status?: string | null;\n  t_path_generation_error?: string | null;\n  programme_type?: string | null;\n};\nexport type ProfilesUpdate = {\n  body_fat_pct?: number | null;\n  created_at?: string | null;\n  default_rest_time_seconds?: number | null;\n  first_name?: string | null;\n  full_name?: string | null;\n  health_notes?: string | null;\n  height_cm?: number | null;\n  id?: string;\n  last_ai_coach_use_at?: string | null;\n  last_name?: string | null;\n  preferred_distance_unit?: string | null;\n  preferred_muscles?: string | null;\n  preferred_weight_unit?: string | null;\n  primary_goal?: string | null;\n  target_date?: string | null;\n  updated_at?: string | null;\n  weight_kg?: number | null;\n  preferred_session_length?: string | null;\n  active_t_path_id?: string | null;\n  total_points?: number | null;\n  current_streak?: number | null;\n  longest_streak?: number | null;\n  last_workout_date?: string | null;\n  rolling_workout_status?: string | null;\n  active_gym_id?: string | null;\n  t_path_generation_status?: string | null;\n  t_path_generation_error?: string | null;\n  programme_type?: string | null;\n};","size_bytes":3003},"apps/web/src/types/supabase-generated/tables/progress_photos.ts":{"content":"import { Json } from \"../json\";\n\nexport type ProgressPhotosRow = {\n  id: string;\n  user_id: string;\n  photo_path: string;\n  notes: string | null;\n  created_at: string;\n  workouts_since_last_photo: number | null;\n};\nexport type ProgressPhotosInsert = {\n  id?: string;\n  user_id: string;\n  photo_path: string;\n  notes?: string | null;\n  created_at?: string;\n  workouts_since_last_photo?: number | null;\n};\nexport type ProgressPhotosUpdate = {\n  id?: string;\n  user_id?: string;\n  photo_path?: string;\n  notes?: string | null;\n  created_at?: string;\n  workouts_since_last_photo?: number | null;\n};","size_bytes":594},"apps/web/src/types/supabase-generated/tables/set_logs.ts":{"content":"import { Json } from \"../json\";\n\nexport type SetLogsRow = {\n  created_at: string | null;\n  exercise_id: string | null;\n  id: string;\n  is_pb: boolean | null;\n  reps: number | null;\n  reps_l: number | null;\n  reps_r: number | null;\n  session_id: string | null;\n  time_seconds: number | null;\n  weight_kg: number | null;\n};\nexport type SetLogsInsert = {\n  created_at?: string | null;\n  exercise_id?: string | null;\n  id?: string;\n  is_pb?: boolean | null;\n  reps?: number | null;\n  reps_l?: number | null;\n  reps_r?: number | null;\n  session_id?: string | null;\n  time_seconds?: number | null;\n  weight_kg?: number | null;\n};\nexport type SetLogsUpdate = {\n  created_at?: string | null;\n  exercise_id?: string | null;\n  id?: string;\n  is_pb?: boolean | null;\n  reps?: number | null;\n  reps_l?: number | null;\n  reps_r?: number | null;\n  session_id?: string | null;\n  time_seconds?: number | null;\n  weight_kg?: number | null;\n};","size_bytes":925},"apps/web/src/types/supabase-generated/tables/t_path_exercises.ts":{"content":"import { Json } from \"../json\";\n\nexport type TPathExercisesRow = {\n  created_at: string | null;\n  exercise_id: string;\n  id: string;\n  order_index: number;\n  template_id: string;\n  is_bonus_exercise: boolean | null;\n};\nexport type TPathExercisesInsert = {\n  created_at?: string | null;\n  exercise_id: string;\n  id?: string;\n  order_index: number;\n  template_id: string;\n  is_bonus_exercise?: boolean | null;\n};\nexport type TPathExercisesUpdate = {\n  created_at?: string | null;\n  exercise_id?: string;\n  id?: string;\n  order_index?: number;\n  template_id?: string;\n  is_bonus_exercise?: boolean | null;\n};","size_bytes":605},"apps/web/src/types/supabase-generated/tables/t_paths.ts":{"content":"import { Json } from \"../json\";\n\nexport type TPathsRow = {\n  created_at: string | null;\n  id: string;\n  is_bonus: boolean | null;\n  template_name: string;\n  user_id: string | null;\n  version: number | null;\n  settings: Json | null;\n  progression_settings: Json | null;\n  parent_t_path_id: string | null;\n  gym_id: string | null;\n};\nexport type TPathsInsert = {\n  created_at?: string | null;\n  id?: string;\n  is_bonus?: boolean | null;\n  template_name: string;\n  user_id?: string | null;\n  version?: number | null;\n  settings?: Json | null;\n  progression_settings?: Json | null;\n  parent_t_path_id?: string | null;\n  gym_id?: string | null;\n};\nexport type TPathsUpdate = {\n  created_at?: string | null;\n  id?: string;\n  is_bonus?: boolean | null;\n  template_name?: string;\n  user_id?: string | null;\n  version?: number | null;\n  settings?: Json | null;\n  progression_settings?: Json | null;\n  parent_t_path_id?: string | null;\n  gym_id?: string | null;\n};","size_bytes":954},"apps/web/src/types/supabase-generated/tables/user_achievements.ts":{"content":"import { Json } from \"../json\";\n\nexport type UserAchievementsRow = {\n  id: string;\n  user_id: string;\n  achievement_id: string;\n  unlocked_at: string | null;\n};\nexport type UserAchievementsInsert = {\n  id?: string;\n  user_id: string;\n  achievement_id: string;\n  unlocked_at?: string | null;\n};\nexport type UserAchievementsUpdate = {\n  id?: string;\n  user_id?: string;\n  achievement_id?: string;\n  unlocked_at?: string | null;\n};","size_bytes":428},"apps/web/src/types/supabase-generated/tables/user_alerts.ts":{"content":"import { Json } from \"../json\";\n\nexport type UserAlertsRow = {\n  created_at: string | null;\n  id: string;\n  is_read: boolean | null;\n  message: string;\n  title: string;\n  type: string | null;\n  user_id: string;\n};\nexport type UserAlertsInsert = {\n  created_at?: string | null;\n  id?: string;\n  is_read?: boolean | null;\n  message: string;\n  title: string;\n  type?: string | null;\n  user_id: string;\n};\nexport type UserAlertsUpdate = {\n  created_at?: string | null;\n  id?: string;\n  is_read?: boolean | null;\n  message?: string;\n  title?: string;\n  type?: string | null;\n  user_id?: string;\n};","size_bytes":592},"apps/web/src/types/supabase-generated/tables/user_exercise_prs.ts":{"content":"import { Json } from \"../json\";\n\nexport type UserExercisePrsRow = {\n  id: string;\n  user_id: string;\n  exercise_id: string;\n  best_volume_kg: number | null;\n  best_time_seconds: number | null;\n  last_achieved_date: string;\n  created_at: string | null;\n  updated_at: string | null;\n};\nexport type UserExercisePrsInsert = {\n  id?: string;\n  user_id: string;\n  exercise_id: string;\n  best_volume_kg?: number | null;\n  best_time_seconds?: number | null;\n  last_achieved_date?: string;\n  created_at?: string | null;\n  updated_at?: string | null;\n};\nexport type UserExercisePrsUpdate = {\n  id?: string;\n  user_id?: string;\n  exercise_id?: string;\n  best_volume_kg?: number | null;\n  best_time_seconds?: number | null;\n  last_achieved_date?: string;\n  created_at?: string | null;\n  updated_at?: string | null;\n};","size_bytes":805},"apps/web/src/types/supabase-generated/tables/user_notifications.ts":{"content":"import { Json } from \"../json\";\n\nexport type UserNotificationsRow = {\n  id: string;\n  user_id: string;\n  notification_id: string;\n  read_at: string | null;\n};\nexport type UserNotificationsInsert = {\n  id?: string;\n  user_id: string;\n  notification_id: string;\n  read_at?: string | null;\n};\nexport type UserNotificationsUpdate = {\n  id?: string;\n  user_id?: string;\n  notification_id?: string;\n  read_at?: string | null;\n};","size_bytes":422},"apps/web/src/types/supabase-generated/tables/workout_exercise_structure.ts":{"content":"import { Json } from \"../json\";\n\nexport type WorkoutExerciseStructureRow = {\n  id: string;\n  exercise_library_id: string;\n  workout_split: string;\n  workout_name: string;\n  min_session_minutes: number | null;\n  bonus_for_time_group: number | null;\n  created_at: string | null;\n};\nexport type WorkoutExerciseStructureInsert = {\n  id?: string;\n  exercise_library_id: string;\n  workout_split: string;\n  workout_name: string;\n  min_session_minutes?: number | null;\n  bonus_for_time_group?: number | null;\n  created_at?: string | null;\n};\nexport type WorkoutExerciseStructureUpdate = {\n  id?: string;\n  exercise_library_id?: string;\n  workout_split?: string;\n  workout_name?: string;\n  min_session_minutes?: number | null;\n  bonus_for_time_group?: number | null;\n  created_at?: string | null;\n};","size_bytes":790},"apps/web/src/types/supabase-generated/tables/workout_sessions.ts":{"content":"import { Json } from \"../json\";\n\nexport type WorkoutSessionsRow = {\n  created_at: string | null;\n  duration_string: string | null;\n  id: string;\n  rating: number | null;\n  session_date: string;\n  template_name: string | null;\n  user_id: string | null;\n  completed_at: string | null;\n  t_path_id: string | null;\n};\nexport type WorkoutSessionsInsert = {\n  created_at?: string | null;\n  duration_string?: string | null;\n  id?: string;\n  rating?: number | null;\n  session_date: string;\n  template_name?: string | null;\n  user_id?: string | null;\n  completed_at?: string | null;\n  t_path_id?: string | null;\n};\nexport type WorkoutSessionsUpdate = {\n  created_at?: string | null;\n  duration_string?: string | null;\n  id?: string;\n  rating?: number | null;\n  session_date?: string;\n  template_name?: string | null;\n  user_id?: string | null;\n  completed_at?: string | null;\n  t_path_id?: string | null;\n};","size_bytes":898},"apps/web/src/types/supabase.ts":{"content":"/**\n * This file contains custom application-specific types and re-exports\n * the core Supabase database types.\n *\n * To regenerate the core database types, run:\n * `supabase gen types typescript --local > src/types/supabase-generated/database.ts`\n * Then, ensure other generated files (json, tables, enums) are consistent.\n */\n\n// Import generated Supabase types to be used and re-exported\nimport type { Json } from \"./supabase-generated/json\";\nimport type { Database } from \"./supabase-generated/database\";\nimport type { Tables, TablesInsert, TablesUpdate } from \"./supabase-generated/tables\";\nimport type { Enums } from \"./supabase-generated/enums\";\nimport type { UserAchievementsRow } from \"./supabase-generated/tables/user_achievements\";\nimport type { AiCoachUsageLogsRow } from \"./supabase-generated/tables/ai_coach_usage_logs\";\nimport type { GetLastExerciseSetsForExerciseReturns } from \"./supabase-generated/functions/get_last_exercise_sets_for_exercise\";\nimport type { GetTotalCompletedExerciseInstancesArgs, GetTotalCompletedExerciseInstancesReturns } from \"./supabase-generated/functions/get_total_completed_exercise_instances\";\nimport type { BodyFatReferenceImagesRow } from \"./supabase-generated/tables/body_fat_reference_images\";\nimport type { UserAlertsRow } from \"./supabase-generated/tables/user_alerts\";\nimport type { ExerciseDefinitionsRow } from \"./supabase-generated/tables/exercise_definitions\"; // Import ExerciseDefinitionsRow\nimport type { MediaPostsRow } from \"./supabase-generated/tables/media_posts\"; // NEW: Import MediaPostsRow\n\nexport type { Json, Database, Tables, TablesInsert, TablesUpdate, Enums, GetLastExerciseSetsForExerciseReturns, GetTotalCompletedExerciseInstancesArgs, GetTotalCompletedExerciseInstancesReturns };\n\n// --- Custom Types ---\n// These are application-specific types that extend or combine Supabase-generated types.\n\n// Consolidated SetLogState for use across hooks and components\nexport interface SetLogState extends Omit<Tables<'set_logs'>, 'id' | 'created_at'> {\n  id: string | null; // Explicitly allow null for new sets\n  created_at: string | null; // Explicitly allow null for new sets\n  isSaved: boolean;\n  isPR: boolean; // This is for set-level PR\n  lastWeight?: number | null;\n  lastReps?: number | null;\n  lastRepsL?: number | null; // ADDED\n  lastRepsR?: number | null; // ADDED\n  lastTimeSeconds?: number | null;\n}\n\n// Explicitly define extended Profile types to include preferred_session_length and active_t_path_id\nexport type Profile = Tables<'profiles'>;\n\nexport type ProfileInsert = TablesInsert<'profiles'>;\n\nexport type ProfileUpdate = TablesUpdate<'profiles'>;\n\n// Define a type for set logs joined with exercise definitions, including is_pb\nexport type SetLogWithExercise = Pick<Tables<'set_logs'>, 'id' | 'weight_kg' | 'reps' | 'reps_l' | 'reps_r' | 'time_seconds' | 'is_pb' | 'created_at' | 'exercise_id' | 'session_id'> & {\n  exercise_definitions: Pick<ExerciseDefinitionsRow, 'id' | 'name' | 'main_muscle' | 'type' | 'category' | 'movement_type' | 'movement_pattern'> | null;\n  // Added fields for progressive overload comparison\n  last_session_weight_kg?: number | null;\n  last_session_reps?: number | null;\n  last_session_reps_l?: number | null;\n  last_session_reps_r?: number | null;\n  last_session_time_seconds?: number | null;\n};\n\n// New type for exercises when fetched as part of a workout, including bonus status\nexport interface WorkoutExercise extends Omit<ExerciseDefinitionsRow, 'id'> {\n  id: string; // Must be non-null\n  is_bonus_exercise: boolean;\n  icon_url: string | null; // Added icon_url\n  movement_type: string | null; // Explicitly add these\n  movement_pattern: string | null; // Explicitly add these\n}\n\n// New type for user_exercise_prs table\nexport type UserExercisePR = Tables<'user_exercise_prs'>;\nexport type UserExercisePRInsert = TablesInsert<'user_exercise_prs'>;\nexport type UserExercisePRUpdate = TablesUpdate<'user_exercise_prs'>;\n\n// Re-export UserAchievementRow for direct use\nexport type UserAchievement = UserAchievementsRow;\n// NEW: LocalUserAchievement type\nexport type LocalUserAchievement = UserAchievementsRow;\n\n// NEW: BodyFatReferenceImage type\nexport type BodyFatReferenceImage = BodyFatReferenceImagesRow;\n\n// NEW: UserAlert type\nexport type UserAlert = UserAlertsRow;\n\n\n// New type for ai_coach_usage_logs table\nexport type AiCoachUsageLog = AiCoachUsageLogsRow;\n\n// Centralized FetchedExerciseDefinition for consistency across manage-exercises components\n// It now explicitly extends ExerciseDefinitionsRow to ensure movement_type and movement_pattern are present.\nexport interface FetchedExerciseDefinition extends Omit<ExerciseDefinitionsRow, 'id'> {\n  id: string | null; // Override id to be nullable\n  is_favorited_by_current_user?: boolean; // For global exercises favorited by user\n  duplicate_status?: 'none' | 'global' | 'my-exercises'; // NEW: Add duplicate status\n  existing_id?: string | null; // ID of the duplicate exercise if found\n  movement_type: string | null; // Explicitly add these\n  movement_pattern: string | null; // Explicitly add these\n}\n\n// Centralized type for workouts with last completed date\nexport interface WorkoutWithLastCompleted extends Tables<'t_paths'> {\n  id: string; // Ensure ID is always present\n  template_name: string; // Ensure template_name is always present\n  last_completed_at: string | null;\n}\n\n// Centralized type for workout sessions with aggregated details\nexport interface WorkoutSessionWithAggregatedDetails extends Tables<'workout_sessions'> {\n  id: string; // Ensure ID is always present\n  template_name: string | null; // Ensure template_name is always present\n  session_date: string; // Ensure session_date is always present\n  completed_at: string | null; // Ensure completed_at is always present\n  duration_string: string | null; // Ensure duration_string is always present\n  exercise_count: number;\n  total_volume_kg: number;\n  has_prs: boolean;\n}\n\n// Centralized type for grouped T-Paths\nexport interface GroupedTPath {\n  mainTPath: Tables<'t_paths'>;\n  childWorkouts: WorkoutWithLastCompleted[];\n}\n\n// NEW: WorkoutExerciseWithDetails type for exercises in a workout template\nexport interface WorkoutExerciseWithDetails extends ExerciseDefinitionsRow {\n  // ExerciseDefinitionsRow already has id: string, name: string, movement_type, movement_pattern\n  order_index: number;\n  is_bonus_exercise: boolean;\n  t_path_exercise_id: string; // ID from t_path_exercises table\n}\n\n// Export the full ExerciseDefinitionsRow as ExerciseDefinition\nexport type ExerciseDefinition = ExerciseDefinitionsRow & {\n  movement_type: string | null;\n  movement_pattern: string | null;\n};\n\n// NEW: Explicitly define MediaPost using MediaPostsRow\nexport type MediaPost = MediaPostsRow;","size_bytes":6747},"apps/web/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n    darkMode: [\"class\"],\n    content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n  \textend: {\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"sans-serif\"], // Default sans-serif to Poppins\n        // Removed display font as Satoshi is no longer used\n      },\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n        action: {\n          DEFAULT: 'hsl(var(--action-primary))',\n          foreground: 'hsl(var(--action-primary-foreground))'\n        },\n        success: {\n          DEFAULT: 'hsl(var(--success))',\n          foreground: 'hsl(var(--success-foreground))'\n        },\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t},\n  \t\t\tsidebar: {\n  \t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n  \t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n  \t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n  \t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  \t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n  \t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  \t\t\t\tborder: 'hsl(var(--sidebar-border))',\n  \t\t\t\tring: 'hsl(var(--sidebar-ring))'\n  \t\t\t},\n        onboarding: {\n          primary: 'hsl(var(--onboarding-primary))',\n          'primary-light': 'hsl(var(--onboarding-primary-light))',\n          'primary-faint': 'hsl(var(--onboarding-primary-faint))',\n        },\n        workout: {\n          'upper-body-a': 'hsl(var(--workout-upper-body-a))',\n          'upper-body-a-light': 'hsl(var(--workout-upper-body-a-light))',\n          'upper-body-b': 'hsl(var(--workout-upper-body-b))',\n          'upper-body-b-light': 'hsl(var(--workout-upper-body-b-light))',\n          'lower-body-a': 'hsl(var(--workout-lower-body-a))',\n          'lower-body-a-light': 'hsl(var(--workout-lower-body-a-light))',\n          'lower-body-b': 'hsl(var(--workout-lower-body-b))',\n          'lower-body-b-light': 'hsl(var(--workout-lower-body-b-light))',\n          'push': 'hsl(var(--workout-push))',\n          'push-light': 'hsl(var(--workout-push-light))',\n          'pull': 'hsl(var(--workout-pull))',\n          'pull-light': 'hsl(var(--workout-pull-light))',\n          'legs': 'hsl(var(--workout-legs))',\n          'legs-light': 'hsl(var(--workout-legs-light))',\n          'bonus': 'hsl(var(--workout-bonus))',\n          'bonus-light': 'hsl(var(--workout-bonus-light))',\n          'ad-hoc': 'hsl(var(--workout-ad-hoc))',\n          'ad-hoc-light': 'hsl(var(--workout-ad-hoc-light))',\n        },\n  \t\t},\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tkeyframes: {\n  \t\t\t'accordion-down': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t'accordion-up': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t}\n  \t\t\t},\n        'fade-in': {\n          from: { opacity: '0' },\n          to: { opacity: '1' },\n        },\n        'fade-in-fast': { // NEW\n          from: { opacity: '0' },\n          to: { opacity: '1' },\n        },\n        'fade-in-slide-up': {\n          from: { opacity: '0', transform: 'translateY(40px) scale(0.98)' },\n          to: { opacity: '1', transform: 'translateY(0) scale(1)' },\n        },\n  \t\t},\n  \t\tanimation: {\n  \t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n  \t\t\t'accordion-up': 'accordion-up 0.2s ease-out',\n        'fade-in': 'fade-in 0.8s ease-out forwards',\n        'fade-in-fast': 'fade-in-fast 0.3s ease-out forwards', // NEW\n        'fade-in-slide-up': 'fade-in-slide-up 1s cubic-bezier(0.16, 1, 0.3, 1) forwards',\n  \t\t},\n      boxShadow: {\n        'workout-pill-selected': '0 8px 20px -6px rgba(0, 0, 0, 0.2)', // A subtle, diffused shadow\n      },\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n  safelist: [\n    {\n      pattern: /(bg|text|border)-workout-(upper-body-a|lower-body-a|upper-body-b|lower-body-b|push|pull|legs|bonus|ad-hoc)/,\n    },\n    {\n      pattern: /(from|to)-workout-(upper-body-a|lower-body-a|upper-body-b|lower-body-b|push|pull|legs|bonus|ad-hoc)(-light)?/,\n    },\n    // Add the specific background colors for the fitness level badge to the safelist\n    'bg-gray-500',\n    'bg-blue-500',\n    'bg-purple-500',\n    'bg-yellow-500',\n    // Added for WeeklyMomentumBars\n    'bg-gray-100',\n    'bg-gray-200',\n    'bg-green-200',\n    'bg-green-400',\n    'bg-green-600',\n  ],\n} satisfies Config;","size_bytes":5642},"packages/data/src/hooks/index.ts":{"content":"export * from './use-sync-queue-processor';\n","size_bytes":44},"packages/data/src/index.ts":{"content":"export * from './hooks/use-sync-queue-processor';\nexport * from './utils/unit-conversions';\nexport * from './utils/workout-helpers';\nexport * from './utils/equipment-mapping';\nexport * from './constants/achievements';\nexport * from './constants/equipment';\nexport * from './achievements';\nexport * from './exercises';\nexport * from './supabase/config';\nexport * from './storage/sync-queue';\nexport * from './storage/models';\nexport * from './ai/openai-client';\nexport * from './ai/workout-generator';\nexport * from './ai/coaching';\n","size_bytes":532},"packages/features/src/index.ts":{"content":"export {};\n","size_bytes":11},"packages/ui/src/index.ts":{"content":"export {};\n","size_bytes":11},"replit.md":{"content":"# My Fitness Trainer - Replit Setup\n\n## Overview\nThis project is a cross-platform fitness tracking application designed to run as both a web app (Next.js) and a mobile app (React Native/Expo) from a single monorepo. It aims to provide users with comprehensive tools for workout planning, exercise tracking, AI coaching, progress monitoring, and gamification, all backed by Supabase. The application's business vision is to offer a seamless and engaging fitness experience across devices, leveraging AI for personalized guidance and robust tracking to help users achieve their health and fitness goals.\n\n## User Preferences\nI prefer iterative development with clear communication at each step. Please ask before making major architectural changes or implementing complex features. I value well-structured, readable code, and I appreciate detailed explanations when new concepts or patterns are introduced.\n\n## System Architecture\nThe application employs a monorepo structure to share code between its web (Next.js 15.5.4 App Router) and mobile (React Native/Expo) clients. TypeScript is used throughout for type safety.\n\n**UI/UX Decisions:**\n- **Web:** Tailwind CSS v3.4 for styling, Shadcn/UI (Radix UI primitives) for components, Lucide React for icons.\n- **Mobile:** React Native StyleSheet for styling.\n- **General:** Custom color scheme, responsive design for charts (Recharts), visual feedback for PRs and timers.\n\n**Technical Implementations & Feature Specifications:**\n- **Authentication:** Supabase for email/password authentication with session persistence.\n- **Data Management:**\n    - **Offline-First:** Mobile app uses `expo-sqlite` and a sync queue for offline data persistence, automatically syncing with Supabase when online. Web app uses Dexie (IndexedDB).\n    - **State Management:** React Context API.\n    - **Forms:** React Hook Form with Zod for validation.\n- **Workout Tracking:** Multi-exercise logging, set management, personal record (PR) detection and celebration, rest timer.\n- **Workout Templates:** CRUD operations for saving, loading, and managing workout configurations.\n- **T-Paths System (Workout Programs):** \n    - **Database Schema:** SQLite tables for t_paths, t_path_exercises, and t_path_progress with offline-first support.\n    - **Program Management:** Browse, view, and start workouts from structured training programs.\n    - **Progress Tracking:** Automatic tracking of last access and workout completion for each program.\n    - **Hierarchical Structure:** Support for main programs with child workouts and bonus exercises.\n    - **AI-Generated Programs:** Full support for AI-generated workout programs with equipment awareness and goal-based customization.\n- **Gym & Equipment Management:**\n    - **Equipment System:** 32 equipment types across 8 categories (Free Weights, Cardio, Strength Machines, Cable, Racks/Benches, Bodyweight, Stretching, Olympic).\n    - **Gym CRUD:** Full create, read, update, delete operations for gym profiles with equipment lists.\n    - **Active Gym:** User can set one gym as active; affects exercise filtering and AI program generation.\n    - **Equipment-Aware Filtering:** Exercise picker filters by active gym's equipment with visual indicators for unavailable exercises.\n- **AI Integration (OpenAI GPT-5):**\n    - **Workout Program Generator:** Creates personalized training programs based on user's goal (strength, hypertrophy, endurance, weight loss, general fitness), experience level (beginner, intermediate, advanced), available gym equipment, training frequency, and session duration. Generated programs are saved as T-Paths with proper exercise ID mapping.\n    - **AI Coaching:** Real-time motivational coaching and form tips during workouts. Provides context-aware advice based on current exercise, set number, and user progress.\n    - **Exercise Matching:** Intelligent name-to-ID mapping system that matches AI-generated exercise names to actual exercise definitions.\n- **Progress & Analytics:** Dashboard with key metrics, workout frequency charts, volume tracking, PR progression charts, and streak tracking.\n- **Body Measurements:** Tracking for weight, body fat percentage, and various body measurements, with historical views.\n- **Goals & Achievements:**\n    - **Goals:** Support for 5 goal types (weight loss/gain, strength, frequency, body fat) with progress tracking.\n    - **Achievements:** 21 predefined achievements across 5 categories (workouts, strength, consistency, volume, weight) with automatic unlock detection.\n- **User Preferences:** Unit system toggle (metric/imperial) and theme preference, persisted per user.\n\n**System Design Choices:**\n- **Monorepo:** Facilitates code sharing (`packages/data`, `packages/features`, `packages/ui`) between web and mobile applications.\n- **Supabase Edge Functions:** For server-side logic and real-time capabilities.\n- **TypeScript:** Ensures code quality and maintainability across the entire stack.\n- **PWA:** `next-pwa` for web app progressive web app capabilities (disabled in dev).\n- **Network Monitoring:** `@react-native-community/netinfo` for mobile app connectivity awareness.\n\n## External Dependencies\n- **Backend-as-a-Service (BaaS):** Supabase (Authentication, PostgreSQL Database, Edge Functions)\n- **AI Services:** OpenAI GPT-5 API for workout program generation and coaching\n- **Frontend Frameworks:** Next.js (Web), React Native / Expo (Mobile)\n- **Styling:** Tailwind CSS (Web), React Native StyleSheet (Mobile)\n- **UI Libraries:** Shadcn/UI (Web), Radix UI (Primitives for Shadcn/UI)\n- **Icons:** Lucide React\n- **Form Management:** React Hook Form, Zod\n- **Charting:** Recharts\n- **Notifications:** Sonner\n- **Offline Data Storage:** Dexie (Web - IndexedDB wrapper), expo-sqlite (Mobile)\n- **PWA Integration:** next-pwa\n- **Network Connectivity:** @react-native-community/netinfo (Mobile)\n\n## Recent Changes (October 2025 - January 2025)\n- **Phase 12 Complete (Oct 5):** AI Integration - Equipment-aware workout program generation using OpenAI GPT-5, AI coaching with real-time motivation and form tips, intelligent exercise name mapping, full T-Path schema alignment for generated programs\n- **Phase 13 Complete (Oct 5):** Gym & Equipment Management - 32 equipment types, gym CRUD operations, active gym selection, equipment-aware exercise filtering with visual indicators\n- **Equipment Filtering Complete (Oct 5):** Exercise picker now filters by active gym's equipment with smart mapping system and \"Available Only\" toggle\n- **Phase 14 Complete (Jan 5, 2025):** PPL/ULUL Split System - Split selection UI in AI generator (PPL 3-day vs ULUL 4-day), workout session screen with color-coded buttons (Green=Push, Orange=Pull, Purple=Legs, Red=Upper, Cyan=Lower), child workout generation (3 for PPL, 4 for ULUL), robust split detection from settings.tPathType, architect-approved\n- **Phase 15 Complete (Jan 5, 2025):** Photo Upload + AI Exercise Detection - Camera/gallery photo upload, OpenAI GPT-4o vision-based equipment analysis, duplicate detection (user/global exercises), selective save with gym auto-tagging, direct Supabase integration, architect-approved\n- **Phase 16 Complete (Jan 5, 2025):** 5-Step Onboarding Flow - Complete mobile onboarding with personal info collection (height/weight with unit conversion), training setup (PPL/ULUL + experience), goals/preferences, gym setup + consent, optional AI photo analysis, integrated with complete-onboarding Edge Function, architect-approved\n- **Phase 19 Complete (Jan 5, 2025):** UI/UX Polish & Design System - Comprehensive design system constants matching web app (colors, spacing, typography, shadows), updated home/login screens with modern styling, color-coded workout buttons using design system, consistent visual polish across key screens, architect-approved\n- **Mobile Redesign Plan Created (Oct 6, 2025):** Comprehensive 10-phase plan for achieving 100% visual and functional parity between React Native mobile app and web reference app (MOBILE_REDESIGN_PLAN.md). Includes all missing features: Media tab, Consistency Calendar, Weekly Summary, Exercise swap system, Personal Records, Rolling Status badge, Aurora effects, Gym Toggle widget, All Workouts widget. Plan covers foundation (design system), navigation, all screens (dashboard, workout, progress, profile, management), AI features, visual effects, and complete user journey coverage.\n- **Phase 2 Complete (Oct 6, 2025):** Navigation & Layout - Updated bottom tab bar to 5 tabs (Dashboard, Workout, Exercises, Progress, Profile) matching web app, created ScreenHeader component with title/back/actions support, created ScreenContainer with safe area handling and pull-to-refresh, preserved workout-aware navigation guards, architect-approved\n- **Phase 3 Complete (Oct 6, 2025):** Dashboard Screen Redesign - Created StatCard, QuickActions, WeeklyTarget, RecentWorkouts, and SimpleVolumeChart components using new design system, rebuilt dashboard with stats row (workouts/streak), total volume card, weekly targets, quick action buttons, volume chart, and recent workouts list, all components use Theme.ts and Typography.ts constants, architect-approved\n- **Phase 4 Complete (Oct 6, 2025):** Workout Screen Redesign - Redesigned workout screen with ExerciseCard, SetRow, RestTimer, WorkoutHeader, EmptyWorkout components using new design system, preserved all business logic (template/T-Path loading, PR detection, unsaved change guards, rest timer), fixed hook ordering issues (useCallback before useEffect), architect-approved\n- **Phase 5 Complete (Oct 6, 2025):** Workout Color System & Enhanced Dashboard - Implemented workout-type color coding (Push=#228B22, Pull=#F89C4D, Legs=#B645D9, ULUL=#1e3a8a/EF4444/0891b2/6b21a8), created ColoredWorkoutButton with LinearGradient backgrounds, workout launcher screen for PPL/ULUL selection, added colored borders to ExerciseCard and RecentWorkouts, implemented RollingStatusBadge (4 consistency states with offline detection), created GymToggle with null-safe navigation, integrated all widgets into dashboard, robust ULUL A/B variant detection with punctuation handling, architect-approved\n- **Redesign Plan Updated (Oct 6, 2025):** Comprehensive review of reference web app implementation completed. MOBILE_REDESIGN_PLAN.md updated with exact specifications from web codebase including: workout color system (Push=#228B22, Pull=#F89C4D, Legs=#B645D9, ULUL colors), Rolling Status badge logic (4 states based on consecutive 7-day periods), profile tabs (6 tabs: Overview/Stats/Photo/Media/Social/Settings), exercise management tabs (My Exercises/Global Library with gym badges), Consistency Calendar, and all component structures. Plan reorganized into fast-track 3-sprint approach prioritizing high-impact visual elements first.\n- **Dashboard Visual Refinements (Oct 6, 2025):** Complete visual overhaul to match reference app - Footer navigation updated to icons-only (5 tabs, 72px height, black icons), DashboardHeader component created with integrated Rolling Status Badge (menu + status badge + notifications + profile avatar), dashboard restructured with \"Welcome Back, Athlete\" as main heading, Weekly Target directly below, aurora gradient background added, all icons changed from blue to black, useRollingStatus hook created to eliminate code duplication between DashboardHeader and RollingStatusBadge components, loading states properly handled, architect-approved\n- **Dashboard Final Polish & Audit (Oct 6, 2025):** Complete UI/UX refinement pass - Deleted workout-old-backup.tsx (fixed 6th tab bug), left-aligned all card headers (Your Next Workout, All Workouts, Weekly Volume, Previous Workouts), changed all card title icons to black, swapped aurora colors (pink top-right, cyan bottom), reduced Weekly Target circle borders from 2px to 1px, fixed More menu dropdown positioning with measureInWindow() for proper below-button alignment, enhanced header badge prominence (18px icon, 15px bold text, border + shadow), made More button wider to align with Workout Log button above, reduced aurora background opacity to 0.3 for all gradients, left-aligned Previous Workouts card text, increased footer height to 83px (15% increase), comprehensive dashboard audit completed against MOBILE_SPEC_02_DASHBOARD.md identifying 8 blockers (7 missing modals/dialogs + 1 navigation route mismatch `/history` vs `/workout-history`), audit report approved by architect documenting 85% UI/UX completion with all visual requirements met but core modal interactions still console.log placeholders","size_bytes":12533},"apps/mobile/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\nconst projectRoot = __dirname;\nconst workspaceRoot = path.resolve(projectRoot, '../..');\n\nconst config = getDefaultConfig(projectRoot);\n\nconfig.watchFolders = [workspaceRoot];\n\nconfig.resolver.nodeModulesPaths = [\n  path.resolve(projectRoot, 'node_modules'),\n  path.resolve(workspaceRoot, 'node_modules'),\n];\n\nconfig.resolver.extraNodeModules = {\n  '@data': path.resolve(workspaceRoot, 'packages/data/src'),\n  '@features': path.resolve(workspaceRoot, 'packages/features/src'),\n  '@ui': path.resolve(workspaceRoot, 'packages/ui/src'),\n};\n\nmodule.exports = config;\n","size_bytes":653},"packages/data/src/constants/achievements.ts":{"content":"export const ACHIEVEMENT_IDS = {\n  FIRST_WORKOUT: 'first_workout',\n  TEN_DAY_STREAK: 'ten_day_streak',\n  TWENTY_FIVE_WORKOUTS: 'twenty_five_workouts',\n  FIFTY_WORKOUTS: 'fifty_workouts',\n  PERFECT_WEEK: 'perfect_week',\n  BEAST_MODE: 'beast_mode',\n  WEEKEND_WARRIOR: 'weekend_warrior',\n  EARLY_BIRD: 'early_bird',\n  THIRTY_DAY_STREAK: 'thirty_day_streak',\n  VOLUME_MASTER: 'volume_master',\n  CENTURY_CLUB: 'century_club',\n  AI_APPRENTICE: 'ai_apprentice',\n};\n\nexport const ACHIEVEMENT_DISPLAY_INFO: Record<string, { name: string; icon: string; description: string }> = {\n  [ACHIEVEMENT_IDS.FIRST_WORKOUT]: { \n    name: 'First Workout', \n    icon: '🏃', \n    description: 'Complete your very first workout session.' \n  },\n  [ACHIEVEMENT_IDS.TEN_DAY_STREAK]: { \n    name: '10 Day Streak', \n    icon: '🔥', \n    description: 'Log an activity for 10 consecutive days.' \n  },\n  [ACHIEVEMENT_IDS.TWENTY_FIVE_WORKOUTS]: { \n    name: '25 Workouts', \n    icon: '💪', \n    description: 'Complete 25 workout sessions.' \n  },\n  [ACHIEVEMENT_IDS.FIFTY_WORKOUTS]: { \n    name: '50 Workouts', \n    icon: '🏆', \n    description: 'Complete 50 workout sessions.' \n  },\n  [ACHIEVEMENT_IDS.PERFECT_WEEK]: { \n    name: 'Perfect Week', \n    icon: '🗓️', \n    description: 'Complete all workouts in your active Transformation Path within a single week.' \n  },\n  [ACHIEVEMENT_IDS.BEAST_MODE]: { \n    name: 'Beast Mode', \n    icon: '💥', \n    description: 'Complete two or more workout sessions in a single day.' \n  },\n  [ACHIEVEMENT_IDS.WEEKEND_WARRIOR]: { \n    name: 'Weekend Warrior', \n    icon: '🎉', \n    description: 'Log 10 activities on a Saturday or Sunday.' \n  },\n  [ACHIEVEMENT_IDS.EARLY_BIRD]: { \n    name: 'Early Bird', \n    icon: '🌅', \n    description: 'Log 10 activities before 8 AM.' \n  },\n  [ACHIEVEMENT_IDS.THIRTY_DAY_STREAK]: { \n    name: 'Consistency King', \n    icon: '👑', \n    description: 'Log an activity for 30 consecutive days.' \n  },\n  [ACHIEVEMENT_IDS.VOLUME_MASTER]: { \n    name: 'Volume Master', \n    icon: '🏋️', \n    description: 'Log a total of 100 sets across all your workouts.' \n  },\n  [ACHIEVEMENT_IDS.CENTURY_CLUB]: { \n    name: 'Century Club', \n    icon: '💯', \n    description: 'Reach 1000 total points (equivalent to 100 workouts).' \n  },\n  [ACHIEVEMENT_IDS.AI_APPRENTICE]: { \n    name: 'AI Apprentice', \n    icon: '🤖', \n    description: 'Use the AI Coach at least once a week for 3 consecutive weeks.' \n  },\n};\n\nexport const achievementsList = [\n  { id: ACHIEVEMENT_IDS.FIRST_WORKOUT, name: 'First Workout', icon: '🏃' },\n  { id: ACHIEVEMENT_IDS.AI_APPRENTICE, name: 'AI Apprentice', icon: '🤖' },\n  { id: ACHIEVEMENT_IDS.TEN_DAY_STREAK, name: '10 Day Streak', icon: '🔥' },\n  { id: ACHIEVEMENT_IDS.THIRTY_DAY_STREAK, name: 'Consistency King', icon: '👑' },\n  { id: ACHIEVEMENT_IDS.TWENTY_FIVE_WORKOUTS, name: '25 Workouts', icon: '💪' },\n  { id: ACHIEVEMENT_IDS.FIFTY_WORKOUTS, name: '50 Workouts', icon: '🏆' },\n  { id: ACHIEVEMENT_IDS.CENTURY_CLUB, name: 'Century Club', icon: '💯' },\n  { id: ACHIEVEMENT_IDS.PERFECT_WEEK, name: 'Perfect Week', icon: '🗓️' },\n  { id: ACHIEVEMENT_IDS.BEAST_MODE, name: 'Beast Mode', icon: '💥' },\n  { id: ACHIEVEMENT_IDS.WEEKEND_WARRIOR, name: 'Weekend Warrior', icon: '🎉' },\n  { id: ACHIEVEMENT_IDS.EARLY_BIRD, name: 'Early Bird', icon: '🌅' },\n  { id: ACHIEVEMENT_IDS.VOLUME_MASTER, name: 'Volume Master', icon: '🏋️' },\n];\n","size_bytes":3438},"packages/data/src/utils/unit-conversions.ts":{"content":"export const KG_TO_LBS = 2.20462;\nexport const KM_TO_MILES = 0.621371;\n\nexport function convertWeight(value: number | null | undefined, fromUnit: 'kg' | 'lbs', toUnit: 'kg' | 'lbs'): number | null {\n  if (value === null || value === undefined) return null;\n  if (fromUnit === toUnit) return value;\n\n  if (fromUnit === 'kg' && toUnit === 'lbs') {\n    return value * KG_TO_LBS;\n  } else if (fromUnit === 'lbs' && toUnit === 'kg') {\n    return value / KG_TO_LBS;\n  }\n  return value;\n}\n\nexport function convertDistance(value: number | null | undefined, fromUnit: 'km' | 'miles', toUnit: 'km' | 'miles'): number | null {\n  if (value === null || value === undefined) return null;\n  if (fromUnit === toUnit) return value;\n\n  if (fromUnit === 'km' && toUnit === 'miles') {\n    return value * KM_TO_MILES;\n  } else if (fromUnit === 'miles' && toUnit === 'km') {\n    return value / KM_TO_MILES;\n  }\n  return value;\n}\n\nexport function formatWeight(value: number | null | undefined, unit: 'kg' | 'lbs', decimals: number = 1): string {\n  if (value === null || value === undefined) return '-';\n  return `${value.toFixed(decimals)} ${unit}`;\n}\n\nexport function formatDistance(value: number | null | undefined, unit: 'km' | 'miles', decimals: number = 1): string {\n  if (value === null || value === undefined) return '-';\n  return `${value.toFixed(decimals)} ${unit}`;\n}\n\nexport function formatTime(seconds: number | null | undefined): string {\n  if (seconds === null || seconds === undefined) return '-';\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}m ${remainingSeconds}s`;\n}\n\nexport function cmToFeetAndInches(cm: number | null | undefined): string {\n  if (cm === null || cm === undefined) return '';\n  const totalInches = cm / 2.54;\n  let feet = Math.floor(totalInches / 12);\n  let inches = Math.round(totalInches % 12);\n  if (inches === 12) {\n    feet += 1;\n    inches = 0;\n  }\n  return `${feet} ft ${inches} in`;\n}\n","size_bytes":1965},"packages/data/src/utils/workout-helpers.ts":{"content":"export function getMaxMinutes(sessionLength: string | null | undefined): number {\n  switch (sessionLength) {\n    case '15-30': return 30;\n    case '30-45': return 45;\n    case '45-60': return 60;\n    case '60-90': return 90;\n    default: return 90;\n  }\n}\n\nexport function getExerciseCounts(sessionLength: string | null | undefined): { main: number; bonus: number } {\n  switch (sessionLength) {\n    case '15-30': return { main: 3, bonus: 3 };\n    case '30-45': return { main: 5, bonus: 3 };\n    case '45-60': return { main: 7, bonus: 2 };\n    case '60-90': return { main: 10, bonus: 2 };\n    default: return { main: 5, bonus: 3 };\n  }\n}\n\nexport function formatTimeAgo(date: Date | null): string {\n  if (!date) return 'Never';\n  const now = new Date();\n  const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / 60000);\n  \n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n  return `${Math.floor(diffInMinutes / 1440)}d ago`;\n}\n\nexport function getLevelFromPoints(points: number): { level: string; color: string } {\n  if (points < 50) return { level: 'Rookie', color: 'text-gray-500' };\n  if (points < 150) return { level: 'Warrior', color: 'text-blue-500' };\n  if (points < 300) return { level: 'Champion', color: 'text-purple-500' };\n  if (points < 500) return { level: 'Legend', color: 'text-yellow-500' };\n  return { level: 'Titan', color: 'text-red-500' };\n}\n\nexport function formatAthleteName(fullName: string | null): string {\n  if (!fullName) return 'Athlete';\n  const parts = fullName.trim().split(' ');\n  if (parts.length === 1) return `Athlete ${parts[0][0] || ''}`;\n  const initials = parts.map(part => part[0] || '').join('');\n  return `Athlete ${initials}`;\n}\n","size_bytes":1812},"apps/mobile/app/contexts/auth-context.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, useMemo } from 'react';\nimport { Session, SupabaseClient } from '@supabase/supabase-js';\nimport { supabase } from '@data/supabase/client-mobile';\n\ninterface AuthContextType {\n  session: Session | null;\n  supabase: SupabaseClient;\n  userId: string | null;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const userId = useMemo(() => session?.user?.id || null, [session?.user?.id]);\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }: { data: { session: Session | null } }) => {\n      setSession(session);\n      setLoading(false);\n    });\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event: string, session: Session | null) => {\n      setSession(session);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ session, supabase, userId, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","size_bytes":1434},"apps/mobile/app/login.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  KeyboardAvoidingView,\n  Platform,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useRouter } from \"expo-router\";\nimport {\n  Colors,\n  Spacing,\n  BorderRadius,\n  Typography,\n  ButtonStyles,\n} from \"../constants/design-system\";\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [isSignUp, setIsSignUp] = useState(false);\n  const { supabase } = useAuth();\n  const router = useRouter();\n\n  const handleAuth = async () => {\n    if (!email || !password) {\n      Alert.alert(\"Error\", \"Please fill in all fields\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      if (isSignUp) {\n        const { error } = await supabase.auth.signUp({\n          email,\n          password,\n        });\n\n        if (error) {\n          throw error;\n        }\n        Alert.alert(\"Success\", \"Check your email for verification link\");\n      } else {\n        const { error } = await supabase.auth.signInWithPassword({\n          email,\n          password,\n        });\n\n        if (error) {\n          throw error;\n        }\n        router.replace(\"/\");\n      }\n    } catch (error: any) {\n      Alert.alert(\"Error\", error.message || \"Authentication failed\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n    >\n      <View style={styles.content}>\n        <Text style={styles.title}>My Fitness Trainer</Text>\n        <Text style={styles.subtitle}>\n          {isSignUp ? \"Create Account\" : \"Welcome Back\"}\n        </Text>\n\n        <TextInput\n          style={styles.input}\n          placeholder=\"Email\"\n          placeholderTextColor={Colors.gray500}\n          value={email}\n          onChangeText={setEmail}\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n        />\n\n        <TextInput\n          style={styles.input}\n          placeholder=\"Password\"\n          placeholderTextColor={Colors.gray500}\n          value={password}\n          onChangeText={setPassword}\n          secureTextEntry\n          autoCapitalize=\"none\"\n        />\n\n        <TouchableOpacity\n          style={[styles.button, loading && styles.buttonDisabled]}\n          onPress={handleAuth}\n          disabled={loading}\n        >\n          {loading ? (\n            <ActivityIndicator color=\"#fff\" />\n          ) : (\n            <Text style={styles.buttonText}>\n              {isSignUp ? \"Sign Up\" : \"Sign In\"}\n            </Text>\n          )}\n        </TouchableOpacity>\n\n        <TouchableOpacity onPress={() => setIsSignUp(!isSignUp)}>\n          <Text style={styles.switchText}>\n            {isSignUp\n              ? \"Already have an account? Sign In\"\n              : \"Don't have an account? Sign Up\"}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    flex: 1,\n    justifyContent: \"center\",\n    padding: Spacing[\"2xl\"],\n  },\n  title: {\n    fontSize: Typography[\"3xl\"],\n    fontWeight: Typography.bold,\n    color: Colors.foreground,\n    marginBottom: Spacing.sm,\n    textAlign: \"center\",\n  },\n  subtitle: {\n    fontSize: Typography.lg,\n    color: Colors.gray400,\n    marginBottom: Spacing[\"3xl\"],\n    textAlign: \"center\",\n  },\n  input: {\n    backgroundColor: Colors.cardBackground,\n    borderWidth: 1,\n    borderColor: Colors.cardBorder,\n    borderRadius: BorderRadius.md,\n    padding: Spacing.lg,\n    marginBottom: Spacing.lg,\n    color: Colors.foreground,\n    fontSize: Typography.base,\n  },\n  button: {\n    ...ButtonStyles.primary,\n    marginTop: Spacing.sm,\n  },\n  buttonDisabled: {\n    opacity: 0.6,\n  },\n  buttonText: {\n    color: Colors.foreground,\n    fontSize: Typography.base,\n    fontWeight: Typography.bold,\n  },\n  switchText: {\n    color: Colors.actionPrimary,\n    textAlign: \"center\",\n    marginTop: Spacing.lg,\n    fontSize: Typography.sm,\n  },\n});\n","size_bytes":4258},"packages/data/src/supabase/client-mobile.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY } from './config';\n\nexport const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n","size_bytes":402},"packages/data/src/supabase/config.ts":{"content":"export const SUPABASE_URL = \"https://mgbfevrzrbjjiajkqpti.supabase.co\";\nexport const SUPABASE_PUBLISHABLE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1nYmZldnJ6cmJqamlhamtxcHRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyMDA0NTIsImV4cCI6MjA3MDc3NjQ1Mn0.TBOWI0Q3pXfSVWsL2yHuHEnQUfPV6tHefU6-gqUblUI\";\n","size_bytes":324},"apps/mobile/app/contexts/data-context.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, useMemo } from 'react';\nimport { database, addToSyncQueue } from '../lib/database';\nimport { useSyncQueueProcessor } from '@data/hooks/use-sync-queue-processor';\nimport { useAuth } from './auth-context';\nimport type { WorkoutSession, SetLog, WorkoutTemplate, TPath, TPathExercise, TPathProgress, TPathWithExercises, Gym } from '@data/storage/models';\nimport NetInfo from '@react-native-community/netinfo';\n\ninterface WorkoutStats {\n  totalWorkouts: number;\n  totalVolume: number;\n  averageVolume: number;\n  currentStreak: number;\n  longestStreak: number;\n}\n\ninterface BodyMeasurement {\n  id: string;\n  user_id: string;\n  measurement_date: string;\n  weight_kg?: number;\n  body_fat_percentage?: number;\n  chest_cm?: number;\n  waist_cm?: number;\n  hips_cm?: number;\n  left_arm_cm?: number;\n  right_arm_cm?: number;\n  left_thigh_cm?: number;\n  right_thigh_cm?: number;\n  notes?: string;\n  created_at: string;\n}\n\nexport interface Goal {\n  id: string;\n  user_id: string;\n  goal_type: string;\n  target_value: number;\n  current_value?: number;\n  start_date: string;\n  target_date?: string;\n  status: string;\n  exercise_id?: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserAchievement {\n  id: string;\n  user_id: string;\n  achievement_id: string;\n  unlocked_at: string;\n  progress_value?: number;\n}\n\ninterface DataContextType {\n  addWorkoutSession: (session: WorkoutSession) => Promise<void>;\n  addSetLog: (setLog: SetLog) => Promise<void>;\n  getWorkoutSessions: (userId: string) => Promise<WorkoutSession[]>;\n  getSetLogs: (sessionId: string) => Promise<SetLog[]>;\n  getPersonalRecord: (userId: string, exerciseId: string) => Promise<number>;\n  saveTemplate: (template: WorkoutTemplate) => Promise<void>;\n  getTemplates: (userId: string) => Promise<WorkoutTemplate[]>;\n  getTemplate: (templateId: string) => Promise<WorkoutTemplate | null>;\n  deleteTemplate: (templateId: string) => Promise<void>;\n  getWorkoutStats: (userId: string, days?: number) => Promise<WorkoutStats>;\n  getWorkoutFrequency: (userId: string, days?: number) => Promise<Array<{ date: string; count: number }>>;\n  getVolumeHistory: (userId: string, days?: number) => Promise<Array<{ date: string; volume: number }>>;\n  getPRHistory: (userId: string, exerciseId: string) => Promise<Array<{ date: string; weight: number }>>;\n  saveBodyMeasurement: (measurement: BodyMeasurement) => Promise<void>;\n  getBodyMeasurements: (userId: string) => Promise<BodyMeasurement[]>;\n  getWeightHistory: (userId: string, days?: number) => Promise<Array<{ date: string; weight: number }>>;\n  deleteBodyMeasurement: (measurementId: string) => Promise<void>;\n  saveGoal: (goal: Goal) => Promise<void>;\n  getGoals: (userId: string, status?: string) => Promise<Goal[]>;\n  getGoal: (goalId: string) => Promise<Goal | null>;\n  updateGoalProgress: (goalId: string, currentValue: number, status?: string) => Promise<void>;\n  deleteGoal: (goalId: string) => Promise<void>;\n  unlockAchievement: (achievement: UserAchievement) => Promise<void>;\n  getUserAchievements: (userId: string) => Promise<UserAchievement[]>;\n  hasAchievement: (userId: string, achievementId: string) => Promise<boolean>;\n  checkAndUnlockAchievements: (userId: string) => Promise<void>;\n  addTPath: (tPath: TPath) => Promise<void>;\n  getTPath: (tPathId: string) => Promise<TPathWithExercises | null>;\n  getTPaths: (userId: string, mainProgramsOnly?: boolean) => Promise<TPath[]>;\n  getTPathsByParent: (parentId: string) => Promise<TPath[]>;\n  updateTPath: (tPathId: string, updates: Partial<TPath>) => Promise<void>;\n  deleteTPath: (tPathId: string) => Promise<void>;\n  addTPathExercise: (exercise: TPathExercise) => Promise<void>;\n  getTPathExercises: (tPathId: string) => Promise<TPathExercise[]>;\n  deleteTPathExercise: (exerciseId: string) => Promise<void>;\n  updateTPathProgress: (progress: TPathProgress) => Promise<void>;\n  getTPathProgress: (userId: string, tPathId: string) => Promise<TPathProgress | null>;\n  getAllTPathProgress: (userId: string) => Promise<TPathProgress[]>;\n  addGym: (gym: Gym) => Promise<void>;\n  getGym: (gymId: string) => Promise<Gym | null>;\n  getGyms: (userId: string) => Promise<Gym[]>;\n  getActiveGym: (userId: string) => Promise<Gym | null>;\n  updateGym: (gymId: string, updates: Partial<Gym>) => Promise<void>;\n  setActiveGym: (userId: string, gymId: string) => Promise<void>;\n  deleteGym: (gymId: string) => Promise<void>;\n  isSyncing: boolean;\n  queueLength: number;\n  isOnline: boolean;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\nexport const DataProvider = ({ children }: { children: React.ReactNode }) => {\n  const { supabase, userId } = useAuth();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isOnline, setIsOnline] = useState(true);\n\n  useEffect(() => {\n    database.init().then(() => setIsInitialized(true));\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe = NetInfo.addEventListener(state => {\n      setIsOnline(state.isConnected ?? false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const { isSyncing, queueLength } = useSyncQueueProcessor({\n    supabase,\n    store: database.syncQueue,\n    isOnline,\n    enabled: isInitialized && !!userId,\n  });\n\n  const addWorkoutSession = async (session: WorkoutSession): Promise<void> => {\n    await database.addWorkoutSession(session);\n    await addToSyncQueue('create', 'workout_sessions', session);\n  };\n\n  const addSetLog = async (setLog: SetLog): Promise<void> => {\n    await database.addSetLog(setLog);\n    await addToSyncQueue('create', 'set_logs', setLog);\n  };\n\n  const getWorkoutSessions = async (userId: string): Promise<WorkoutSession[]> => {\n    return await database.getWorkoutSessions(userId);\n  };\n\n  const getSetLogs = async (sessionId: string): Promise<SetLog[]> => {\n    return await database.getSetLogs(sessionId);\n  };\n\n  const getPersonalRecord = async (userId: string, exerciseId: string): Promise<number> => {\n    return await database.getPersonalRecord(userId, exerciseId);\n  };\n\n  const saveTemplate = async (template: WorkoutTemplate): Promise<void> => {\n    await database.saveTemplate(template);\n  };\n\n  const getTemplates = async (userId: string): Promise<WorkoutTemplate[]> => {\n    return await database.getTemplates(userId);\n  };\n\n  const getTemplate = async (templateId: string): Promise<WorkoutTemplate | null> => {\n    return await database.getTemplate(templateId);\n  };\n\n  const deleteTemplate = async (templateId: string): Promise<void> => {\n    await database.deleteTemplate(templateId);\n  };\n\n  const getWorkoutStats = async (userId: string, days: number = 30): Promise<WorkoutStats> => {\n    return await database.getWorkoutStats(userId, days);\n  };\n\n  const getWorkoutFrequency = async (userId: string, days: number = 30): Promise<Array<{ date: string; count: number }>> => {\n    return await database.getWorkoutFrequency(userId, days);\n  };\n\n  const getVolumeHistory = async (userId: string, days: number = 30): Promise<Array<{ date: string; volume: number }>> => {\n    return await database.getVolumeHistory(userId, days);\n  };\n\n  const getPRHistory = async (userId: string, exerciseId: string): Promise<Array<{ date: string; weight: number }>> => {\n    return await database.getPRHistory(userId, exerciseId);\n  };\n\n  const saveBodyMeasurement = async (measurement: BodyMeasurement): Promise<void> => {\n    await database.saveBodyMeasurement(measurement);\n  };\n\n  const getBodyMeasurements = async (userId: string): Promise<BodyMeasurement[]> => {\n    return await database.getBodyMeasurements(userId);\n  };\n\n  const getWeightHistory = async (userId: string, days?: number): Promise<Array<{ date: string; weight: number }>> => {\n    return await database.getWeightHistory(userId, days);\n  };\n\n  const deleteBodyMeasurement = async (measurementId: string): Promise<void> => {\n    await database.deleteBodyMeasurement(measurementId);\n  };\n\n  const saveGoal = async (goal: Goal): Promise<void> => {\n    await database.saveGoal(goal);\n  };\n\n  const getGoals = async (userId: string, status?: string): Promise<Goal[]> => {\n    return await database.getGoals(userId, status);\n  };\n\n  const getGoal = async (goalId: string): Promise<Goal | null> => {\n    return await database.getGoal(goalId);\n  };\n\n  const updateGoalProgress = async (goalId: string, currentValue: number, status?: string): Promise<void> => {\n    await database.updateGoalProgress(goalId, currentValue, status);\n  };\n\n  const deleteGoal = async (goalId: string): Promise<void> => {\n    await database.deleteGoal(goalId);\n  };\n\n  const unlockAchievement = async (achievement: UserAchievement): Promise<void> => {\n    await database.unlockAchievement(achievement);\n  };\n\n  const getUserAchievements = async (userId: string): Promise<UserAchievement[]> => {\n    return await database.getUserAchievements(userId);\n  };\n\n  const hasAchievement = async (userId: string, achievementId: string): Promise<boolean> => {\n    return await database.hasAchievement(userId, achievementId);\n  };\n\n  const checkAndUnlockAchievements = async (userId: string): Promise<void> => {\n    const { ACHIEVEMENTS } = await import('@data/achievements');\n    const stats = await database.getWorkoutStats(userId);\n    const unlockedAchievements = await database.getUserAchievements(userId);\n    const unlockedIds = new Set(unlockedAchievements.map(a => a.achievement_id));\n\n    for (const achievement of ACHIEVEMENTS) {\n      if (unlockedIds.has(achievement.id)) continue;\n\n      let shouldUnlock = false;\n      let progressValue = 0;\n\n      switch (achievement.requirement.type) {\n        case 'workout_count':\n          progressValue = stats.totalWorkouts;\n          shouldUnlock = progressValue >= achievement.requirement.value;\n          break;\n        case 'streak_days':\n          progressValue = stats.currentStreak;\n          shouldUnlock = progressValue >= achievement.requirement.value;\n          break;\n        case 'total_volume':\n          progressValue = stats.totalVolume;\n          shouldUnlock = progressValue >= achievement.requirement.value;\n          break;\n        case 'max_weight':\n          if (achievement.requirement.exercise_id) {\n            progressValue = await database.getPersonalRecord(userId, achievement.requirement.exercise_id);\n            shouldUnlock = progressValue >= achievement.requirement.value;\n          }\n          break;\n      }\n\n      if (shouldUnlock) {\n        await database.unlockAchievement({\n          id: `${userId}_${achievement.id}_${Date.now()}`,\n          user_id: userId,\n          achievement_id: achievement.id,\n          unlocked_at: new Date().toISOString(),\n          progress_value: progressValue,\n        });\n      }\n    }\n  };\n\n  const addTPath = async (tPath: TPath): Promise<void> => {\n    await database.addTPath(tPath);\n  };\n\n  const getTPath = async (tPathId: string): Promise<TPathWithExercises | null> => {\n    return await database.getTPath(tPathId);\n  };\n\n  const getTPaths = async (userId: string, mainProgramsOnly?: boolean): Promise<TPath[]> => {\n    return await database.getTPaths(userId, mainProgramsOnly);\n  };\n\n  const getTPathsByParent = async (parentId: string): Promise<TPath[]> => {\n    return await database.getTPathsByParent(parentId);\n  };\n\n  const updateTPath = async (tPathId: string, updates: Partial<TPath>): Promise<void> => {\n    await database.updateTPath(tPathId, updates);\n  };\n\n  const deleteTPath = async (tPathId: string): Promise<void> => {\n    await database.deleteTPath(tPathId);\n  };\n\n  const addTPathExercise = async (exercise: TPathExercise): Promise<void> => {\n    await database.addTPathExercise(exercise);\n  };\n\n  const getTPathExercises = async (tPathId: string): Promise<TPathExercise[]> => {\n    return await database.getTPathExercises(tPathId);\n  };\n\n  const deleteTPathExercise = async (exerciseId: string): Promise<void> => {\n    await database.deleteTPathExercise(exerciseId);\n  };\n\n  const updateTPathProgress = async (progress: TPathProgress): Promise<void> => {\n    await database.updateTPathProgress(progress);\n  };\n\n  const getTPathProgress = async (userId: string, tPathId: string): Promise<TPathProgress | null> => {\n    return await database.getTPathProgress(userId, tPathId);\n  };\n\n  const getAllTPathProgress = async (userId: string): Promise<TPathProgress[]> => {\n    return await database.getAllTPathProgress(userId);\n  };\n\n  const addGym = async (gym: Gym): Promise<void> => {\n    await database.addGym(gym);\n  };\n\n  const getGym = async (gymId: string): Promise<Gym | null> => {\n    return await database.getGym(gymId);\n  };\n\n  const getGyms = async (userId: string): Promise<Gym[]> => {\n    return await database.getGyms(userId);\n  };\n\n  const getActiveGym = async (userId: string): Promise<Gym | null> => {\n    return await database.getActiveGym(userId);\n  };\n\n  const updateGym = async (gymId: string, updates: Partial<Gym>): Promise<void> => {\n    await database.updateGym(gymId, updates);\n  };\n\n  const setActiveGym = async (userId: string, gymId: string): Promise<void> => {\n    await database.setActiveGym(userId, gymId);\n  };\n\n  const deleteGym = async (gymId: string): Promise<void> => {\n    await database.deleteGym(gymId);\n  };\n\n  const value = useMemo(\n    () => ({\n      addWorkoutSession,\n      addSetLog,\n      getWorkoutSessions,\n      getSetLogs,\n      getPersonalRecord,\n      saveTemplate,\n      getTemplates,\n      getTemplate,\n      deleteTemplate,\n      getWorkoutStats,\n      getWorkoutFrequency,\n      getVolumeHistory,\n      getPRHistory,\n      saveBodyMeasurement,\n      getBodyMeasurements,\n      getWeightHistory,\n      deleteBodyMeasurement,\n      saveGoal,\n      getGoals,\n      getGoal,\n      updateGoalProgress,\n      deleteGoal,\n      unlockAchievement,\n      getUserAchievements,\n      hasAchievement,\n      checkAndUnlockAchievements,\n      addTPath,\n      getTPath,\n      getTPaths,\n      getTPathsByParent,\n      updateTPath,\n      deleteTPath,\n      addTPathExercise,\n      getTPathExercises,\n      deleteTPathExercise,\n      updateTPathProgress,\n      getTPathProgress,\n      getAllTPathProgress,\n      addGym,\n      getGym,\n      getGyms,\n      getActiveGym,\n      updateGym,\n      setActiveGym,\n      deleteGym,\n      isSyncing,\n      queueLength,\n      isOnline,\n    }),\n    [isSyncing, queueLength, isOnline]\n  );\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData must be used within a DataProvider');\n  }\n  return context;\n};\n","size_bytes":14671},"apps/mobile/app/lib/database.ts":{"content":"import * as SQLite from 'expo-sqlite';\nimport type { SyncQueueItem, SyncQueueStore, WorkoutSession, SetLog, WorkoutTemplate, TemplateExercise, TPath, TPathExercise, TPathProgress, TPathWithExercises, Gym } from '@data/storage';\n\nconst DB_NAME = 'fitness_tracker.db';\n\nclass Database {\n  private db: SQLite.SQLiteDatabase | null = null;\n\n  async init(): Promise<void> {\n    this.db = await SQLite.openDatabaseAsync(DB_NAME);\n    \n    await this.db.execAsync(`\n      PRAGMA journal_mode = WAL;\n      \n      CREATE TABLE IF NOT EXISTS workout_sessions (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        session_date TEXT NOT NULL,\n        template_name TEXT,\n        completed_at TEXT,\n        rating INTEGER,\n        duration_string TEXT,\n        t_path_id TEXT,\n        created_at TEXT NOT NULL\n      );\n      \n      CREATE TABLE IF NOT EXISTS set_logs (\n        id TEXT PRIMARY KEY NOT NULL,\n        session_id TEXT NOT NULL,\n        exercise_id TEXT NOT NULL,\n        weight_kg REAL,\n        reps INTEGER,\n        reps_l INTEGER,\n        reps_r INTEGER,\n        time_seconds INTEGER,\n        is_pb INTEGER,\n        created_at TEXT NOT NULL,\n        FOREIGN KEY (session_id) REFERENCES workout_sessions(id)\n      );\n      \n      CREATE TABLE IF NOT EXISTS sync_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        operation TEXT NOT NULL,\n        table_name TEXT NOT NULL,\n        payload TEXT NOT NULL,\n        timestamp INTEGER NOT NULL,\n        attempts INTEGER NOT NULL DEFAULT 0,\n        error TEXT\n      );\n      \n      CREATE TABLE IF NOT EXISTS workout_templates (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        name TEXT NOT NULL,\n        description TEXT,\n        exercises TEXT NOT NULL,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS user_preferences (\n        user_id TEXT PRIMARY KEY NOT NULL,\n        unit_system TEXT DEFAULT 'metric',\n        theme TEXT DEFAULT 'dark',\n        updated_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS body_measurements (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        measurement_date TEXT NOT NULL,\n        weight_kg REAL,\n        body_fat_percentage REAL,\n        chest_cm REAL,\n        waist_cm REAL,\n        hips_cm REAL,\n        left_arm_cm REAL,\n        right_arm_cm REAL,\n        left_thigh_cm REAL,\n        right_thigh_cm REAL,\n        notes TEXT,\n        created_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS user_goals (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        goal_type TEXT NOT NULL,\n        target_value REAL NOT NULL,\n        current_value REAL,\n        start_date TEXT NOT NULL,\n        target_date TEXT,\n        status TEXT DEFAULT 'active',\n        exercise_id TEXT,\n        notes TEXT,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS user_achievements (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        achievement_id TEXT NOT NULL,\n        unlocked_at TEXT NOT NULL,\n        progress_value REAL\n      );\n\n      CREATE TABLE IF NOT EXISTS t_paths (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        template_name TEXT NOT NULL,\n        description TEXT,\n        is_main_program INTEGER DEFAULT 0,\n        parent_t_path_id TEXT,\n        order_index INTEGER,\n        is_ai_generated INTEGER DEFAULT 0,\n        ai_generation_params TEXT,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL,\n        FOREIGN KEY (parent_t_path_id) REFERENCES t_paths(id)\n      );\n\n      CREATE TABLE IF NOT EXISTS t_path_exercises (\n        id TEXT PRIMARY KEY NOT NULL,\n        t_path_id TEXT NOT NULL,\n        exercise_id TEXT NOT NULL,\n        order_index INTEGER NOT NULL,\n        is_bonus_exercise INTEGER DEFAULT 0,\n        target_sets INTEGER,\n        target_reps_min INTEGER,\n        target_reps_max INTEGER,\n        notes TEXT,\n        created_at TEXT NOT NULL,\n        FOREIGN KEY (t_path_id) REFERENCES t_paths(id)\n      );\n\n      CREATE TABLE IF NOT EXISTS t_path_progress (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        t_path_id TEXT NOT NULL,\n        completed_at TEXT,\n        last_accessed_at TEXT,\n        total_workouts_completed INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL,\n        FOREIGN KEY (t_path_id) REFERENCES t_paths(id)\n      );\n\n      CREATE TABLE IF NOT EXISTS gyms (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        name TEXT NOT NULL,\n        description TEXT,\n        equipment TEXT NOT NULL,\n        is_active INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      );\n      \n      CREATE INDEX IF NOT EXISTS idx_session_date ON workout_sessions(session_date);\n      CREATE INDEX IF NOT EXISTS idx_set_logs_session ON set_logs(session_id);\n      CREATE INDEX IF NOT EXISTS idx_sync_queue_timestamp ON sync_queue(timestamp);\n      CREATE INDEX IF NOT EXISTS idx_templates_user ON workout_templates(user_id);\n      CREATE INDEX IF NOT EXISTS idx_measurements_user ON body_measurements(user_id);\n      CREATE INDEX IF NOT EXISTS idx_measurements_date ON body_measurements(measurement_date);\n      CREATE INDEX IF NOT EXISTS idx_goals_user ON user_goals(user_id);\n      CREATE INDEX IF NOT EXISTS idx_achievements_user ON user_achievements(user_id);\n      CREATE INDEX IF NOT EXISTS idx_t_paths_user ON t_paths(user_id);\n      CREATE INDEX IF NOT EXISTS idx_t_paths_parent ON t_paths(parent_t_path_id);\n      CREATE INDEX IF NOT EXISTS idx_t_path_exercises_tpath ON t_path_exercises(t_path_id);\n      CREATE INDEX IF NOT EXISTS idx_t_path_progress_user ON t_path_progress(user_id);\n      CREATE INDEX IF NOT EXISTS idx_t_path_progress_tpath ON t_path_progress(t_path_id);\n      CREATE INDEX IF NOT EXISTS idx_gyms_user ON gyms(user_id);\n      CREATE INDEX IF NOT EXISTS idx_gyms_active ON gyms(is_active);\n    `);\n  }\n\n  getDB(): SQLite.SQLiteDatabase {\n    if (!this.db) {\n      throw new Error('Database not initialized. Call init() first.');\n    }\n    return this.db;\n  }\n\n  async addWorkoutSession(session: WorkoutSession): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO workout_sessions \n       (id, user_id, session_date, template_name, completed_at, rating, duration_string, t_path_id, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        session.id,\n        session.user_id,\n        session.session_date,\n        session.template_name,\n        session.completed_at,\n        session.rating,\n        session.duration_string,\n        session.t_path_id,\n        session.created_at,\n      ]\n    );\n  }\n\n  async addSetLog(setLog: SetLog): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO set_logs \n       (id, session_id, exercise_id, weight_kg, reps, reps_l, reps_r, time_seconds, is_pb, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        setLog.id,\n        setLog.session_id,\n        setLog.exercise_id,\n        setLog.weight_kg,\n        setLog.reps,\n        setLog.reps_l,\n        setLog.reps_r,\n        setLog.time_seconds,\n        setLog.is_pb ? 1 : 0,\n        setLog.created_at,\n      ]\n    );\n  }\n\n  async getWorkoutSessions(userId: string): Promise<WorkoutSession[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<WorkoutSession>(\n      'SELECT * FROM workout_sessions WHERE user_id = ? ORDER BY session_date DESC',\n      [userId]\n    );\n    return result;\n  }\n\n  async getSetLogs(sessionId: string): Promise<SetLog[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM set_logs WHERE session_id = ? ORDER BY created_at ASC',\n      [sessionId]\n    );\n    return result.map(row => ({\n      ...row,\n      is_pb: row.is_pb === 1,\n    }));\n  }\n\n  async getPersonalRecord(userId: string, exerciseId: string): Promise<number> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<{ max_weight: number }>(\n      `SELECT MAX(weight_kg) as max_weight \n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND sl.exercise_id = ?`,\n      [userId, exerciseId]\n    );\n    return result?.max_weight || 0;\n  }\n\n  async saveTemplate(template: WorkoutTemplate): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO workout_templates \n       (id, user_id, name, description, exercises, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?)`,\n      [\n        template.id,\n        template.user_id,\n        template.name,\n        template.description,\n        JSON.stringify(template.exercises),\n        template.created_at,\n        template.updated_at,\n      ]\n    );\n  }\n\n  async getTemplates(userId: string): Promise<WorkoutTemplate[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM workout_templates WHERE user_id = ? ORDER BY updated_at DESC',\n      [userId]\n    );\n    return result.map(row => ({\n      ...row,\n      exercises: JSON.parse(row.exercises),\n    }));\n  }\n\n  async getTemplate(templateId: string): Promise<WorkoutTemplate | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      'SELECT * FROM workout_templates WHERE id = ?',\n      [templateId]\n    );\n    if (!result) return null;\n    return {\n      ...result,\n      exercises: JSON.parse(result.exercises),\n    };\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('DELETE FROM workout_templates WHERE id = ?', [templateId]);\n  }\n\n  async getWorkoutStats(userId: string, days: number = 30): Promise<{\n    totalWorkouts: number;\n    totalVolume: number;\n    averageVolume: number;\n    currentStreak: number;\n    longestStreak: number;\n  }> {\n    const db = this.getDB();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    \n    const workouts = await db.getAllAsync<WorkoutSession>(\n      `SELECT * FROM workout_sessions \n       WHERE user_id = ? AND session_date >= ? \n       ORDER BY session_date DESC`,\n      [userId, startDate.toISOString()]\n    );\n\n    const volumeResult = await db.getFirstAsync<{ total_volume: number }>(\n      `SELECT SUM(sl.weight_kg * sl.reps) as total_volume\n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND ws.session_date >= ?`,\n      [userId, startDate.toISOString()]\n    );\n\n    const totalVolume = volumeResult?.total_volume || 0;\n    const totalWorkouts = workouts.length;\n    const averageVolume = totalWorkouts > 0 ? totalVolume / totalWorkouts : 0;\n\n    const allWorkouts = await db.getAllAsync<{ session_date: string }>(\n      `SELECT session_date FROM workout_sessions \n       WHERE user_id = ? \n       ORDER BY session_date DESC`,\n      [userId]\n    );\n\n    const { currentStreak, longestStreak } = this.calculateStreaks(allWorkouts.map(w => w.session_date));\n\n    return {\n      totalWorkouts,\n      totalVolume,\n      averageVolume,\n      currentStreak,\n      longestStreak,\n    };\n  }\n\n  private calculateStreaks(dates: string[]): { currentStreak: number; longestStreak: number } {\n    if (dates.length === 0) return { currentStreak: 0, longestStreak: 0 };\n\n    const uniqueDates = [...new Set(dates.map(d => d.split('T')[0]))].sort().reverse();\n    \n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    let lastDate: Date | null = null;\n\n    for (const dateStr of uniqueDates) {\n      const date = new Date(dateStr);\n      \n      if (lastDate === null) {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const daysDiff = Math.floor((today.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (daysDiff <= 1) {\n          currentStreak = 1;\n          tempStreak = 1;\n        }\n      } else {\n        const daysDiff = Math.floor((lastDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));\n        \n        if (daysDiff === 1) {\n          tempStreak++;\n          if (currentStreak > 0) currentStreak++;\n        } else {\n          if (currentStreak > 0) currentStreak = 0;\n          tempStreak = 1;\n        }\n      }\n      \n      longestStreak = Math.max(longestStreak, tempStreak);\n      lastDate = date;\n    }\n\n    return { currentStreak, longestStreak };\n  }\n\n  async getWorkoutFrequency(userId: string, days: number = 30): Promise<Array<{ date: string; count: number }>> {\n    const db = this.getDB();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const result = await db.getAllAsync<{ date: string; count: number }>(\n      `SELECT DATE(session_date) as date, COUNT(*) as count\n       FROM workout_sessions\n       WHERE user_id = ? AND session_date >= ?\n       GROUP BY DATE(session_date)\n       ORDER BY date ASC`,\n      [userId, startDate.toISOString()]\n    );\n\n    return result;\n  }\n\n  async getVolumeHistory(userId: string, days: number = 30): Promise<Array<{ date: string; volume: number }>> {\n    const db = this.getDB();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const result = await db.getAllAsync<{ date: string; volume: number }>(\n      `SELECT DATE(ws.session_date) as date, SUM(sl.weight_kg * sl.reps) as volume\n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND ws.session_date >= ?\n       GROUP BY DATE(ws.session_date)\n       ORDER BY date ASC`,\n      [userId, startDate.toISOString()]\n    );\n\n    return result;\n  }\n\n  async getPRHistory(userId: string, exerciseId: string): Promise<Array<{ date: string; weight: number }>> {\n    const db = this.getDB();\n    \n    const result = await db.getAllAsync<{ date: string; weight: number }>(\n      `SELECT DATE(ws.session_date) as date, MAX(sl.weight_kg) as weight\n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND sl.exercise_id = ?\n       GROUP BY DATE(ws.session_date)\n       ORDER BY date ASC`,\n      [userId, exerciseId]\n    );\n\n    return result;\n  }\n\n  async getUserPreferences(userId: string): Promise<{ unit_system: string; theme: string } | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<{ unit_system: string; theme: string }>(\n      'SELECT unit_system, theme FROM user_preferences WHERE user_id = ?',\n      [userId]\n    );\n    return result || null;\n  }\n\n  async saveUserPreferences(userId: string, preferences: { unit_system?: string; theme?: string }): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n    \n    const existing = await this.getUserPreferences(userId);\n    \n    if (existing) {\n      await db.runAsync(\n        `UPDATE user_preferences \n         SET unit_system = ?, theme = ?, updated_at = ?\n         WHERE user_id = ?`,\n        [\n          preferences.unit_system || existing.unit_system,\n          preferences.theme || existing.theme,\n          now,\n          userId\n        ]\n      );\n    } else {\n      await db.runAsync(\n        `INSERT INTO user_preferences (user_id, unit_system, theme, updated_at)\n         VALUES (?, ?, ?, ?)`,\n        [\n          userId,\n          preferences.unit_system || 'metric',\n          preferences.theme || 'dark',\n          now\n        ]\n      );\n    }\n  }\n\n  async saveBodyMeasurement(measurement: {\n    id: string;\n    user_id: string;\n    measurement_date: string;\n    weight_kg?: number;\n    body_fat_percentage?: number;\n    chest_cm?: number;\n    waist_cm?: number;\n    hips_cm?: number;\n    left_arm_cm?: number;\n    right_arm_cm?: number;\n    left_thigh_cm?: number;\n    right_thigh_cm?: number;\n    notes?: string;\n    created_at: string;\n  }): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO body_measurements \n       (id, user_id, measurement_date, weight_kg, body_fat_percentage, chest_cm, waist_cm, hips_cm, left_arm_cm, right_arm_cm, left_thigh_cm, right_thigh_cm, notes, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        measurement.id,\n        measurement.user_id,\n        measurement.measurement_date,\n        measurement.weight_kg || null,\n        measurement.body_fat_percentage || null,\n        measurement.chest_cm || null,\n        measurement.waist_cm || null,\n        measurement.hips_cm || null,\n        measurement.left_arm_cm || null,\n        measurement.right_arm_cm || null,\n        measurement.left_thigh_cm || null,\n        measurement.right_thigh_cm || null,\n        measurement.notes || null,\n        measurement.created_at,\n      ]\n    );\n  }\n\n  async getBodyMeasurements(userId: string): Promise<any[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM body_measurements WHERE user_id = ? ORDER BY measurement_date DESC, created_at DESC',\n      [userId]\n    );\n    return result;\n  }\n\n  async getWeightHistory(userId: string, days?: number): Promise<Array<{ date: string; weight: number }>> {\n    const db = this.getDB();\n    let query = `SELECT DATE(measurement_date) as date, weight_kg as weight\n                 FROM body_measurements\n                 WHERE user_id = ? AND weight_kg IS NOT NULL`;\n    const params: any[] = [userId];\n    \n    if (days) {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      query += ' AND measurement_date >= ?';\n      params.push(startDate.toISOString());\n    }\n    \n    query += ' ORDER BY measurement_date ASC';\n    \n    const result = await db.getAllAsync<{ date: string; weight: number }>(query, params);\n    return result;\n  }\n\n  async deleteBodyMeasurement(measurementId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('DELETE FROM body_measurements WHERE id = ?', [measurementId]);\n  }\n\n  async saveGoal(goal: {\n    id: string;\n    user_id: string;\n    goal_type: string;\n    target_value: number;\n    current_value?: number;\n    start_date: string;\n    target_date?: string;\n    status?: string;\n    exercise_id?: string;\n    notes?: string;\n    created_at: string;\n    updated_at: string;\n  }): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO user_goals \n       (id, user_id, goal_type, target_value, current_value, start_date, target_date, status, exercise_id, notes, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        goal.id,\n        goal.user_id,\n        goal.goal_type,\n        goal.target_value,\n        goal.current_value || null,\n        goal.start_date,\n        goal.target_date || null,\n        goal.status || 'active',\n        goal.exercise_id || null,\n        goal.notes || null,\n        goal.created_at,\n        goal.updated_at,\n      ]\n    );\n  }\n\n  async getGoals(userId: string, status?: string): Promise<any[]> {\n    const db = this.getDB();\n    let query = 'SELECT * FROM user_goals WHERE user_id = ?';\n    const params: any[] = [userId];\n    \n    if (status) {\n      query += ' AND status = ?';\n      params.push(status);\n    }\n    \n    query += ' ORDER BY created_at DESC';\n    \n    const result = await db.getAllAsync<any>(query, params);\n    return result;\n  }\n\n  async getGoal(goalId: string): Promise<any | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      'SELECT * FROM user_goals WHERE id = ?',\n      [goalId]\n    );\n    return result || null;\n  }\n\n  async updateGoalProgress(goalId: string, currentValue: number, status?: string): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n    \n    if (status) {\n      await db.runAsync(\n        'UPDATE user_goals SET current_value = ?, status = ?, updated_at = ? WHERE id = ?',\n        [currentValue, status, now, goalId]\n      );\n    } else {\n      await db.runAsync(\n        'UPDATE user_goals SET current_value = ?, updated_at = ? WHERE id = ?',\n        [currentValue, now, goalId]\n      );\n    }\n  }\n\n  async deleteGoal(goalId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('DELETE FROM user_goals WHERE id = ?', [goalId]);\n  }\n\n  async unlockAchievement(achievement: {\n    id: string;\n    user_id: string;\n    achievement_id: string;\n    unlocked_at: string;\n    progress_value?: number;\n  }): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO user_achievements \n       (id, user_id, achievement_id, unlocked_at, progress_value)\n       VALUES (?, ?, ?, ?, ?)`,\n      [\n        achievement.id,\n        achievement.user_id,\n        achievement.achievement_id,\n        achievement.unlocked_at,\n        achievement.progress_value || null,\n      ]\n    );\n  }\n\n  async getUserAchievements(userId: string): Promise<any[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM user_achievements WHERE user_id = ? ORDER BY unlocked_at DESC',\n      [userId]\n    );\n    return result;\n  }\n\n  async hasAchievement(userId: string, achievementId: string): Promise<boolean> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<{ count: number }>(\n      'SELECT COUNT(*) as count FROM user_achievements WHERE user_id = ? AND achievement_id = ?',\n      [userId, achievementId]\n    );\n    return (result?.count || 0) > 0;\n  }\n\n  async addTPath(tPath: TPath): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO t_paths \n       (id, user_id, template_name, description, is_main_program, parent_t_path_id, order_index, is_ai_generated, ai_generation_params, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        tPath.id,\n        tPath.user_id,\n        tPath.template_name,\n        tPath.description,\n        tPath.is_main_program ? 1 : 0,\n        tPath.parent_t_path_id,\n        tPath.order_index,\n        tPath.is_ai_generated ? 1 : 0,\n        tPath.ai_generation_params,\n        tPath.created_at,\n        tPath.updated_at,\n      ]\n    );\n  }\n\n  async getTPath(tPathId: string): Promise<TPathWithExercises | null> {\n    const db = this.getDB();\n    const tPath = await db.getFirstAsync<any>(\n      'SELECT * FROM t_paths WHERE id = ?',\n      [tPathId]\n    );\n    \n    if (!tPath) return null;\n\n    const exercises = await db.getAllAsync<any>(\n      'SELECT * FROM t_path_exercises WHERE t_path_id = ? ORDER BY order_index ASC',\n      [tPathId]\n    );\n\n    return {\n      ...tPath,\n      is_main_program: Boolean(tPath.is_main_program),\n      is_ai_generated: Boolean(tPath.is_ai_generated),\n      exercises: exercises.map(ex => ({\n        ...ex,\n        is_bonus_exercise: Boolean(ex.is_bonus_exercise),\n      })),\n    };\n  }\n\n  async getTPaths(userId: string, mainProgramsOnly: boolean = false): Promise<TPath[]> {\n    const db = this.getDB();\n    let query = 'SELECT * FROM t_paths WHERE user_id = ?';\n    const params: any[] = [userId];\n    \n    if (mainProgramsOnly) {\n      query += ' AND is_main_program = 1';\n    }\n    \n    query += ' ORDER BY order_index ASC, created_at DESC';\n    \n    const result = await db.getAllAsync<any>(query, params);\n    return result.map(row => ({\n      ...row,\n      is_main_program: Boolean(row.is_main_program),\n      is_ai_generated: Boolean(row.is_ai_generated),\n    }));\n  }\n\n  async getTPathsByParent(parentId: string): Promise<TPath[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM t_paths WHERE parent_t_path_id = ? ORDER BY order_index ASC',\n      [parentId]\n    );\n    return result.map(row => ({\n      ...row,\n      is_main_program: Boolean(row.is_main_program),\n      is_ai_generated: Boolean(row.is_ai_generated),\n    }));\n  }\n\n  async updateTPath(tPathId: string, updates: Partial<TPath>): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n    \n    const fields: string[] = [];\n    const values: any[] = [];\n    \n    if (updates.template_name !== undefined) {\n      fields.push('template_name = ?');\n      values.push(updates.template_name);\n    }\n    if (updates.description !== undefined) {\n      fields.push('description = ?');\n      values.push(updates.description);\n    }\n    if (updates.is_main_program !== undefined) {\n      fields.push('is_main_program = ?');\n      values.push(updates.is_main_program ? 1 : 0);\n    }\n    if (updates.order_index !== undefined) {\n      fields.push('order_index = ?');\n      values.push(updates.order_index);\n    }\n    \n    fields.push('updated_at = ?');\n    values.push(now);\n    values.push(tPathId);\n    \n    if (fields.length > 1) {\n      await db.runAsync(\n        `UPDATE t_paths SET ${fields.join(', ')} WHERE id = ?`,\n        values\n      );\n    }\n  }\n\n  async deleteTPath(tPathId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('DELETE FROM t_path_exercises WHERE t_path_id = ?', [tPathId]);\n    await db.runAsync('DELETE FROM t_path_progress WHERE t_path_id = ?', [tPathId]);\n    await db.runAsync('DELETE FROM t_paths WHERE id = ?', [tPathId]);\n  }\n\n  async addTPathExercise(exercise: TPathExercise): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO t_path_exercises \n       (id, t_path_id, exercise_id, order_index, is_bonus_exercise, target_sets, target_reps_min, target_reps_max, notes, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        exercise.id,\n        exercise.t_path_id,\n        exercise.exercise_id,\n        exercise.order_index,\n        exercise.is_bonus_exercise ? 1 : 0,\n        exercise.target_sets,\n        exercise.target_reps_min,\n        exercise.target_reps_max,\n        exercise.notes,\n        exercise.created_at,\n      ]\n    );\n  }\n\n  async getTPathExercises(tPathId: string): Promise<TPathExercise[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM t_path_exercises WHERE t_path_id = ? ORDER BY order_index ASC',\n      [tPathId]\n    );\n    return result.map(row => ({\n      ...row,\n      is_bonus_exercise: Boolean(row.is_bonus_exercise),\n    }));\n  }\n\n  async deleteTPathExercise(exerciseId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('DELETE FROM t_path_exercises WHERE id = ?', [exerciseId]);\n  }\n\n  async updateTPathProgress(progress: TPathProgress): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO t_path_progress \n       (id, user_id, t_path_id, completed_at, last_accessed_at, total_workouts_completed, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        progress.id,\n        progress.user_id,\n        progress.t_path_id,\n        progress.completed_at,\n        progress.last_accessed_at,\n        progress.total_workouts_completed,\n        progress.created_at,\n        progress.updated_at,\n      ]\n    );\n  }\n\n  async getTPathProgress(userId: string, tPathId: string): Promise<TPathProgress | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      'SELECT * FROM t_path_progress WHERE user_id = ? AND t_path_id = ?',\n      [userId, tPathId]\n    );\n    return result || null;\n  }\n\n  async getAllTPathProgress(userId: string): Promise<TPathProgress[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM t_path_progress WHERE user_id = ? ORDER BY last_accessed_at DESC',\n      [userId]\n    );\n    return result;\n  }\n\n  async addGym(gym: Gym): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO gyms \n       (id, user_id, name, description, equipment, is_active, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        gym.id,\n        gym.user_id,\n        gym.name,\n        gym.description,\n        JSON.stringify(gym.equipment),\n        gym.is_active ? 1 : 0,\n        gym.created_at,\n        gym.updated_at,\n      ]\n    );\n  }\n\n  async getGym(gymId: string): Promise<Gym | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      'SELECT * FROM gyms WHERE id = ?',\n      [gymId]\n    );\n    if (!result) return null;\n    return {\n      ...result,\n      equipment: JSON.parse(result.equipment),\n      is_active: Boolean(result.is_active),\n    };\n  }\n\n  async getGyms(userId: string): Promise<Gym[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      'SELECT * FROM gyms WHERE user_id = ? ORDER BY is_active DESC, name ASC',\n      [userId]\n    );\n    return result.map(row => ({\n      ...row,\n      equipment: JSON.parse(row.equipment),\n      is_active: Boolean(row.is_active),\n    }));\n  }\n\n  async getActiveGym(userId: string): Promise<Gym | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      'SELECT * FROM gyms WHERE user_id = ? AND is_active = 1 LIMIT 1',\n      [userId]\n    );\n    if (!result) return null;\n    return {\n      ...result,\n      equipment: JSON.parse(result.equipment),\n      is_active: Boolean(result.is_active),\n    };\n  }\n\n  async updateGym(gymId: string, updates: Partial<Gym>): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n    \n    const fields: string[] = [];\n    const values: any[] = [];\n    \n    if (updates.name !== undefined) {\n      fields.push('name = ?');\n      values.push(updates.name);\n    }\n    if (updates.description !== undefined) {\n      fields.push('description = ?');\n      values.push(updates.description);\n    }\n    if (updates.equipment !== undefined) {\n      fields.push('equipment = ?');\n      values.push(JSON.stringify(updates.equipment));\n    }\n    if (updates.is_active !== undefined) {\n      fields.push('is_active = ?');\n      values.push(updates.is_active ? 1 : 0);\n    }\n    \n    fields.push('updated_at = ?');\n    values.push(now);\n    values.push(gymId);\n    \n    if (fields.length > 1) {\n      await db.runAsync(\n        `UPDATE gyms SET ${fields.join(', ')} WHERE id = ?`,\n        values\n      );\n    }\n  }\n\n  async setActiveGym(userId: string, gymId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('UPDATE gyms SET is_active = 0 WHERE user_id = ?', [userId]);\n    await db.runAsync('UPDATE gyms SET is_active = 1 WHERE id = ?', [gymId]);\n  }\n\n  async deleteGym(gymId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync('DELETE FROM gyms WHERE id = ?', [gymId]);\n  }\n\n  syncQueue: SyncQueueStore = {\n    getAll: async (): Promise<SyncQueueItem[]> => {\n      const db = this.getDB();\n      const result = await db.getAllAsync<any>(\n        'SELECT * FROM sync_queue ORDER BY timestamp ASC'\n      );\n      return result.map(row => ({\n        id: row.id,\n        operation: row.operation,\n        table: row.table_name,\n        payload: JSON.parse(row.payload),\n        timestamp: row.timestamp,\n        attempts: row.attempts,\n        error: row.error,\n      }));\n    },\n\n    add: async (item: Omit<SyncQueueItem, 'id'>): Promise<number> => {\n      const db = this.getDB();\n      const result = await db.runAsync(\n        'INSERT INTO sync_queue (operation, table_name, payload, timestamp, attempts, error) VALUES (?, ?, ?, ?, ?, ?)',\n        [item.operation, item.table, JSON.stringify(item.payload), item.timestamp, item.attempts, item.error || null]\n      );\n      return result.lastInsertRowId;\n    },\n\n    remove: async (id: number): Promise<void> => {\n      const db = this.getDB();\n      await db.runAsync('DELETE FROM sync_queue WHERE id = ?', [id]);\n    },\n\n    incrementAttempts: async (id: number, error: string): Promise<void> => {\n      const db = this.getDB();\n      await db.runAsync(\n        'UPDATE sync_queue SET attempts = attempts + 1, error = ? WHERE id = ?',\n        [error, id]\n      );\n    },\n\n    clear: async (): Promise<void> => {\n      const db = this.getDB();\n      await db.runAsync('DELETE FROM sync_queue');\n    },\n  };\n}\n\nexport const database = new Database();\n\nexport const addToSyncQueue = async (\n  operation: 'create' | 'update' | 'delete',\n  table: 'workout_sessions' | 'set_logs',\n  payload: { id: string; [key: string]: any }\n) => {\n  await database.syncQueue.add({\n    operation,\n    table,\n    payload,\n    timestamp: Date.now(),\n    attempts: 0,\n  });\n};\n","size_bytes":32596},"apps/mobile/app/workout.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, ScrollView, Alert } from 'react-native';\nimport { useAuth } from './contexts/auth-context';\nimport { useData } from './contexts/data-context';\nimport { useRouter, useLocalSearchParams } from 'expo-router';\nimport { getExerciseById } from '@data/exercises';\nimport { RestTimer } from './components/rest-timer';\nimport { TemplateSaveModal } from './components/template-save-modal';\nimport { AICoachingCard } from './components/ai-coaching-card';\n\ninterface ExerciseSet {\n  weight: string;\n  reps: string;\n}\n\ninterface WorkoutExercise {\n  exerciseId: string;\n  sets: ExerciseSet[];\n}\n\nexport default function WorkoutScreen() {\n  const { userId } = useAuth();\n  const { addWorkoutSession, addSetLog, getPersonalRecord, getTemplate, getTPath, saveTemplate, isSyncing, queueLength, isOnline } = useData();\n  const router = useRouter();\n  const params = useLocalSearchParams<{ selectedExerciseId?: string; templateId?: string; tPathId?: string }>();\n  \n  const [templateName, setTemplateName] = useState('');\n  const [exercises, setExercises] = useState<WorkoutExercise[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [personalRecords, setPersonalRecords] = useState<Record<string, number>>({});\n  const [showRestTimer, setShowRestTimer] = useState(false);\n  const [showTemplateSaveModal, setShowTemplateSaveModal] = useState(false);\n  const [loadedTemplateId, setLoadedTemplateId] = useState<string | null>(null);\n  const [loadedTPathId, setLoadedTPathId] = useState<string | null>(null);\n  const [currentTemplateDescription, setCurrentTemplateDescription] = useState<string>('');\n\n  useEffect(() => {\n    if (params.selectedExerciseId) {\n      addExercise(params.selectedExerciseId);\n    }\n  }, [params.selectedExerciseId]);\n\n  useEffect(() => {\n    if (params.templateId && userId) {\n      loadTemplate(params.templateId);\n    }\n  }, [params.templateId, userId]);\n\n  useEffect(() => {\n    if (params.tPathId && userId) {\n      loadTPath(params.tPathId);\n    }\n  }, [params.tPathId, userId]);\n\n  const loadTemplate = async (templateId: string) => {\n    try {\n      const template = await getTemplate(templateId);\n      if (!template) {\n        Alert.alert('Error', 'Template not found');\n        return;\n      }\n\n      setTemplateName(template.name);\n      setLoadedTemplateId(templateId);\n      setCurrentTemplateDescription(template.description || '');\n\n      const loadedExercises: WorkoutExercise[] = template.exercises.map(ex => ({\n        exerciseId: ex.exercise_id,\n        sets: Array(ex.default_sets).fill(null).map(() => ({\n          weight: ex.default_weight_kg?.toString() || '',\n          reps: ex.default_reps?.toString() || '',\n        })),\n      }));\n\n      setExercises(loadedExercises);\n\n      for (const ex of template.exercises) {\n        if (userId && !personalRecords[ex.exercise_id]) {\n          const pr = await getPersonalRecord(userId, ex.exercise_id);\n          setPersonalRecords(prev => ({ ...prev, [ex.exercise_id]: pr }));\n        }\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to load template');\n    }\n  };\n\n  const loadTPath = async (tPathId: string) => {\n    try {\n      const tPath = await getTPath(tPathId);\n      if (!tPath) {\n        Alert.alert('Error', 'Workout program not found');\n        return;\n      }\n\n      setTemplateName(tPath.template_name);\n      setLoadedTPathId(tPathId);\n      setCurrentTemplateDescription(tPath.description || '');\n\n      const loadedExercises: WorkoutExercise[] = tPath.exercises\n        .filter(ex => !ex.is_bonus_exercise)\n        .map(ex => ({\n          exerciseId: ex.exercise_id,\n          sets: Array(ex.target_sets || 3).fill(null).map(() => ({\n            weight: '',\n            reps: ex.target_reps_min?.toString() || '',\n          })),\n        }));\n\n      setExercises(loadedExercises);\n\n      for (const ex of tPath.exercises) {\n        if (userId && !personalRecords[ex.exercise_id]) {\n          const pr = await getPersonalRecord(userId, ex.exercise_id);\n          setPersonalRecords(prev => ({ ...prev, [ex.exercise_id]: pr }));\n        }\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to load workout program');\n    }\n  };\n\n  const addExercise = async (exerciseId: string) => {\n    const existingIndex = exercises.findIndex(e => e.exerciseId === exerciseId);\n    if (existingIndex >= 0) {\n      Alert.alert('Already Added', 'This exercise is already in your workout');\n      return;\n    }\n    \n    setExercises([...exercises, {\n      exerciseId,\n      sets: [{ weight: '', reps: '' }]\n    }]);\n\n    if (userId && !personalRecords[exerciseId]) {\n      const pr = await getPersonalRecord(userId, exerciseId);\n      setPersonalRecords(prev => ({ ...prev, [exerciseId]: pr }));\n    }\n  };\n\n  const removeExercise = (index: number) => {\n    const newExercises = exercises.filter((_, i) => i !== index);\n    setExercises(newExercises);\n  };\n\n  const addSet = (exerciseIndex: number) => {\n    const newExercises = [...exercises];\n    newExercises[exerciseIndex].sets.push({ weight: '', reps: '' });\n    setExercises(newExercises);\n  };\n\n  const updateSet = (exerciseIndex: number, setIndex: number, field: 'weight' | 'reps', value: string) => {\n    const newExercises = [...exercises];\n    newExercises[exerciseIndex].sets[setIndex][field] = value;\n    setExercises(newExercises);\n  };\n\n  const removeSet = (exerciseIndex: number, setIndex: number) => {\n    const newExercises = [...exercises];\n    if (newExercises[exerciseIndex].sets.length > 1) {\n      newExercises[exerciseIndex].sets = newExercises[exerciseIndex].sets.filter((_, i) => i !== setIndex);\n      setExercises(newExercises);\n    }\n  };\n\n  const saveWorkout = async () => {\n    if (!userId) {\n      Alert.alert('Error', 'Not authenticated');\n      return;\n    }\n\n    if (!templateName.trim()) {\n      Alert.alert('Error', 'Please enter a workout name');\n      return;\n    }\n\n    if (exercises.length === 0) {\n      Alert.alert('Error', 'Please add at least one exercise');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const now = new Date().toISOString();\n\n      const session = {\n        id: sessionId,\n        user_id: userId,\n        session_date: now,\n        template_name: templateName,\n        completed_at: now,\n        rating: null,\n        duration_string: null,\n        t_path_id: loadedTPathId,\n        created_at: now,\n      };\n\n      await addWorkoutSession(session);\n\n      let setCounter = 0;\n      let newPRs = 0;\n      \n      for (const exercise of exercises) {\n        let currentPR = personalRecords[exercise.exerciseId] || 0;\n        \n        for (const set of exercise.sets) {\n          if (set.weight && set.reps) {\n            const weight = parseFloat(set.weight);\n            const isPR = weight > currentPR;\n            \n            if (isPR) {\n              newPRs++;\n              currentPR = weight;\n            }\n            \n            const setLog = {\n              id: `set_${sessionId}_${setCounter}`,\n              session_id: sessionId,\n              exercise_id: exercise.exerciseId,\n              weight_kg: weight || null,\n              reps: parseInt(set.reps) || null,\n              reps_l: null,\n              reps_r: null,\n              time_seconds: null,\n              is_pb: isPR,\n              created_at: now,\n            };\n            await addSetLog(setLog);\n            setCounter++;\n          }\n        }\n      }\n\n      const message = newPRs > 0 \n        ? `Workout saved! 🎉 ${newPRs} new personal record${newPRs > 1 ? 's' : ''}!`\n        : `Workout saved! ${exercises.length} exercises logged`;\n      \n      Alert.alert('Success', message);\n      setTemplateName('');\n      setExercises([]);\n      setPersonalRecords({});\n      setLoadedTemplateId(null);\n      setLoadedTPathId(null);\n      router.back();\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to save workout');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveAsTemplate = () => {\n    if (!userId) {\n      Alert.alert('Error', 'Not authenticated');\n      return;\n    }\n\n    if (!templateName.trim()) {\n      Alert.alert('Error', 'Please enter a workout name first');\n      return;\n    }\n\n    if (exercises.length === 0) {\n      Alert.alert('Error', 'Please add at least one exercise');\n      return;\n    }\n\n    setShowTemplateSaveModal(true);\n  };\n\n  const handleConfirmSaveTemplate = async (description: string) => {\n    try {\n      const templateId = loadedTemplateId || `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const now = new Date().toISOString();\n      \n      let existingTemplate = null;\n      if (loadedTemplateId) {\n        existingTemplate = await getTemplate(loadedTemplateId);\n      }\n\n      const template = {\n        id: templateId,\n        user_id: userId!,\n        name: templateName,\n        description: description || null,\n        exercises: exercises.map((ex, idx) => ({\n          exercise_id: ex.exerciseId,\n          order_index: idx,\n          default_sets: ex.sets.length,\n          default_weight_kg: ex.sets[0]?.weight ? parseFloat(ex.sets[0].weight) : null,\n          default_reps: ex.sets[0]?.reps ? parseInt(ex.sets[0].reps) : null,\n        })),\n        created_at: existingTemplate?.created_at || now,\n        updated_at: now,\n      };\n\n      await saveTemplate(template);\n      setLoadedTemplateId(templateId);\n      setCurrentTemplateDescription(description || existingTemplate?.description || '');\n      Alert.alert('Success', 'Template saved!');\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to save template');\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.syncStatus}>\n        <Text style={styles.syncText}>\n          {isOnline ? '🟢 Online' : '🔴 Offline'} • {isSyncing ? 'Syncing...' : `Queue: ${queueLength}`}\n        </Text>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.label}>Workout Name</Text>\n        <TextInput\n          style={styles.input}\n          placeholder=\"e.g., Chest Day\"\n          placeholderTextColor=\"#666\"\n          value={templateName}\n          onChangeText={setTemplateName}\n        />\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Text style={styles.label}>Exercises ({exercises.length})</Text>\n          <TouchableOpacity \n            style={styles.addExerciseButton}\n            onPress={() => router.push('/exercise-picker')}\n          >\n            <Text style={styles.addExerciseText}>+ Add Exercise</Text>\n          </TouchableOpacity>\n        </View>\n\n        {exercises.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Text style={styles.emptyText}>No exercises added yet</Text>\n            <Text style={styles.emptySubtext}>Tap \"+ Add Exercise\" to get started</Text>\n          </View>\n        ) : (\n          exercises.map((exercise, exerciseIndex) => {\n            const exerciseData = getExerciseById(exercise.exerciseId);\n            return (\n              <View key={exerciseIndex} style={styles.exerciseCard}>\n                <View style={styles.exerciseHeader}>\n                  <View style={styles.exerciseInfo}>\n                    <Text style={styles.exerciseTitle}>{exerciseData?.name || exercise.exerciseId}</Text>\n                    {exerciseData?.category && (\n                      <Text style={styles.exerciseCategory}>{exerciseData.category}</Text>\n                    )}\n                  </View>\n                  <TouchableOpacity onPress={() => removeExercise(exerciseIndex)}>\n                    <Text style={styles.removeButton}>✕</Text>\n                  </TouchableOpacity>\n                </View>\n\n                <View style={styles.setsContainer}>\n                  {personalRecords[exercise.exerciseId] > 0 && (\n                    <Text style={styles.prHint}>\n                      PR: {personalRecords[exercise.exerciseId]} kg\n                    </Text>\n                  )}\n                  {exercise.sets.map((set, setIndex) => {\n                    const weight = parseFloat(set.weight);\n                    const isPotentialPR = weight > (personalRecords[exercise.exerciseId] || 0) && !isNaN(weight);\n                    \n                    return (\n                      <View key={setIndex} style={styles.setRow}>\n                        <Text style={styles.setNumber}>#{setIndex + 1}</Text>\n                        <TextInput\n                          style={[styles.input, styles.setInput, isPotentialPR && styles.prInput]}\n                          placeholder=\"kg\"\n                          placeholderTextColor=\"#666\"\n                          keyboardType=\"numeric\"\n                          value={set.weight}\n                          onChangeText={(value) => updateSet(exerciseIndex, setIndex, 'weight', value)}\n                        />\n                        <TextInput\n                          style={[styles.input, styles.setInput]}\n                          placeholder=\"reps\"\n                          placeholderTextColor=\"#666\"\n                          keyboardType=\"numeric\"\n                          value={set.reps}\n                          onChangeText={(value) => updateSet(exerciseIndex, setIndex, 'reps', value)}\n                        />\n                        {isPotentialPR && <Text style={styles.prBadge}>🎉 PR!</Text>}\n                        {exercise.sets.length > 1 && (\n                          <TouchableOpacity onPress={() => removeSet(exerciseIndex, setIndex)}>\n                            <Text style={styles.removeSetButton}>−</Text>\n                          </TouchableOpacity>\n                        )}\n                      </View>\n                    );\n                  })}\n                  \n                  <TouchableOpacity \n                    style={styles.addSetButton} \n                    onPress={() => addSet(exerciseIndex)}\n                  >\n                    <Text style={styles.addSetText}>+ Add Set</Text>\n                  </TouchableOpacity>\n                </View>\n\n                <AICoachingCard\n                  exerciseName={exerciseData?.name || exercise.exerciseId}\n                  currentSet={exercise.sets.filter(s => s.weight && s.reps).length + 1}\n                  totalSets={exercise.sets.length}\n                  targetReps={exercise.sets[0]?.reps}\n                />\n              </View>\n            );\n          })\n        )}\n      </View>\n\n      <View style={styles.bottomButtons}>\n        <TouchableOpacity \n          style={styles.timerButton}\n          onPress={() => setShowRestTimer(true)}\n        >\n          <Text style={styles.timerButtonText}>⏱ Rest Timer</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={styles.templateButton}\n          onPress={handleSaveAsTemplate}\n        >\n          <Text style={styles.templateButtonText}>\n            {loadedTemplateId ? '💾 Update Template' : '📋 Save as Template'}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity \n          style={[styles.saveButton, loading && styles.saveButtonDisabled]} \n          onPress={saveWorkout}\n          disabled={loading}\n        >\n          <Text style={styles.saveButtonText}>{loading ? 'Saving...' : 'Save Workout'}</Text>\n        </TouchableOpacity>\n      </View>\n\n      <RestTimer \n        visible={showRestTimer}\n        onClose={() => setShowRestTimer(false)}\n      />\n\n      <TemplateSaveModal\n        visible={showTemplateSaveModal}\n        onClose={() => setShowTemplateSaveModal(false)}\n        onSave={handleConfirmSaveTemplate}\n        isUpdate={!!loadedTemplateId}\n        initialDescription={currentTemplateDescription}\n      />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    padding: 20,\n  },\n  syncStatus: {\n    backgroundColor: '#111',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 20,\n  },\n  syncText: {\n    color: '#0a0',\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  label: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  input: {\n    backgroundColor: '#111',\n    borderWidth: 1,\n    borderColor: '#333',\n    borderRadius: 8,\n    padding: 12,\n    color: '#fff',\n    fontSize: 16,\n  },\n  addExerciseButton: {\n    backgroundColor: '#0a0',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n  },\n  addExerciseText: {\n    color: '#fff',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  emptyState: {\n    padding: 32,\n    alignItems: 'center',\n    backgroundColor: '#111',\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  emptyText: {\n    color: '#888',\n    fontSize: 16,\n    marginBottom: 4,\n  },\n  emptySubtext: {\n    color: '#666',\n    fontSize: 14,\n  },\n  exerciseCard: {\n    backgroundColor: '#111',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  exerciseHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 12,\n  },\n  exerciseInfo: {\n    flex: 1,\n  },\n  exerciseTitle: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  exerciseCategory: {\n    color: '#0a0',\n    fontSize: 14,\n    textTransform: 'capitalize',\n  },\n  removeButton: {\n    color: '#f00',\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingHorizontal: 8,\n  },\n  setsContainer: {\n    marginTop: 8,\n  },\n  setRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 12,\n    gap: 8,\n  },\n  setNumber: {\n    color: '#888',\n    fontSize: 16,\n    width: 32,\n  },\n  setInput: {\n    flex: 1,\n  },\n  removeSetButton: {\n    color: '#f00',\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingHorizontal: 4,\n  },\n  addSetButton: {\n    backgroundColor: '#222',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n    borderStyle: 'dashed',\n    marginTop: 4,\n  },\n  addSetText: {\n    color: '#0a0',\n    fontSize: 14,\n    textAlign: 'center',\n  },\n  bottomButtons: {\n    gap: 12,\n    marginTop: 16,\n    marginBottom: 32,\n  },\n  timerButton: {\n    backgroundColor: '#222',\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  timerButtonText: {\n    color: '#0a0',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  templateButton: {\n    backgroundColor: '#222',\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#0a0',\n  },\n  templateButtonText: {\n    color: '#0a0',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  saveButton: {\n    backgroundColor: '#0a0',\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  saveButtonDisabled: {\n    opacity: 0.6,\n  },\n  saveButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  prHint: {\n    color: '#0a0',\n    fontSize: 12,\n    marginBottom: 8,\n    fontWeight: 'bold',\n  },\n  prInput: {\n    borderColor: '#0a0',\n    borderWidth: 2,\n  },\n  prBadge: {\n    fontSize: 14,\n    marginLeft: 4,\n  },\n});\n","size_bytes":19515},"packages/data/src/storage/models.ts":{"content":"export interface WorkoutSession {\n  id: string;\n  user_id: string;\n  session_date: string;\n  template_name: string | null;\n  completed_at: string | null;\n  rating: number | null;\n  duration_string: string | null;\n  t_path_id: string | null;\n  created_at: string;\n}\n\nexport interface SetLog {\n  id: string;\n  session_id: string;\n  exercise_id: string;\n  weight_kg: number | null;\n  reps: number | null;\n  reps_l: number | null;\n  reps_r: number | null;\n  time_seconds: number | null;\n  is_pb: boolean | null;\n  created_at: string;\n}\n\nexport interface ExerciseDefinition {\n  id: string;\n  user_id: string | null;\n  library_id: string | null;\n  name: string;\n  description: string | null;\n  instructions: string | null;\n  difficulty: string | null;\n  muscle_group: string | null;\n  equipment: string | null;\n  created_at: string;\n}\n\nexport interface WorkoutTemplate {\n  id: string;\n  user_id: string;\n  name: string;\n  description: string | null;\n  exercises: TemplateExercise[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface TemplateExercise {\n  exercise_id: string;\n  order_index: number;\n  default_sets: number;\n  default_weight_kg: number | null;\n  default_reps: number | null;\n}\n\nexport interface TPath {\n  id: string;\n  user_id: string;\n  template_name: string;\n  description: string | null;\n  is_main_program: boolean;\n  parent_t_path_id: string | null;\n  order_index: number | null;\n  is_ai_generated: boolean;\n  ai_generation_params: string | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface TPathExercise {\n  id: string;\n  t_path_id: string;\n  exercise_id: string;\n  order_index: number;\n  is_bonus_exercise: boolean;\n  target_sets: number | null;\n  target_reps_min: number | null;\n  target_reps_max: number | null;\n  notes: string | null;\n  created_at: string;\n}\n\nexport interface TPathProgress {\n  id: string;\n  user_id: string;\n  t_path_id: string;\n  completed_at: string | null;\n  last_accessed_at: string | null;\n  total_workouts_completed: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface TPathWithExercises extends TPath {\n  exercises: TPathExercise[];\n  progress?: TPathProgress;\n}\n\nexport interface Gym {\n  id: string;\n  user_id: string;\n  name: string;\n  description: string | null;\n  equipment: string[];\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n","size_bytes":2353},"packages/data/src/storage/sync-queue.ts":{"content":"export interface SyncQueueItem {\n  id?: number;\n  operation: 'create' | 'update' | 'delete';\n  table: 'workout_sessions' | 'set_logs';\n  payload: { id: string; [key: string]: any };\n  timestamp: number;\n  attempts: number;\n  error?: string;\n}\n\nexport interface SyncQueueStore {\n  getAll(): Promise<SyncQueueItem[]>;\n  add(item: Omit<SyncQueueItem, 'id'>): Promise<number>;\n  remove(id: number): Promise<void>;\n  incrementAttempts(id: number, error: string): Promise<void>;\n  clear(): Promise<void>;\n}\n","size_bytes":501},"apps/mobile/app/history.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  RefreshControl,\n} from \"react-native\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useRouter } from \"expo-router\";\nimport type { WorkoutSession } from \"@data/storage/models\";\nimport { formatTimeAgo } from \"@data/utils/workout-helpers\";\n\nexport default function HistoryScreen() {\n  const { userId } = useAuth();\n  const { getWorkoutSessions } = useData();\n  const router = useRouter();\n  const [workouts, setWorkouts] = useState<WorkoutSession[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const loadWorkouts = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    try {\n      const sessions = await getWorkoutSessions(userId);\n      setWorkouts(sessions);\n    } catch (error) {\n      console.error(\"Failed to load workouts:\", error);\n    }\n  }, [getWorkoutSessions, userId]);\n\n  useEffect(() => {\n    loadWorkouts();\n  }, [loadWorkouts]);\n\n  const onRefresh = async () => {\n    setRefreshing(true);\n    await loadWorkouts();\n    setRefreshing(false);\n  };\n\n  const renderWorkout = ({ item }: { item: WorkoutSession }) => {\n    const date = new Date(item.session_date);\n    const timeAgo = formatTimeAgo(date);\n\n    return (\n      <TouchableOpacity\n        style={styles.workoutCard}\n        onPress={() => router.push(`/workout-detail?id=${item.id}`)}\n      >\n        <View style={styles.cardHeader}>\n          <Text style={styles.workoutName}>\n            {item.template_name || \"Unnamed Workout\"}\n          </Text>\n          {item.rating && (\n            <Text style={styles.rating}>{\"⭐\".repeat(item.rating)}</Text>\n          )}\n        </View>\n        <View style={styles.cardDetails}>\n          <Text style={styles.detailText}>📅 {date.toLocaleDateString()}</Text>\n          <Text style={styles.detailText}>🕐 {timeAgo}</Text>\n        </View>\n        {item.duration_string && (\n          <Text style={styles.duration}>Duration: {item.duration_string}</Text>\n        )}\n      </TouchableOpacity>\n    );\n  };\n\n  if (workouts.length === 0 && !refreshing) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Text style={styles.emptyText}>No workouts yet</Text>\n        <Text style={styles.emptySubtext}>\n          Start logging your workouts to see them here!\n        </Text>\n        <TouchableOpacity\n          style={styles.addButton}\n          onPress={() => router.push(\"/workout\")}\n        >\n          <Text style={styles.addButtonText}>+ Log First Workout</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={workouts}\n        renderItem={renderWorkout}\n        keyExtractor={(item) => item.id}\n        contentContainerStyle={styles.listContent}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            tintColor=\"#0a0\"\n          />\n        }\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  listContent: {\n    padding: 16,\n  },\n  workoutCard: {\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  cardHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 8,\n  },\n  workoutName: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    flex: 1,\n  },\n  rating: {\n    fontSize: 14,\n  },\n  cardDetails: {\n    flexDirection: \"row\",\n    gap: 16,\n    marginBottom: 4,\n  },\n  detailText: {\n    color: \"#888\",\n    fontSize: 14,\n  },\n  duration: {\n    color: \"#0a0\",\n    fontSize: 14,\n    marginTop: 4,\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#000\",\n    padding: 32,\n  },\n  emptyText: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    color: \"#888\",\n    fontSize: 16,\n    textAlign: \"center\",\n    marginBottom: 32,\n  },\n  addButton: {\n    backgroundColor: \"#0a0\",\n    paddingVertical: 16,\n    paddingHorizontal: 48,\n    borderRadius: 8,\n  },\n  addButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":4418},"apps/mobile/app/workout-detail.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from \"react-native\";\nimport { useLocalSearchParams, useRouter } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport type { WorkoutSession, SetLog } from \"@data/storage/models\";\nimport { getExerciseById } from \"@data/exercises\";\nimport { formatWeight } from \"@data/utils/unit-conversions\";\n\nexport default function WorkoutDetailScreen() {\n  const { id } = useLocalSearchParams<{ id: string }>();\n  const { userId } = useAuth();\n  const { getWorkoutSessions, getSetLogs } = useData();\n  const router = useRouter();\n  const [session, setSession] = useState<WorkoutSession | null>(null);\n  const [sets, setSets] = useState<SetLog[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadWorkoutDetail = useCallback(async () => {\n    if (!id || !userId) {\n      return;\n    }\n\n    try {\n      const allSessions = await getWorkoutSessions(userId);\n      const foundSession = allSessions.find((s) => s.id === id);\n\n      if (foundSession) {\n        setSession(foundSession);\n        const setLogs = await getSetLogs(id);\n        setSets(setLogs);\n      }\n    } catch (error) {\n      console.error(\"Failed to load workout detail:\", error);\n      Alert.alert(\"Error\", \"Failed to load workout details\");\n    } finally {\n      setLoading(false);\n    }\n  }, [getSetLogs, getWorkoutSessions, id, userId]);\n\n  useEffect(() => {\n    loadWorkoutDetail();\n  }, [loadWorkoutDetail]);\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.loadingText}>Loading...</Text>\n      </View>\n    );\n  }\n\n  if (!session) {\n    return (\n      <View style={styles.loadingContainer}>\n        <Text style={styles.errorText}>Workout not found</Text>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => router.back()}\n        >\n          <Text style={styles.backButtonText}>Go Back</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  const date = new Date(session.session_date);\n  const groupedSets = sets.reduce(\n    (acc, set) => {\n      if (!acc[set.exercise_id]) {\n        acc[set.exercise_id] = [];\n      }\n      acc[set.exercise_id].push(set);\n      return acc;\n    },\n    {} as Record<string, SetLog[]>,\n  );\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>\n          {session.template_name || \"Unnamed Workout\"}\n        </Text>\n        <Text style={styles.date}>\n          {date.toLocaleDateString()} at {date.toLocaleTimeString()}\n        </Text>\n        {session.duration_string && (\n          <Text style={styles.duration}>\n            Duration: {session.duration_string}\n          </Text>\n        )}\n        {session.rating && (\n          <Text style={styles.rating}>\n            Rating: {\"⭐\".repeat(session.rating)}\n          </Text>\n        )}\n      </View>\n\n      <View style={styles.exercisesSection}>\n        <Text style={styles.sectionTitle}>Exercises</Text>\n        {Object.entries(groupedSets).map(([exerciseId, exerciseSets]) => {\n          const exercise = getExerciseById(exerciseId);\n          return (\n            <View key={exerciseId} style={styles.exerciseCard}>\n              <Text style={styles.exerciseName}>\n                {exercise?.name || exerciseId}\n              </Text>\n              {exercise?.category && (\n                <Text style={styles.exerciseCategory}>{exercise.category}</Text>\n              )}\n\n              <View style={styles.setsTable}>\n                <View style={styles.tableHeader}>\n                  <Text style={[styles.tableHeaderText, styles.setCol]}>\n                    Set\n                  </Text>\n                  <Text style={[styles.tableHeaderText, styles.weightCol]}>\n                    Weight\n                  </Text>\n                  <Text style={[styles.tableHeaderText, styles.repsCol]}>\n                    Reps\n                  </Text>\n                </View>\n                {exerciseSets.map((set, index) => (\n                  <View key={set.id} style={styles.tableRow}>\n                    <Text style={[styles.tableText, styles.setCol]}>\n                      {index + 1}\n                    </Text>\n                    <Text style={[styles.tableText, styles.weightCol]}>\n                      {set.weight_kg\n                        ? `${formatWeight(set.weight_kg, \"kg\")} kg`\n                        : \"-\"}\n                    </Text>\n                    <Text style={[styles.tableText, styles.repsCol]}>\n                      {set.reps || \"-\"}\n                    </Text>\n                  </View>\n                ))}\n              </View>\n            </View>\n          );\n        })}\n      </View>\n\n      {sets.length === 0 && (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>No exercises logged</Text>\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#000\",\n  },\n  loadingText: {\n    color: \"#fff\",\n    fontSize: 18,\n  },\n  errorText: {\n    color: \"#f00\",\n    fontSize: 18,\n    marginBottom: 16,\n  },\n  backButton: {\n    backgroundColor: \"#333\",\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  backButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  header: {\n    padding: 20,\n    backgroundColor: \"#111\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 8,\n  },\n  date: {\n    color: \"#888\",\n    fontSize: 14,\n    marginBottom: 4,\n  },\n  duration: {\n    color: \"#0a0\",\n    fontSize: 14,\n    marginTop: 4,\n  },\n  rating: {\n    color: \"#fff\",\n    fontSize: 16,\n    marginTop: 8,\n  },\n  exercisesSection: {\n    padding: 16,\n  },\n  sectionTitle: {\n    color: \"#fff\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    marginBottom: 16,\n  },\n  exerciseCard: {\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  exerciseName: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  exerciseCategory: {\n    color: \"#0a0\",\n    fontSize: 14,\n    marginBottom: 12,\n    textTransform: \"capitalize\",\n  },\n  setsTable: {\n    marginTop: 8,\n  },\n  tableHeader: {\n    flexDirection: \"row\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n    paddingBottom: 8,\n    marginBottom: 8,\n  },\n  tableHeaderText: {\n    color: \"#888\",\n    fontSize: 14,\n    fontWeight: \"bold\",\n  },\n  tableRow: {\n    flexDirection: \"row\",\n    paddingVertical: 6,\n  },\n  tableText: {\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  setCol: {\n    width: 50,\n  },\n  weightCol: {\n    flex: 1,\n  },\n  repsCol: {\n    width: 60,\n    textAlign: \"right\",\n  },\n  emptyState: {\n    padding: 32,\n    alignItems: \"center\",\n  },\n  emptyText: {\n    color: \"#888\",\n    fontSize: 16,\n  },\n});\n","size_bytes":7208},"packages/data/src/exercises/index.ts":{"content":"export interface Exercise {\n  id: string;\n  name: string;\n  category: 'chest' | 'back' | 'legs' | 'shoulders' | 'arms' | 'core' | 'cardio';\n  equipment?: string;\n  primaryMuscles: string[];\n  secondaryMuscles?: string[];\n}\n\nexport const EXERCISES: Exercise[] = [\n  {\n    id: 'bench_press',\n    name: 'Bench Press',\n    category: 'chest',\n    equipment: 'Barbell',\n    primaryMuscles: ['Chest'],\n    secondaryMuscles: ['Triceps', 'Shoulders'],\n  },\n  {\n    id: 'squat',\n    name: 'Squat',\n    category: 'legs',\n    equipment: 'Barbell',\n    primaryMuscles: ['Quadriceps', 'Glutes'],\n    secondaryMuscles: ['Hamstrings', 'Core'],\n  },\n  {\n    id: 'deadlift',\n    name: 'Deadlift',\n    category: 'back',\n    equipment: 'Barbell',\n    primaryMuscles: ['Back', 'Hamstrings'],\n    secondaryMuscles: ['Glutes', 'Core'],\n  },\n  {\n    id: 'overhead_press',\n    name: 'Overhead Press',\n    category: 'shoulders',\n    equipment: 'Barbell',\n    primaryMuscles: ['Shoulders'],\n    secondaryMuscles: ['Triceps', 'Core'],\n  },\n  {\n    id: 'pull_up',\n    name: 'Pull Up',\n    category: 'back',\n    equipment: 'Bodyweight',\n    primaryMuscles: ['Lats', 'Back'],\n    secondaryMuscles: ['Biceps'],\n  },\n  {\n    id: 'dumbbell_curl',\n    name: 'Dumbbell Curl',\n    category: 'arms',\n    equipment: 'Dumbbell',\n    primaryMuscles: ['Biceps'],\n  },\n  {\n    id: 'tricep_dips',\n    name: 'Tricep Dips',\n    category: 'arms',\n    equipment: 'Bodyweight',\n    primaryMuscles: ['Triceps'],\n    secondaryMuscles: ['Chest', 'Shoulders'],\n  },\n  {\n    id: 'leg_press',\n    name: 'Leg Press',\n    category: 'legs',\n    equipment: 'Machine',\n    primaryMuscles: ['Quadriceps', 'Glutes'],\n  },\n  {\n    id: 'lat_pulldown',\n    name: 'Lat Pulldown',\n    category: 'back',\n    equipment: 'Cable',\n    primaryMuscles: ['Lats'],\n    secondaryMuscles: ['Biceps'],\n  },\n  {\n    id: 'dumbbell_row',\n    name: 'Dumbbell Row',\n    category: 'back',\n    equipment: 'Dumbbell',\n    primaryMuscles: ['Back', 'Lats'],\n    secondaryMuscles: ['Biceps'],\n  },\n  {\n    id: 'incline_bench_press',\n    name: 'Incline Bench Press',\n    category: 'chest',\n    equipment: 'Barbell',\n    primaryMuscles: ['Upper Chest'],\n    secondaryMuscles: ['Shoulders', 'Triceps'],\n  },\n  {\n    id: 'leg_curl',\n    name: 'Leg Curl',\n    category: 'legs',\n    equipment: 'Machine',\n    primaryMuscles: ['Hamstrings'],\n  },\n  {\n    id: 'calf_raise',\n    name: 'Calf Raise',\n    category: 'legs',\n    equipment: 'Machine',\n    primaryMuscles: ['Calves'],\n  },\n  {\n    id: 'plank',\n    name: 'Plank',\n    category: 'core',\n    equipment: 'Bodyweight',\n    primaryMuscles: ['Core', 'Abs'],\n  },\n  {\n    id: 'crunch',\n    name: 'Crunch',\n    category: 'core',\n    equipment: 'Bodyweight',\n    primaryMuscles: ['Abs'],\n  },\n  {\n    id: 'running',\n    name: 'Running',\n    category: 'cardio',\n    equipment: 'Treadmill',\n    primaryMuscles: ['Legs', 'Cardiovascular'],\n  },\n];\n\nexport const getExerciseById = (id: string): Exercise | undefined => {\n  return EXERCISES.find(ex => ex.id === id);\n};\n\nexport const getExercisesByCategory = (category: Exercise['category']): Exercise[] => {\n  return EXERCISES.filter(ex => ex.category === category);\n};\n\nexport const EXERCISE_CATEGORIES = [\n  { id: 'chest', name: 'Chest', emoji: '💪' },\n  { id: 'back', name: 'Back', emoji: '🔙' },\n  { id: 'legs', name: 'Legs', emoji: '🦵' },\n  { id: 'shoulders', name: 'Shoulders', emoji: '🏋️' },\n  { id: 'arms', name: 'Arms', emoji: '💪' },\n  { id: 'core', name: 'Core', emoji: '🎯' },\n  { id: 'cardio', name: 'Cardio', emoji: '❤️' },\n] as const;\n","size_bytes":3569},"apps/mobile/app/components/rest-timer.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Modal } from 'react-native';\n\ninterface RestTimerProps {\n  visible: boolean;\n  onClose: () => void;\n  initialSeconds?: number;\n}\n\nexport function RestTimer({ visible, onClose, initialSeconds = 90 }: RestTimerProps) {\n  const [seconds, setSeconds] = useState(initialSeconds);\n  const [isRunning, setIsRunning] = useState(true);\n\n  useEffect(() => {\n    if (visible) {\n      setSeconds(initialSeconds);\n      setIsRunning(true);\n    }\n  }, [visible, initialSeconds]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n\n    if (isRunning && seconds > 0) {\n      interval = setInterval(() => {\n        setSeconds(prev => prev - 1);\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isRunning, seconds]);\n\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const timeDisplay = `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n\n  const presetTimes = [30, 60, 90, 120, 180];\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={onClose}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.container}>\n          <Text style={styles.title}>Rest Timer</Text>\n          \n          <View style={styles.timerDisplay}>\n            <Text style={[styles.timeText, seconds === 0 && styles.timeUpText]}>\n              {seconds === 0 ? \"Time's up!\" : timeDisplay}\n            </Text>\n          </View>\n\n          <View style={styles.controls}>\n            <TouchableOpacity \n              style={styles.controlButton}\n              onPress={() => setIsRunning(!isRunning)}\n            >\n              <Text style={styles.controlButtonText}>\n                {isRunning ? '⏸ Pause' : '▶️ Resume'}\n              </Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.controlButton}\n              onPress={() => {\n                setSeconds(initialSeconds);\n                setIsRunning(true);\n              }}\n            >\n              <Text style={styles.controlButtonText}>🔄 Reset</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.presets}>\n            <Text style={styles.presetsLabel}>Quick Set:</Text>\n            <View style={styles.presetsRow}>\n              {presetTimes.map(time => (\n                <TouchableOpacity\n                  key={time}\n                  style={styles.presetButton}\n                  onPress={() => {\n                    setSeconds(time);\n                    setIsRunning(true);\n                  }}\n                >\n                  <Text style={styles.presetButtonText}>{time}s</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n\n          <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n            <Text style={styles.closeButtonText}>Close</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    backgroundColor: '#111',\n    borderRadius: 20,\n    padding: 24,\n    width: '85%',\n    maxWidth: 400,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  title: {\n    color: '#fff',\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  timerDisplay: {\n    backgroundColor: '#000',\n    borderRadius: 16,\n    padding: 32,\n    marginBottom: 24,\n    borderWidth: 2,\n    borderColor: '#0a0',\n  },\n  timeText: {\n    color: '#0a0',\n    fontSize: 64,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    fontVariant: ['tabular-nums'],\n  },\n  timeUpText: {\n    color: '#f00',\n    fontSize: 32,\n  },\n  controls: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 24,\n  },\n  controlButton: {\n    flex: 1,\n    backgroundColor: '#222',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  controlButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    textAlign: 'center',\n    fontWeight: '600',\n  },\n  presets: {\n    marginBottom: 24,\n  },\n  presetsLabel: {\n    color: '#888',\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  presetsRow: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  presetButton: {\n    flex: 1,\n    backgroundColor: '#222',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  presetButtonText: {\n    color: '#0a0',\n    fontSize: 14,\n    textAlign: 'center',\n    fontWeight: '600',\n  },\n  closeButton: {\n    backgroundColor: '#0a0',\n    padding: 16,\n    borderRadius: 12,\n  },\n  closeButtonText: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});\n","size_bytes":4923},"apps/mobile/app/components/template-save-modal.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, Modal } from 'react-native';\n\ninterface TemplateSaveModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onSave: (description: string) => void;\n  isUpdate: boolean;\n  initialDescription?: string;\n}\n\nexport function TemplateSaveModal({ visible, onClose, onSave, isUpdate, initialDescription = '' }: TemplateSaveModalProps) {\n  const [description, setDescription] = useState(initialDescription);\n\n  const handleSave = () => {\n    onSave(description);\n    onClose();\n  };\n\n  const handleClose = () => {\n    setDescription(initialDescription);\n    onClose();\n  };\n\n  React.useEffect(() => {\n    if (visible) {\n      setDescription(initialDescription);\n    }\n  }, [visible, initialDescription]);\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={handleClose}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.container}>\n          <Text style={styles.title}>\n            {isUpdate ? 'Update Template' : 'Save as Template'}\n          </Text>\n          \n          <Text style={styles.label}>Description (optional):</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"e.g., Heavy chest and triceps day\"\n            placeholderTextColor=\"#666\"\n            value={description}\n            onChangeText={setDescription}\n            multiline\n            numberOfLines={3}\n          />\n\n          <View style={styles.buttons}>\n            <TouchableOpacity style={styles.cancelButton} onPress={handleClose}>\n              <Text style={styles.cancelButtonText}>Cancel</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity style={styles.saveButton} onPress={handleSave}>\n              <Text style={styles.saveButtonText}>\n                {isUpdate ? 'Update' : 'Save'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    backgroundColor: '#111',\n    borderRadius: 20,\n    padding: 24,\n    width: '85%',\n    maxWidth: 400,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  title: {\n    color: '#fff',\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n  },\n  label: {\n    color: '#888',\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: '#000',\n    borderWidth: 1,\n    borderColor: '#333',\n    borderRadius: 8,\n    padding: 12,\n    color: '#fff',\n    fontSize: 16,\n    marginBottom: 24,\n    minHeight: 80,\n    textAlignVertical: 'top',\n  },\n  buttons: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n    backgroundColor: '#222',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  cancelButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    textAlign: 'center',\n    fontWeight: '600',\n  },\n  saveButton: {\n    flex: 1,\n    backgroundColor: '#0a0',\n    padding: 16,\n    borderRadius: 12,\n  },\n  saveButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});\n","size_bytes":3311},"apps/mobile/app/exercise-picker.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  TextInput,\n} from \"react-native\";\nimport { useRouter } from \"expo-router\";\nimport { EXERCISES, EXERCISE_CATEGORIES, type Exercise } from \"@data/exercises\";\nimport { canPerformExercise } from \"@data/utils/equipment-mapping\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport type { Gym } from \"@data/storage/models\";\n\nexport default function ExercisePickerScreen() {\n  const router = useRouter();\n  const { userId } = useAuth();\n  const { getActiveGym } = useData();\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showAvailableOnly, setShowAvailableOnly] = useState(true);\n  const [activeGym, setActiveGym] = useState<Gym | null>(null);\n\n  useEffect(() => {\n    loadActiveGym();\n  }, [userId, loadActiveGym]);\n\n  const loadActiveGym = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    const gym = await getActiveGym(userId);\n    setActiveGym(gym);\n    setShowAvailableOnly(!!gym);\n  }, [getActiveGym, userId]);\n\n  const filteredExercises = EXERCISES.filter((exercise) => {\n    const matchesCategory =\n      !selectedCategory || exercise.category === selectedCategory;\n    const matchesSearch = exercise.name\n      .toLowerCase()\n      .includes(searchQuery.toLowerCase());\n    const matchesEquipment =\n      !showAvailableOnly ||\n      !activeGym ||\n      canPerformExercise(exercise.equipment, activeGym.equipment);\n    return matchesCategory && matchesSearch && matchesEquipment;\n  });\n\n  const handleSelectExercise = (exercise: Exercise) => {\n    router.navigate({\n      pathname: \"/workout\",\n      params: { selectedExerciseId: exercise.id },\n    });\n  };\n\n  const renderCategory = ({\n    item,\n  }: {\n    item: (typeof EXERCISE_CATEGORIES)[0];\n  }) => (\n    <TouchableOpacity\n      style={[\n        styles.categoryButton,\n        selectedCategory === item.id && styles.categoryButtonActive,\n      ]}\n      onPress={() =>\n        setSelectedCategory(selectedCategory === item.id ? null : item.id)\n      }\n    >\n      <Text style={styles.categoryEmoji}>{item.emoji}</Text>\n      <Text\n        style={[\n          styles.categoryText,\n          selectedCategory === item.id && styles.categoryTextActive,\n        ]}\n      >\n        {item.name}\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const renderExercise = ({ item }: { item: Exercise }) => {\n    const isAvailable =\n      !activeGym || canPerformExercise(item.equipment, activeGym.equipment);\n\n    return (\n      <TouchableOpacity\n        style={[\n          styles.exerciseCard,\n          !isAvailable && styles.exerciseCardUnavailable,\n        ]}\n        onPress={() => handleSelectExercise(item)}\n        disabled={!isAvailable}\n      >\n        <View style={styles.exerciseInfo}>\n          <View style={styles.exerciseHeader}>\n            <Text\n              style={[\n                styles.exerciseName,\n                !isAvailable && styles.exerciseNameUnavailable,\n              ]}\n            >\n              {item.name}\n            </Text>\n            {!isAvailable && (\n              <View style={styles.unavailableBadge}>\n                <Text style={styles.unavailableBadgeText}>No Equipment</Text>\n              </View>\n            )}\n          </View>\n          <Text style={styles.exerciseDetails}>\n            {item.equipment} • {item.primaryMuscles.join(\", \")}\n          </Text>\n        </View>\n        <Text style={styles.arrow}>›</Text>\n      </TouchableOpacity>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.searchContainer}>\n        <TextInput\n          style={styles.searchInput}\n          placeholder=\"Search exercises...\"\n          placeholderTextColor=\"#666\"\n          value={searchQuery}\n          onChangeText={setSearchQuery}\n        />\n      </View>\n\n      {activeGym && (\n        <View style={styles.filterContainer}>\n          <View style={styles.gymInfo}>\n            <Text style={styles.gymLabel}>\n              Gym: <Text style={styles.gymName}>{activeGym.name}</Text>\n            </Text>\n          </View>\n          <TouchableOpacity\n            style={styles.filterToggle}\n            onPress={() => setShowAvailableOnly(!showAvailableOnly)}\n          >\n            <Text style={styles.filterToggleText}>\n              {showAvailableOnly ? \"Available Only\" : \"Show All\"}\n            </Text>\n            <View\n              style={[styles.toggle, showAvailableOnly && styles.toggleActive]}\n            >\n              <View\n                style={[\n                  styles.toggleCircle,\n                  showAvailableOnly && styles.toggleCircleActive,\n                ]}\n              />\n            </View>\n          </TouchableOpacity>\n        </View>\n      )}\n\n      <FlatList\n        data={EXERCISE_CATEGORIES}\n        renderItem={renderCategory}\n        keyExtractor={(item) => item.id}\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={styles.categoriesContainer}\n        style={styles.categoriesList}\n      />\n\n      <FlatList\n        data={filteredExercises}\n        renderItem={renderExercise}\n        keyExtractor={(item) => item.id}\n        contentContainerStyle={styles.exercisesContainer}\n        ListEmptyComponent={\n          <View style={styles.emptyState}>\n            <Text style={styles.emptyText}>No exercises found</Text>\n          </View>\n        }\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  searchContainer: {\n    padding: 16,\n    paddingBottom: 8,\n  },\n  searchInput: {\n    backgroundColor: \"#111\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  categoriesList: {\n    flexGrow: 0,\n  },\n  categoriesContainer: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    gap: 8,\n  },\n  categoryButton: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"#111\",\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginRight: 8,\n  },\n  categoryButtonActive: {\n    backgroundColor: \"#0a0\",\n    borderColor: \"#0a0\",\n  },\n  categoryEmoji: {\n    fontSize: 16,\n    marginRight: 6,\n  },\n  categoryText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  categoryTextActive: {\n    color: \"#000\",\n  },\n  exercisesContainer: {\n    padding: 16,\n  },\n  exerciseCard: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  exerciseInfo: {\n    flex: 1,\n  },\n  exerciseHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 8,\n    marginBottom: 4,\n  },\n  exerciseName: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  exerciseNameUnavailable: {\n    color: \"#888\",\n  },\n  exerciseCardUnavailable: {\n    opacity: 0.6,\n  },\n  unavailableBadge: {\n    backgroundColor: \"#ef4444\",\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 8,\n  },\n  unavailableBadgeText: {\n    color: \"#fff\",\n    fontSize: 10,\n    fontWeight: \"600\",\n  },\n  exerciseDetails: {\n    color: \"#888\",\n    fontSize: 14,\n  },\n  arrow: {\n    color: \"#888\",\n    fontSize: 24,\n    fontWeight: \"300\",\n  },\n  filterContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    backgroundColor: \"#1a1a1a\",\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderColor: \"#333\",\n  },\n  gymInfo: {\n    flex: 1,\n  },\n  gymLabel: {\n    color: \"#888\",\n    fontSize: 14,\n  },\n  gymName: {\n    color: \"#10b981\",\n    fontWeight: \"600\",\n  },\n  filterToggle: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 8,\n  },\n  filterToggleText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"500\",\n  },\n  toggle: {\n    width: 50,\n    height: 28,\n    borderRadius: 14,\n    backgroundColor: \"#333\",\n    padding: 2,\n    justifyContent: \"center\",\n  },\n  toggleActive: {\n    backgroundColor: \"#10b981\",\n  },\n  toggleCircle: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: \"#666\",\n  },\n  toggleCircleActive: {\n    backgroundColor: \"#fff\",\n    alignSelf: \"flex-end\",\n  },\n  emptyState: {\n    padding: 32,\n    alignItems: \"center\",\n  },\n  emptyText: {\n    color: \"#888\",\n    fontSize: 16,\n  },\n});\n","size_bytes":8637},"apps/mobile/app/progress.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, Dimensions } from 'react-native';\nimport { useAuth } from './contexts/auth-context';\nimport { useData } from './contexts/data-context';\nimport { useRouter } from 'expo-router';\nimport { exerciseList } from '@data/exercises';\n\nconst { width } = Dimensions.get('window');\nconst CHART_WIDTH = width - 40;\nconst CHART_HEIGHT = 200;\n\nexport default function ProgressScreen() {\n  const { userId } = useAuth();\n  const { getWorkoutStats, getWorkoutFrequency, getVolumeHistory, getPRHistory } = useData();\n  const router = useRouter();\n  \n  const [stats, setStats] = useState({\n    totalWorkouts: 0,\n    totalVolume: 0,\n    averageVolume: 0,\n    currentStreak: 0,\n    longestStreak: 0,\n  });\n  const [frequencyData, setFrequencyData] = useState<Array<{ date: string; count: number }>>([]);\n  const [volumeData, setVolumeData] = useState<Array<{ date: string; volume: number }>>([]);\n  const [prData, setPrData] = useState<Array<{ date: string; weight: number }>>([]);\n  const [selectedExercise, setSelectedExercise] = useState<string>('bench-press');\n  const [timeRange, setTimeRange] = useState(30);\n  const [loading, setLoading] = useState(true);\n\n  const loadData = async () => {\n    if (!userId) return;\n    \n    setLoading(true);\n    try {\n      const [statsData, freqData, volData, prDataResult] = await Promise.all([\n        getWorkoutStats(userId, timeRange),\n        getWorkoutFrequency(userId, timeRange),\n        getVolumeHistory(userId, timeRange),\n        getPRHistory(userId, selectedExercise),\n      ]);\n      \n      setStats(statsData);\n      setFrequencyData(freqData);\n      setVolumeData(volData);\n      setPrData(prDataResult);\n    } catch (error) {\n      console.error('Failed to load analytics:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [userId, timeRange, selectedExercise]);\n\n  const renderBarChart = (data: Array<{ date: string; count?: number; volume?: number; weight?: number }>, label: string) => {\n    if (data.length === 0) {\n      return (\n        <View style={styles.emptyChart}>\n          <Text style={styles.emptyChartText}>No data for this period</Text>\n        </View>\n      );\n    }\n\n    const values = data.map(d => d.count || d.volume || d.weight || 0);\n    const maxValue = Math.max(...values, 1);\n    const barWidth = Math.max(CHART_WIDTH / data.length - 4, 8);\n\n    return (\n      <View style={styles.chartContainer}>\n        <Text style={styles.chartLabel}>{label}</Text>\n        <View style={styles.chart}>\n          {data.map((item, idx) => {\n            const value = item.count || item.volume || item.weight || 0;\n            const heightPercent = (value / maxValue) * 100;\n            \n            return (\n              <View key={idx} style={[styles.barContainer, { width: barWidth }]}>\n                <View style={styles.barWrapper}>\n                  <View \n                    style={[\n                      styles.bar, \n                      { height: `${heightPercent}%` }\n                    ]} \n                  />\n                </View>\n                {data.length <= 14 && idx % 2 === 0 && (\n                  <Text style={styles.barLabel}>\n                    {new Date(item.date).getDate()}\n                  </Text>\n                )}\n              </View>\n            );\n          })}\n        </View>\n        <View style={styles.chartAxis}>\n          <Text style={styles.axisLabel}>\n            {data[0]?.weight !== undefined ? 'All time' : `Last ${timeRange} days`}\n          </Text>\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Progress & Analytics</Text>\n      </View>\n\n      <View style={styles.timeRangeSelector}>\n        {[7, 14, 30, 90].map(days => (\n          <TouchableOpacity\n            key={days}\n            style={[styles.timeRangeButton, timeRange === days && styles.timeRangeButtonActive]}\n            onPress={() => setTimeRange(days)}\n          >\n            <Text style={[styles.timeRangeText, timeRange === days && styles.timeRangeTextActive]}>\n              {days}d\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {loading ? (\n        <View style={styles.loadingContainer}>\n          <Text style={styles.loadingText}>Loading analytics...</Text>\n        </View>\n      ) : (\n        <>\n          <View style={styles.statsGrid}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.totalWorkouts}</Text>\n              <Text style={styles.statLabel}>Workouts</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{Math.round(stats.totalVolume).toLocaleString()}</Text>\n              <Text style={styles.statLabel}>Total Volume (kg)</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{Math.round(stats.averageVolume).toLocaleString()}</Text>\n              <Text style={styles.statLabel}>Avg Volume (kg)</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={[styles.statValue, styles.streakValue]}>🔥 {stats.currentStreak}</Text>\n              <Text style={styles.statLabel}>Current Streak</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.longestStreak}</Text>\n              <Text style={styles.statLabel}>Longest Streak</Text>\n            </View>\n          </View>\n\n          <View style={styles.section}>\n            {renderBarChart(frequencyData, 'Workout Frequency')}\n          </View>\n\n          <View style={styles.section}>\n            {renderBarChart(volumeData, 'Volume Over Time (kg)')}\n          </View>\n\n          <View style={styles.section}>\n            <Text style={styles.chartLabel}>Personal Record Progression</Text>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.exerciseSelector}>\n              {exerciseList.slice(0, 8).map(ex => (\n                <TouchableOpacity\n                  key={ex.id}\n                  style={[\n                    styles.exercisePill,\n                    selectedExercise === ex.id && styles.exercisePillActive\n                  ]}\n                  onPress={() => setSelectedExercise(ex.id)}\n                >\n                  <Text style={[\n                    styles.exercisePillText,\n                    selectedExercise === ex.id && styles.exercisePillTextActive\n                  ]}>\n                    {ex.name}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n            {renderBarChart(prData, `${exerciseList.find(e => e.id === selectedExercise)?.name || 'Exercise'} Max Weight (kg)`)}\n          </View>\n\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Keep it up! 💪</Text>\n            <Text style={styles.sectionSubtext}>\n              {stats.currentStreak > 0 \n                ? `You're on a ${stats.currentStreak}-day streak. Don't break it!` \n                : 'Start a new workout to build your streak!'}\n            </Text>\n          </View>\n        </>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    padding: 20,\n  },\n  header: {\n    marginBottom: 16,\n  },\n  title: {\n    color: '#fff',\n    fontSize: 28,\n    fontWeight: 'bold',\n  },\n  timeRangeSelector: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 24,\n  },\n  timeRangeButton: {\n    flex: 1,\n    backgroundColor: '#111',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n    alignItems: 'center',\n  },\n  timeRangeButtonActive: {\n    backgroundColor: '#0a0',\n    borderColor: '#0a0',\n  },\n  timeRangeText: {\n    color: '#888',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  timeRangeTextActive: {\n    color: '#fff',\n  },\n  loadingContainer: {\n    padding: 48,\n    alignItems: 'center',\n  },\n  loadingText: {\n    color: '#888',\n    fontSize: 16,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n    marginBottom: 24,\n  },\n  statCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: '#111',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n    alignItems: 'center',\n  },\n  statValue: {\n    color: '#0a0',\n    fontSize: 28,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  streakValue: {\n    fontSize: 32,\n  },\n  statLabel: {\n    color: '#888',\n    fontSize: 12,\n    textAlign: 'center',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    color: '#fff',\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  sectionSubtext: {\n    color: '#888',\n    fontSize: 14,\n  },\n  chartContainer: {\n    backgroundColor: '#111',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  chartLabel: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  chart: {\n    height: CHART_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    gap: 2,\n  },\n  barContainer: {\n    height: '100%',\n    alignItems: 'center',\n  },\n  barWrapper: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'flex-end',\n  },\n  bar: {\n    width: '100%',\n    backgroundColor: '#0a0',\n    borderTopLeftRadius: 4,\n    borderTopRightRadius: 4,\n    minHeight: 2,\n  },\n  barLabel: {\n    color: '#666',\n    fontSize: 10,\n    marginTop: 4,\n  },\n  emptyChart: {\n    backgroundColor: '#111',\n    padding: 48,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n    alignItems: 'center',\n  },\n  emptyChartText: {\n    color: '#666',\n    fontSize: 14,\n  },\n  chartAxis: {\n    marginTop: 8,\n    alignItems: 'center',\n  },\n  axisLabel: {\n    color: '#666',\n    fontSize: 12,\n  },\n  exerciseSelector: {\n    marginBottom: 16,\n  },\n  exercisePill: {\n    backgroundColor: '#111',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n  exercisePillActive: {\n    backgroundColor: '#0a0',\n    borderColor: '#0a0',\n  },\n  exercisePillText: {\n    color: '#888',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  exercisePillTextActive: {\n    color: '#fff',\n  },\n});\n","size_bytes":10481},"apps/mobile/app/templates.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useRouter } from \"expo-router\";\nimport { getExerciseById } from \"@data/exercises\";\nimport type { WorkoutTemplate } from \"@data/storage/models\";\n\nexport default function TemplatesScreen() {\n  const { userId } = useAuth();\n  const { getTemplates, deleteTemplate } = useData();\n  const router = useRouter();\n  const [templates, setTemplates] = useState<WorkoutTemplate[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadTemplates = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await getTemplates(userId);\n      setTemplates(data);\n    } catch {\n      Alert.alert(\"Error\", \"Failed to load templates\");\n    } finally {\n      setLoading(false);\n    }\n  }, [getTemplates, userId]);\n\n  useEffect(() => {\n    loadTemplates();\n  }, [userId, loadTemplates]);\n\n  const handleDelete = (template: WorkoutTemplate) => {\n    Alert.alert(\n      \"Delete Template\",\n      `Are you sure you want to delete \"${template.name}\"?`,\n      [\n        { text: \"Cancel\", style: \"cancel\" },\n        {\n          text: \"Delete\",\n          style: \"destructive\",\n          onPress: async () => {\n            try {\n              await deleteTemplate(template.id);\n              await loadTemplates();\n              Alert.alert(\"Success\", \"Template deleted\");\n            } catch {\n              Alert.alert(\"Error\", \"Failed to delete template\");\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const handleStartWorkout = (template: WorkoutTemplate) => {\n    router.push({\n      pathname: \"/workout\",\n      params: { templateId: template.id },\n    });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Workout Templates</Text>\n        <Text style={styles.subtitle}>\n          {templates.length} template{templates.length !== 1 ? \"s\" : \"\"}\n        </Text>\n      </View>\n\n      {loading ? (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>Loading templates...</Text>\n        </View>\n      ) : templates.length === 0 ? (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>No templates yet</Text>\n          <Text style={styles.emptySubtext}>\n            Save a workout as a template to reuse it later\n          </Text>\n        </View>\n      ) : (\n        templates.map((template) => (\n          <View key={template.id} style={styles.templateCard}>\n            <View style={styles.templateHeader}>\n              <View style={styles.templateInfo}>\n                <Text style={styles.templateName}>{template.name}</Text>\n                {template.description && (\n                  <Text style={styles.templateDescription}>\n                    {template.description}\n                  </Text>\n                )}\n                <Text style={styles.templateMeta}>\n                  {template.exercises.length} exercise\n                  {template.exercises.length !== 1 ? \"s\" : \"\"}\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.exercisesList}>\n              {template.exercises.map((ex, idx) => {\n                const exerciseData = getExerciseById(ex.exercise_id);\n                return (\n                  <View key={idx} style={styles.exerciseItem}>\n                    <Text style={styles.exerciseBullet}>•</Text>\n                    <Text style={styles.exerciseText}>\n                      {exerciseData?.name || ex.exercise_id}\n                    </Text>\n                    <Text style={styles.exerciseSets}>\n                      {ex.default_sets} sets\n                      {ex.default_weight_kg && ` × ${ex.default_weight_kg}kg`}\n                      {ex.default_reps && ` × ${ex.default_reps} reps`}\n                    </Text>\n                  </View>\n                );\n              })}\n            </View>\n\n            <View style={styles.templateActions}>\n              <TouchableOpacity\n                style={styles.startButton}\n                onPress={() => handleStartWorkout(template)}\n              >\n                <Text style={styles.startButtonText}>Start Workout</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={styles.deleteButton}\n                onPress={() => handleDelete(template)}\n              >\n                <Text style={styles.deleteButtonText}>Delete</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        ))\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n    padding: 20,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 28,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  subtitle: {\n    color: \"#888\",\n    fontSize: 16,\n  },\n  emptyState: {\n    padding: 48,\n    alignItems: \"center\",\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  emptyText: {\n    color: \"#888\",\n    fontSize: 18,\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    color: \"#666\",\n    fontSize: 14,\n    textAlign: \"center\",\n  },\n  templateCard: {\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  templateHeader: {\n    marginBottom: 12,\n  },\n  templateInfo: {\n    flex: 1,\n  },\n  templateName: {\n    color: \"#fff\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  templateDescription: {\n    color: \"#888\",\n    fontSize: 14,\n    marginBottom: 4,\n  },\n  templateMeta: {\n    color: \"#0a0\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  exercisesList: {\n    marginBottom: 16,\n  },\n  exerciseItem: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingVertical: 4,\n  },\n  exerciseBullet: {\n    color: \"#0a0\",\n    fontSize: 16,\n    marginRight: 8,\n  },\n  exerciseText: {\n    color: \"#fff\",\n    fontSize: 14,\n    flex: 1,\n  },\n  exerciseSets: {\n    color: \"#888\",\n    fontSize: 12,\n  },\n  templateActions: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  startButton: {\n    flex: 1,\n    backgroundColor: \"#0a0\",\n    padding: 14,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  startButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  deleteButton: {\n    backgroundColor: \"#222\",\n    padding: 14,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#f00\",\n    paddingHorizontal: 20,\n  },\n  deleteButtonText: {\n    color: \"#f00\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":6842},"apps/mobile/app/contexts/preferences-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, useMemo, useRef } from 'react';\nimport { database } from '../lib/database';\nimport { useAuth } from './auth-context';\n\ntype UnitSystem = 'metric' | 'imperial';\ntype Theme = 'dark' | 'light';\n\ninterface PreferencesContextType {\n  unitSystem: UnitSystem;\n  theme: Theme;\n  setUnitSystem: (system: UnitSystem) => Promise<void>;\n  setTheme: (theme: Theme) => Promise<void>;\n  loading: boolean;\n}\n\nconst PreferencesContext = createContext<PreferencesContextType | undefined>(undefined);\n\nconst PreferencesProviderInner = ({ children, userId }: { children: React.ReactNode; userId: string | null }) => {\n  const [unitSystem, setUnitSystemState] = useState<UnitSystem>('metric');\n  const [theme, setThemeState] = useState<Theme>('dark');\n  const [loading, setLoading] = useState(true);\n  const [isDbReady, setIsDbReady] = useState(false);\n\n  useEffect(() => {\n    database.init().then(() => setIsDbReady(true)).catch(err => {\n      console.error('Failed to initialize database in PreferencesProvider:', err);\n      setIsDbReady(true);\n    });\n  }, []);\n\n  useEffect(() => {\n    const loadPreferences = async () => {\n      if (!isDbReady) {\n        return;\n      }\n\n      if (!userId) {\n        setLoading(false);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const prefs = await database.getUserPreferences(userId);\n        if (prefs) {\n          setUnitSystemState(prefs.unit_system as UnitSystem);\n          setThemeState(prefs.theme as Theme);\n        }\n      } catch (error) {\n        console.error('Failed to load preferences:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPreferences();\n  }, [userId, isDbReady]);\n\n  const setUnitSystem = async (system: UnitSystem) => {\n    if (!userId) return;\n    \n    setUnitSystemState(system);\n    try {\n      await database.saveUserPreferences(userId, { unit_system: system });\n    } catch (error) {\n      console.error('Failed to save unit system:', error);\n    }\n  };\n\n  const setTheme = async (newTheme: Theme) => {\n    if (!userId) return;\n    \n    setThemeState(newTheme);\n    try {\n      await database.saveUserPreferences(userId, { theme: newTheme });\n    } catch (error) {\n      console.error('Failed to save theme:', error);\n    }\n  };\n\n  const value = useMemo(\n    () => ({\n      unitSystem,\n      theme,\n      setUnitSystem,\n      setTheme,\n      loading,\n    }),\n    [unitSystem, theme, loading]\n  );\n\n  return (\n    <PreferencesContext.Provider value={value}>\n      {children}\n    </PreferencesContext.Provider>\n  );\n};\n\nexport const PreferencesProvider = ({ children }: { children: React.ReactNode }) => {\n  const { userId } = useAuth();\n  return <PreferencesProviderInner key={userId || 'no-user'} userId={userId}>{children}</PreferencesProviderInner>;\n};\n\nexport const usePreferences = () => {\n  const context = useContext(PreferencesContext);\n  if (!context) {\n    throw new Error('usePreferences must be used within PreferencesProvider');\n  }\n  return context;\n};\n","size_bytes":3041},"apps/mobile/app/settings.tsx":{"content":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, ScrollView, Alert } from 'react-native';\nimport { useAuth } from './contexts/auth-context';\nimport { usePreferences } from './contexts/preferences-context';\nimport { useRouter } from 'expo-router';\n\nexport default function SettingsScreen() {\n  const { session, supabase } = useAuth();\n  const { unitSystem, setUnitSystem, loading } = usePreferences();\n  const router = useRouter();\n\n  const handleSignOut = async () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Sign Out',\n          style: 'destructive',\n          onPress: async () => {\n            await supabase.auth.signOut();\n            router.replace('/login');\n          }\n        }\n      ]\n    );\n  };\n\n  const toggleUnitSystem = async () => {\n    await setUnitSystem(unitSystem === 'metric' ? 'imperial' : 'metric');\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Settings</Text>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Account</Text>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>Email</Text>\n          <Text style={styles.infoValue}>{session?.user?.email || 'Not available'}</Text>\n        </View>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>User ID</Text>\n          <Text style={styles.infoValue}>{session?.user?.id?.slice(0, 8) || 'Not available'}...</Text>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Fitness Settings</Text>\n        \n        <TouchableOpacity \n          style={styles.navigationRow}\n          onPress={() => router.push('/gyms')}\n        >\n          <View>\n            <Text style={styles.settingLabel}>My Gyms</Text>\n            <Text style={styles.settingDescription}>\n              Manage gym profiles and equipment\n            </Text>\n          </View>\n          <Text style={styles.chevron}>›</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Preferences</Text>\n        \n        <TouchableOpacity \n          style={styles.settingRow}\n          onPress={toggleUnitSystem}\n          disabled={loading}\n        >\n          <View>\n            <Text style={styles.settingLabel}>Unit System</Text>\n            <Text style={styles.settingDescription}>\n              {unitSystem === 'metric' ? 'Metric (kg, km)' : 'Imperial (lbs, miles)'}\n            </Text>\n          </View>\n          <View style={[styles.toggle, unitSystem === 'imperial' && styles.toggleActive]}>\n            <View style={[styles.toggleCircle, unitSystem === 'imperial' && styles.toggleCircleActive]} />\n          </View>\n        </TouchableOpacity>\n\n        <View style={styles.settingRow}>\n          <View>\n            <Text style={styles.settingLabel}>Theme</Text>\n            <Text style={styles.settingDescription}>Dark mode</Text>\n          </View>\n          <View style={[styles.toggle, styles.toggleActive]}>\n            <View style={[styles.toggleCircle, styles.toggleCircleActive]} />\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>About</Text>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>App Version</Text>\n          <Text style={styles.infoValue}>1.0.0</Text>\n        </View>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>Build</Text>\n          <Text style={styles.infoValue}>Mobile (Expo)</Text>\n        </View>\n      </View>\n\n      <TouchableOpacity style={styles.signOutButton} onPress={handleSignOut}>\n        <Text style={styles.signOutText}>Sign Out</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000',\n    padding: 20,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    color: '#fff',\n    fontSize: 32,\n    fontWeight: 'bold',\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionTitle: {\n    color: '#0a0',\n    fontSize: 14,\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    marginBottom: 12,\n    letterSpacing: 1,\n  },\n  infoCard: {\n    backgroundColor: '#111',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n    marginBottom: 8,\n  },\n  infoLabel: {\n    color: '#888',\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  infoValue: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  navigationRow: {\n    backgroundColor: '#111',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n    marginBottom: 8,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  settingRow: {\n    backgroundColor: '#111',\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#333',\n    marginBottom: 8,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  chevron: {\n    color: '#888',\n    fontSize: 24,\n    fontWeight: '300',\n  },\n  settingLabel: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  settingDescription: {\n    color: '#888',\n    fontSize: 14,\n  },\n  toggle: {\n    width: 50,\n    height: 28,\n    borderRadius: 14,\n    backgroundColor: '#333',\n    padding: 2,\n    justifyContent: 'center',\n  },\n  toggleActive: {\n    backgroundColor: '#0a0',\n  },\n  toggleCircle: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: '#666',\n  },\n  toggleCircleActive: {\n    backgroundColor: '#fff',\n    alignSelf: 'flex-end',\n  },\n  signOutButton: {\n    backgroundColor: '#a00',\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 16,\n    marginBottom: 32,\n  },\n  signOutText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n","size_bytes":6121},"apps/mobile/app/hooks/use-unit-conversion.ts":{"content":"import { usePreferences } from '../contexts/preferences-context';\nimport { convertWeight, formatWeight } from '@data/utils/unit-conversions';\n\nexport function useUnitConversion() {\n  const { unitSystem } = usePreferences();\n\n  const displayWeight = (weightKg: number | null | undefined): string => {\n    if (weightKg === null || weightKg === undefined) return '0';\n    \n    if (unitSystem === 'imperial') {\n      const lbs = convertWeight(weightKg, 'kg', 'lbs');\n      return formatWeight(lbs, 'lbs');\n    }\n    \n    return formatWeight(weightKg, 'kg');\n  };\n\n  const parseWeight = (displayValue: string): number => {\n    const value = parseFloat(displayValue) || 0;\n    \n    if (unitSystem === 'imperial') {\n      return convertWeight(value, 'lbs', 'kg');\n    }\n    \n    return value;\n  };\n\n  const weightUnit = unitSystem === 'metric' ? 'kg' : 'lbs';\n\n  return {\n    displayWeight,\n    parseWeight,\n    weightUnit,\n    unitSystem,\n  };\n}\n","size_bytes":940},"apps/mobile/app/measurements-history.tsx":{"content":"import {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  RefreshControl,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useRouter } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useUnitConversion } from \"./_hooks/use-unit-conversion\";\n\ninterface BodyMeasurement {\n  id: string;\n  user_id: string;\n  measurement_date: string;\n  weight_kg?: number;\n  body_fat_percentage?: number;\n  chest_cm?: number;\n  waist_cm?: number;\n  hips_cm?: number;\n  left_arm_cm?: number;\n  right_arm_cm?: number;\n  left_thigh_cm?: number;\n  right_thigh_cm?: number;\n  notes?: string;\n  created_at: string;\n}\n\nexport default function MeasurementsHistoryScreen() {\n  const router = useRouter();\n  const { userId } = useAuth();\n  const { getBodyMeasurements, deleteBodyMeasurement } = useData();\n  const { displayWeight, weightUnit } = useUnitConversion();\n\n  const [measurements, setMeasurements] = useState<BodyMeasurement[]>([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const loadMeasurements = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    try {\n      const data = await getBodyMeasurements(userId);\n      setMeasurements(data);\n    } catch (error) {\n      console.error(\"Error loading measurements:\", error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  }, [userId, getBodyMeasurements]);\n\n  useEffect(() => {\n    loadMeasurements();\n  }, [loadMeasurements]);\n\n  const onRefresh = useCallback(() => {\n    setRefreshing(true);\n    loadMeasurements();\n  }, [loadMeasurements]);\n\n  const handleDelete = (measurementId: string) => {\n    Alert.alert(\n      \"Delete Measurement\",\n      \"Are you sure you want to delete this measurement?\",\n      [\n        { text: \"Cancel\", style: \"cancel\" },\n        {\n          text: \"Delete\",\n          style: \"destructive\",\n          onPress: async () => {\n            try {\n              await deleteBodyMeasurement(measurementId);\n              await loadMeasurements();\n            } catch (error) {\n              console.error(\"Error deleting measurement:\", error);\n              Alert.alert(\"Error\", \"Failed to delete measurement\");\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n  };\n\n  const renderMeasurement = (measurement: BodyMeasurement) => {\n    const hasMeasurements =\n      measurement.weight_kg ||\n      measurement.body_fat_percentage ||\n      measurement.chest_cm ||\n      measurement.waist_cm ||\n      measurement.hips_cm ||\n      measurement.left_arm_cm ||\n      measurement.right_arm_cm ||\n      measurement.left_thigh_cm ||\n      measurement.right_thigh_cm;\n\n    return (\n      <View key={measurement.id} style={styles.measurementCard}>\n        <View style={styles.cardHeader}>\n          <Text style={styles.dateText}>\n            {formatDate(measurement.measurement_date)}\n          </Text>\n          <TouchableOpacity onPress={() => handleDelete(measurement.id)}>\n            <Text style={styles.deleteButton}>🗑️</Text>\n          </TouchableOpacity>\n        </View>\n\n        {hasMeasurements ? (\n          <View style={styles.measurementsGrid}>\n            {measurement.weight_kg && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>Weight</Text>\n                <Text style={styles.measurementValue}>\n                  {displayWeight(measurement.weight_kg)} {weightUnit}\n                </Text>\n              </View>\n            )}\n            {measurement.body_fat_percentage && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>Body Fat</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.body_fat_percentage.toFixed(1)}%\n                </Text>\n              </View>\n            )}\n            {measurement.chest_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>Chest</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.chest_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n            {measurement.waist_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>Waist</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.waist_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n            {measurement.hips_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>Hips</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.hips_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n            {measurement.left_arm_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>L Arm</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.left_arm_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n            {measurement.right_arm_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>R Arm</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.right_arm_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n            {measurement.left_thigh_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>L Thigh</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.left_thigh_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n            {measurement.right_thigh_cm && (\n              <View style={styles.measurementItem}>\n                <Text style={styles.measurementLabel}>R Thigh</Text>\n                <Text style={styles.measurementValue}>\n                  {measurement.right_thigh_cm.toFixed(1)} cm\n                </Text>\n              </View>\n            )}\n          </View>\n        ) : null}\n\n        {measurement.notes && (\n          <View style={styles.notesSection}>\n            <Text style={styles.notesText}>{measurement.notes}</Text>\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity\n          onPress={() => router.back()}\n          style={styles.backButton}\n        >\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n        <Text style={styles.title}>Measurements History</Text>\n        <TouchableOpacity\n          onPress={() => router.push(\"/measurements\")}\n          style={styles.addButton}\n        >\n          <Text style={styles.addButtonText}>+ Add</Text>\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView\n        style={styles.scrollView}\n        contentContainerStyle={styles.scrollContent}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            tintColor=\"#0a0\"\n          />\n        }\n      >\n        {loading ? (\n          <Text style={styles.emptyText}>Loading...</Text>\n        ) : measurements.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Text style={styles.emptyText}>No measurements yet</Text>\n            <Text style={styles.emptySubtext}>\n              Tap + Add to record your first measurement\n            </Text>\n          </View>\n        ) : (\n          measurements.map(renderMeasurement)\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n    paddingTop: Platform.OS === \"ios\" ? 60 : 40,\n    paddingBottom: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n  },\n  backButton: {\n    padding: 8,\n  },\n  backButtonText: {\n    color: \"#0a0\",\n    fontSize: 16,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n  },\n  addButton: {\n    padding: 8,\n  },\n  addButtonText: {\n    color: \"#0a0\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  scrollView: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 16,\n  },\n  measurementCard: {\n    backgroundColor: \"#111\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  cardHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  dateText: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n  },\n  deleteButton: {\n    fontSize: 20,\n  },\n  measurementsGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 8,\n  },\n  measurementItem: {\n    width: \"48%\",\n    marginBottom: 12,\n    marginRight: \"4%\",\n  },\n  measurementLabel: {\n    fontSize: 12,\n    color: \"#888\",\n    marginBottom: 4,\n  },\n  measurementValue: {\n    fontSize: 16,\n    color: \"#0a0\",\n    fontWeight: \"bold\",\n  },\n  notesSection: {\n    marginTop: 12,\n    paddingTop: 12,\n    borderTopWidth: 1,\n    borderTopColor: \"#333\",\n  },\n  notesText: {\n    fontSize: 14,\n    color: \"#ccc\",\n    fontStyle: \"italic\",\n  },\n  emptyState: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingVertical: 60,\n  },\n  emptyText: {\n    fontSize: 18,\n    color: \"#888\",\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    fontSize: 14,\n    color: \"#666\",\n  },\n});\n","size_bytes":10058},"apps/mobile/app/measurements.tsx":{"content":"import {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { useState } from \"react\";\nimport { useRouter } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useUnitConversion } from \"./_hooks/use-unit-conversion\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\n\nexport default function MeasurementsScreen() {\n  const router = useRouter();\n  const { userId } = useAuth();\n  const { saveBodyMeasurement } = useData();\n  const { parseWeight, weightUnit } = useUnitConversion();\n\n  const [date, setDate] = useState(new Date());\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [weight, setWeight] = useState(\"\");\n  const [bodyFat, setBodyFat] = useState(\"\");\n  const [chest, setChest] = useState(\"\");\n  const [waist, setWaist] = useState(\"\");\n  const [hips, setHips] = useState(\"\");\n  const [leftArm, setLeftArm] = useState(\"\");\n  const [rightArm, setRightArm] = useState(\"\");\n  const [leftThigh, setLeftThigh] = useState(\"\");\n  const [rightThigh, setRightThigh] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n\n  const handleSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    if (\n      !weight &&\n      !bodyFat &&\n      !chest &&\n      !waist &&\n      !hips &&\n      !leftArm &&\n      !rightArm &&\n      !leftThigh &&\n      !rightThigh\n    ) {\n      Alert.alert(\"No Data\", \"Please enter at least one measurement\");\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const measurement = {\n        id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        user_id: userId,\n        measurement_date: date.toISOString(),\n        weight_kg: weight ? parseWeight(weight) : undefined,\n        body_fat_percentage: bodyFat ? parseFloat(bodyFat) : undefined,\n        chest_cm: chest ? parseFloat(chest) : undefined,\n        waist_cm: waist ? parseFloat(waist) : undefined,\n        hips_cm: hips ? parseFloat(hips) : undefined,\n        left_arm_cm: leftArm ? parseFloat(leftArm) : undefined,\n        right_arm_cm: rightArm ? parseFloat(rightArm) : undefined,\n        left_thigh_cm: leftThigh ? parseFloat(leftThigh) : undefined,\n        right_thigh_cm: rightThigh ? parseFloat(rightThigh) : undefined,\n        notes: notes || undefined,\n        created_at: new Date().toISOString(),\n      };\n\n      await saveBodyMeasurement(measurement);\n      Alert.alert(\"Success\", \"Measurements saved!\", [\n        { text: \"OK\", onPress: () => router.back() },\n      ]);\n    } catch (error) {\n      console.error(\"Error saving measurement:\", error);\n      Alert.alert(\"Error\", \"Failed to save measurement. Please try again.\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const onDateChange = (event: any, selectedDate?: Date) => {\n    setShowDatePicker(Platform.OS === \"ios\");\n    if (selectedDate) {\n      setDate(selectedDate);\n    }\n  };\n\n  const formatDisplayDate = (displayDate: Date) => {\n    return displayDate.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity\n          onPress={() => router.back()}\n          style={styles.backButton}\n        >\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n        <Text style={styles.title}>Add Measurements</Text>\n        <View style={styles.headerRight} />\n      </View>\n\n      <ScrollView\n        style={styles.scrollView}\n        contentContainerStyle={styles.scrollContent}\n      >\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Date</Text>\n          <TouchableOpacity\n            style={styles.datePickerButton}\n            onPress={() => setShowDatePicker(true)}\n          >\n            <Text style={styles.datePickerText}>{formatDisplayDate(date)}</Text>\n          </TouchableOpacity>\n          {showDatePicker && (\n            <DateTimePicker\n              value={date}\n              mode=\"date\"\n              display={Platform.OS === \"ios\" ? \"spinner\" : \"default\"}\n              onChange={onDateChange}\n              maximumDate={new Date()}\n            />\n          )}\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Body Composition</Text>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Weight ({weightUnit})</Text>\n            <TextInput\n              style={styles.input}\n              value={weight}\n              onChangeText={setWeight}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Body Fat (%)</Text>\n            <TextInput\n              style={styles.input}\n              value={bodyFat}\n              onChangeText={setBodyFat}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Measurements (cm)</Text>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Chest</Text>\n            <TextInput\n              style={styles.input}\n              value={chest}\n              onChangeText={setChest}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Waist</Text>\n            <TextInput\n              style={styles.input}\n              value={waist}\n              onChangeText={setWaist}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Hips</Text>\n            <TextInput\n              style={styles.input}\n              value={hips}\n              onChangeText={setHips}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Left Arm</Text>\n            <TextInput\n              style={styles.input}\n              value={leftArm}\n              onChangeText={setLeftArm}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Right Arm</Text>\n            <TextInput\n              style={styles.input}\n              value={rightArm}\n              onChangeText={setRightArm}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Left Thigh</Text>\n            <TextInput\n              style={styles.input}\n              value={leftThigh}\n              onChangeText={setLeftThigh}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n          <View style={styles.inputRow}>\n            <Text style={styles.inputLabel}>Right Thigh</Text>\n            <TextInput\n              style={styles.input}\n              value={rightThigh}\n              onChangeText={setRightThigh}\n              placeholder=\"0\"\n              placeholderTextColor=\"#666\"\n              keyboardType=\"decimal-pad\"\n            />\n          </View>\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Notes</Text>\n          <TextInput\n            style={[styles.input, styles.textArea]}\n            value={notes}\n            onChangeText={setNotes}\n            placeholder=\"Add any notes...\"\n            placeholderTextColor=\"#666\"\n            multiline\n            numberOfLines={4}\n          />\n        </View>\n\n        <TouchableOpacity\n          style={[styles.saveButton, saving && styles.saveButtonDisabled]}\n          onPress={handleSave}\n          disabled={saving}\n        >\n          <Text style={styles.saveButtonText}>\n            {saving ? \"Saving...\" : \"Save Measurements\"}\n          </Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    paddingHorizontal: 16,\n    paddingTop: Platform.OS === \"ios\" ? 60 : 40,\n    paddingBottom: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#333\",\n  },\n  backButton: {\n    padding: 8,\n  },\n  backButtonText: {\n    color: \"#0a0\",\n    fontSize: 16,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n  },\n  headerRight: {\n    width: 60,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  scrollContent: {\n    padding: 16,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 12,\n  },\n  inputRow: {\n    marginBottom: 12,\n  },\n  inputLabel: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 4,\n  },\n  input: {\n    backgroundColor: \"#111\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  textArea: {\n    height: 100,\n    textAlignVertical: \"top\",\n  },\n  datePickerButton: {\n    backgroundColor: \"#111\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n  },\n  datePickerText: {\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  saveButton: {\n    backgroundColor: \"#0a0\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginTop: 8,\n    marginBottom: 32,\n  },\n  saveButtonDisabled: {\n    backgroundColor: \"#555\",\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":10403},"packages/data/src/achievements.ts":{"content":"export type AchievementCategory = \n  | 'workouts'\n  | 'strength'\n  | 'consistency'\n  | 'weight'\n  | 'volume';\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  category: AchievementCategory;\n  icon: string;\n  requirement: {\n    type: 'workout_count' | 'streak_days' | 'total_volume' | 'max_weight' | 'weight_lost' | 'weight_gained';\n    value: number;\n    exercise_id?: string;\n  };\n  tier: 'bronze' | 'silver' | 'gold' | 'platinum';\n}\n\nexport const ACHIEVEMENTS: Achievement[] = [\n  {\n    id: 'first_workout',\n    name: 'Getting Started',\n    description: 'Complete your first workout',\n    category: 'workouts',\n    icon: '🎯',\n    requirement: { type: 'workout_count', value: 1 },\n    tier: 'bronze',\n  },\n  {\n    id: 'workout_10',\n    name: 'Committed',\n    description: 'Complete 10 workouts',\n    category: 'workouts',\n    icon: '💪',\n    requirement: { type: 'workout_count', value: 10 },\n    tier: 'bronze',\n  },\n  {\n    id: 'workout_25',\n    name: 'Regular',\n    description: 'Complete 25 workouts',\n    category: 'workouts',\n    icon: '🔥',\n    requirement: { type: 'workout_count', value: 25 },\n    tier: 'silver',\n  },\n  {\n    id: 'workout_50',\n    name: 'Dedicated',\n    description: 'Complete 50 workouts',\n    category: 'workouts',\n    icon: '⭐',\n    requirement: { type: 'workout_count', value: 50 },\n    tier: 'silver',\n  },\n  {\n    id: 'workout_100',\n    name: 'Century',\n    description: 'Complete 100 workouts',\n    category: 'workouts',\n    icon: '💯',\n    requirement: { type: 'workout_count', value: 100 },\n    tier: 'gold',\n  },\n  {\n    id: 'workout_250',\n    name: 'Elite',\n    description: 'Complete 250 workouts',\n    category: 'workouts',\n    icon: '👑',\n    requirement: { type: 'workout_count', value: 250 },\n    tier: 'platinum',\n  },\n  {\n    id: 'streak_3',\n    name: 'Getting Consistent',\n    description: 'Maintain a 3-day workout streak',\n    category: 'consistency',\n    icon: '🔥',\n    requirement: { type: 'streak_days', value: 3 },\n    tier: 'bronze',\n  },\n  {\n    id: 'streak_7',\n    name: 'Week Warrior',\n    description: 'Maintain a 7-day workout streak',\n    category: 'consistency',\n    icon: '📅',\n    requirement: { type: 'streak_days', value: 7 },\n    tier: 'silver',\n  },\n  {\n    id: 'streak_14',\n    name: 'Two Weeks Strong',\n    description: 'Maintain a 14-day workout streak',\n    category: 'consistency',\n    icon: '🎖️',\n    requirement: { type: 'streak_days', value: 14 },\n    tier: 'silver',\n  },\n  {\n    id: 'streak_30',\n    name: 'Monthly Master',\n    description: 'Maintain a 30-day workout streak',\n    category: 'consistency',\n    icon: '🏆',\n    requirement: { type: 'streak_days', value: 30 },\n    tier: 'gold',\n  },\n  {\n    id: 'streak_100',\n    name: 'Unstoppable',\n    description: 'Maintain a 100-day workout streak',\n    category: 'consistency',\n    icon: '🌟',\n    requirement: { type: 'streak_days', value: 100 },\n    tier: 'platinum',\n  },\n  {\n    id: 'volume_10000',\n    name: 'Volume Beginner',\n    description: 'Lift 10,000 kg total volume',\n    category: 'volume',\n    icon: '🏋️',\n    requirement: { type: 'total_volume', value: 10000 },\n    tier: 'bronze',\n  },\n  {\n    id: 'volume_50000',\n    name: 'Volume Enthusiast',\n    description: 'Lift 50,000 kg total volume',\n    category: 'volume',\n    icon: '💪',\n    requirement: { type: 'total_volume', value: 50000 },\n    tier: 'silver',\n  },\n  {\n    id: 'volume_100000',\n    name: 'Volume Beast',\n    description: 'Lift 100,000 kg total volume',\n    category: 'volume',\n    icon: '🔱',\n    requirement: { type: 'total_volume', value: 100000 },\n    tier: 'gold',\n  },\n  {\n    id: 'volume_250000',\n    name: 'Volume Legend',\n    description: 'Lift 250,000 kg total volume',\n    category: 'volume',\n    icon: '👹',\n    requirement: { type: 'total_volume', value: 250000 },\n    tier: 'platinum',\n  },\n  {\n    id: 'bench_100',\n    name: 'Bench Press Novice',\n    description: 'Bench press 100 kg',\n    category: 'strength',\n    icon: '🏋️‍♂️',\n    requirement: { type: 'max_weight', value: 100, exercise_id: 'bench_press' },\n    tier: 'silver',\n  },\n  {\n    id: 'squat_100',\n    name: 'Squat Strength',\n    description: 'Squat 100 kg',\n    category: 'strength',\n    icon: '🦵',\n    requirement: { type: 'max_weight', value: 100, exercise_id: 'squat' },\n    tier: 'silver',\n  },\n  {\n    id: 'deadlift_100',\n    name: 'Deadlift Power',\n    description: 'Deadlift 100 kg',\n    category: 'strength',\n    icon: '💀',\n    requirement: { type: 'max_weight', value: 100, exercise_id: 'deadlift' },\n    tier: 'silver',\n  },\n  {\n    id: 'bench_150',\n    name: 'Bench Press Intermediate',\n    description: 'Bench press 150 kg',\n    category: 'strength',\n    icon: '🏋️‍♂️',\n    requirement: { type: 'max_weight', value: 150, exercise_id: 'bench_press' },\n    tier: 'gold',\n  },\n  {\n    id: 'squat_150',\n    name: 'Squat Master',\n    description: 'Squat 150 kg',\n    category: 'strength',\n    icon: '🦵',\n    requirement: { type: 'max_weight', value: 150, exercise_id: 'squat' },\n    tier: 'gold',\n  },\n  {\n    id: 'deadlift_200',\n    name: 'Deadlift Beast',\n    description: 'Deadlift 200 kg',\n    category: 'strength',\n    icon: '💀',\n    requirement: { type: 'max_weight', value: 200, exercise_id: 'deadlift' },\n    tier: 'gold',\n  },\n];\n\nexport const getAchievementsByCategory = (category: AchievementCategory): Achievement[] => {\n  return ACHIEVEMENTS.filter(a => a.category === category);\n};\n\nexport const getAchievementById = (id: string): Achievement | undefined => {\n  return ACHIEVEMENTS.find(a => a.id === id);\n};\n\nexport const getTierColor = (tier: Achievement['tier']): string => {\n  const colors = {\n    bronze: '#CD7F32',\n    silver: '#C0C0C0',\n    gold: '#FFD700',\n    platinum: '#E5E4E2',\n  };\n  return colors[tier];\n};\n","size_bytes":5844},"apps/mobile/app/goals-list.tsx":{"content":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  RefreshControl,\n  Alert,\n} from \"react-native\";\nimport { router } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData, type Goal } from \"./_contexts/data-context\";\nimport { useUnitConversion } from \"./_hooks/use-unit-conversion\";\n\nexport default function GoalsListScreen() {\n  const { userId } = useAuth();\n  const { getGoals, deleteGoal } = useData();\n  const { displayWeight } = useUnitConversion();\n  const [goals, setGoals] = useState<Goal[]>([]);\n  const [activeFilter, setActiveFilter] = useState<\n    \"all\" | \"active\" | \"completed\"\n  >(\"active\");\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const loadGoals = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    try {\n      const status = activeFilter === \"all\" ? undefined : activeFilter;\n      const data = await getGoals(userId, status);\n      setGoals(data);\n    } catch (error) {\n      console.error(\"Error loading goals:\", error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  }, [userId, getGoals, activeFilter]);\n\n  useEffect(() => {\n    loadGoals();\n  }, [loadGoals]);\n\n  const onRefresh = () => {\n    setRefreshing(true);\n    loadGoals();\n  };\n\n  const handleDeleteGoal = (goalId: string) => {\n    Alert.alert(\"Delete Goal\", \"Are you sure you want to delete this goal?\", [\n      { text: \"Cancel\", style: \"cancel\" },\n      {\n        text: \"Delete\",\n        style: \"destructive\",\n        onPress: async () => {\n          await deleteGoal(goalId);\n          loadGoals();\n        },\n      },\n    ]);\n  };\n\n  const getGoalTypeLabel = (type: string): string => {\n    const labels: Record<string, string> = {\n      weight_loss: \"Weight Loss\",\n      weight_gain: \"Weight Gain\",\n      strength: \"Strength Goal\",\n      workout_frequency: \"Workout Frequency\",\n      body_fat: \"Body Fat %\",\n    };\n    return labels[type] || type;\n  };\n\n  const calculateProgress = (goal: Goal): number => {\n    if (!goal.current_value) {\n      return 0;\n    }\n    const progress = (goal.current_value / goal.target_value) * 100;\n    return Math.min(progress, 100);\n  };\n\n  const formatGoalValue = (goal: Goal, value: number): string => {\n    switch (goal.goal_type) {\n      case \"weight_loss\":\n      case \"weight_gain\":\n        return displayWeight(value);\n      case \"strength\":\n        return `${displayWeight(value)}`;\n      case \"workout_frequency\":\n        return `${value} workouts`;\n      case \"body_fat\":\n        return `${value.toFixed(1)}%`;\n      default:\n        return value.toString();\n    }\n  };\n\n  const renderGoalCard = (goal: Goal) => {\n    const progress = calculateProgress(goal);\n    const isCompleted = goal.status === \"completed\";\n    const isActive = goal.status === \"active\";\n\n    return (\n      <View\n        key={goal.id}\n        style={[styles.goalCard, isCompleted && styles.completedCard]}\n      >\n        <View style={styles.goalHeader}>\n          <View style={styles.goalTitleContainer}>\n            <Text style={styles.goalType}>\n              {getGoalTypeLabel(goal.goal_type)}\n            </Text>\n            {isCompleted && (\n              <Text style={styles.completedBadge}>✓ Completed</Text>\n            )}\n            {isActive && <Text style={styles.activeBadge}>Active</Text>}\n          </View>\n          <TouchableOpacity onPress={() => handleDeleteGoal(goal.id)}>\n            <Text style={styles.deleteButton}>🗑️</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.goalInfo}>\n          <Text style={styles.goalTarget}>\n            Target: {formatGoalValue(goal, goal.target_value)}\n          </Text>\n          {goal.current_value !== undefined && (\n            <Text style={styles.goalCurrent}>\n              Current: {formatGoalValue(goal, goal.current_value)}\n            </Text>\n          )}\n        </View>\n\n        {goal.current_value !== undefined && (\n          <View style={styles.progressContainer}>\n            <View style={styles.progressBar}>\n              <View style={[styles.progressFill, { width: `${progress}%` }]} />\n            </View>\n            <Text style={styles.progressText}>{progress.toFixed(0)}%</Text>\n          </View>\n        )}\n\n        {goal.target_date && (\n          <Text style={styles.targetDate}>\n            Target Date: {new Date(goal.target_date).toLocaleDateString()}\n          </Text>\n        )}\n\n        {goal.notes && <Text style={styles.goalNotes}>{goal.notes}</Text>}\n      </View>\n    );\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity onPress={() => router.back()}>\n            <Text style={styles.backButton}>← Back</Text>\n          </TouchableOpacity>\n          <Text style={styles.title}>My Goals</Text>\n        </View>\n        <View style={styles.centered}>\n          <Text style={styles.loadingText}>Loading goals...</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => router.back()}>\n          <Text style={styles.backButton}>← Back</Text>\n        </TouchableOpacity>\n        <Text style={styles.title}>My Goals</Text>\n      </View>\n\n      <View style={styles.filterContainer}>\n        <TouchableOpacity\n          style={[\n            styles.filterButton,\n            activeFilter === \"active\" && styles.filterButtonActive,\n          ]}\n          onPress={() => setActiveFilter(\"active\")}\n        >\n          <Text\n            style={[\n              styles.filterText,\n              activeFilter === \"active\" && styles.filterTextActive,\n            ]}\n          >\n            Active\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[\n            styles.filterButton,\n            activeFilter === \"completed\" && styles.filterButtonActive,\n          ]}\n          onPress={() => setActiveFilter(\"completed\")}\n        >\n          <Text\n            style={[\n              styles.filterText,\n              activeFilter === \"completed\" && styles.filterTextActive,\n            ]}\n          >\n            Completed\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[\n            styles.filterButton,\n            activeFilter === \"all\" && styles.filterButtonActive,\n          ]}\n          onPress={() => setActiveFilter(\"all\")}\n        >\n          <Text\n            style={[\n              styles.filterText,\n              activeFilter === \"all\" && styles.filterTextActive,\n            ]}\n          >\n            All\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <ScrollView\n        style={styles.scrollView}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n      >\n        {goals.length === 0 ? (\n          <View style={styles.emptyContainer}>\n            <Text style={styles.emptyText}>No goals yet</Text>\n            <Text style={styles.emptySubtext}>\n              Set goals to track your fitness progress\n            </Text>\n          </View>\n        ) : (\n          goals.map(renderGoalCard)\n        )}\n      </ScrollView>\n\n      <TouchableOpacity\n        style={styles.addButton}\n        onPress={() => router.push(\"/create-goal\")}\n      >\n        <Text style={styles.addButtonText}>+ Create Goal</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#0a0a0a\",\n  },\n  header: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    paddingTop: 60,\n    backgroundColor: \"#111\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#222\",\n  },\n  backButton: {\n    color: \"#60a5fa\",\n    fontSize: 16,\n    marginRight: 16,\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n  },\n  filterContainer: {\n    flexDirection: \"row\",\n    padding: 16,\n    gap: 8,\n  },\n  filterButton: {\n    flex: 1,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    backgroundColor: \"#1a1a1a\",\n    alignItems: \"center\",\n  },\n  filterButtonActive: {\n    backgroundColor: \"#60a5fa\",\n  },\n  filterText: {\n    color: \"#999\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  filterTextActive: {\n    color: \"#fff\",\n  },\n  scrollView: {\n    flex: 1,\n    padding: 16,\n  },\n  goalCard: {\n    backgroundColor: \"#1a1a1a\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 2,\n    borderColor: \"#60a5fa\",\n  },\n  completedCard: {\n    borderColor: \"#4ade80\",\n    opacity: 0.8,\n  },\n  goalHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    marginBottom: 12,\n  },\n  goalTitleContainer: {\n    flex: 1,\n  },\n  goalType: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  activeBadge: {\n    color: \"#60a5fa\",\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  completedBadge: {\n    color: \"#4ade80\",\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  deleteButton: {\n    fontSize: 20,\n    padding: 4,\n  },\n  goalInfo: {\n    marginBottom: 12,\n  },\n  goalTarget: {\n    color: \"#fff\",\n    fontSize: 16,\n    marginBottom: 4,\n  },\n  goalCurrent: {\n    color: \"#999\",\n    fontSize: 14,\n  },\n  progressContainer: {\n    marginBottom: 12,\n  },\n  progressBar: {\n    height: 8,\n    backgroundColor: \"#333\",\n    borderRadius: 4,\n    overflow: \"hidden\",\n    marginBottom: 4,\n  },\n  progressFill: {\n    height: \"100%\",\n    backgroundColor: \"#60a5fa\",\n  },\n  progressText: {\n    color: \"#999\",\n    fontSize: 12,\n    textAlign: \"right\",\n  },\n  targetDate: {\n    color: \"#999\",\n    fontSize: 12,\n    marginBottom: 8,\n  },\n  goalNotes: {\n    color: \"#999\",\n    fontSize: 12,\n    fontStyle: \"italic\",\n  },\n  addButton: {\n    backgroundColor: \"#60a5fa\",\n    padding: 16,\n    margin: 16,\n    borderRadius: 12,\n    alignItems: \"center\",\n  },\n  addButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#999\",\n    fontSize: 16,\n  },\n  emptyContainer: {\n    alignItems: \"center\",\n    marginTop: 60,\n  },\n  emptyText: {\n    color: \"#999\",\n    fontSize: 18,\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    color: \"#666\",\n    fontSize: 14,\n  },\n});\n","size_bytes":10517},"apps/mobile/app/create-goal.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { router } from \"expo-router\";\nimport DateTimePicker from \"@react-native-community/datetimepicker\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData, type Goal } from \"./_contexts/data-context\";\nimport { useUnitConversion } from \"./_hooks/use-unit-conversion\";\nimport { EXERCISES, type Exercise } from \"@data/exercises\";\n\nexport default function CreateGoalScreen() {\n  const { userId } = useAuth();\n  const { saveGoal } = useData();\n  const { parseWeight, weightUnit } = useUnitConversion();\n\n  const [goalType, setGoalType] = useState<string>(\"\");\n  const [targetValue, setTargetValue] = useState(\"\");\n  const [targetDate, setTargetDate] = useState<Date | undefined>(undefined);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [exerciseId, setExerciseId] = useState<string>(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [saving, setSaving] = useState(false);\n\n  const goalTypes = [\n    { id: \"weight_loss\", label: \"Weight Loss\", requiresExercise: false },\n    { id: \"weight_gain\", label: \"Weight Gain\", requiresExercise: false },\n    { id: \"strength\", label: \"Strength Goal\", requiresExercise: true },\n    {\n      id: \"workout_frequency\",\n      label: \"Workout Frequency\",\n      requiresExercise: false,\n    },\n    { id: \"body_fat\", label: \"Body Fat %\", requiresExercise: false },\n  ];\n\n  const strengthExercises = EXERCISES.filter((e: Exercise) =>\n    [\"chest\", \"back\", \"legs\", \"shoulders\", \"arms\"].includes(e.category),\n  );\n\n  const handleDateChange = (_event: any, selectedDate?: Date) => {\n    setShowDatePicker(Platform.OS === \"ios\");\n    if (selectedDate) {\n      setTargetDate(selectedDate);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    if (!goalType) {\n      Alert.alert(\"Missing Information\", \"Please select a goal type\");\n      return;\n    }\n\n    if (!targetValue || isNaN(parseFloat(targetValue))) {\n      Alert.alert(\"Missing Information\", \"Please enter a valid target value\");\n      return;\n    }\n\n    const selectedGoalType = goalTypes.find((g) => g.id === goalType);\n    if (selectedGoalType?.requiresExercise && !exerciseId) {\n      Alert.alert(\n        \"Missing Information\",\n        \"Please select an exercise for this goal\",\n      );\n      return;\n    }\n\n    setSaving(true);\n    try {\n      let targetValueParsed = parseFloat(targetValue);\n\n      if (\n        goalType === \"weight_loss\" ||\n        goalType === \"weight_gain\" ||\n        goalType === \"strength\"\n      ) {\n        targetValueParsed = parseWeight(targetValue);\n      }\n\n      const newGoal: Goal = {\n        id: `goal_${Date.now()}`,\n        user_id: userId,\n        goal_type: goalType,\n        target_value: targetValueParsed,\n        current_value: undefined,\n        start_date: new Date().toISOString(),\n        target_date: targetDate?.toISOString(),\n        status: \"active\",\n        exercise_id: exerciseId || undefined,\n        notes: notes || undefined,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      await saveGoal(newGoal);\n      Alert.alert(\"Success\", \"Goal created successfully!\", [\n        { text: \"OK\", onPress: () => router.back() },\n      ]);\n    } catch (error) {\n      console.error(\"Error saving goal:\", error);\n      Alert.alert(\"Error\", \"Failed to save goal\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const getTargetValuePlaceholder = (): string => {\n    switch (goalType) {\n      case \"weight_loss\":\n      case \"weight_gain\":\n        return `Target weight (${weightUnit})`;\n      case \"strength\":\n        return `Target weight (${weightUnit})`;\n      case \"workout_frequency\":\n        return \"Number of workouts per week\";\n      case \"body_fat\":\n        return \"Target body fat %\";\n      default:\n        return \"Target value\";\n    }\n  };\n\n  const selectedGoalType = goalTypes.find((g) => g.id === goalType);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => router.back()}>\n          <Text style={styles.backButton}>← Back</Text>\n        </TouchableOpacity>\n        <Text style={styles.title}>Create Goal</Text>\n      </View>\n\n      <ScrollView style={styles.scrollView}>\n        <View style={styles.section}>\n          <Text style={styles.label}>Goal Type *</Text>\n          <View style={styles.goalTypeContainer}>\n            {goalTypes.map((type) => (\n              <TouchableOpacity\n                key={type.id}\n                style={[\n                  styles.goalTypeButton,\n                  goalType === type.id && styles.goalTypeButtonActive,\n                ]}\n                onPress={() => {\n                  setGoalType(type.id);\n                  setExerciseId(\"\");\n                }}\n              >\n                <Text\n                  style={[\n                    styles.goalTypeText,\n                    goalType === type.id && styles.goalTypeTextActive,\n                  ]}\n                >\n                  {type.label}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        </View>\n\n        {selectedGoalType?.requiresExercise && (\n          <View style={styles.section}>\n            <Text style={styles.label}>Exercise *</Text>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n              {strengthExercises.map((exercise: Exercise) => (\n                <TouchableOpacity\n                  key={exercise.id}\n                  style={[\n                    styles.exerciseButton,\n                    exerciseId === exercise.id && styles.exerciseButtonActive,\n                  ]}\n                  onPress={() => setExerciseId(exercise.id)}\n                >\n                  <Text\n                    style={[\n                      styles.exerciseText,\n                      exerciseId === exercise.id && styles.exerciseTextActive,\n                    ]}\n                  >\n                    {exercise.name}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n          </View>\n        )}\n\n        <View style={styles.section}>\n          <Text style={styles.label}>Target Value *</Text>\n          <TextInput\n            style={styles.input}\n            placeholder={getTargetValuePlaceholder()}\n            placeholderTextColor=\"#666\"\n            keyboardType=\"numeric\"\n            value={targetValue}\n            onChangeText={setTargetValue}\n          />\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.label}>Target Date (Optional)</Text>\n          <TouchableOpacity\n            style={styles.dateButton}\n            onPress={() => setShowDatePicker(true)}\n          >\n            <Text style={styles.dateButtonText}>\n              {targetDate\n                ? targetDate.toLocaleDateString()\n                : \"Select target date\"}\n            </Text>\n          </TouchableOpacity>\n          {showDatePicker && (\n            <DateTimePicker\n              value={targetDate || new Date()}\n              mode=\"date\"\n              display={Platform.OS === \"ios\" ? \"spinner\" : \"default\"}\n              onChange={handleDateChange}\n              minimumDate={new Date()}\n            />\n          )}\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.label}>Notes (Optional)</Text>\n          <TextInput\n            style={[styles.input, styles.textArea]}\n            placeholder=\"Add any notes about this goal...\"\n            placeholderTextColor=\"#666\"\n            multiline\n            numberOfLines={4}\n            value={notes}\n            onChangeText={setNotes}\n          />\n        </View>\n\n        <TouchableOpacity\n          style={[styles.saveButton, saving && styles.saveButtonDisabled]}\n          onPress={handleSave}\n          disabled={saving}\n        >\n          <Text style={styles.saveButtonText}>\n            {saving ? \"Saving...\" : \"Create Goal\"}\n          </Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#0a0a0a\",\n  },\n  header: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    paddingTop: 60,\n    backgroundColor: \"#111\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#222\",\n  },\n  backButton: {\n    color: \"#60a5fa\",\n    fontSize: 16,\n    marginRight: 16,\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n  },\n  scrollView: {\n    flex: 1,\n    padding: 16,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  label: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n    marginBottom: 8,\n  },\n  goalTypeContainer: {\n    gap: 8,\n  },\n  goalTypeButton: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 2,\n    borderColor: \"#333\",\n  },\n  goalTypeButtonActive: {\n    borderColor: \"#60a5fa\",\n    backgroundColor: \"#1a2942\",\n  },\n  goalTypeText: {\n    color: \"#999\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  goalTypeTextActive: {\n    color: \"#60a5fa\",\n  },\n  exerciseButton: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 12,\n    borderRadius: 8,\n    marginRight: 8,\n    borderWidth: 2,\n    borderColor: \"#333\",\n  },\n  exerciseButtonActive: {\n    borderColor: \"#60a5fa\",\n    backgroundColor: \"#1a2942\",\n  },\n  exerciseText: {\n    color: \"#999\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  exerciseTextActive: {\n    color: \"#60a5fa\",\n  },\n  input: {\n    backgroundColor: \"#1a1a1a\",\n    color: \"#fff\",\n    padding: 16,\n    borderRadius: 8,\n    fontSize: 16,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  textArea: {\n    height: 100,\n    textAlignVertical: \"top\",\n  },\n  dateButton: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  dateButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  saveButton: {\n    backgroundColor: \"#60a5fa\",\n    padding: 16,\n    borderRadius: 12,\n    alignItems: \"center\",\n    marginTop: 16,\n    marginBottom: 32,\n  },\n  saveButtonDisabled: {\n    opacity: 0.5,\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":10376},"apps/mobile/app/achievements.tsx":{"content":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  RefreshControl,\n  TouchableOpacity,\n} from \"react-native\";\nimport { router } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData, type UserAchievement } from \"./_contexts/data-context\";\nimport { ACHIEVEMENTS, type AchievementCategory } from \"@data/achievements\";\n\nexport default function AchievementsScreen() {\n  const { userId } = useAuth();\n  const { getUserAchievements, checkAndUnlockAchievements } = useData();\n  const [unlockedAchievements, setUnlockedAchievements] = useState<\n    UserAchievement[]\n  >([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [filter, setFilter] = useState<AchievementCategory | \"all\">(\"all\");\n\n  const loadAchievements = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    try {\n      await checkAndUnlockAchievements(userId);\n      const unlocked = await getUserAchievements(userId);\n      setUnlockedAchievements(unlocked);\n    } catch (error) {\n      console.error(\"Error loading achievements:\", error);\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  }, [userId, getUserAchievements, checkAndUnlockAchievements]);\n\n  useEffect(() => {\n    loadAchievements();\n  }, [loadAchievements]);\n\n  const onRefresh = () => {\n    setRefreshing(true);\n    loadAchievements();\n  };\n\n  const isUnlocked = (achievementId: string): boolean => {\n    return unlockedAchievements.some((a) => a.achievement_id === achievementId);\n  };\n\n  const getUnlockDate = (achievementId: string): string | null => {\n    const achievement = unlockedAchievements.find(\n      (a) => a.achievement_id === achievementId,\n    );\n    return achievement\n      ? new Date(achievement.unlocked_at).toLocaleDateString()\n      : null;\n  };\n\n  const getTierColor = (tier: string): string => {\n    const colors: Record<string, string> = {\n      bronze: \"#CD7F32\",\n      silver: \"#C0C0C0\",\n      gold: \"#FFD700\",\n      platinum: \"#E5E4E2\",\n    };\n    return colors[tier] || \"#999\";\n  };\n\n  const filteredAchievements = ACHIEVEMENTS.filter(\n    (a) => filter === \"all\" || a.category === filter,\n  );\n\n  const categories: Array<{ id: AchievementCategory | \"all\"; label: string }> =\n    [\n      { id: \"all\", label: \"All\" },\n      { id: \"workouts\", label: \"Workouts\" },\n      { id: \"strength\", label: \"Strength\" },\n      { id: \"consistency\", label: \"Consistency\" },\n      { id: \"volume\", label: \"Volume\" },\n    ];\n\n  const renderAchievement = (achievement: (typeof ACHIEVEMENTS)[0]) => {\n    const unlocked = isUnlocked(achievement.id);\n    const unlockDate = getUnlockDate(achievement.id);\n    const tierColor = getTierColor(achievement.tier);\n\n    return (\n      <View\n        key={achievement.id}\n        style={[\n          styles.achievementCard,\n          unlocked ? styles.achievementUnlocked : styles.achievementLocked,\n        ]}\n      >\n        <View style={styles.achievementHeader}>\n          <Text\n            style={[styles.achievementIcon, !unlocked && styles.lockedIcon]}\n          >\n            {achievement.icon}\n          </Text>\n          <View style={styles.achievementInfo}>\n            <Text\n              style={[styles.achievementName, !unlocked && styles.lockedText]}\n            >\n              {achievement.name}\n            </Text>\n            <Text style={{ color: tierColor }}>\n              {achievement.tier.toUpperCase()}\n            </Text>\n          </View>\n        </View>\n\n        <Text\n          style={[\n            styles.achievementDescription,\n            !unlocked && styles.lockedText,\n          ]}\n        >\n          {achievement.description}\n        </Text>\n\n        {unlocked && unlockDate && (\n          <Text style={styles.unlockDate}>Unlocked {unlockDate}</Text>\n        )}\n\n        {!unlocked && (\n          <View style={styles.requirementContainer}>\n            <Text style={styles.requirementText}>\n              {achievement.requirement.type === \"workout_count\" &&\n                `Complete ${achievement.requirement.value} workouts`}\n              {achievement.requirement.type === \"streak_days\" &&\n                `Maintain ${achievement.requirement.value}-day streak`}\n              {achievement.requirement.type === \"total_volume\" &&\n                `Lift ${achievement.requirement.value.toLocaleString()} kg total`}\n              {achievement.requirement.type === \"max_weight\" &&\n                achievement.requirement.exercise_id &&\n                `Lift ${achievement.requirement.value} kg max on ${achievement.requirement.exercise_id.replace(/_/g, \" \")}`}\n              {achievement.requirement.type === \"weight_lost\" &&\n                `Lose ${achievement.requirement.value} kg`}\n              {achievement.requirement.type === \"weight_gained\" &&\n                `Gain ${achievement.requirement.value} kg`}\n            </Text>\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.header}>\n          <TouchableOpacity onPress={() => router.back()}>\n            <Text style={styles.backButton}>← Back</Text>\n          </TouchableOpacity>\n          <Text style={styles.title}>Achievements</Text>\n        </View>\n        <View style={styles.centered}>\n          <Text style={styles.loadingText}>Loading achievements...</Text>\n        </View>\n      </View>\n    );\n  }\n\n  const totalAchievements = ACHIEVEMENTS.length;\n  const unlockedCount = unlockedAchievements.length;\n  const progress = ((unlockedCount / totalAchievements) * 100).toFixed(0);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => router.back()}>\n          <Text style={styles.backButton}>← Back</Text>\n        </TouchableOpacity>\n        <Text style={styles.title}>Achievements</Text>\n      </View>\n\n      <View style={styles.statsContainer}>\n        <Text style={styles.statsText}>\n          {unlockedCount} / {totalAchievements} Unlocked ({progress}%)\n        </Text>\n        <View style={styles.progressBar}>\n          <View style={[styles.progressFill, { width: `${progress}%` }]} />\n        </View>\n      </View>\n\n      <ScrollView\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        style={styles.filterScroll}\n        contentContainerStyle={styles.filterContainer}\n      >\n        {categories.map((cat) => (\n          <TouchableOpacity\n            key={cat.id}\n            style={[\n              styles.filterButton,\n              filter === cat.id && styles.filterButtonActive,\n            ]}\n            onPress={() => setFilter(cat.id)}\n          >\n            <Text\n              style={[\n                styles.filterText,\n                filter === cat.id && styles.filterTextActive,\n              ]}\n            >\n              {cat.label}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </ScrollView>\n\n      <ScrollView\n        style={styles.scrollView}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n      >\n        {filteredAchievements.map(renderAchievement)}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#0a0a0a\",\n  },\n  header: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16,\n    paddingTop: 60,\n    backgroundColor: \"#111\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#222\",\n  },\n  backButton: {\n    color: \"#60a5fa\",\n    fontSize: 16,\n    marginRight: 16,\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n  },\n  statsContainer: {\n    padding: 16,\n    backgroundColor: \"#111\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#222\",\n  },\n  statsText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n    marginBottom: 8,\n    textAlign: \"center\",\n  },\n  progressBar: {\n    height: 8,\n    backgroundColor: \"#333\",\n    borderRadius: 4,\n    overflow: \"hidden\",\n  },\n  progressFill: {\n    height: \"100%\",\n    backgroundColor: \"#60a5fa\",\n  },\n  filterScroll: {\n    backgroundColor: \"#111\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#222\",\n  },\n  filterContainer: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    gap: 8,\n  },\n  filterButton: {\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 16,\n    backgroundColor: \"#1a1a1a\",\n    marginRight: 8,\n  },\n  filterButtonActive: {\n    backgroundColor: \"#60a5fa\",\n  },\n  filterText: {\n    color: \"#999\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  filterTextActive: {\n    color: \"#fff\",\n  },\n  scrollView: {\n    flex: 1,\n    padding: 16,\n  },\n  achievementCard: {\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 2,\n  },\n  achievementUnlocked: {\n    backgroundColor: \"#1a2942\",\n    borderColor: \"#60a5fa\",\n  },\n  achievementLocked: {\n    backgroundColor: \"#1a1a1a\",\n    borderColor: \"#333\",\n    opacity: 0.6,\n  },\n  achievementHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  achievementIcon: {\n    fontSize: 40,\n    marginRight: 16,\n  },\n  lockedIcon: {\n    opacity: 0.3,\n  },\n  achievementInfo: {\n    flex: 1,\n  },\n  achievementName: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  achievementTier: {\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  achievementDescription: {\n    color: \"#999\",\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  lockedText: {\n    opacity: 0.5,\n  },\n  unlockDate: {\n    color: \"#4ade80\",\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  requirementContainer: {\n    backgroundColor: \"#0a0a0a\",\n    padding: 8,\n    borderRadius: 6,\n    marginTop: 4,\n  },\n  requirementText: {\n    color: \"#999\",\n    fontSize: 12,\n  },\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#999\",\n    fontSize: 16,\n  },\n});\n","size_bytes":10025},"apps/mobile/app/ai-program-generator.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  TextInput,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { useRouter } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport {\n  generateWorkoutProgram,\n  type WorkoutGenerationParams,\n} from \"@data/ai/workout-generator\";\nimport type { Gym } from \"@data/storage/models\";\n\nexport default function AIProgramGeneratorScreen() {\n  const router = useRouter();\n  const { userId } = useAuth();\n  const { getActiveGym, saveTPath, saveTPathExercises } = useData();\n\n  const [activeGym, setActiveGym] = useState<Gym | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [generating, setGenerating] = useState(false);\n\n  const [goal, setGoal] =\n    useState<WorkoutGenerationParams[\"goal\"]>(\"general_fitness\");\n  const [experienceLevel, setExperienceLevel] =\n    useState<WorkoutGenerationParams[\"experienceLevel\"]>(\"intermediate\");\n  const [splitType, setSplitType] = useState<\"ppl\" | \"ulul\">(\"ppl\");\n  const [sessionDuration, setSessionDuration] = useState(60);\n  const [focusAreas, setFocusAreas] = useState(\"\");\n  const [restrictions, setRestrictions] = useState(\"\");\n\n  useEffect(() => {\n    loadActiveGym();\n  }, [userId, loadActiveGym]);\n\n  const loadActiveGym = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const gym = await getActiveGym(userId);\n      setActiveGym(gym);\n    } catch (error) {\n      console.error(\"Failed to load active gym:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [getActiveGym, userId]);\n\n  const handleGenerate = async () => {\n    if (!userId) {\n      Alert.alert(\"Error\", \"You must be logged in to generate programs\");\n      return;\n    }\n\n    if (!activeGym) {\n      Alert.alert(\n        \"No Active Gym\",\n        \"Please set an active gym with equipment before generating a program.\",\n      );\n      return;\n    }\n\n    setGenerating(true);\n    try {\n      const params: WorkoutGenerationParams = {\n        goal,\n        experienceLevel,\n        equipment: activeGym.equipment,\n        daysPerWeek: splitType === \"ppl\" ? 3 : 4,\n        sessionDuration,\n        focusAreas: focusAreas.trim()\n          ? focusAreas.split(\",\").map((a) => a.trim())\n          : undefined,\n        restrictions: restrictions.trim()\n          ? restrictions.split(\",\").map((r) => r.trim())\n          : undefined,\n      };\n\n      const program = await generateWorkoutProgram(params);\n\n      const tPathId = `tpath_${Date.now()}`;\n      const now = new Date().toISOString();\n      const tPath = {\n        id: tPathId,\n        user_id: userId,\n        template_name:\n          splitType === \"ppl\" ? \"3-Day Push/Pull/Legs\" : \"4-Day Upper/Lower\",\n        description: program.description,\n        is_main_program: true,\n        is_ai_generated: true,\n        ai_generation_params: JSON.stringify(params),\n        settings: { tPathType: splitType, ...params },\n        gym_id: activeGym.id,\n        created_at: now,\n        updated_at: now,\n        order_index: 0,\n      };\n\n      await saveTPath(tPath);\n\n      // Generate child workouts based on split type\n      const childWorkoutNames =\n        splitType === \"ppl\"\n          ? [\"Push\", \"Pull\", \"Legs\"]\n          : [\"Upper Body A\", \"Lower Body A\", \"Upper Body B\", \"Lower Body B\"];\n\n      for (let i = 0; i < childWorkoutNames.length; i++) {\n        const childWorkoutId = `tpath_child_${Date.now()}_${i}`;\n        const childTPath = {\n          id: childWorkoutId,\n          user_id: userId,\n          template_name: childWorkoutNames[i],\n          description: `${childWorkoutNames[i]} workout`,\n          is_main_program: false,\n          parent_t_path_id: tPathId,\n          is_ai_generated: true,\n          settings: { tPathType: splitType },\n          gym_id: activeGym.id,\n          created_at: now,\n          updated_at: now,\n          order_index: i,\n        };\n\n        await saveTPath(childTPath);\n\n        // Add exercises from the generated program if available\n        if (program.workouts[i]) {\n          const workout = program.workouts[i];\n          const exercises = workout.exercises\n            .filter((ex: any) => ex.exerciseId)\n            .map((ex: any, idx: any) => ({\n              t_path_id: childWorkoutId,\n              exercise_id: ex.exerciseId!,\n              target_sets: ex.sets,\n              target_reps_min:\n                parseInt(ex.reps.split(\"-\")[0], 10) ||\n                parseInt(ex.reps, 10) ||\n                10,\n              target_reps_max:\n                parseInt(ex.reps.split(\"-\")[1], 10) ||\n                parseInt(ex.reps, 10) ||\n                12,\n              rest_seconds: ex.restSeconds,\n              notes: ex.notes || null,\n              is_bonus_exercise: false,\n              order_index: idx,\n            }));\n\n          if (exercises.length > 0) {\n            await saveTPathExercises(exercises);\n          }\n        }\n      }\n\n      Alert.alert(\n        \"Program Created!\",\n        `\"${program.name}\" has been added to your T-Paths. Ready to start training?`,\n        [\n          {\n            text: \"View Program\",\n            onPress: () => router.push(`/t-path/${tPathId}`),\n          },\n          { text: \"Create Another\", style: \"cancel\" },\n        ],\n      );\n    } catch (error) {\n      console.error(\"Failed to generate program:\", error);\n      Alert.alert(\n        \"Generation Failed\",\n        error instanceof Error\n          ? error.message\n          : \"Failed to generate workout program\",\n      );\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const goals: Array<{\n    value: WorkoutGenerationParams[\"goal\"];\n    label: string;\n  }> = [\n    { value: \"strength\", label: \"Strength\" },\n    { value: \"hypertrophy\", label: \"Muscle Growth\" },\n    { value: \"endurance\", label: \"Endurance\" },\n    { value: \"weight_loss\", label: \"Weight Loss\" },\n    { value: \"general_fitness\", label: \"General Fitness\" },\n  ];\n\n  const levels: Array<{\n    value: WorkoutGenerationParams[\"experienceLevel\"];\n    label: string;\n  }> = [\n    { value: \"beginner\", label: \"Beginner\" },\n    { value: \"intermediate\", label: \"Intermediate\" },\n    { value: \"advanced\", label: \"Advanced\" },\n  ];\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator size=\"large\" color=\"#10b981\" />\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <View style={styles.header}>\n        <Text style={styles.title}>AI Program Generator</Text>\n        <Text style={styles.subtitle}>\n          Create a personalized workout program powered by AI\n        </Text>\n      </View>\n\n      {activeGym && (\n        <View style={styles.gymBadge}>\n          <Text style={styles.gymBadgeLabel}>Using equipment from:</Text>\n          <Text style={styles.gymBadgeName}>{activeGym.name}</Text>\n        </View>\n      )}\n\n      {!activeGym && (\n        <View style={styles.warningBox}>\n          <Text style={styles.warningText}>\n            ⚠️ No active gym set. Please set an active gym with equipment to\n            generate programs.\n          </Text>\n          <TouchableOpacity\n            style={styles.warningButton}\n            onPress={() => router.push(\"/gyms\")}\n          >\n            <Text style={styles.warningButtonText}>Go to Gyms</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Training Goal</Text>\n        <View style={styles.optionsGrid}>\n          {goals.map((g) => (\n            <TouchableOpacity\n              key={g.value}\n              style={[\n                styles.optionButton,\n                goal === g.value && styles.optionButtonActive,\n              ]}\n              onPress={() => setGoal(g.value)}\n            >\n              <Text\n                style={[\n                  styles.optionText,\n                  goal === g.value && styles.optionTextActive,\n                ]}\n              >\n                {g.label}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Workout Split</Text>\n        <Text style={styles.inputHint}>Choose your training structure</Text>\n        <View style={styles.splitContainer}>\n          <TouchableOpacity\n            style={[\n              styles.splitCard,\n              splitType === \"ppl\" && styles.splitCardActive,\n            ]}\n            onPress={() => setSplitType(\"ppl\")}\n          >\n            <View style={styles.splitHeader}>\n              <Text\n                style={[\n                  styles.splitTitle,\n                  splitType === \"ppl\" && styles.splitTitleActive,\n                ]}\n              >\n                3-Day Push/Pull/Legs\n              </Text>\n              <Text\n                style={[\n                  styles.splitSubtitle,\n                  splitType === \"ppl\" && styles.splitSubtitleActive,\n                ]}\n              >\n                PPL\n              </Text>\n            </View>\n            <Text\n              style={[\n                styles.splitFrequency,\n                splitType === \"ppl\" && styles.splitFrequencyActive,\n              ]}\n            >\n              3 days per week\n            </Text>\n            <View style={styles.splitProsContainer}>\n              <Text\n                style={[\n                  styles.splitProText,\n                  splitType === \"ppl\" && styles.splitProTextActive,\n                ]}\n              >\n                ✓ Time efficient\n              </Text>\n              <Text\n                style={[\n                  styles.splitProText,\n                  splitType === \"ppl\" && styles.splitProTextActive,\n                ]}\n              >\n                ✓ Better recovery\n              </Text>\n              <Text\n                style={[\n                  styles.splitProText,\n                  splitType === \"ppl\" && styles.splitProTextActive,\n                ]}\n              >\n                ✓ Logical grouping\n              </Text>\n            </View>\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={[\n              styles.splitCard,\n              splitType === \"ulul\" && styles.splitCardActive,\n            ]}\n            onPress={() => setSplitType(\"ulul\")}\n          >\n            <View style={styles.splitHeader}>\n              <Text\n                style={[\n                  styles.splitTitle,\n                  splitType === \"ulul\" && styles.splitTitleActive,\n                ]}\n              >\n                4-Day Upper/Lower\n              </Text>\n              <Text\n                style={[\n                  styles.splitSubtitle,\n                  splitType === \"ulul\" && styles.splitSubtitleActive,\n                ]}\n              >\n                ULUL\n              </Text>\n            </View>\n            <Text\n              style={[\n                styles.splitFrequency,\n                splitType === \"ulul\" && styles.splitFrequencyActive,\n              ]}\n            >\n              4 days per week\n            </Text>\n            <View style={styles.splitProsContainer}>\n              <Text\n                style={[\n                  styles.splitProText,\n                  splitType === \"ulul\" && styles.splitProTextActive,\n                ]}\n              >\n                ✓ Higher frequency\n              </Text>\n              <Text\n                style={[\n                  styles.splitProText,\n                  splitType === \"ulul\" && styles.splitProTextActive,\n                ]}\n              >\n                ✓ Muscle growth\n              </Text>\n              <Text\n                style={[\n                  styles.splitProText,\n                  splitType === \"ulul\" && styles.splitProTextActive,\n                ]}\n              >\n                ✓ Flexible scheduling\n              </Text>\n            </View>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Experience Level</Text>\n        <View style={styles.optionsRow}>\n          {levels.map((l) => (\n            <TouchableOpacity\n              key={l.value}\n              style={[\n                styles.optionButton,\n                experienceLevel === l.value && styles.optionButtonActive,\n              ]}\n              onPress={() => setExperienceLevel(l.value)}\n            >\n              <Text\n                style={[\n                  styles.optionText,\n                  experienceLevel === l.value && styles.optionTextActive,\n                ]}\n              >\n                {l.label}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Session Duration (minutes)</Text>\n        <View style={styles.durationSelector}>\n          {[30, 45, 60, 75, 90].map((mins) => (\n            <TouchableOpacity\n              key={mins}\n              style={[\n                styles.durationButton,\n                sessionDuration === mins && styles.durationButtonActive,\n              ]}\n              onPress={() => setSessionDuration(mins)}\n            >\n              <Text\n                style={[\n                  styles.durationText,\n                  sessionDuration === mins && styles.durationTextActive,\n                ]}\n              >\n                {mins}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Focus Areas (Optional)</Text>\n        <Text style={styles.inputHint}>\n          Separate with commas (e.g., Upper Body, Core, Legs)\n        </Text>\n        <TextInput\n          style={styles.textInput}\n          placeholder=\"Upper Body, Core...\"\n          placeholderTextColor=\"#666\"\n          value={focusAreas}\n          onChangeText={setFocusAreas}\n        />\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Restrictions (Optional)</Text>\n        <Text style={styles.inputHint}>\n          Any injuries or limitations (e.g., Lower back issues, No jumping)\n        </Text>\n        <TextInput\n          style={styles.textInput}\n          placeholder=\"No jumping, knee issues...\"\n          placeholderTextColor=\"#666\"\n          value={restrictions}\n          onChangeText={setRestrictions}\n          multiline\n        />\n      </View>\n\n      <TouchableOpacity\n        style={[\n          styles.generateButton,\n          (!activeGym || generating) && styles.generateButtonDisabled,\n        ]}\n        onPress={handleGenerate}\n        disabled={!activeGym || generating}\n      >\n        {generating ? (\n          <>\n            <ActivityIndicator\n              color=\"#000\"\n              size=\"small\"\n              style={styles.buttonSpinner}\n            />\n            <Text style={styles.generateButtonText}>Generating...</Text>\n          </>\n        ) : (\n          <Text style={styles.generateButtonText}>✨ Generate Program</Text>\n        )}\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    padding: 16,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: \"#888\",\n  },\n  gymBadge: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 24,\n    borderWidth: 1,\n    borderColor: \"#10b981\",\n  },\n  gymBadgeLabel: {\n    color: \"#888\",\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  gymBadgeName: {\n    color: \"#10b981\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  warningBox: {\n    backgroundColor: \"#3f1a00\",\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 24,\n    borderWidth: 1,\n    borderColor: \"#ff6b00\",\n  },\n  warningText: {\n    color: \"#ffa500\",\n    fontSize: 14,\n    marginBottom: 12,\n  },\n  warningButton: {\n    backgroundColor: \"#ff6b00\",\n    padding: 10,\n    borderRadius: 6,\n    alignItems: \"center\",\n  },\n  warningButtonText: {\n    color: \"#fff\",\n    fontWeight: \"600\",\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    color: \"#fff\",\n    marginBottom: 12,\n  },\n  optionsGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 8,\n  },\n  optionsRow: {\n    flexDirection: \"row\",\n    gap: 8,\n  },\n  optionButton: {\n    backgroundColor: \"#111\",\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  optionButtonActive: {\n    backgroundColor: \"#10b981\",\n    borderColor: \"#10b981\",\n  },\n  optionText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"500\",\n  },\n  optionTextActive: {\n    color: \"#000\",\n  },\n  daysSelector: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  dayButton: {\n    flex: 1,\n    backgroundColor: \"#111\",\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  dayButtonActive: {\n    backgroundColor: \"#10b981\",\n    borderColor: \"#10b981\",\n  },\n  dayButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"600\",\n  },\n  dayButtonTextActive: {\n    color: \"#000\",\n  },\n  durationSelector: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 8,\n  },\n  durationButton: {\n    backgroundColor: \"#111\",\n    paddingVertical: 10,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  durationButtonActive: {\n    backgroundColor: \"#10b981\",\n    borderColor: \"#10b981\",\n  },\n  durationText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"500\",\n  },\n  durationTextActive: {\n    color: \"#000\",\n  },\n  inputHint: {\n    color: \"#666\",\n    fontSize: 12,\n    marginBottom: 8,\n  },\n  textInput: {\n    backgroundColor: \"#111\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  generateButton: {\n    backgroundColor: \"#10b981\",\n    padding: 16,\n    borderRadius: 12,\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginTop: 8,\n    marginBottom: 32,\n  },\n  generateButtonDisabled: {\n    backgroundColor: \"#333\",\n  },\n  generateButtonText: {\n    color: \"#000\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  buttonSpinner: {\n    marginRight: 8,\n  },\n  splitContainer: {\n    gap: 12,\n  },\n  splitCard: {\n    backgroundColor: \"#111\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: \"#333\",\n  },\n  splitCardActive: {\n    backgroundColor: \"#1a1a1a\",\n    borderColor: \"#10b981\",\n  },\n  splitHeader: {\n    marginBottom: 8,\n  },\n  splitTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 4,\n  },\n  splitTitleActive: {\n    color: \"#10b981\",\n  },\n  splitSubtitle: {\n    fontSize: 14,\n    color: \"#666\",\n    fontWeight: \"600\",\n  },\n  splitSubtitleActive: {\n    color: \"#10b981\",\n  },\n  splitFrequency: {\n    fontSize: 12,\n    color: \"#888\",\n    marginBottom: 12,\n  },\n  splitFrequencyActive: {\n    color: \"#10b981\",\n  },\n  splitProsContainer: {\n    gap: 4,\n  },\n  splitProText: {\n    fontSize: 13,\n    color: \"#888\",\n  },\n  splitProTextActive: {\n    color: \"#10b981\",\n  },\n});\n","size_bytes":19588},"apps/mobile/app/gym-editor.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  TextInput,\n  Alert,\n} from \"react-native\";\nimport { Stack, useRouter, useLocalSearchParams } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport {\n  EQUIPMENT_TYPES,\n  EQUIPMENT_CATEGORIES,\n} from \"@data/constants/equipment\";\nimport type { Gym } from \"@data/storage/models\";\n\nexport default function GymEditorScreen() {\n  const router = useRouter();\n  const { id } = useLocalSearchParams<{ id?: string }>();\n  const { userId } = useAuth();\n  const { getGym, addGym, updateGym } = useData();\n\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedEquipment, setSelectedEquipment] = useState<string[]>([]);\n  const [loading, setLoading] = useState(!!id);\n  const [saving, setSaving] = useState(false);\n\n  const isEditing = !!id;\n\n  useEffect(() => {\n    if (id) {\n      loadGym();\n    }\n  }, [id, loadGym]);\n\n  const loadGym = useCallback(async () => {\n    if (!id) {\n      return;\n    }\n    try {\n      const gym = await getGym(id);\n      if (gym) {\n        setName(gym.name);\n        setDescription(gym.description || \"\");\n        setSelectedEquipment(gym.equipment);\n      }\n    } catch (error) {\n      console.error(\"Error loading gym:\", error);\n      Alert.alert(\"Error\", \"Failed to load gym\");\n    } finally {\n      setLoading(false);\n    }\n  }, [getGym, id]);\n\n  const toggleEquipment = (equipmentId: string) => {\n    setSelectedEquipment((prev) =>\n      prev.includes(equipmentId)\n        ? prev.filter((eqId) => eqId !== equipmentId)\n        : [...prev, equipmentId],\n    );\n  };\n\n  const toggleCategory = (categoryId: string) => {\n    const categoryEquipment = EQUIPMENT_TYPES.filter(\n      (eq: (typeof EQUIPMENT_TYPES)[number]) => eq.category === categoryId,\n    ).map((eq: (typeof EQUIPMENT_TYPES)[number]) => eq.id);\n\n    const allSelected = categoryEquipment.every((equipmentId: string) =>\n      selectedEquipment.includes(equipmentId),\n    );\n    if (allSelected) {\n      setSelectedEquipment((prev) =>\n        prev.filter(\n          (equipmentId: string) => !categoryEquipment.includes(equipmentId),\n        ),\n      );\n    } else {\n      setSelectedEquipment((prev) => {\n        const newSet = new Set([...prev, ...categoryEquipment]);\n        return Array.from(newSet);\n      });\n    }\n  };\n\n  const handleSave = async () => {\n    if (!userId) {\n      return;\n    }\n\n    if (!name.trim()) {\n      Alert.alert(\"Validation Error\", \"Please enter a gym name\");\n      return;\n    }\n\n    if (selectedEquipment.length === 0) {\n      Alert.alert(\n        \"Validation Error\",\n        \"Please select at least one equipment item\",\n      );\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const now = new Date().toISOString();\n\n      if (isEditing && id) {\n        await updateGym(id, {\n          name: name.trim(),\n          description: description.trim() || null,\n          equipment: selectedEquipment,\n          updated_at: now,\n        });\n      } else {\n        const newGym: Gym = {\n          id: `gym_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          user_id: userId,\n          name: name.trim(),\n          description: description.trim() || null,\n          equipment: selectedEquipment,\n          is_active: false,\n          created_at: now,\n          updated_at: now,\n        };\n        await addGym(newGym);\n      }\n\n      router.back();\n    } catch (error) {\n      console.error(\"Error saving gym:\", error);\n      Alert.alert(\"Error\", \"Failed to save gym\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <Stack.Screen options={{ title: \"Loading...\" }} />\n        <View style={styles.centered}>\n          <Text style={styles.loadingText}>Loading gym...</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Stack.Screen options={{ title: isEditing ? \"Edit Gym\" : \"Add Gym\" }} />\n\n      <ScrollView style={styles.content}>\n        <View style={styles.section}>\n          <Text style={styles.label}>Gym Name *</Text>\n          <TextInput\n            style={styles.input}\n            value={name}\n            onChangeText={setName}\n            placeholder=\"e.g., LA Fitness, Home Gym\"\n            placeholderTextColor=\"#666\"\n            autoCapitalize=\"words\"\n          />\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.label}>Description (Optional)</Text>\n          <TextInput\n            style={[styles.input, styles.textArea]}\n            value={description}\n            onChangeText={setDescription}\n            placeholder=\"Add notes about this gym...\"\n            placeholderTextColor=\"#666\"\n            multiline\n            numberOfLines={3}\n          />\n        </View>\n\n        <View style={styles.section}>\n          <Text style={styles.label}>Equipment *</Text>\n          <Text style={styles.hint}>\n            Select all equipment available at this gym (\n            {selectedEquipment.length} selected)\n          </Text>\n\n          {EQUIPMENT_CATEGORIES.map(\n            (category: (typeof EQUIPMENT_CATEGORIES)[number]) => {\n              const categoryEquipment = EQUIPMENT_TYPES.filter(\n                (eq: (typeof EQUIPMENT_TYPES)[number]) =>\n                  eq.category === category.id,\n              );\n              const selectedCount = categoryEquipment.filter(\n                (eq: (typeof EQUIPMENT_TYPES)[number]) =>\n                  selectedEquipment.includes(eq.id),\n              ).length;\n              const allSelected = selectedCount === categoryEquipment.length;\n\n              return (\n                <View key={category.id} style={styles.categoryBlock}>\n                  <TouchableOpacity\n                    style={styles.categoryHeader}\n                    onPress={() => toggleCategory(category.id)}\n                  >\n                    <Text style={styles.categoryName}>{category.name}</Text>\n                    <Text style={styles.categoryCount}>\n                      {selectedCount}/{categoryEquipment.length}\n                      {allSelected && \" ✓\"}\n                    </Text>\n                  </TouchableOpacity>\n\n                  <View style={styles.equipmentGrid}>\n                    {categoryEquipment.map(\n                      (equipment: (typeof EQUIPMENT_TYPES)[number]) => {\n                        const isSelected = selectedEquipment.includes(\n                          equipment.id,\n                        );\n                        return (\n                          <TouchableOpacity\n                            key={equipment.id}\n                            style={[\n                              styles.equipmentChip,\n                              isSelected && styles.equipmentChipSelected,\n                            ]}\n                            onPress={() => toggleEquipment(equipment.id)}\n                          >\n                            <Text\n                              style={[\n                                styles.equipmentChipText,\n                                isSelected && styles.equipmentChipTextSelected,\n                              ]}\n                            >\n                              {equipment.name}\n                            </Text>\n                          </TouchableOpacity>\n                        );\n                      },\n                    )}\n                  </View>\n                </View>\n              );\n            },\n          )}\n        </View>\n      </ScrollView>\n\n      <View style={styles.footer}>\n        <TouchableOpacity\n          style={[styles.button, styles.cancelButton]}\n          onPress={() => router.back()}\n          disabled={saving}\n        >\n          <Text style={styles.cancelButtonText}>Cancel</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[\n            styles.button,\n            styles.saveButton,\n            saving && styles.saveButtonDisabled,\n          ]}\n          onPress={handleSave}\n          disabled={saving}\n        >\n          <Text style={styles.saveButtonText}>\n            {saving ? \"Saving...\" : isEditing ? \"Update\" : \"Create\"}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#888\",\n    fontSize: 16,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  hint: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 12,\n  },\n  input: {\n    backgroundColor: \"#1a1a1a\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 16,\n    color: \"#fff\",\n  },\n  textArea: {\n    height: 80,\n    textAlignVertical: \"top\",\n  },\n  categoryBlock: {\n    marginBottom: 16,\n  },\n  categoryHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    backgroundColor: \"#1a1a1a\",\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  categoryName: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    color: \"#fff\",\n  },\n  categoryCount: {\n    fontSize: 14,\n    color: \"#10b981\",\n    fontWeight: \"600\",\n  },\n  equipmentGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 8,\n  },\n  equipmentChip: {\n    backgroundColor: \"#1a1a1a\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 16,\n  },\n  equipmentChipSelected: {\n    backgroundColor: \"#10b981\",\n    borderColor: \"#10b981\",\n  },\n  equipmentChipText: {\n    fontSize: 14,\n    color: \"#888\",\n  },\n  equipmentChipTextSelected: {\n    color: \"#fff\",\n    fontWeight: \"600\",\n  },\n  footer: {\n    flexDirection: \"row\",\n    gap: 12,\n    padding: 16,\n    borderTopWidth: 1,\n    borderTopColor: \"#333\",\n  },\n  button: {\n    flex: 1,\n    paddingVertical: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  cancelButton: {\n    backgroundColor: \"#333\",\n  },\n  cancelButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  saveButton: {\n    backgroundColor: \"#10b981\",\n  },\n  saveButtonDisabled: {\n    opacity: 0.5,\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n});\n","size_bytes":10608},"apps/mobile/app/gyms.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TouchableOpacity,\n  Alert,\n} from \"react-native\";\nimport { Stack, useRouter } from \"expo-router\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport type { Gym } from \"@data/storage/models\";\n\nexport default function GymsScreen() {\n  const router = useRouter();\n  const { userId } = useAuth();\n  const { getGyms, setActiveGym, deleteGym } = useData();\n  const [gyms, setGyms] = useState<Gym[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadGyms = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    try {\n      const data = await getGyms(userId);\n      setGyms(data);\n    } catch (error) {\n      console.error(\"Error loading gyms:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [getGyms, userId]);\n\n  useEffect(() => {\n    loadGyms();\n  }, [loadGyms]);\n\n  const handleSetActive = async (gymId: string) => {\n    if (!userId) {\n      return;\n    }\n    try {\n      await setActiveGym(userId, gymId);\n      await loadGyms();\n    } catch (error) {\n      console.error(\"Error setting active gym:\", error);\n      Alert.alert(\"Error\", \"Failed to set active gym\");\n    }\n  };\n\n  const handleDelete = (gym: Gym) => {\n    Alert.alert(\n      \"Delete Gym\",\n      `Are you sure you want to delete \"${gym.name}\"? This action cannot be undone.`,\n      [\n        { text: \"Cancel\", style: \"cancel\" },\n        {\n          text: \"Delete\",\n          style: \"destructive\",\n          onPress: async () => {\n            try {\n              await deleteGym(gym.id);\n              await loadGyms();\n            } catch (error) {\n              console.error(\"Error deleting gym:\", error);\n              Alert.alert(\"Error\", \"Failed to delete gym\");\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <Stack.Screen options={{ title: \"My Gyms\" }} />\n        <View style={styles.centered}>\n          <Text style={styles.loadingText}>Loading gyms...</Text>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Stack.Screen options={{ title: \"My Gyms\" }} />\n\n      <ScrollView style={styles.content}>\n        {gyms.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Text style={styles.emptyTitle}>No Gyms Yet</Text>\n            <Text style={styles.emptyText}>\n              Create a gym profile to track what equipment you have access to.\n              This helps filter exercises based on your available equipment.\n            </Text>\n          </View>\n        ) : (\n          <View style={styles.list}>\n            {gyms.map((gym) => (\n              <View key={gym.id} style={styles.gymCard}>\n                <View style={styles.gymHeader}>\n                  <View style={styles.gymInfo}>\n                    <View style={styles.titleRow}>\n                      <Text style={styles.gymName}>{gym.name}</Text>\n                      {gym.is_active && (\n                        <View style={styles.activeBadge}>\n                          <Text style={styles.activeBadgeText}>Active</Text>\n                        </View>\n                      )}\n                    </View>\n                    {gym.description && (\n                      <Text style={styles.gymDescription}>\n                        {gym.description}\n                      </Text>\n                    )}\n                    <Text style={styles.equipmentCount}>\n                      {gym.equipment.length} equipment{\" \"}\n                      {gym.equipment.length === 1 ? \"item\" : \"items\"}\n                    </Text>\n                  </View>\n                </View>\n\n                <View style={styles.actions}>\n                  {!gym.is_active && (\n                    <TouchableOpacity\n                      style={styles.actionButton}\n                      onPress={() => handleSetActive(gym.id)}\n                    >\n                      <Text style={styles.actionButtonText}>Set Active</Text>\n                    </TouchableOpacity>\n                  )}\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.editButton]}\n                    onPress={() => router.push(`/gym-editor?id=${gym.id}`)}\n                  >\n                    <Text style={styles.actionButtonText}>Edit</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[styles.actionButton, styles.deleteButton]}\n                    onPress={() => handleDelete(gym)}\n                  >\n                    <Text\n                      style={[styles.actionButtonText, styles.deleteButtonText]}\n                    >\n                      Delete\n                    </Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ))}\n          </View>\n        )}\n      </ScrollView>\n\n      <TouchableOpacity\n        style={styles.fab}\n        onPress={() => router.push(\"/gym-editor\")}\n      >\n        <Text style={styles.fabText}>+ Add Gym</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    flex: 1,\n  },\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#888\",\n    fontSize: 16,\n  },\n  emptyState: {\n    padding: 32,\n    alignItems: \"center\",\n  },\n  emptyTitle: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: \"#888\",\n    textAlign: \"center\",\n    lineHeight: 24,\n  },\n  list: {\n    padding: 16,\n    gap: 12,\n  },\n  gymCard: {\n    backgroundColor: \"#1a1a1a\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  gymHeader: {\n    marginBottom: 12,\n  },\n  gymInfo: {\n    gap: 4,\n  },\n  titleRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 8,\n  },\n  gymName: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n  },\n  activeBadge: {\n    backgroundColor: \"#10b981\",\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 12,\n  },\n  activeBadgeText: {\n    color: \"#fff\",\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  gymDescription: {\n    fontSize: 14,\n    color: \"#888\",\n    marginTop: 4,\n  },\n  equipmentCount: {\n    fontSize: 14,\n    color: \"#666\",\n    marginTop: 4,\n  },\n  actions: {\n    flexDirection: \"row\",\n    gap: 8,\n    flexWrap: \"wrap\",\n  },\n  actionButton: {\n    backgroundColor: \"#333\",\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 8,\n  },\n  editButton: {\n    backgroundColor: \"#3b82f6\",\n  },\n  deleteButton: {\n    backgroundColor: \"transparent\",\n    borderWidth: 1,\n    borderColor: \"#ef4444\",\n  },\n  actionButtonText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  deleteButtonText: {\n    color: \"#ef4444\",\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: 24,\n    right: 24,\n    backgroundColor: \"#10b981\",\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderRadius: 28,\n    elevation: 4,\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n  },\n  fabText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":7444},"apps/mobile/app/t-path-detail.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from \"react-native\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useRouter, useLocalSearchParams } from \"expo-router\";\nimport { getExerciseById } from \"@data/exercises\";\nimport type { TPathWithExercises } from \"@data/storage/models\";\n\nexport default function TPathDetailScreen() {\n  const { userId } = useAuth();\n  const { getTPath, getTPathProgress, updateTPathProgress } = useData();\n  const router = useRouter();\n  const params = useLocalSearchParams();\n  const tPathId = params.tPathId as string;\n\n  const [tPath, setTPath] = useState<TPathWithExercises | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [lastAccessed, setLastAccessed] = useState<string | null>(null);\n\n  const loadTPath = useCallback(async () => {\n    if (!tPathId || !userId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await getTPath(tPathId);\n      setTPath(data);\n\n      const progress = await getTPathProgress(userId, tPathId);\n      if (progress) {\n        setLastAccessed(progress.last_accessed_at);\n      }\n\n      await updateTPathProgress({\n        id: `${userId}_${tPathId}`,\n        user_id: userId,\n        t_path_id: tPathId,\n        completed_at: progress?.completed_at || null,\n        last_accessed_at: new Date().toISOString(),\n        total_workouts_completed: progress?.total_workouts_completed || 0,\n        created_at: progress?.created_at || new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      });\n    } catch {\n      Alert.alert(\"Error\", \"Failed to load program details\");\n    } finally {\n      setLoading(false);\n    }\n  }, [getTPath, getTPathProgress, tPathId, updateTPathProgress, userId]);\n\n  useEffect(() => {\n    loadTPath();\n  }, [tPathId, userId, loadTPath]);\n\n  const handleStartWorkout = () => {\n    if (!tPath) {\n      return;\n    }\n    router.push({\n      pathname: \"/workout\",\n      params: { tPathId: tPath.id },\n    });\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color=\"#0a0\" />\n          <Text style={styles.loadingText}>Loading program...</Text>\n        </View>\n      </View>\n    );\n  }\n\n  if (!tPath) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>Program not found</Text>\n          <TouchableOpacity\n            style={styles.backButton}\n            onPress={() => router.back()}\n          >\n            <Text style={styles.backButtonText}>← Go Back</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <View style={styles.titleRow}>\n          <Text style={styles.title}>{tPath.template_name}</Text>\n          {tPath.is_ai_generated && (\n            <View style={styles.aiTag}>\n              <Text style={styles.aiTagText}>AI Generated</Text>\n            </View>\n          )}\n        </View>\n        {tPath.description && (\n          <Text style={styles.description}>{tPath.description}</Text>\n        )}\n        {lastAccessed && (\n          <Text style={styles.lastAccessed}>\n            Last accessed: {new Date(lastAccessed).toLocaleDateString()}\n          </Text>\n        )}\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>\n          Exercises ({tPath.exercises.length})\n        </Text>\n        {tPath.exercises.map((exercise, index) => {\n          const exerciseData = getExerciseById(exercise.exercise_id);\n          return (\n            <View key={exercise.id} style={styles.exerciseCard}>\n              <View style={styles.exerciseHeader}>\n                <Text style={styles.exerciseNumber}>{index + 1}</Text>\n                <View style={styles.exerciseInfo}>\n                  <Text style={styles.exerciseName}>\n                    {exerciseData?.name || exercise.exercise_id}\n                  </Text>\n                  {exercise.is_bonus_exercise && (\n                    <View style={styles.bonusTag}>\n                      <Text style={styles.bonusTagText}>Bonus</Text>\n                    </View>\n                  )}\n                </View>\n              </View>\n              <View style={styles.exerciseDetails}>\n                {exercise.target_sets && (\n                  <Text style={styles.exerciseDetail}>\n                    Sets: {exercise.target_sets}\n                  </Text>\n                )}\n                {(exercise.target_reps_min || exercise.target_reps_max) && (\n                  <Text style={styles.exerciseDetail}>\n                    Reps: {exercise.target_reps_min || \"?\"}-\n                    {exercise.target_reps_max || \"?\"}\n                  </Text>\n                )}\n                {exercise.notes && (\n                  <Text style={styles.exerciseNotes}>{exercise.notes}</Text>\n                )}\n              </View>\n            </View>\n          );\n        })}\n      </View>\n\n      <View style={styles.actions}>\n        <TouchableOpacity\n          style={styles.startButton}\n          onPress={handleStartWorkout}\n        >\n          <Text style={styles.startButtonText}>Start This Workout</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => router.back()}\n        >\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#0a0a0a\",\n    paddingTop: 60,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#888\",\n    marginTop: 16,\n    fontSize: 16,\n  },\n  emptyState: {\n    flex: 1,\n    padding: 40,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  emptyText: {\n    fontSize: 18,\n    color: \"#888\",\n    marginBottom: 24,\n  },\n  header: {\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#1a1a1a\",\n  },\n  titleRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    flex: 1,\n  },\n  aiTag: {\n    backgroundColor: \"#0a0\",\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 6,\n    marginLeft: 12,\n  },\n  aiTagText: {\n    color: \"#000\",\n    fontSize: 12,\n    fontWeight: \"bold\",\n  },\n  description: {\n    fontSize: 16,\n    color: \"#aaa\",\n    lineHeight: 24,\n    marginBottom: 12,\n  },\n  lastAccessed: {\n    fontSize: 14,\n    color: \"#666\",\n  },\n  section: {\n    padding: 20,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 16,\n  },\n  exerciseCard: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: \"#2a2a2a\",\n  },\n  exerciseHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  exerciseNumber: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#0a0\",\n    marginRight: 12,\n    minWidth: 30,\n  },\n  exerciseInfo: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  exerciseName: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    color: \"#fff\",\n    flex: 1,\n  },\n  bonusTag: {\n    backgroundColor: \"#fa0\",\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    marginLeft: 8,\n  },\n  bonusTagText: {\n    color: \"#000\",\n    fontSize: 11,\n    fontWeight: \"bold\",\n  },\n  exerciseDetails: {\n    paddingLeft: 42,\n  },\n  exerciseDetail: {\n    fontSize: 14,\n    color: \"#aaa\",\n    marginBottom: 4,\n  },\n  exerciseNotes: {\n    fontSize: 14,\n    color: \"#888\",\n    fontStyle: \"italic\",\n    marginTop: 8,\n  },\n  actions: {\n    padding: 20,\n    paddingBottom: 40,\n  },\n  startButton: {\n    backgroundColor: \"#0a0\",\n    padding: 16,\n    borderRadius: 12,\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  startButtonText: {\n    color: \"#000\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  backButton: {\n    padding: 16,\n    backgroundColor: \"#1a1a1a\",\n    borderRadius: 12,\n    alignItems: \"center\",\n  },\n  backButtonText: {\n    color: \"#0a0\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":8511},"apps/mobile/app/t-paths.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useRouter } from \"expo-router\";\nimport type { TPath } from \"@data/storage/models\";\n\nexport default function TPathsScreen() {\n  const { userId } = useAuth();\n  const { getTPaths, deleteTPath } = useData();\n  const router = useRouter();\n  const [tPaths, setTPaths] = useState<TPath[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const loadTPaths = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const data = await getTPaths(userId, true);\n      setTPaths(data);\n    } catch {\n      Alert.alert(\"Error\", \"Failed to load workout programs\");\n    } finally {\n      setLoading(false);\n    }\n  }, [getTPaths, userId]);\n\n  useEffect(() => {\n    loadTPaths();\n  }, [userId, loadTPaths]);\n\n  const handleDelete = (tPath: TPath) => {\n    Alert.alert(\n      \"Delete Program\",\n      `Are you sure you want to delete \"${tPath.template_name}\"?`,\n      [\n        { text: \"Cancel\", style: \"cancel\" },\n        {\n          text: \"Delete\",\n          style: \"destructive\",\n          onPress: async () => {\n            try {\n              await deleteTPath(tPath.id);\n              await loadTPaths();\n              Alert.alert(\"Success\", \"Program deleted\");\n            } catch {\n              Alert.alert(\"Error\", \"Failed to delete program\");\n            }\n          },\n        },\n      ],\n    );\n  };\n\n  const handleViewDetails = (tPath: TPath) => {\n    router.push({\n      pathname: \"/t-path-detail\",\n      params: { tPathId: tPath.id },\n    });\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Workout Programs</Text>\n        <Text style={styles.subtitle}>\n          {tPaths.length} program{tPaths.length !== 1 ? \"s\" : \"\"}\n        </Text>\n      </View>\n\n      {loading ? (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>Loading programs...</Text>\n        </View>\n      ) : tPaths.length === 0 ? (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>No workout programs yet</Text>\n          <Text style={styles.emptySubtext}>\n            AI-generated workout programs will appear here\n          </Text>\n        </View>\n      ) : (\n        tPaths.map((tPath) => (\n          <TouchableOpacity\n            key={tPath.id}\n            style={styles.tPathCard}\n            onPress={() => handleViewDetails(tPath)}\n          >\n            <View style={styles.tPathHeader}>\n              <View style={styles.tPathInfo}>\n                <View style={styles.titleRow}>\n                  <Text style={styles.tPathName}>{tPath.template_name}</Text>\n                  {tPath.is_ai_generated && (\n                    <View style={styles.aiTag}>\n                      <Text style={styles.aiTagText}>AI</Text>\n                    </View>\n                  )}\n                </View>\n                {tPath.description && (\n                  <Text style={styles.tPathDescription}>\n                    {tPath.description}\n                  </Text>\n                )}\n                <Text style={styles.tPathMeta}>\n                  {tPath.is_main_program ? \"Main Program\" : \"Workout\"}\n                </Text>\n              </View>\n            </View>\n\n            <View style={styles.tPathActions}>\n              <TouchableOpacity\n                style={styles.viewButton}\n                onPress={() => handleViewDetails(tPath)}\n              >\n                <Text style={styles.viewButtonText}>View Details</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={styles.deleteButton}\n                onPress={() => handleDelete(tPath)}\n              >\n                <Text style={styles.deleteButtonText}>Delete</Text>\n              </TouchableOpacity>\n            </View>\n          </TouchableOpacity>\n        ))\n      )}\n\n      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\n        <Text style={styles.backButtonText}>← Back</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#0a0a0a\",\n    paddingTop: 60,\n  },\n  header: {\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: \"#1a1a1a\",\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: \"#888\",\n  },\n  emptyState: {\n    padding: 40,\n    alignItems: \"center\",\n  },\n  emptyText: {\n    fontSize: 18,\n    color: \"#888\",\n    marginBottom: 8,\n  },\n  emptySubtext: {\n    fontSize: 14,\n    color: \"#666\",\n    textAlign: \"center\",\n  },\n  tPathCard: {\n    backgroundColor: \"#1a1a1a\",\n    margin: 16,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#2a2a2a\",\n  },\n  tPathHeader: {\n    marginBottom: 16,\n  },\n  tPathInfo: {\n    flex: 1,\n  },\n  titleRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 8,\n  },\n  tPathName: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    flex: 1,\n  },\n  aiTag: {\n    backgroundColor: \"#0a0\",\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    marginLeft: 8,\n  },\n  aiTagText: {\n    color: \"#000\",\n    fontSize: 12,\n    fontWeight: \"bold\",\n  },\n  tPathDescription: {\n    fontSize: 14,\n    color: \"#aaa\",\n    marginBottom: 8,\n  },\n  tPathMeta: {\n    fontSize: 12,\n    color: \"#666\",\n  },\n  tPathActions: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  viewButton: {\n    flex: 1,\n    backgroundColor: \"#0a0\",\n    padding: 12,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  viewButtonText: {\n    color: \"#000\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  deleteButton: {\n    backgroundColor: \"#2a2a2a\",\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n  },\n  deleteButtonText: {\n    color: \"#f44\",\n    fontSize: 16,\n  },\n  backButton: {\n    margin: 16,\n    padding: 16,\n    backgroundColor: \"#1a1a1a\",\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  backButtonText: {\n    color: \"#0a0\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":6370},"packages/data/src/ai/coaching.ts":{"content":"import { getOpenAIClient, AI_MODEL } from './openai-client';\n\nexport interface CoachingContext {\n  exerciseName: string;\n  currentSet: number;\n  totalSets: number;\n  targetReps: string;\n  userGoal?: string;\n  previousPerformance?: {\n    weight: number;\n    reps: number;\n  };\n}\n\nexport interface CoachingAdvice {\n  message: string;\n  type: 'motivation' | 'form' | 'progression' | 'rest';\n}\n\nexport async function getCoachingAdvice(context: CoachingContext): Promise<CoachingAdvice> {\n  const openai = getOpenAIClient();\n\n  const systemPrompt = `You are an encouraging and knowledgeable fitness coach. Provide brief, actionable coaching advice for exercises. Keep responses under 100 words and focus on motivation, form cues, or progression tips. Be supportive and energetic.`;\n\n  const userPrompt = `Exercise: ${context.exerciseName}\nCurrent Set: ${context.currentSet} of ${context.totalSets}\nTarget Reps: ${context.targetReps}\n${context.userGoal ? `User Goal: ${context.userGoal}` : ''}\n${context.previousPerformance ? `Last time: ${context.previousPerformance.weight}lbs x ${context.previousPerformance.reps} reps` : ''}\n\nProvide brief coaching advice. Respond with JSON in this format:\n{\n  \"message\": \"Your coaching message here\",\n  \"type\": \"motivation\" | \"form\" | \"progression\" | \"rest\"\n}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: AI_MODEL,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userPrompt }\n      ],\n      response_format: { type: 'json_object' },\n      max_completion_tokens: 256,\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('No content in AI response');\n    }\n\n    return JSON.parse(content) as CoachingAdvice;\n  } catch (error) {\n    console.error('Failed to get coaching advice:', error);\n    return {\n      message: \"You've got this! Focus on controlled movements and proper form.\",\n      type: 'motivation'\n    };\n  }\n}\n\nexport async function getFormTips(exerciseName: string): Promise<string[]> {\n  const openai = getOpenAIClient();\n\n  const systemPrompt = `You are a fitness expert specializing in exercise technique. Provide concise, actionable form tips.`;\n\n  const userPrompt = `Provide 3-5 key form tips for the exercise: ${exerciseName}\n\nEach tip should be a single clear sentence focusing on technique, safety, and effectiveness.\n\nRespond with JSON in this format:\n{\n  \"tips\": [\"Tip 1\", \"Tip 2\", \"Tip 3\"]\n}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: AI_MODEL,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userPrompt }\n      ],\n      response_format: { type: 'json_object' },\n      max_completion_tokens: 512,\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('No content in AI response');\n    }\n\n    const result = JSON.parse(content) as { tips: string[] };\n    return result.tips;\n  } catch (error) {\n    console.error('Failed to get form tips:', error);\n    return ['Focus on controlled movements', 'Maintain proper posture', 'Breathe consistently'];\n  }\n}\n","size_bytes":3204},"packages/data/src/ai/openai-client.ts":{"content":"import OpenAI from 'openai';\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n// Note: gpt-5 doesn't support temperature parameter, do not use it.\n\nlet openaiClient: OpenAI | null = null;\n\nexport function getOpenAIClient(): OpenAI {\n  if (!openaiClient) {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n      throw new Error('OPENAI_API_KEY environment variable is not set');\n    }\n    openaiClient = new OpenAI({ apiKey });\n  }\n  return openaiClient;\n}\n\nexport const AI_MODEL = 'gpt-5';\n","size_bytes":591},"packages/data/src/ai/workout-generator.ts":{"content":"import { getOpenAIClient, AI_MODEL } from './openai-client';\nimport type { EquipmentId } from '../constants/equipment';\nimport type { TPath, TPathExercise } from '../storage/models';\nimport { EXERCISES } from '../exercises';\n\nexport interface WorkoutGenerationParams {\n  goal: 'strength' | 'hypertrophy' | 'endurance' | 'weight_loss' | 'general_fitness';\n  experienceLevel: 'beginner' | 'intermediate' | 'advanced';\n  equipment: EquipmentId[];\n  daysPerWeek: number;\n  sessionDuration: number; // minutes\n  focusAreas?: string[]; // e.g., [\"Upper Body\", \"Core\", \"Legs\"]\n  restrictions?: string[]; // e.g., [\"No jumping\", \"Lower back issues\"]\n}\n\nexport interface GeneratedProgram {\n  name: string;\n  description: string;\n  durationWeeks: number;\n  workouts: GeneratedWorkout[];\n}\n\nexport interface GeneratedWorkout {\n  name: string;\n  description: string;\n  exercises: GeneratedExercise[];\n}\n\nexport interface GeneratedExercise {\n  exerciseName: string;\n  exerciseId?: string; // Will be matched to actual exercise\n  sets: number;\n  reps: string; // Can be range like \"8-12\" or specific like \"10\"\n  restSeconds: number;\n  notes?: string;\n}\n\nfunction findExerciseIdByName(name: string): string | null {\n  const normalized = name.toLowerCase().trim();\n  const exercise = EXERCISES.find(ex => \n    ex.name.toLowerCase() === normalized ||\n    ex.name.toLowerCase().includes(normalized) ||\n    normalized.includes(ex.name.toLowerCase())\n  );\n  return exercise?.id || null;\n}\n\nexport async function generateWorkoutProgram(\n  params: WorkoutGenerationParams\n): Promise<GeneratedProgram> {\n  const openai = getOpenAIClient();\n\n  const systemPrompt = `You are an expert fitness coach and program designer. Create personalized workout programs based on user goals, equipment availability, and experience level. Always provide safe, effective, and evidence-based training recommendations.`;\n\n  const userPrompt = `Create a ${params.daysPerWeek}-day per week workout program with the following specifications:\n\nGoal: ${params.goal}\nExperience Level: ${params.experienceLevel}\nSession Duration: ${params.sessionDuration} minutes\nAvailable Equipment: ${params.equipment.join(', ')}\n${params.focusAreas?.length ? `Focus Areas: ${params.focusAreas.join(', ')}` : ''}\n${params.restrictions?.length ? `Restrictions/Considerations: ${params.restrictions.join(', ')}` : ''}\n\nRequirements:\n1. Create a program name and description\n2. Design ${params.daysPerWeek} different workouts\n3. Each workout should have a name, description, and 4-8 exercises\n4. Each exercise needs: exercise name, sets, reps (as range like \"8-12\" or specific), rest time in seconds, and optional notes\n5. Only use exercises that can be performed with the available equipment\n6. Match the intensity and volume to the experience level\n7. Ensure proper exercise selection for the stated goal\n8. Include appropriate warm-up exercises\n9. Program duration should be 4-12 weeks\n\nRespond with valid JSON in this exact format:\n{\n  \"name\": \"Program Name\",\n  \"description\": \"Program description and overview\",\n  \"durationWeeks\": 8,\n  \"workouts\": [\n    {\n      \"name\": \"Workout Day 1 Name\",\n      \"description\": \"What this workout focuses on\",\n      \"exercises\": [\n        {\n          \"exerciseName\": \"Exercise name\",\n          \"sets\": 3,\n          \"reps\": \"8-12\",\n          \"restSeconds\": 60,\n          \"notes\": \"Optional form tips or progressions\"\n        }\n      ]\n    }\n  ]\n}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: AI_MODEL,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: userPrompt }\n      ],\n      response_format: { type: 'json_object' },\n      max_completion_tokens: 4096,\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('No content in AI response');\n    }\n\n    const program = JSON.parse(content) as GeneratedProgram;\n    \n    // Map exercise names to actual exercise IDs\n    program.workouts.forEach(workout => {\n      workout.exercises.forEach(exercise => {\n        const exerciseId = findExerciseIdByName(exercise.exerciseName);\n        if (exerciseId) {\n          exercise.exerciseId = exerciseId;\n        }\n      });\n    });\n    \n    return program;\n  } catch (error) {\n    console.error('Failed to generate workout program:', error);\n    throw new Error(`AI program generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n","size_bytes":4469},"packages/data/src/constants/equipment.ts":{"content":"export const EQUIPMENT_TYPES = [\n  { id: 'barbell', name: 'Barbell', category: 'free_weights' },\n  { id: 'dumbbell', name: 'Dumbbell', category: 'free_weights' },\n  { id: 'kettlebell', name: 'Kettlebell', category: 'free_weights' },\n  { id: 'ez_bar', name: 'EZ Bar', category: 'free_weights' },\n  { id: 'trap_bar', name: 'Trap Bar', category: 'free_weights' },\n  { id: 'weight_plates', name: 'Weight Plates', category: 'free_weights' },\n  { id: 'medicine_ball', name: 'Medicine Ball', category: 'free_weights' },\n  { id: 'cable_machine', name: 'Cable Machine', category: 'cables' },\n  { id: 'lat_pulldown', name: 'Lat Pulldown', category: 'cables' },\n  { id: 'cable_crossover', name: 'Cable Crossover', category: 'cables' },\n  { id: 'leg_press', name: 'Leg Press Machine', category: 'machines' },\n  { id: 'leg_extension', name: 'Leg Extension Machine', category: 'machines' },\n  { id: 'leg_curl', name: 'Leg Curl Machine', category: 'machines' },\n  { id: 'chest_press', name: 'Chest Press Machine', category: 'machines' },\n  { id: 'shoulder_press', name: 'Shoulder Press Machine', category: 'machines' },\n  { id: 'pec_deck', name: 'Pec Deck', category: 'machines' },\n  { id: 'smith_machine', name: 'Smith Machine', category: 'machines' },\n  { id: 'hack_squat', name: 'Hack Squat Machine', category: 'machines' },\n  { id: 'calf_raise', name: 'Calf Raise Machine', category: 'machines' },\n  { id: 'pull_up_bar', name: 'Pull-up Bar', category: 'bodyweight' },\n  { id: 'dip_station', name: 'Dip Station', category: 'bodyweight' },\n  { id: 'bodyweight', name: 'Bodyweight Only', category: 'bodyweight' },\n  { id: 'resistance_bands', name: 'Resistance Bands', category: 'accessories' },\n  { id: 'trx', name: 'TRX / Suspension Trainer', category: 'accessories' },\n  { id: 'plyo_box', name: 'Plyo Box', category: 'accessories' },\n  { id: 'battle_ropes', name: 'Battle Ropes', category: 'accessories' },\n  { id: 'bench', name: 'Bench (Flat/Adjustable)', category: 'benches' },\n  { id: 'power_rack', name: 'Power Rack / Squat Rack', category: 'racks' },\n  { id: 'treadmill', name: 'Treadmill', category: 'cardio' },\n  { id: 'rowing_machine', name: 'Rowing Machine', category: 'cardio' },\n  { id: 'stationary_bike', name: 'Stationary Bike', category: 'cardio' },\n  { id: 'elliptical', name: 'Elliptical', category: 'cardio' },\n] as const;\n\nexport const EQUIPMENT_CATEGORIES = [\n  { id: 'free_weights', name: 'Free Weights' },\n  { id: 'cables', name: 'Cable Machines' },\n  { id: 'machines', name: 'Strength Machines' },\n  { id: 'bodyweight', name: 'Bodyweight' },\n  { id: 'accessories', name: 'Accessories' },\n  { id: 'benches', name: 'Benches & Racks' },\n  { id: 'racks', name: 'Racks' },\n  { id: 'cardio', name: 'Cardio Equipment' },\n] as const;\n\nexport type EquipmentId = typeof EQUIPMENT_TYPES[number]['id'];\nexport type EquipmentCategoryId = typeof EQUIPMENT_CATEGORIES[number]['id'];\n","size_bytes":2878},"packages/data/src/utils/equipment-mapping.ts":{"content":"import { EquipmentId } from '../constants/equipment';\n\nexport const EXERCISE_EQUIPMENT_MAP: Record<string, EquipmentId[]> = {\n  'Barbell': ['barbell'],\n  'Dumbbell': ['dumbbell'],\n  'Kettlebell': ['kettlebell'],\n  'EZ Bar': ['ez_bar'],\n  'Trap Bar': ['trap_bar'],\n  'Machine': ['leg_press', 'leg_extension', 'leg_curl', 'chest_press', 'shoulder_press', 'pec_deck', 'smith_machine', 'hack_squat', 'calf_raise'],\n  'Cable': ['cable_machine', 'lat_pulldown', 'cable_crossover'],\n  'Bodyweight': ['bodyweight', 'pull_up_bar', 'dip_station'],\n  'Treadmill': ['treadmill'],\n  'Rowing Machine': ['rowing_machine'],\n  'Stationary Bike': ['stationary_bike'],\n  'Elliptical': ['elliptical'],\n  'Bench': ['bench'],\n  'Pull-up Bar': ['pull_up_bar'],\n  'Dip Station': ['dip_station'],\n};\n\nexport function canPerformExercise(exerciseEquipment: string | undefined, availableEquipment: string[]): boolean {\n  if (!exerciseEquipment) {\n    return true;\n  }\n\n  const requiredEquipmentIds = EXERCISE_EQUIPMENT_MAP[exerciseEquipment] || [];\n  \n  if (requiredEquipmentIds.length === 0) {\n    return true;\n  }\n\n  return requiredEquipmentIds.some(reqId => availableEquipment.includes(reqId));\n}\n\nexport function getExerciseEquipmentIds(exerciseEquipment: string | undefined): EquipmentId[] {\n  if (!exerciseEquipment) return [];\n  return EXERCISE_EQUIPMENT_MAP[exerciseEquipment] || [];\n}\n","size_bytes":1366},"apps/mobile/app/components/ai-coaching-card.tsx":{"content":"import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ActivityIndicator } from 'react-native';\nimport { getCoachingAdvice, getFormTips, type CoachingContext } from '@data/ai/coaching';\n\ninterface AICoachingCardProps {\n  exerciseName: string;\n  currentSet: number;\n  totalSets: number;\n  targetReps?: string;\n}\n\nexport function AICoachingCard({ exerciseName, currentSet, totalSets, targetReps }: AICoachingCardProps) {\n  const [advice, setAdvice] = useState<string | null>(null);\n  const [formTips, setFormTips] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showFormTips, setShowFormTips] = useState(false);\n\n  const handleGetCoaching = async () => {\n    setLoading(true);\n    try {\n      const context: CoachingContext = {\n        exerciseName,\n        currentSet,\n        totalSets,\n        targetReps: targetReps || '8-12',\n      };\n\n      const response = await getCoachingAdvice(context);\n      setAdvice(response.message);\n    } catch (error) {\n      setAdvice(\"You've got this! Focus on form and controlled movements.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGetFormTips = async () => {\n    if (formTips.length > 0) {\n      setShowFormTips(!showFormTips);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const tips = await getFormTips(exerciseName);\n      setFormTips(tips);\n      setShowFormTips(true);\n    } catch (error) {\n      console.error('Failed to get form tips:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerText}>✨ AI Coach</Text>\n        <View style={styles.buttonRow}>\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={handleGetCoaching}\n            disabled={loading}\n          >\n            {loading && !showFormTips ? (\n              <ActivityIndicator size=\"small\" color=\"#10b981\" />\n            ) : (\n              <Text style={styles.actionButtonText}>💪 Motivate</Text>\n            )}\n          </TouchableOpacity>\n          \n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={handleGetFormTips}\n            disabled={loading}\n          >\n            {loading && showFormTips ? (\n              <ActivityIndicator size=\"small\" color=\"#10b981\" />\n            ) : (\n              <Text style={styles.actionButtonText}>📋 Form Tips</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {advice && !showFormTips && (\n        <View style={styles.adviceBox}>\n          <Text style={styles.adviceText}>{advice}</Text>\n        </View>\n      )}\n\n      {showFormTips && formTips.length > 0 && (\n        <View style={styles.tipsBox}>\n          {formTips.map((tip, index) => (\n            <View key={index} style={styles.tipRow}>\n              <Text style={styles.tipBullet}>•</Text>\n              <Text style={styles.tipText}>{tip}</Text>\n            </View>\n          ))}\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#0d1f1a',\n    borderRadius: 12,\n    padding: 12,\n    borderWidth: 1,\n    borderColor: '#10b981',\n    marginTop: 12,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  headerText: {\n    color: '#10b981',\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  buttonRow: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  actionButton: {\n    backgroundColor: '#1a2f26',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    minWidth: 80,\n    alignItems: 'center',\n  },\n  actionButtonText: {\n    color: '#10b981',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  adviceBox: {\n    backgroundColor: '#1a2f26',\n    borderRadius: 8,\n    padding: 12,\n    marginTop: 8,\n  },\n  adviceText: {\n    color: '#fff',\n    fontSize: 14,\n    lineHeight: 20,\n  },\n  tipsBox: {\n    marginTop: 8,\n  },\n  tipRow: {\n    flexDirection: 'row',\n    marginBottom: 8,\n  },\n  tipBullet: {\n    color: '#10b981',\n    fontSize: 16,\n    marginRight: 8,\n    fontWeight: 'bold',\n  },\n  tipText: {\n    color: '#fff',\n    fontSize: 14,\n    flex: 1,\n    lineHeight: 20,\n  },\n});\n","size_bytes":4306},"MIGRATION_ROADMAP.md":{"content":"# React.js to React Native Migration Roadmap\n\n## 🎯 Overview\nComplete feature parity migration from Next.js web app to React Native mobile app. This document tracks all features, their status, and implementation priorities.\n\n---\n\n## ✅ Completed Features (~80% Parity)\n\n### Core Infrastructure\n- ✅ **Authentication** - Supabase email/password auth with session persistence\n- ✅ **Offline-First Sync** - SQLite + automatic Supabase sync queue\n- ✅ **Data Context** - React Context API for state management\n- ✅ **Form Validation** - React Hook Form + Zod schemas\n\n### Workout Features\n- ✅ **Workout Logging** - Multi-exercise tracking with sets/reps/weight\n- ✅ **PR Detection** - Automatic personal record detection & celebration\n- ✅ **Rest Timer** - Countdown timer between sets\n- ✅ **Workout Templates** - Save/load workout configurations\n- ✅ **T-Paths System** - Database schema for workout programs\n\n### Equipment & Gym Management\n- ✅ **Equipment System** - 32 equipment types across 8 categories\n- ✅ **Gym CRUD** - Create, read, update, delete gym profiles\n- ✅ **Active Gym Selection** - Set one gym as active\n- ✅ **Equipment-Aware Filtering** - Exercise picker filters by gym equipment\n\n### AI Integration\n- ✅ **AI Coaching** - Real-time motivation & form tips during workouts\n- ✅ **AI Program Generation** - PPL/ULUL-specific workout generation with equipment awareness\n- ✅ **AI Exercise Detection** - Photo-based equipment identification via OpenAI GPT-4o\n\n### Progress & Analytics\n- ✅ **Dashboard** - Key metrics, workout frequency, volume tracking\n- ✅ **Body Measurements** - Weight, body fat %, measurements with history\n- ✅ **Goals System** - 5 goal types with progress tracking\n- ✅ **Achievements** - 21 predefined achievements with auto-unlock\n- ✅ **Charts** - Recharts integration for PR progression, volume trends\n\n### User Preferences\n- ✅ **Unit System** - Metric/Imperial toggle\n- ✅ **Theme** - Dark/light mode preference\n\n### Onboarding\n- ✅ **5-Step Onboarding** - Complete flow with personal info, training setup, goals, gym setup, and optional photo analysis\n\n### PPL/ULUL Split System\n- ✅ **Split Selection** - PPL (3-day) or ULUL (4-day) split selection\n- ✅ **Split-Aware Workouts** - Workout generation based on split type\n- ✅ **Color-Coded UI** - Workout session screen with split-specific colored buttons\n\n### Design System & UI Polish\n- ✅ **Design System** - Comprehensive design constants matching web app (colors, spacing, typography, shadows)\n- ✅ **Consistent Styling** - Home, login, and workout screens using unified design system\n- ✅ **Color Scheme** - PPL/ULUL workout colors aligned with web app\n- ✅ **Visual Polish** - Modern shadows, rounded corners, improved button styles\n\n---\n\n## ❌ Missing Features (~25% Gap)\n\n---\n\n### 🟡 PHASE 17: Media Library (MEDIUM PRIORITY)\n**Status**: Not Started  \n**Priority**: 🟡 MEDIUM  \n**Estimated Effort**: 2-3 days\n\n---\n\n### 🟡 PHASE 18: Progress Photos (MEDIUM PRIORITY)\n**Status**: Not Started  \n**Priority**: 🟡 MEDIUM  \n**Estimated Effort**: 1-2 days\n\n---\n\n### ✅ PHASE 19: Additional UI/UX Enhancements (COMPLETED)\n**Status**: ✅ Complete  \n**Priority**: 🟢 LOW  \n**Completed**: January 2025\n\n**Delivered**:\n- Comprehensive design system constants matching web app\n- Updated home screen with modern styling\n- Polished login/signup screen\n- Color-coded workout buttons using design system\n- Consistent spacing, typography, and shadows across key screens\n\n---\n\n## 📋 Implementation Order\n\n### **Completed** ✅\n1. ✅ **PHASE 14**: PPL/ULUL Split System\n2. ✅ **PHASE 15**: Photo Upload + AI Detection\n3. ✅ **PHASE 16**: Complete Onboarding Flow\n4. ✅ **PHASE 19**: UI/UX Polish & Design System\n\n### **Remaining Priority** (Next 1 week)\n5. **PHASE 17**: Media Library (2-3 days)\n6. **PHASE 18**: Progress Photos (1-2 days)\n\n### **Total Estimated Time to Full Parity**: ~3-5 days\n\n---\n\n*Last Updated: January 2025*\n*Migration Progress: ~80% → Target: 100%*\n","size_bytes":4015},"apps/mobile/app/workout-session.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n  ActivityIndicator,\n} from \"react-native\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useRouter, useLocalSearchParams } from \"expo-router\";\nimport type { TPath } from \"@data/storage/models\";\nimport { Colors } from \"../constants/design-system\";\n\n// Color mapping for different workout types - using design system colors\nfunction getWorkoutColors(workoutName: string) {\n  const name = workoutName.toLowerCase();\n\n  // PPL Colors - match web app design system\n  if (name.includes(\"push\")) {\n    return {\n      bg: Colors.workoutPush,\n      text: Colors.foreground,\n      border: Colors.workoutPushLight,\n    };\n  }\n  if (name.includes(\"pull\")) {\n    return {\n      bg: Colors.workoutPull,\n      text: Colors.foreground,\n      border: Colors.workoutPullLight,\n    };\n  }\n  if (name.includes(\"leg\")) {\n    return {\n      bg: Colors.workoutLegs,\n      text: Colors.foreground,\n      border: Colors.workoutLegsLight,\n    };\n  }\n\n  // ULUL Colors - match web app design system\n  if (\n    name.includes(\"upper\") &&\n    (name.includes(\"a\") || name.includes(\"1\") || !name.includes(\"b\"))\n  ) {\n    return {\n      bg: Colors.workoutUpperA,\n      text: Colors.foreground,\n      border: Colors.workoutUpperALight,\n    };\n  }\n  if (name.includes(\"upper\") && (name.includes(\"b\") || name.includes(\"2\"))) {\n    return {\n      bg: Colors.workoutUpperB,\n      text: Colors.foreground,\n      border: Colors.workoutUpperBLight,\n    };\n  }\n  if (\n    name.includes(\"lower\") &&\n    (name.includes(\"a\") || name.includes(\"1\") || !name.includes(\"b\"))\n  ) {\n    return {\n      bg: Colors.workoutLowerA,\n      text: Colors.foreground,\n      border: Colors.workoutLowerALight,\n    };\n  }\n  if (name.includes(\"lower\") && (name.includes(\"b\") || name.includes(\"2\"))) {\n    return {\n      bg: Colors.workoutLowerB,\n      text: Colors.foreground,\n      border: Colors.workoutLowerBLight,\n    };\n  }\n\n  // Bonus workouts\n  if (name.includes(\"bonus\")) {\n    return {\n      bg: Colors.workoutBonus,\n      text: Colors.foreground,\n      border: Colors.workoutBonusLight,\n    };\n  }\n\n  // Default\n  return {\n    bg: Colors.actionPrimary,\n    text: Colors.foreground,\n    border: Colors.actionPrimaryLight,\n  };\n}\n\nfunction getSplitTypeFromTPath(tPath: TPath | null): \"ppl\" | \"ulul\" | null {\n  if (!tPath) {\n    return null;\n  }\n\n  // First, check settings for explicit split type\n  const settings = tPath.settings as any;\n  if (settings?.tPathType === \"ppl\" || settings?.tPathType === \"ulul\") {\n    return settings.tPathType;\n  }\n\n  // Fallback to template name detection\n  if (\n    tPath.template_name.toLowerCase().includes(\"push\") ||\n    tPath.template_name.toLowerCase().includes(\"pull\") ||\n    tPath.template_name.toLowerCase().includes(\"ppl\")\n  ) {\n    return \"ppl\";\n  }\n  if (\n    tPath.template_name.toLowerCase().includes(\"upper\") ||\n    tPath.template_name.toLowerCase().includes(\"lower\") ||\n    tPath.template_name.toLowerCase().includes(\"ulul\")\n  ) {\n    return \"ulul\";\n  }\n\n  return null;\n}\n\nexport default function WorkoutSessionScreen() {\n  const { userId } = useAuth();\n  const { getTPaths, getTPathProgress } = useData();\n  const router = useRouter();\n  const params = useLocalSearchParams();\n  const tPathId = params.tPathId as string | undefined;\n\n  const [mainTPath, setMainTPath] = useState<TPath | null>(null);\n  const [childWorkouts, setChildWorkouts] = useState<TPath[]>([]);\n  const [workoutProgress, setWorkoutProgress] = useState<\n    Record<string, { last_accessed: string | null }>\n  >({});\n  const [loading, setLoading] = useState(true);\n  const [activeGymName, setActiveGymName] = useState<string>(\"My Gym\");\n\n  const loadWorkouts = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const allTPaths = await getTPaths(userId, true);\n\n      // Find the main T-Path (either from params or the first main program)\n      let selectedMainTPath: TPath | null = null;\n      if (tPathId) {\n        selectedMainTPath = allTPaths.find((tp) => tp.id === tPathId) || null;\n      } else {\n        // Find first main program (PPL or ULUL)\n        selectedMainTPath =\n          allTPaths.find(\n            (tp) =>\n              tp.is_main_program &&\n              (tp.template_name.includes(\"Push/Pull/Legs\") ||\n                tp.template_name.includes(\"Upper/Lower\")),\n          ) || null;\n      }\n\n      if (!selectedMainTPath) {\n        setLoading(false);\n        return;\n      }\n\n      setMainTPath(selectedMainTPath);\n\n      // Get child workouts\n      const children = allTPaths.filter(\n        (tp) => tp.parent_t_path_id === selectedMainTPath.id,\n      );\n      setChildWorkouts(children);\n\n      // Load progress for each child workout\n      const progressData: Record<string, { last_accessed: string | null }> = {};\n      for (const child of children) {\n        const progress = await getTPathProgress(child.id, userId);\n        if (progress) {\n          progressData[child.id] = { last_accessed: progress.last_accessed };\n        }\n      }\n      setWorkoutProgress(progressData);\n\n      // Extract gym name from settings if available\n      const settings = selectedMainTPath.settings as any;\n      if (settings?.gymName) {\n        setActiveGymName(settings.gymName);\n      }\n    } catch (error) {\n      console.error(\"Error loading workouts:\", error);\n      Alert.alert(\"Error\", \"Failed to load workouts\");\n    } finally {\n      setLoading(false);\n    }\n  }, [getTPathProgress, getTPaths, tPathId, userId]);\n\n  useEffect(() => {\n    loadWorkouts();\n  }, [loadWorkouts]);\n\n  const handleStartWorkout = (workout: TPath) => {\n    router.push({\n      pathname: \"/workout\",\n      params: { workoutId: workout.id },\n    });\n  };\n\n  const handleStartAdHoc = () => {\n    router.push(\"/workout\");\n  };\n\n  const getLastTrainedText = (workoutId: string): string => {\n    const progress = workoutProgress[workoutId];\n    if (!progress?.last_accessed) {\n      return \"Never\";\n    }\n\n    const lastDate = new Date(progress.last_accessed);\n    const now = new Date();\n    const diffMs = now.getTime() - lastDate.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n      return \"Today\";\n    }\n    if (diffDays === 1) {\n      return \"Yesterday\";\n    }\n    if (diffDays < 7) {\n      return `${diffDays} days ago`;\n    }\n    if (diffDays < 30) {\n      return `${Math.floor(diffDays / 7)} weeks ago`;\n    }\n    return `${Math.floor(diffDays / 30)} months ago`;\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#6366F1\" />\n        <Text style={styles.loadingText}>Loading workouts...</Text>\n      </View>\n    );\n  }\n\n  if (!mainTPath) {\n    return (\n      <ScrollView style={styles.container}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Workout Session</Text>\n          <Text style={styles.subtitle}>No workout program found</Text>\n        </View>\n\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>\n            You don't have a workout program yet\n          </Text>\n          <Text style={styles.emptySubtext}>\n            Create one using the AI Program Generator\n          </Text>\n          <TouchableOpacity\n            style={styles.generateButton}\n            onPress={() => router.push(\"/ai-program-generator\")}\n          >\n            <Text style={styles.generateButtonText}>✨ Generate Program</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.adHocSection}>\n          <Text style={styles.adHocTitle}>⚡ Start Ad-Hoc Workout</Text>\n          <Text style={styles.adHocSubtitle}>\n            Start a workout without a T-Path. Add exercises as you go.\n          </Text>\n          <TouchableOpacity\n            style={styles.adHocButton}\n            onPress={handleStartAdHoc}\n          >\n            <Text style={styles.adHocButtonText}>Start Empty</Text>\n          </TouchableOpacity>\n        </View>\n\n        <TouchableOpacity\n          style={styles.backButton}\n          onPress={() => router.back()}\n        >\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    );\n  }\n\n  const splitType = getSplitTypeFromTPath(mainTPath);\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Workout Session</Text>\n        <Text style={styles.subtitle}>\n          Select a workout or start an ad-hoc session.\n        </Text>\n      </View>\n\n      {/* Active Gym */}\n      <View style={styles.gymSelector}>\n        <Text style={styles.gymLabel}>Active Gym</Text>\n        <View style={styles.gymBadge}>\n          <Text style={styles.gymBadgeIcon}>🏋️</Text>\n          <Text style={styles.gymBadgeText}>{activeGymName}</Text>\n        </View>\n      </View>\n\n      {/* Main Program Header */}\n      <View style={styles.programHeader}>\n        <Text style={styles.programIcon}>🎯</Text>\n        <Text style={styles.programName}>{mainTPath.template_name}</Text>\n      </View>\n\n      {/* Workout Buttons */}\n      <View style={styles.workoutsContainer}>\n        {childWorkouts.length === 0 ? (\n          <View style={styles.noWorkoutsState}>\n            <Text style={styles.noWorkoutsText}>\n              No workouts in this program\n            </Text>\n          </View>\n        ) : (\n          childWorkouts.map((workout) => {\n            const colors = getWorkoutColors(workout.template_name, splitType);\n            const lastTrained = getLastTrainedText(workout.id);\n\n            return (\n              <TouchableOpacity\n                key={workout.id}\n                style={[\n                  styles.workoutButton,\n                  { backgroundColor: colors.bg, borderColor: colors.border },\n                ]}\n                onPress={() => handleStartWorkout(workout)}\n              >\n                <View style={styles.workoutButtonContent}>\n                  <View style={styles.workoutButtonLeft}>\n                    <Text\n                      style={[styles.workoutButtonIcon, { color: colors.text }]}\n                    >\n                      {workout.template_name.includes(\"Push\") && \"↗️\"}\n                      {workout.template_name.includes(\"Pull\") && \"↙️\"}\n                      {workout.template_name.includes(\"Legs\") && \"🦵\"}\n                      {workout.template_name.includes(\"Upper\") && \"💪\"}\n                      {workout.template_name.includes(\"Lower\") && \"🏃\"}\n                    </Text>\n                    <View>\n                      <Text\n                        style={[\n                          styles.workoutButtonTitle,\n                          { color: colors.text },\n                        ]}\n                      >\n                        {workout.template_name}\n                      </Text>\n                      <Text\n                        style={[\n                          styles.workoutButtonStatus,\n                          { color: colors.text },\n                          styles.workoutButtonStatusOpacity,\n                        ]}\n                      >\n                        {lastTrained}\n                      </Text>\n                    </View>\n                  </View>\n                </View>\n              </TouchableOpacity>\n            );\n          })\n        )}\n      </View>\n\n      {/* Ad-Hoc Workout Section */}\n      <View style={styles.adHocSection}>\n        <Text style={styles.adHocTitle}>⚡ Start Ad-Hoc Workout</Text>\n        <Text style={styles.adHocSubtitle}>\n          Start a workout without a T-Path. Add exercises as you go.\n        </Text>\n        <View style={styles.adHocButtons}>\n          <TouchableOpacity\n            style={styles.adHocButton}\n            onPress={handleStartAdHoc}\n          >\n            <Text style={styles.adHocButtonText}>Start Empty</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.generateButton}\n            onPress={() => router.push(\"/ai-program-generator\")}\n          >\n            <Text style={styles.generateButtonText}>✨ Generate</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\n        <Text style={styles.backButtonText}>← Back</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#F9FAFB\",\n  },\n  loadingContainer: {\n    flex: 1,\n    backgroundColor: \"#F9FAFB\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    marginTop: 16,\n    fontSize: 16,\n    color: \"#6B7280\",\n  },\n  header: {\n    paddingTop: 60,\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n    backgroundColor: \"#FFFFFF\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#E5E7EB\",\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#111827\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: \"#6B7280\",\n  },\n  gymSelector: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: \"#FFFFFF\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#E5E7EB\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  gymLabel: {\n    fontSize: 14,\n    color: \"#6B7280\",\n    fontWeight: \"600\",\n  },\n  gymBadge: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: \"#F3F4F6\",\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n  },\n  gymBadgeIcon: {\n    fontSize: 16,\n    marginRight: 6,\n  },\n  gymBadgeText: {\n    fontSize: 14,\n    fontWeight: \"600\",\n    color: \"#111827\",\n  },\n  programHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingHorizontal: 20,\n    paddingVertical: 20,\n    backgroundColor: \"#FFFFFF\",\n    borderBottomWidth: 1,\n    borderBottomColor: \"#E5E7EB\",\n  },\n  programIcon: {\n    fontSize: 24,\n    marginRight: 12,\n  },\n  programName: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#111827\",\n  },\n  workoutsContainer: {\n    padding: 20,\n  },\n  workoutButton: {\n    borderRadius: 12,\n    borderWidth: 2,\n    padding: 16,\n    marginBottom: 12,\n  },\n  workoutButtonContent: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  workoutButtonLeft: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    flex: 1,\n  },\n  workoutButtonIcon: {\n    fontSize: 24,\n    marginRight: 12,\n  },\n  workoutButtonTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  workoutButtonStatus: {\n    fontSize: 14,\n    marginTop: 4,\n  },\n  workoutButtonStatusOpacity: {\n    opacity: 0.8,\n  },\n  adHocSection: {\n    padding: 20,\n    backgroundColor: \"#FFFFFF\",\n    margin: 20,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: \"#E5E7EB\",\n    borderStyle: \"dashed\",\n  },\n  adHocTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#111827\",\n    marginBottom: 8,\n  },\n  adHocSubtitle: {\n    fontSize: 14,\n    color: \"#6B7280\",\n    marginBottom: 16,\n  },\n  adHocButtons: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  adHocButton: {\n    flex: 1,\n    backgroundColor: \"#FFFFFF\",\n    borderWidth: 2,\n    borderColor: \"#E5E7EB\",\n    padding: 12,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  adHocButtonText: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#111827\",\n  },\n  generateButton: {\n    flex: 1,\n    backgroundColor: \"#111827\",\n    padding: 12,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  generateButtonText: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#FFFFFF\",\n  },\n  emptyState: {\n    padding: 40,\n    alignItems: \"center\",\n  },\n  emptyText: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    color: \"#6B7280\",\n    marginBottom: 8,\n    textAlign: \"center\",\n  },\n  emptySubtext: {\n    fontSize: 14,\n    color: \"#9CA3AF\",\n    textAlign: \"center\",\n    marginBottom: 24,\n  },\n  noWorkoutsState: {\n    padding: 32,\n    alignItems: \"center\",\n  },\n  noWorkoutsText: {\n    fontSize: 16,\n    color: \"#9CA3AF\",\n  },\n  backButton: {\n    margin: 20,\n    padding: 16,\n    backgroundColor: \"#FFFFFF\",\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#E5E7EB\",\n    alignItems: \"center\",\n  },\n  backButtonText: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#6366F1\",\n  },\n});\n","size_bytes":16503},"apps/mobile/app/gym-photo-analyzer.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Image,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { useAuth } from \"./_contexts/auth-context\";\nimport { useData } from \"./_contexts/data-context\";\nimport { useRouter } from \"expo-router\";\nimport { supabase } from \"./_lib/supabase\";\n\ninterface DetectedExercise {\n  id?: string;\n  name: string;\n  main_muscle: string;\n  type: \"weight\" | \"timed\" | \"bodyweight\";\n  category: \"Bilateral\" | \"Unilateral\" | null;\n  movement_type?: \"compound\" | \"isolation\";\n  movement_pattern?: \"Push\" | \"Pull\" | \"Legs\" | \"Core\";\n  description: string;\n  pro_tip: string;\n  video_url?: string;\n  duplicate_status: \"none\" | \"global\" | \"my-exercises\";\n  existing_id?: string;\n}\n\nexport default function GymPhotoAnalyzerScreen() {\n  const { session, userId } = useAuth();\n  const { getGyms } = useData();\n  const router = useRouter();\n  const [images, setImages] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [detectedExercises, setDetectedExercises] = useState<\n    DetectedExercise[]\n  >([]);\n  const [selectedExercises, setSelectedExercises] = useState<Set<number>>(\n    new Set(),\n  );\n\n  const requestPermissions = async () => {\n    const { status: cameraStatus } =\n      await ImagePicker.requestCameraPermissionsAsync();\n    const { status: mediaStatus } =\n      await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if (cameraStatus !== \"granted\" || mediaStatus !== \"granted\") {\n      Alert.alert(\n        \"Permission Required\",\n        \"Camera and photo library permissions are needed to use this feature.\",\n      );\n      return false;\n    }\n    return true;\n  };\n\n  const pickFromCamera = async () => {\n    const hasPermission = await requestPermissions();\n    if (!hasPermission) {\n      return;\n    }\n\n    const result = await ImagePicker.launchCameraAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      quality: 0.8,\n      base64: true,\n    });\n\n    if (!result.canceled && result.assets[0].base64) {\n      setImages((prev) => [...prev, result.assets[0].base64!]);\n    }\n  };\n\n  const pickFromGallery = async () => {\n    const hasPermission = await requestPermissions();\n    if (!hasPermission) {\n      return;\n    }\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsMultipleSelection: true,\n      quality: 0.8,\n      base64: true,\n    });\n\n    if (!result.canceled) {\n      const newImages = result.assets\n        .filter((asset) => asset.base64)\n        .map((asset) => asset.base64!);\n      setImages((prev) => [...prev, ...newImages]);\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setImages((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const analyzeImages = async () => {\n    if (images.length === 0) {\n      Alert.alert(\"No Images\", \"Please add at least one image to analyze.\");\n      return;\n    }\n\n    if (!session?.access_token) {\n      Alert.alert(\n        \"Not Logged In\",\n        \"You must be logged in to use this feature.\",\n      );\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const SUPABASE_PROJECT_ID = \"mgbfevrzrbjjiajkqpti\";\n      const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/identify-equipment`;\n\n      const response = await fetch(EDGE_FUNCTION_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify({ base64Images: images }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || \"Failed to analyze images\");\n      }\n\n      const identifiedExercises = data.identifiedExercises || [];\n\n      if (identifiedExercises.length === 0) {\n        Alert.alert(\n          \"No Exercises Found\",\n          \"The AI couldn't identify any specific exercises from the uploaded images. Please try different angles or add them manually.\",\n        );\n        return;\n      }\n\n      setDetectedExercises(identifiedExercises);\n      Alert.alert(\n        \"Analysis Complete!\",\n        `Found ${identifiedExercises.length} exercises. Review them below.`,\n        [{ text: \"OK\" }],\n      );\n    } catch (error: any) {\n      console.error(\"Error analyzing images:\", error);\n      Alert.alert(\n        \"Analysis Failed\",\n        error.message || \"An error occurred during analysis.\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDuplicateStatusColor = (status: string) => {\n    switch (status) {\n      case \"my-exercises\":\n        return \"#F59E0B\";\n      case \"global\":\n        return \"#3B82F6\";\n      default:\n        return \"#10B981\";\n    }\n  };\n\n  const getDuplicateStatusText = (status: string) => {\n    switch (status) {\n      case \"my-exercises\":\n        return \"Already in My Exercises\";\n      case \"global\":\n        return \"Global Exercise\";\n      default:\n        return \"New Exercise\";\n    }\n  };\n\n  const toggleExerciseSelection = (index: number) => {\n    setSelectedExercises((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(index)) {\n        newSet.delete(index);\n      } else {\n        newSet.add(index);\n      }\n      return newSet;\n    });\n  };\n\n  const saveSelectedExercises = async () => {\n    if (selectedExercises.size === 0) {\n      Alert.alert(\n        \"No Selection\",\n        \"Please select at least one exercise to save.\",\n      );\n      return;\n    }\n\n    const gyms = await getGyms(userId);\n    const activeGym = gyms.find((g) => g.is_active);\n\n    if (!activeGym) {\n      Alert.alert(\n        \"No Active Gym\",\n        \"Please set an active gym first before saving exercises.\",\n      );\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const exercisesToSave = Array.from(selectedExercises).map(\n        (idx) => detectedExercises[idx],\n      );\n      const newExerciseIds: string[] = [];\n\n      for (const exercise of exercisesToSave) {\n        if (exercise.duplicate_status !== \"none\") {\n          continue;\n        }\n\n        const exerciseId = `exercise_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const now = new Date().toISOString();\n\n        const { error: insertError } = await supabase\n          .from(\"exercise_definitions\")\n          .insert({\n            id: exerciseId,\n            name: exercise.name,\n            main_muscle: exercise.main_muscle,\n            type: exercise.type,\n            category: exercise.category,\n            movement_type: exercise.movement_type,\n            movement_pattern: exercise.movement_pattern,\n            description: exercise.description,\n            pro_tip: exercise.pro_tip,\n            video_url: exercise.video_url || null,\n            user_id: userId,\n            library_id: null,\n            created_at: now,\n          });\n\n        if (insertError) {\n          console.error(\"Error saving exercise:\", insertError);\n          continue;\n        }\n\n        newExerciseIds.push(exerciseId);\n      }\n\n      if (newExerciseIds.length > 0) {\n        const gymLinks = newExerciseIds.map((exId) => ({\n          gym_id: activeGym.id,\n          exercise_id: exId,\n          created_at: new Date().toISOString(),\n        }));\n\n        const { error: linkError } = await supabase\n          .from(\"gym_exercises\")\n          .insert(gymLinks);\n\n        if (linkError) {\n          console.error(\"Error linking exercises to gym:\", linkError);\n          Alert.alert(\n            \"Partial Success\",\n            `Saved ${newExerciseIds.length} exercises but failed to link some to your gym.`,\n          );\n        } else {\n          Alert.alert(\n            \"Success!\",\n            `Saved ${newExerciseIds.length} new exercises to \"${activeGym.name}\"`,\n            [\n              {\n                text: \"OK\",\n                onPress: () => {\n                  setDetectedExercises([]);\n                  setSelectedExercises(new Set());\n                  setImages([]);\n                  router.back();\n                },\n              },\n            ],\n          );\n        }\n      } else {\n        Alert.alert(\n          \"No New Exercises\",\n          \"All selected exercises already exist in your library.\",\n        );\n      }\n    } catch (error: any) {\n      console.error(\"Error saving exercises:\", error);\n      Alert.alert(\n        \"Save Failed\",\n        error.message || \"An error occurred while saving exercises.\",\n      );\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <ScrollView\n      style={styles.container}\n      contentContainerStyle={styles.contentContainer}\n    >\n      <View style={styles.header}>\n        <Text style={styles.title}>📸 Analyze Gym Equipment</Text>\n        <Text style={styles.subtitle}>\n          Take photos of your gym equipment and let AI identify possible\n          exercises\n        </Text>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Upload Photos</Text>\n        <View style={styles.buttonRow}>\n          <TouchableOpacity\n            style={styles.uploadButton}\n            onPress={pickFromCamera}\n          >\n            <Text style={styles.uploadButtonText}>📷 Camera</Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            style={styles.uploadButton}\n            onPress={pickFromGallery}\n          >\n            <Text style={styles.uploadButtonText}>🖼️ Gallery</Text>\n          </TouchableOpacity>\n        </View>\n\n        {images.length > 0 && (\n          <View style={styles.previewContainer}>\n            <Text style={styles.previewTitle}>\n              {images.length} image(s) selected\n            </Text>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n              {images.map((img, index) => (\n                <View key={index} style={styles.imagePreview}>\n                  <Image\n                    source={{ uri: `data:image/jpeg;base64,${img}` }}\n                    style={styles.previewImage}\n                  />\n                  <TouchableOpacity\n                    style={styles.removeButton}\n                    onPress={() => removeImage(index)}\n                  >\n                    <Text style={styles.removeButtonText}>✕</Text>\n                  </TouchableOpacity>\n                </View>\n              ))}\n            </ScrollView>\n            <TouchableOpacity\n              style={[\n                styles.analyzeButton,\n                loading && styles.analyzeButtonDisabled,\n              ]}\n              onPress={analyzeImages}\n              disabled={loading}\n            >\n              {loading ? (\n                <ActivityIndicator color=\"#fff\" />\n              ) : (\n                <Text style={styles.analyzeButtonText}>\n                  ✨ Analyze {images.length} Image(s)\n                </Text>\n              )}\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n\n      {detectedExercises.length > 0 && (\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>\n            Detected Exercises ({detectedExercises.length}) - Select to Save\n          </Text>\n          {detectedExercises.map((exercise, index) => (\n            <TouchableOpacity\n              key={index}\n              style={[\n                styles.exerciseCard,\n                selectedExercises.has(index) && styles.exerciseCardSelected,\n              ]}\n              onPress={() => toggleExerciseSelection(index)}\n              disabled={exercise.duplicate_status !== \"none\"}\n            >\n              <View style={styles.exerciseHeader}>\n                <Text style={styles.exerciseName}>{exercise.name}</Text>\n                <View\n                  style={[\n                    styles.statusBadge,\n                    {\n                      backgroundColor: getDuplicateStatusColor(\n                        exercise.duplicate_status,\n                      ),\n                    },\n                  ]}\n                >\n                  <Text style={styles.statusBadgeText}>\n                    {getDuplicateStatusText(exercise.duplicate_status)}\n                  </Text>\n                </View>\n              </View>\n              <Text style={styles.exerciseMuscle}>{exercise.main_muscle}</Text>\n              <Text style={styles.exerciseType}>\n                {exercise.type} • {exercise.category || \"N/A\"} •{\" \"}\n                {exercise.movement_type || \"N/A\"}\n              </Text>\n              {exercise.description && (\n                <Text style={styles.exerciseDescription}>\n                  {exercise.description}\n                </Text>\n              )}\n              {exercise.pro_tip && (\n                <View style={styles.proTipContainer}>\n                  <Text style={styles.proTipLabel}>💡 Pro Tip:</Text>\n                  <Text style={styles.proTipText}>{exercise.pro_tip}</Text>\n                </View>\n              )}\n              {selectedExercises.has(index) &&\n                exercise.duplicate_status === \"none\" && (\n                  <View style={styles.checkmark}>\n                    <Text style={styles.checkmarkText}>✓</Text>\n                  </View>\n                )}\n            </TouchableOpacity>\n          ))}\n\n          {selectedExercises.size > 0 && (\n            <TouchableOpacity\n              style={[styles.saveButton, saving && styles.saveButtonDisabled]}\n              onPress={saveSelectedExercises}\n              disabled={saving}\n            >\n              {saving ? (\n                <ActivityIndicator color=\"#fff\" />\n              ) : (\n                <Text style={styles.saveButtonText}>\n                  💾 Save {selectedExercises.size} Exercise(s) to Active Gym\n                </Text>\n              )}\n            </TouchableOpacity>\n          )}\n        </View>\n      )}\n\n      <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\n        <Text style={styles.backButtonText}>← Back</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  contentContainer: {\n    padding: 16,\n    paddingBottom: 100,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    lineHeight: 20,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 12,\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  uploadButton: {\n    flex: 1,\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    alignItems: \"center\",\n  },\n  uploadButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  previewContainer: {\n    marginTop: 16,\n  },\n  previewTitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 12,\n  },\n  imagePreview: {\n    position: \"relative\",\n    marginRight: 12,\n  },\n  previewImage: {\n    width: 100,\n    height: 100,\n    borderRadius: 8,\n  },\n  removeButton: {\n    position: \"absolute\",\n    top: -8,\n    right: -8,\n    backgroundColor: \"#EF4444\",\n    borderRadius: 12,\n    width: 24,\n    height: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  removeButtonText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"bold\",\n  },\n  analyzeButton: {\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginTop: 16,\n  },\n  analyzeButtonDisabled: {\n    opacity: 0.5,\n  },\n  analyzeButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  exerciseCard: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  exerciseHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    marginBottom: 8,\n  },\n  exerciseName: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    flex: 1,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    marginLeft: 8,\n  },\n  statusBadgeText: {\n    color: \"#fff\",\n    fontSize: 11,\n    fontWeight: \"600\",\n  },\n  exerciseMuscle: {\n    fontSize: 16,\n    color: \"#10B981\",\n    marginBottom: 4,\n  },\n  exerciseType: {\n    fontSize: 13,\n    color: \"#888\",\n    marginBottom: 8,\n  },\n  exerciseDescription: {\n    fontSize: 14,\n    color: \"#ccc\",\n    marginBottom: 8,\n    lineHeight: 20,\n  },\n  proTipContainer: {\n    backgroundColor: \"#0a0a0a\",\n    padding: 12,\n    borderRadius: 6,\n    borderLeftWidth: 3,\n    borderLeftColor: \"#10B981\",\n  },\n  proTipLabel: {\n    fontSize: 13,\n    fontWeight: \"600\",\n    color: \"#10B981\",\n    marginBottom: 4,\n  },\n  proTipText: {\n    fontSize: 13,\n    color: \"#ccc\",\n    lineHeight: 18,\n  },\n  backButton: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  backButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  exerciseCardSelected: {\n    borderColor: \"#10B981\",\n    borderWidth: 2,\n    backgroundColor: \"#0a1a14\",\n  },\n  checkmark: {\n    position: \"absolute\",\n    top: 12,\n    right: 12,\n    backgroundColor: \"#10B981\",\n    borderRadius: 12,\n    width: 24,\n    height: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  checkmarkText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  saveButton: {\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginTop: 16,\n  },\n  saveButtonDisabled: {\n    opacity: 0.5,\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":18024},"apps/mobile/app/onboarding/index.tsx":{"content":"import React, { useState } from \"react\";\nimport { View, Text, StyleSheet, ActivityIndicator, Alert } from \"react-native\";\nimport { useRouter } from \"expo-router\";\nimport { useAuth } from \"../_contexts/auth-context\";\nimport Step1PersonalInfo from \"./step1-personal-info\";\nimport Step2TrainingSetup from \"./step2-training-setup\";\nimport Step3GoalsPreferences from \"./step3-goals-preferences\";\nimport Step4GymConsent from \"./step4-gym-consent\";\nimport Step5PhotoUpload from \"./step5-photo-upload\";\n\ninterface Step1Data {\n  fullName: string;\n  heightCm: number | null;\n  heightFt: number | null;\n  heightIn: number | null;\n  weight: number | null;\n  bodyFatPct: number | null;\n  heightUnit: \"cm\" | \"ft\";\n  weightUnit: \"kg\" | \"lbs\";\n}\n\ninterface Step2Data {\n  tPathType: \"ppl\" | \"ulul\" | null;\n  experience: \"beginner\" | \"intermediate\" | null;\n}\n\ninterface Step3Data {\n  goalFocus: string;\n  preferredMuscles: string;\n  constraints: string;\n  sessionLength: string;\n}\n\ninterface Step4Data {\n  gymName: string;\n  equipmentMethod: \"photo\" | \"skip\" | null;\n  consentGiven: boolean;\n}\n\nexport default function OnboardingScreen() {\n  const { session } = useAuth();\n  const router = useRouter();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n\n  const [step1Data, setStep1Data] = useState<Step1Data>({\n    fullName: \"\",\n    heightCm: null,\n    heightFt: null,\n    heightIn: null,\n    weight: null,\n    bodyFatPct: null,\n    heightUnit: \"ft\",\n    weightUnit: \"kg\",\n  });\n\n  const [step2Data, setStep2Data] = useState<Step2Data>({\n    tPathType: null,\n    experience: null,\n  });\n\n  const [step3Data, setStep3Data] = useState<Step3Data>({\n    goalFocus: \"\",\n    preferredMuscles: \"\",\n    constraints: \"\",\n    sessionLength: \"\",\n  });\n\n  const [step4Data, setStep4Data] = useState<Step4Data>({\n    gymName: \"\",\n    equipmentMethod: null,\n    consentGiven: false,\n  });\n\n  const [identifiedExercises, setIdentifiedExercises] = useState<any[]>([]);\n  const [confirmedExerciseNames, setConfirmedExerciseNames] = useState<\n    Set<string>\n  >(new Set());\n\n  const submitOnboarding = async () => {\n    if (!session?.access_token) {\n      Alert.alert(\"Error\", \"You must be logged in to complete onboarding.\");\n      return;\n    }\n\n    const finalHeightCm = step1Data.heightCm;\n    const finalWeightKg = step1Data.weight;\n\n    if (\n      !step1Data.fullName ||\n      !finalHeightCm ||\n      !finalWeightKg ||\n      !step2Data.tPathType ||\n      !step2Data.experience ||\n      !step3Data.sessionLength\n    ) {\n      Alert.alert(\n        \"Error\",\n        \"Please complete all required fields before submitting.\",\n      );\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const SUPABASE_PROJECT_ID = \"mgbfevrzrbjjiajkqpti\";\n      const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/complete-onboarding`;\n\n      const confirmedExercises =\n        step4Data.equipmentMethod === \"photo\"\n          ? identifiedExercises.filter((ex) =>\n              confirmedExerciseNames.has(ex.name),\n            )\n          : [];\n\n      const payload = {\n        fullName: step1Data.fullName,\n        heightCm: finalHeightCm,\n        weightKg: finalWeightKg,\n        bodyFatPct: step1Data.bodyFatPct,\n        tPathType: step2Data.tPathType,\n        experience: step2Data.experience,\n        goalFocus: step3Data.goalFocus,\n        preferredMuscles: step3Data.preferredMuscles,\n        constraints: step3Data.constraints,\n        sessionLength: step3Data.sessionLength,\n        gymName: step4Data.gymName,\n        equipmentMethod: step4Data.equipmentMethod,\n        confirmedExercises,\n      };\n\n      const response = await fetch(EDGE_FUNCTION_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || \"Failed to complete onboarding\");\n      }\n\n      Alert.alert(\"Welcome! 🎉\", \"Your profile has been set up successfully!\", [\n        {\n          text: \"Get Started\",\n          onPress: () => router.replace(\"/\"),\n        },\n      ]);\n    } catch (error: any) {\n      console.error(\"Onboarding error:\", error);\n      Alert.alert(\n        \"Error\",\n        error.message || \"Failed to complete onboarding. Please try again.\",\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleStep5Complete = (exercises: any[], confirmed: Set<string>) => {\n    setIdentifiedExercises(exercises);\n    setConfirmedExerciseNames(confirmed);\n    submitOnboarding();\n  };\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#10B981\" />\n        <Text style={styles.loadingText}>Setting up your profile...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.progressBar}>\n        {[1, 2, 3, 4, 5].map((step) => (\n          <View\n            key={step}\n            style={[\n              styles.progressDot,\n              currentStep >= step && styles.progressDotActive,\n            ]}\n          />\n        ))}\n      </View>\n\n      {currentStep === 1 && (\n        <Step1PersonalInfo\n          data={step1Data}\n          onDataChange={setStep1Data}\n          onNext={() => setCurrentStep(2)}\n        />\n      )}\n\n      {currentStep === 2 && (\n        <Step2TrainingSetup\n          data={step2Data}\n          onDataChange={setStep2Data}\n          onNext={() => setCurrentStep(3)}\n          onBack={() => setCurrentStep(1)}\n        />\n      )}\n\n      {currentStep === 3 && (\n        <Step3GoalsPreferences\n          data={step3Data}\n          onDataChange={setStep3Data}\n          onNext={() => setCurrentStep(4)}\n          onBack={() => setCurrentStep(2)}\n        />\n      )}\n\n      {currentStep === 4 && (\n        <Step4GymConsent\n          data={step4Data}\n          onDataChange={setStep4Data}\n          onNext={() => setCurrentStep(5)}\n          onBack={() => setCurrentStep(3)}\n          onSkipPhoto={submitOnboarding}\n        />\n      )}\n\n      {currentStep === 5 && (\n        <Step5PhotoUpload\n          onNext={handleStep5Complete}\n          onBack={() => setCurrentStep(4)}\n        />\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  progressBar: {\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingVertical: 20,\n    gap: 12,\n  },\n  progressDot: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    backgroundColor: \"#333\",\n  },\n  progressDotActive: {\n    backgroundColor: \"#10B981\",\n    width: 12,\n    height: 12,\n    borderRadius: 6,\n  },\n  loadingContainer: {\n    flex: 1,\n    backgroundColor: \"#000\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#fff\",\n    fontSize: 16,\n    marginTop: 16,\n  },\n});\n","size_bytes":7026},"apps/mobile/app/onboarding/step1-personal-info.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Switch,\n} from \"react-native\";\n\ninterface Step1Data {\n  fullName: string;\n  heightCm: number | null;\n  heightFt: number | null;\n  heightIn: number | null;\n  weight: number | null;\n  bodyFatPct: number | null;\n  heightUnit: \"cm\" | \"ft\";\n  weightUnit: \"kg\" | \"lbs\";\n}\n\ninterface Step1Props {\n  data: Step1Data;\n  onDataChange: (data: Step1Data) => void;\n  onNext: () => void;\n}\n\nexport default function Step1PersonalInfo({\n  data,\n  onDataChange,\n  onNext,\n}: Step1Props) {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const updateData = (field: keyof Step1Data, value: any) => {\n    onDataChange({ ...data, [field]: value });\n  };\n\n  useEffect(() => {\n    if (data.heightUnit === \"cm\" && data.heightFt && data.heightIn) {\n      const totalInches = data.heightFt * 12 + (data.heightIn || 0);\n      const cm = Math.round(totalInches * 2.54);\n      onDataChange({ ...data, heightCm: cm });\n    } else if (data.heightUnit === \"ft\" && data.heightCm) {\n      const totalInches = data.heightCm / 2.54;\n      const ft = Math.floor(totalInches / 12);\n      const inches = Math.round(totalInches % 12);\n      onDataChange({ ...data, heightFt: ft, heightIn: inches });\n    }\n  }, [data, onDataChange]);\n\n  const validate = () => {\n    const newErrors: Record<string, string> = {};\n\n    if (!data.fullName || data.fullName.trim() === \"\") {\n      newErrors.fullName = \"Your name is required\";\n    }\n\n    if (data.heightUnit === \"cm\") {\n      if (!data.heightCm || data.heightCm < 100 || data.heightCm > 250) {\n        newErrors.height = \"Height must be between 100-250 cm\";\n      }\n    } else {\n      if (!data.heightFt || data.heightFt < 3 || data.heightFt > 8) {\n        newErrors.height = \"Height must be between 3-8 feet\";\n      }\n    }\n\n    if (\n      !data.weight ||\n      data.weight < 30 ||\n      (data.weightUnit === \"kg\" && data.weight > 300) ||\n      (data.weightUnit === \"lbs\" && data.weight > 660)\n    ) {\n      newErrors.weight =\n        data.weightUnit === \"kg\"\n          ? \"Weight must be between 30-300 kg\"\n          : \"Weight must be between 66-660 lbs\";\n    }\n\n    if (data.bodyFatPct && (data.bodyFatPct < 5 || data.bodyFatPct > 50)) {\n      newErrors.bodyFat = \"Body fat % must be between 5-50%\";\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validate()) {\n      let finalHeightCm = data.heightCm;\n      let finalHeightUnit = data.heightUnit;\n      if (data.heightUnit === \"ft\" && data.heightFt) {\n        const totalInches = data.heightFt * 12 + (data.heightIn || 0);\n        finalHeightCm = Math.round(totalInches * 2.54);\n        finalHeightUnit = \"cm\";\n      }\n\n      let finalWeightKg = data.weight;\n      let finalWeightUnit = data.weightUnit;\n      if (data.weightUnit === \"lbs\" && data.weight) {\n        finalWeightKg = Math.round(data.weight / 2.205);\n        finalWeightUnit = \"kg\";\n      }\n\n      onDataChange({\n        ...data,\n        heightCm: finalHeightCm,\n        heightUnit: finalHeightUnit,\n        weight: finalWeightKg,\n        weightUnit: finalWeightUnit,\n      });\n      onNext();\n    }\n  };\n\n  const isValid =\n    data.fullName.trim() !== \"\" &&\n    data.weight !== null &&\n    (data.heightUnit === \"cm\"\n      ? data.heightCm && data.heightCm >= 100 && data.heightCm <= 250\n      : data.heightFt && data.heightFt >= 3 && data.heightFt <= 8);\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <Text style={styles.title}>Let's Get to Know You</Text>\n      <Text style={styles.subtitle}>\n        Your personal details help us tailor your experience\n      </Text>\n\n      <View style={styles.section}>\n        <Text style={styles.label}>Full Name *</Text>\n        <TextInput\n          style={[styles.input, errors.fullName && styles.inputError]}\n          value={data.fullName}\n          onChangeText={(text) => updateData(\"fullName\", text)}\n          placeholder=\"Enter your name\"\n          placeholderTextColor=\"#666\"\n        />\n        {errors.fullName && (\n          <Text style={styles.errorText}>{errors.fullName}</Text>\n        )}\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.rowHeader}>\n          <Text style={styles.label}>Height *</Text>\n          <View style={styles.unitToggle}>\n            <Text\n              style={[\n                styles.unitText,\n                data.heightUnit === \"cm\" && styles.unitTextActive,\n              ]}\n            >\n              cm\n            </Text>\n            <Switch\n              value={data.heightUnit === \"ft\"}\n              onValueChange={(val) =>\n                updateData(\"heightUnit\", val ? \"ft\" : \"cm\")\n              }\n              trackColor={{ false: \"#10B981\", true: \"#10B981\" }}\n              thumbColor=\"#fff\"\n            />\n            <Text\n              style={[\n                styles.unitText,\n                data.heightUnit === \"ft\" && styles.unitTextActive,\n              ]}\n            >\n              ft\n            </Text>\n          </View>\n        </View>\n\n        {data.heightUnit === \"cm\" ? (\n          <TextInput\n            style={[styles.input, errors.height && styles.inputError]}\n            value={data.heightCm?.toString() || \"\"}\n            onChangeText={(text) =>\n              updateData(\"heightCm\", text ? parseInt(text, 10) : null)\n            }\n            placeholder=\"e.g., 175\"\n            placeholderTextColor=\"#666\"\n            keyboardType=\"numeric\"\n          />\n        ) : (\n          <View style={styles.row}>\n            <View style={styles.halfInput}>\n              <TextInput\n                style={[styles.input, errors.height && styles.inputError]}\n                value={data.heightFt?.toString() || \"\"}\n                onChangeText={(text) =>\n                  updateData(\"heightFt\", text ? parseInt(text, 10) : null)\n                }\n                placeholder=\"Feet\"\n                placeholderTextColor=\"#666\"\n                keyboardType=\"numeric\"\n              />\n            </View>\n            <View style={styles.halfInput}>\n              <TextInput\n                style={[styles.input, errors.height && styles.inputError]}\n                value={data.heightIn?.toString() || \"\"}\n                onChangeText={(text) =>\n                  updateData(\"heightIn\", text ? parseInt(text, 10) : null)\n                }\n                placeholder=\"Inches\"\n                placeholderTextColor=\"#666\"\n                keyboardType=\"numeric\"\n              />\n            </View>\n          </View>\n        )}\n        {errors.height && <Text style={styles.errorText}>{errors.height}</Text>}\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.rowHeader}>\n          <Text style={styles.label}>Weight *</Text>\n          <View style={styles.unitToggle}>\n            <Text\n              style={[\n                styles.unitText,\n                data.weightUnit === \"kg\" && styles.unitTextActive,\n              ]}\n            >\n              kg\n            </Text>\n            <Switch\n              value={data.weightUnit === \"lbs\"}\n              onValueChange={(val) =>\n                updateData(\"weightUnit\", val ? \"lbs\" : \"kg\")\n              }\n              trackColor={{ false: \"#10B981\", true: \"#10B981\" }}\n              thumbColor=\"#fff\"\n            />\n            <Text\n              style={[\n                styles.unitText,\n                data.weightUnit === \"lbs\" && styles.unitTextActive,\n              ]}\n            >\n              lbs\n            </Text>\n          </View>\n        </View>\n        <TextInput\n          style={[styles.input, errors.weight && styles.inputError]}\n          value={data.weight?.toString() || \"\"}\n          onChangeText={(text) =>\n            updateData(\"weight\", text ? parseInt(text, 10) : null)\n          }\n          placeholder={`e.g., ${data.weightUnit === \"kg\" ? \"70\" : \"154\"}`}\n          placeholderTextColor=\"#666\"\n          keyboardType=\"numeric\"\n        />\n        {errors.weight && <Text style={styles.errorText}>{errors.weight}</Text>}\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.label}>Body Fat % (Optional)</Text>\n        <TextInput\n          style={[styles.input, errors.bodyFat && styles.inputError]}\n          value={data.bodyFatPct?.toString() || \"\"}\n          onChangeText={(text) =>\n            updateData(\"bodyFatPct\", text ? parseInt(text, 10) : null)\n          }\n          placeholder=\"e.g., 15\"\n          placeholderTextColor=\"#666\"\n          keyboardType=\"numeric\"\n        />\n        {errors.bodyFat && (\n          <Text style={styles.errorText}>{errors.bodyFat}</Text>\n        )}\n      </View>\n\n      <TouchableOpacity\n        style={[styles.nextButton, !isValid && styles.nextButtonDisabled]}\n        onPress={handleNext}\n        disabled={!isValid}\n      >\n        <Text style={styles.nextButtonText}>Next</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 32,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: \"600\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: \"#1a1a1a\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: \"#fff\",\n  },\n  inputError: {\n    borderColor: \"#EF4444\",\n  },\n  errorText: {\n    color: \"#EF4444\",\n    fontSize: 12,\n    marginTop: 4,\n  },\n  rowHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 8,\n  },\n  unitToggle: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: 8,\n  },\n  unitText: {\n    color: \"#666\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  unitTextActive: {\n    color: \"#10B981\",\n  },\n  row: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  halfInput: {\n    flex: 1,\n  },\n  nextButton: {\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginTop: 16,\n  },\n  nextButtonDisabled: {\n    opacity: 0.5,\n  },\n  nextButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":10521},"apps/mobile/app/onboarding/step2-training-setup.tsx":{"content":"import React from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\n\ninterface Step2Data {\n  tPathType: \"ppl\" | \"ulul\" | null;\n  experience: \"beginner\" | \"intermediate\" | null;\n}\n\ninterface Step2Props {\n  data: Step2Data;\n  onDataChange: (data: Step2Data) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport default function Step2TrainingSetup({\n  data,\n  onDataChange,\n  onNext,\n  onBack,\n}: Step2Props) {\n  const isValid = data.tPathType && data.experience;\n\n  const splitOptions = [\n    {\n      id: \"ppl\" as const,\n      title: \"3-Day Push/Pull/Legs\",\n      subtitle: \"PPL\",\n      frequency: \"3 days per week\",\n      pros: [\"Time efficient\", \"Better recovery\", \"Logical grouping\"],\n      color: \"#10B981\",\n    },\n    {\n      id: \"ulul\" as const,\n      title: \"4-Day Upper/Lower\",\n      subtitle: \"ULUL\",\n      frequency: \"4 days per week\",\n      pros: [\"Higher frequency\", \"Muscle growth\", \"Flexible scheduling\"],\n      color: \"#3B82F6\",\n    },\n  ];\n\n  const experienceOptions = [\n    {\n      id: \"beginner\" as const,\n      title: \"Beginner\",\n      description: \"New to structured training or returning after a long break\",\n    },\n    {\n      id: \"intermediate\" as const,\n      title: \"Intermediate\",\n      description: \"Some experience with structured training programs\",\n    },\n  ];\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <Text style={styles.title}>Training Setup</Text>\n      <Text style={styles.subtitle}>\n        Select the workout structure and your experience level\n      </Text>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Workout Split</Text>\n        {splitOptions.map((option) => (\n          <TouchableOpacity\n            key={option.id}\n            style={[\n              styles.card,\n              data.tPathType === option.id && styles.activeCard,\n            ]}\n            onPress={() => onDataChange({ ...data, tPathType: option.id })}\n          >\n            <View style={styles.cardHeader}>\n              <View>\n                <Text style={styles.cardTitle}>{option.title}</Text>\n                <Text style={[styles.cardSubtitle, { color: option.color }]}>\n                  {option.subtitle}\n                </Text>\n              </View>\n              {data.tPathType === option.id && (\n                <View\n                  style={[styles.checkmark, { backgroundColor: option.color }]}\n                >\n                  <Text style={styles.checkmarkText}>✓</Text>\n                </View>\n              )}\n            </View>\n            <Text style={styles.frequency}>{option.frequency}</Text>\n            <View style={styles.prosContainer}>\n              {option.pros.map((pro, idx) => (\n                <Text key={idx} style={styles.proText}>\n                  ✓ {pro}\n                </Text>\n              ))}\n            </View>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Experience Level</Text>\n        {experienceOptions.map((option) => (\n          <TouchableOpacity\n            key={option.id}\n            style={[\n              styles.experienceCard,\n              data.experience === option.id && styles.experienceCardActive,\n            ]}\n            onPress={() => onDataChange({ ...data, experience: option.id })}\n          >\n            <View style={styles.experienceHeader}>\n              <Text\n                style={[\n                  styles.experienceTitle,\n                  data.experience === option.id && styles.experienceTitleActive,\n                ]}\n              >\n                {option.title}\n              </Text>\n              {data.experience === option.id && (\n                <View style={styles.experienceCheckmark}>\n                  <Text style={styles.checkmarkText}>✓</Text>\n                </View>\n              )}\n            </View>\n            <Text\n              style={[\n                styles.experienceDesc,\n                data.experience === option.id && styles.experienceDescActive,\n              ]}\n            >\n              {option.description}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      <View style={styles.buttonRow}>\n        <TouchableOpacity style={styles.backButton} onPress={onBack}>\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[styles.nextButton, !isValid && styles.nextButtonDisabled]}\n          onPress={onNext}\n          disabled={!isValid}\n        >\n          <Text style={styles.nextButtonText}>Next</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 32,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 16,\n  },\n  card: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: \"#333\",\n    marginBottom: 12,\n  },\n  activeCard: {\n    borderColor: \"#10B981\",\n  },\n  cardHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    marginBottom: 8,\n  },\n  cardTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 4,\n  },\n  cardSubtitle: {\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  checkmark: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  checkmarkText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"bold\",\n  },\n  frequency: {\n    fontSize: 13,\n    color: \"#888\",\n    marginBottom: 12,\n  },\n  prosContainer: {\n    gap: 4,\n  },\n  proText: {\n    fontSize: 13,\n    color: \"#10B981\",\n  },\n  experienceCard: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginBottom: 12,\n  },\n  experienceCardActive: {\n    borderColor: \"#10B981\",\n    borderWidth: 2,\n    backgroundColor: \"#0a1a14\",\n  },\n  experienceHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 8,\n  },\n  experienceTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n  },\n  experienceTitleActive: {\n    color: \"#10B981\",\n  },\n  experienceCheckmark: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: \"#10B981\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  experienceDesc: {\n    fontSize: 14,\n    color: \"#888\",\n  },\n  experienceDescActive: {\n    color: \"#10B981\",\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    gap: 12,\n    marginTop: 16,\n  },\n  backButton: {\n    flex: 1,\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  backButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  nextButton: {\n    flex: 1,\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  nextButtonDisabled: {\n    opacity: 0.5,\n  },\n  nextButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":7571},"apps/mobile/app/onboarding/step3-goals-preferences.tsx":{"content":"import React from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n} from \"react-native\";\n\ninterface Step3Data {\n  goalFocus: string;\n  preferredMuscles: string;\n  constraints: string;\n  sessionLength: string;\n}\n\ninterface Step3Props {\n  data: Step3Data;\n  onDataChange: (data: Step3Data) => void;\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport default function Step3GoalsPreferences({\n  data,\n  onDataChange,\n  onNext,\n  onBack,\n}: Step3Props) {\n  const isValid = data.goalFocus && data.sessionLength;\n\n  const goals = [\n    { id: \"muscle_gain\", icon: \"💪\", text: \"Muscle Gain\" },\n    { id: \"fat_loss\", icon: \"🏃\", text: \"Fat Loss\" },\n    { id: \"strength_increase\", icon: \"🏋️\", text: \"Strength Increase\" },\n  ];\n\n  const muscles = [\"Arms\", \"Chest\", \"Legs\", \"Core\", \"Back\", \"Shoulders\"];\n\n  const sessionLengths = [\n    { id: \"15-30\", label: \"Quick Sessions\", desc: \"15-30 min\" },\n    { id: \"30-45\", label: \"Balanced\", desc: \"30-45 min\" },\n    { id: \"45-60\", label: \"Full Workouts\", desc: \"45-60 min\" },\n    { id: \"60-90\", label: \"Extended\", desc: \"60-90 min\" },\n  ];\n\n  const selectedMuscles = data.preferredMuscles\n    ? data.preferredMuscles.split(\",\").map((m) => m.trim())\n    : [];\n\n  const toggleMuscle = (muscle: string) => {\n    const current = new Set(selectedMuscles);\n    if (current.has(muscle)) {\n      current.delete(muscle);\n    } else {\n      current.add(muscle);\n    }\n    onDataChange({ ...data, preferredMuscles: Array.from(current).join(\", \") });\n  };\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <Text style={styles.title}>Goals & Session Preferences</Text>\n      <Text style={styles.subtitle}>\n        Tell us what you want to achieve and how long you like to train\n      </Text>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Primary Goal *</Text>\n        <View style={styles.goalGrid}>\n          {goals.map((goal) => (\n            <TouchableOpacity\n              key={goal.id}\n              style={[\n                styles.goalCard,\n                data.goalFocus === goal.id && styles.goalCardActive,\n              ]}\n              onPress={() => onDataChange({ ...data, goalFocus: goal.id })}\n            >\n              <Text style={styles.goalIcon}>{goal.icon}</Text>\n              <Text\n                style={[\n                  styles.goalText,\n                  data.goalFocus === goal.id && styles.goalTextActive,\n                ]}\n              >\n                {goal.text}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Focus Muscles (Optional)</Text>\n        <View style={styles.muscleGrid}>\n          {muscles.map((muscle) => (\n            <TouchableOpacity\n              key={muscle}\n              style={[\n                styles.muscleChip,\n                selectedMuscles.includes(muscle) && styles.muscleChipActive,\n              ]}\n              onPress={() => toggleMuscle(muscle)}\n            >\n              <Text\n                style={[\n                  styles.muscleText,\n                  selectedMuscles.includes(muscle) && styles.muscleTextActive,\n                ]}\n              >\n                {muscle}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Session Length *</Text>\n        <View style={styles.sessionGrid}>\n          {sessionLengths.map((session) => (\n            <TouchableOpacity\n              key={session.id}\n              style={[\n                styles.sessionCard,\n                data.sessionLength === session.id && styles.sessionCardActive,\n              ]}\n              onPress={() =>\n                onDataChange({ ...data, sessionLength: session.id })\n              }\n            >\n              <Text\n                style={[\n                  styles.sessionLabel,\n                  data.sessionLength === session.id &&\n                    styles.sessionLabelActive,\n                ]}\n              >\n                {session.label}\n              </Text>\n              <Text\n                style={[\n                  styles.sessionDesc,\n                  data.sessionLength === session.id && styles.sessionDescActive,\n                ]}\n              >\n                {session.desc}\n              </Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>\n          Health Notes / Constraints (Optional)\n        </Text>\n        <TextInput\n          style={styles.textArea}\n          value={data.constraints}\n          onChangeText={(text) => onDataChange({ ...data, constraints: text })}\n          placeholder=\"Any injuries, limitations, or health notes...\"\n          placeholderTextColor=\"#666\"\n          multiline\n          numberOfLines={4}\n          textAlignVertical=\"top\"\n        />\n      </View>\n\n      <View style={styles.buttonRow}>\n        <TouchableOpacity style={styles.backButton} onPress={onBack}>\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[styles.nextButton, !isValid && styles.nextButtonDisabled]}\n          onPress={onNext}\n          disabled={!isValid}\n        >\n          <Text style={styles.nextButtonText}>Next</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 32,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 16,\n  },\n  goalGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 12,\n  },\n  goalCard: {\n    flex: 1,\n    minWidth: \"30%\",\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    alignItems: \"center\",\n  },\n  goalCardActive: {\n    borderColor: \"#10B981\",\n    borderWidth: 2,\n    backgroundColor: \"#0a1a14\",\n  },\n  goalIcon: {\n    fontSize: 32,\n    marginBottom: 8,\n  },\n  goalText: {\n    fontSize: 14,\n    fontWeight: \"600\",\n    color: \"#fff\",\n    textAlign: \"center\",\n  },\n  goalTextActive: {\n    color: \"#10B981\",\n  },\n  muscleGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 8,\n  },\n  muscleChip: {\n    backgroundColor: \"#1a1a1a\",\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  muscleChipActive: {\n    backgroundColor: \"#10B981\",\n    borderColor: \"#10B981\",\n  },\n  muscleText: {\n    fontSize: 14,\n    color: \"#fff\",\n    fontWeight: \"600\",\n  },\n  muscleTextActive: {\n    color: \"#000\",\n  },\n  sessionGrid: {\n    gap: 12,\n  },\n  sessionCard: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  sessionCardActive: {\n    borderColor: \"#10B981\",\n    borderWidth: 2,\n    backgroundColor: \"#0a1a14\",\n  },\n  sessionLabel: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 4,\n  },\n  sessionLabelActive: {\n    color: \"#10B981\",\n  },\n  sessionDesc: {\n    fontSize: 13,\n    color: \"#888\",\n  },\n  sessionDescActive: {\n    color: \"#10B981\",\n  },\n  textArea: {\n    backgroundColor: \"#1a1a1a\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: \"#fff\",\n    minHeight: 100,\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    gap: 12,\n    marginTop: 16,\n  },\n  backButton: {\n    flex: 1,\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  backButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  nextButton: {\n    flex: 1,\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  nextButtonDisabled: {\n    opacity: 0.5,\n  },\n  nextButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":8473},"apps/mobile/app/onboarding/step4-gym-consent.tsx":{"content":"import React from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n} from \"react-native\";\n\ninterface Step4Data {\n  gymName: string;\n  equipmentMethod: \"photo\" | \"skip\" | null;\n  consentGiven: boolean;\n}\n\ninterface Step4Props {\n  data: Step4Data;\n  onDataChange: (data: Step4Data) => void;\n  onNext: () => void;\n  onBack: () => void;\n  onSkipPhoto: () => void;\n}\n\nexport default function Step4GymConsent({\n  data,\n  onDataChange,\n  onNext,\n  onBack,\n  onSkipPhoto,\n}: Step4Props) {\n  const isValid =\n    data.gymName.trim() !== \"\" && data.equipmentMethod && data.consentGiven;\n\n  const handleContinue = () => {\n    if (data.equipmentMethod === \"photo\") {\n      onNext();\n    } else {\n      onSkipPhoto();\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <Text style={styles.title}>Gym Setup & Consent</Text>\n      <Text style={styles.subtitle}>\n        Let's set up your gym equipment and confirm your consent\n      </Text>\n\n      <View style={styles.section}>\n        <View style={styles.numberBadge}>\n          <Text style={styles.numberText}>1</Text>\n        </View>\n        <Text style={styles.sectionTitle}>Your Gym's Name *</Text>\n        <TextInput\n          style={styles.input}\n          value={data.gymName}\n          onChangeText={(text) => onDataChange({ ...data, gymName: text })}\n          placeholder=\"e.g., Home Gym, Fitness First\"\n          placeholderTextColor=\"#666\"\n        />\n        <Text style={styles.hint}>Give your primary gym a name</Text>\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.numberBadge}>\n          <Text style={styles.numberText}>2</Text>\n        </View>\n        <Text style={styles.sectionTitle}>Equipment Setup *</Text>\n        <Text style={styles.description}>\n          How would you like to set up your gym equipment?\n        </Text>\n\n        <TouchableOpacity\n          style={[\n            styles.methodCard,\n            data.equipmentMethod === \"photo\" && styles.methodCardActive,\n          ]}\n          onPress={() => onDataChange({ ...data, equipmentMethod: \"photo\" })}\n        >\n          <View style={styles.methodHeader}>\n            <Text style={styles.methodIcon}>📸</Text>\n            <View style={styles.methodContent}>\n              <Text\n                style={[\n                  styles.methodTitle,\n                  data.equipmentMethod === \"photo\" && styles.methodTitleActive,\n                ]}\n              >\n                AI-Powered Photo Analysis\n              </Text>\n              <Text style={styles.methodDesc}>\n                Upload photos, let AI identify your equipment\n              </Text>\n            </View>\n            {data.equipmentMethod === \"photo\" && (\n              <View style={styles.radioSelected} />\n            )}\n          </View>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[\n            styles.methodCard,\n            data.equipmentMethod === \"skip\" && styles.methodCardActive,\n          ]}\n          onPress={() => onDataChange({ ...data, equipmentMethod: \"skip\" })}\n        >\n          <View style={styles.methodHeader}>\n            <Text style={styles.methodIcon}>⏭️</Text>\n            <View style={styles.methodContent}>\n              <Text\n                style={[\n                  styles.methodTitle,\n                  data.equipmentMethod === \"skip\" && styles.methodTitleActive,\n                ]}\n              >\n                Skip for Now\n              </Text>\n              <Text style={styles.methodDesc}>\n                Use standard equipment, customize later\n              </Text>\n            </View>\n            {data.equipmentMethod === \"skip\" && (\n              <View style={styles.radioSelected} />\n            )}\n          </View>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.numberBadge}>\n          <Text style={styles.numberText}>3</Text>\n        </View>\n        <Text style={styles.sectionTitle}>Data Consent *</Text>\n        <TouchableOpacity\n          style={styles.consentRow}\n          onPress={() =>\n            onDataChange({ ...data, consentGiven: !data.consentGiven })\n          }\n        >\n          <View\n            style={[\n              styles.checkbox,\n              data.consentGiven && styles.checkboxActive,\n            ]}\n          >\n            {data.consentGiven && <Text style={styles.checkmark}>✓</Text>}\n          </View>\n          <Text style={styles.consentText}>\n            I consent to storing my data for personalized fitness\n            recommendations\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.buttonRow}>\n        <TouchableOpacity style={styles.backButton} onPress={onBack}>\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          style={[styles.nextButton, !isValid && styles.nextButtonDisabled]}\n          onPress={handleContinue}\n          disabled={!isValid}\n        >\n          <Text style={styles.nextButtonText}>\n            {data.equipmentMethod === \"photo\" ? \"Next\" : \"Finish\"}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 32,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  numberBadge: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    backgroundColor: \"#14B8A6\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: 12,\n  },\n  numberText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 12,\n  },\n  input: {\n    backgroundColor: \"#1a1a1a\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  hint: {\n    fontSize: 12,\n    color: \"#666\",\n    fontStyle: \"italic\",\n  },\n  description: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 16,\n  },\n  methodCard: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginBottom: 12,\n  },\n  methodCardActive: {\n    borderColor: \"#10B981\",\n    borderWidth: 2,\n    backgroundColor: \"#0a1a14\",\n  },\n  methodHeader: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  methodIcon: {\n    fontSize: 32,\n    marginRight: 16,\n  },\n  methodContent: {\n    flex: 1,\n  },\n  methodTitle: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 4,\n  },\n  methodTitleActive: {\n    color: \"#10B981\",\n  },\n  methodDesc: {\n    fontSize: 13,\n    color: \"#888\",\n  },\n  radioSelected: {\n    width: 20,\n    height: 20,\n    borderRadius: 10,\n    backgroundColor: \"#10B981\",\n  },\n  consentRow: {\n    flexDirection: \"row\",\n    alignItems: \"flex-start\",\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: \"#333\",\n    marginRight: 12,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  checkboxActive: {\n    backgroundColor: \"#10B981\",\n    borderColor: \"#10B981\",\n  },\n  checkmark: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  consentText: {\n    flex: 1,\n    fontSize: 14,\n    color: \"#fff\",\n    lineHeight: 20,\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    gap: 12,\n    marginTop: 16,\n  },\n  backButton: {\n    flex: 1,\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  backButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  nextButton: {\n    flex: 1,\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  nextButtonDisabled: {\n    opacity: 0.5,\n  },\n  nextButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":8262},"apps/mobile/app/onboarding/step5-photo-upload.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Image,\n  Alert,\n  ActivityIndicator,\n} from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { useAuth } from \"../_contexts/auth-context\";\n\ninterface DetectedExercise {\n  name: string;\n  main_muscle: string;\n  type: string;\n  category?: string;\n  description?: string;\n  pro_tip?: string;\n  video_url?: string;\n  movement_type?: string;\n  movement_pattern?: string;\n  duplicate_status: \"none\" | \"global\" | \"my-exercises\";\n}\n\ninterface Step5Props {\n  onNext: (exercises: DetectedExercise[], confirmedNames: Set<string>) => void;\n  onBack: () => void;\n}\n\nexport default function Step5PhotoUpload({ onNext, onBack }: Step5Props) {\n  const { session } = useAuth();\n  const [images, setImages] = useState<string[]>([]);\n  const [detectedExercises, setDetectedExercises] = useState<\n    DetectedExercise[]\n  >([]);\n  const [confirmedExercises, setConfirmedExercises] = useState<Set<string>>(\n    new Set(),\n  );\n  const [analyzing, setAnalyzing] = useState(false);\n\n  const pickImages = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== \"granted\") {\n      Alert.alert(\"Permission Required\", \"Photo library permission is needed.\");\n      return;\n    }\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsMultipleSelection: true,\n      quality: 0.8,\n      base64: true,\n    });\n\n    if (!result.canceled) {\n      const newImages = result.assets\n        .filter((asset) => asset.base64)\n        .map((asset) => asset.base64!);\n      setImages((prev) => [...prev, ...newImages]);\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setImages((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const toggleConfirmation = (exerciseName: string) => {\n    setConfirmedExercises((prev) => {\n      const newSet = new Set(prev);\n      if (newSet.has(exerciseName)) {\n        newSet.delete(exerciseName);\n      } else {\n        newSet.add(exerciseName);\n      }\n      return newSet;\n    });\n  };\n\n  const handleAnalyze = async () => {\n    if (images.length === 0) {\n      Alert.alert(\"No Images\", \"Please upload at least one photo first.\");\n      return;\n    }\n\n    if (!session?.access_token) {\n      Alert.alert(\"Error\", \"You must be logged in to use AI analysis.\");\n      return;\n    }\n\n    setAnalyzing(true);\n    try {\n      const SUPABASE_PROJECT_ID = \"mgbfevrzrbjjiajkqpti\";\n      const EDGE_FUNCTION_URL = `https://${SUPABASE_PROJECT_ID}.supabase.co/functions/v1/identify-equipment`;\n\n      const response = await fetch(EDGE_FUNCTION_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify({ base64Images: images }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || \"AI analysis failed\");\n      }\n\n      if (!data.identifiedExercises || data.identifiedExercises.length === 0) {\n        Alert.alert(\n          \"No Equipment Found\",\n          \"AI could not identify any exercises from the photos. Try different angles or better lighting.\",\n        );\n        return;\n      }\n\n      setDetectedExercises(data.identifiedExercises);\n\n      const newExercises = data.identifiedExercises.filter(\n        (ex: DetectedExercise) => ex.duplicate_status === \"none\",\n      );\n      const newConfirmed = new Set(\n        newExercises.map((ex: DetectedExercise) => ex.name),\n      );\n      setConfirmedExercises(newConfirmed);\n    } catch (error: any) {\n      console.error(\"AI analysis error:\", error);\n      Alert.alert(\n        \"Error\",\n        error.message || \"Failed to analyze photos. Please try again.\",\n      );\n    } finally {\n      setAnalyzing(false);\n    }\n  };\n\n  const handleNext = () => {\n    const newExercisesCount = detectedExercises.filter(\n      (ex) => ex.duplicate_status === \"none\",\n    ).length;\n\n    if (\n      detectedExercises.length > 0 &&\n      confirmedExercises.size === 0 &&\n      newExercisesCount > 0\n    ) {\n      Alert.alert(\n        \"No Selection\",\n        \"Please confirm at least one exercise or continue without adding any.\",\n      );\n      return;\n    }\n\n    onNext(detectedExercises, confirmedExercises);\n  };\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <Text style={styles.title}>Analyze Your Gym</Text>\n      <Text style={styles.subtitle}>\n        Upload photos of your gym equipment. Our AI will identify exercises you\n        can do.\n      </Text>\n\n      <View style={styles.uploadSection}>\n        <TouchableOpacity style={styles.uploadButton} onPress={pickImages}>\n          <Text style={styles.uploadIcon}>📸</Text>\n          <Text style={styles.uploadText}>Upload Gym Photos</Text>\n        </TouchableOpacity>\n\n        {images.length > 0 && (\n          <>\n            <ScrollView\n              horizontal\n              showsHorizontalScrollIndicator={false}\n              style={styles.imageScroll}\n            >\n              {images.map((img, index) => (\n                <View key={index} style={styles.imagePreview}>\n                  <Image\n                    source={{ uri: `data:image/jpeg;base64,${img}` }}\n                    style={styles.image}\n                  />\n                  <TouchableOpacity\n                    style={styles.removeImageButton}\n                    onPress={() => removeImage(index)}\n                  >\n                    <Text style={styles.removeImageText}>✕</Text>\n                  </TouchableOpacity>\n                </View>\n              ))}\n            </ScrollView>\n\n            <TouchableOpacity\n              style={styles.analyzeButton}\n              onPress={handleAnalyze}\n              disabled={analyzing}\n            >\n              {analyzing ? (\n                <ActivityIndicator color=\"#fff\" />\n              ) : (\n                <Text style={styles.analyzeButtonText}>\n                  ✨ Analyze {images.length} Photo(s)\n                </Text>\n              )}\n            </TouchableOpacity>\n          </>\n        )}\n      </View>\n\n      {detectedExercises.length > 0 && (\n        <View style={styles.resultsSection}>\n          <Text style={styles.resultsTitle}>Detected Exercises</Text>\n          <Text style={styles.resultsSubtitle}>\n            Select exercises to add to your gym\n          </Text>\n\n          {detectedExercises.map((exercise, index) => (\n            <TouchableOpacity\n              key={index}\n              style={[\n                styles.exerciseCard,\n                confirmedExercises.has(exercise.name) &&\n                  styles.exerciseCardConfirmed,\n              ]}\n              onPress={() => toggleConfirmation(exercise.name)}\n              disabled={exercise.duplicate_status !== \"none\"}\n            >\n              <View style={styles.exerciseContent}>\n                <Text style={styles.exerciseName}>{exercise.name}</Text>\n                <Text style={styles.exerciseMuscle}>\n                  {exercise.main_muscle}\n                </Text>\n              </View>\n              {exercise.duplicate_status === \"none\" &&\n                confirmedExercises.has(exercise.name) && (\n                  <View style={styles.confirmedBadge}>\n                    <Text style={styles.confirmedText}>✓</Text>\n                  </View>\n                )}\n              {exercise.duplicate_status !== \"none\" && (\n                <View style={styles.duplicateBadge}>\n                  <Text style={styles.duplicateText}>\n                    {exercise.duplicate_status === \"global\"\n                      ? \"Global\"\n                      : \"Exists\"}\n                  </Text>\n                </View>\n              )}\n            </TouchableOpacity>\n          ))}\n        </View>\n      )}\n\n      <View style={styles.buttonRow}>\n        <TouchableOpacity style={styles.backButton} onPress={onBack}>\n          <Text style={styles.backButtonText}>← Back</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.nextButton} onPress={handleNext}>\n          <Text style={styles.nextButtonText}>\n            {detectedExercises.length > 0\n              ? confirmedExercises.size > 0\n                ? `Confirm ${confirmedExercises.size} Exercise${confirmedExercises.size > 1 ? \"s\" : \"\"}`\n                : \"Continue\"\n              : \"Skip\"}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n  },\n  content: {\n    padding: 20,\n    paddingBottom: 100,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 32,\n  },\n  uploadSection: {\n    marginBottom: 32,\n  },\n  uploadButton: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 24,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: \"#333\",\n    borderStyle: \"dashed\",\n    alignItems: \"center\",\n  },\n  uploadIcon: {\n    fontSize: 48,\n    marginBottom: 12,\n  },\n  uploadText: {\n    fontSize: 16,\n    color: \"#fff\",\n    fontWeight: \"600\",\n  },\n  imageScroll: {\n    marginTop: 16,\n  },\n  imagePreview: {\n    position: \"relative\",\n    marginRight: 12,\n  },\n  image: {\n    width: 100,\n    height: 100,\n    borderRadius: 8,\n  },\n  removeImageButton: {\n    position: \"absolute\",\n    top: -8,\n    right: -8,\n    backgroundColor: \"#EF4444\",\n    borderRadius: 12,\n    width: 24,\n    height: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  removeImageText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"bold\",\n  },\n  analyzeButton: {\n    backgroundColor: \"#8B5CF6\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    marginTop: 16,\n  },\n  analyzeButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  resultsSection: {\n    marginBottom: 32,\n  },\n  resultsTitle: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 8,\n  },\n  resultsSubtitle: {\n    fontSize: 14,\n    color: \"#888\",\n    marginBottom: 16,\n  },\n  exerciseCard: {\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginBottom: 12,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  exerciseCardConfirmed: {\n    borderColor: \"#10B981\",\n    borderWidth: 2,\n    backgroundColor: \"#0a1a14\",\n  },\n  exerciseContent: {\n    flex: 1,\n  },\n  exerciseName: {\n    fontSize: 16,\n    fontWeight: \"bold\",\n    color: \"#fff\",\n    marginBottom: 4,\n  },\n  exerciseMuscle: {\n    fontSize: 13,\n    color: \"#10B981\",\n  },\n  confirmedBadge: {\n    width: 28,\n    height: 28,\n    borderRadius: 14,\n    backgroundColor: \"#10B981\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  confirmedText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  duplicateBadge: {\n    backgroundColor: \"#3B82F6\",\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 12,\n  },\n  duplicateText: {\n    color: \"#fff\",\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    gap: 12,\n    marginTop: 16,\n  },\n  backButton: {\n    flex: 1,\n    backgroundColor: \"#1a1a1a\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  backButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  nextButton: {\n    flex: 1,\n    backgroundColor: \"#10B981\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  nextButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":11876},"prettier.config.js":{"content":"module.exports = {\n  arrowParens: 'always',\n  singleQuote: false, // Use double quotes\n  jsxSingleQuote: false, // Use double quotes in JSX\n  tabWidth: 2,\n  semi: true,\n  endOfLine: 'auto',\n};\n","size_bytes":193},"apps/mobile/app.config.ts":{"content":"import { ConfigContext, ExpoConfig } from 'expo/config';\n\nexport default ({ config }: ConfigContext): ExpoConfig => ({\n  ...config,\n  name: 'My Fitness Trainer',\n  slug: 'my-fitness-trainer',\n  version: '0.1.0',\n  orientation: 'portrait',\n  scheme: 'myfitnesstrainer',\n  userInterfaceStyle: 'automatic',\n  assetBundlePatterns: ['**/*'],\n  jsEngine: 'hermes',\n  updates: {\n    fallbackToCacheTimeout: 0,\n  },\n  ios: {\n    supportsTablet: true,\n    bundleIdentifier: 'com.myfitnesstrainer.app',\n  },\n  android: {\n    package: 'com.myfitnesstrainer.app',\n  },\n  plugins: ['expo-router'],\n});\n","size_bytes":589},"apps/mobile/babel.config.js":{"content":"const path = require('path');\n\nmodule.exports = function (api) {\n  api.cache(true);\n\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: [\n      [\n        'module-resolver',\n        {\n          extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],\n          alias: {\n            '@mobile': path.resolve(__dirname, './app'),\n            '@data': path.resolve(__dirname, '../../packages/data/src'),\n            '@features': path.resolve(__dirname, '../../packages/features/src'),\n            '@ui': path.resolve(__dirname, '../../packages/ui/src'),\n          },\n        },\n      ],\n      'react-native-reanimated/plugin',\n    ],\n  };\n};\n","size_bytes":642},"apps/mobile/constants/design-system.ts":{"content":"// Design System - Mobile App\n// Matches web app's color scheme and design patterns\n\nexport const Colors = {\n  // Base Colors\n  background: '#000000',\n  foreground: '#FFFFFF',\n  \n  // Primary Action Colors (matching web app)\n  actionPrimary: '#4186f5', // hsl(217 91% 60%)\n  actionPrimaryLight: '#6ba0f7', // hsl(217 91% 70%)\n  actionPrimaryDark: '#2968d9',\n  \n  // Success & States\n  success: '#10B981', // Emerald green\n  successLight: '#34D399',\n  destructive: '#EF4444', // Red\n  destructiveLight: '#F87171',\n  warning: '#F59E0B',\n  \n  // Workout Colors (PPL/ULUL)\n  workoutPush: '#228B22', // Forest green - hsl(120 60% 45%)\n  workoutPushLight: '#2ea32e',\n  workoutPull: '#F89C4D', // Vintage orange - hsl(35 85% 55%)\n  workoutPullLight: '#fab86d',\n  workoutLegs: '#B645D9', // Purple/magenta - hsl(280 55% 50%)\n  workoutLegsLight: '#c966e3',\n  workoutUpperA: '#1e3a8a', // Dark blue\n  workoutUpperALight: '#2563eb',\n  workoutUpperB: '#EF4444', // Red\n  workoutUpperBLight: '#F87171',\n  workoutLowerA: '#0891b2', // Cyan\n  workoutLowerALight: '#06b6d4',\n  workoutLowerB: '#6b21a8', // Purple\n  workoutLowerBLight: '#9333ea',\n  workoutBonus: '#F59E0B', // Golden yellow\n  workoutBonusLight: '#FBBF24',\n  \n  // Onboarding\n  onboardingPrimary: '#14B8A6', // Teal\n  onboardingPrimaryLight: '#2DD4BF',\n  \n  // Photo Upload\n  photoPrimary: '#8B5CF6', // Purple\n  photoPrimaryLight: '#A78BFA',\n  \n  // Gray Scale\n  gray50: '#f9fafb',\n  gray100: '#f3f4f6',\n  gray200: '#e5e7eb',\n  gray300: '#d1d5db',\n  gray400: '#9ca3af',\n  gray500: '#6b7280',\n  gray600: '#4b5563',\n  gray700: '#374151',\n  gray800: '#1f2937',\n  gray900: '#111827',\n  \n  // Card & Surface Colors\n  cardBackground: '#0a0a0a',\n  cardBorder: '#1a1a1a',\n  surfaceLight: '#111111',\n  surfaceDark: '#050505',\n};\n\nexport const Spacing = {\n  xs: 4,\n  sm: 8,\n  md: 12,\n  lg: 16,\n  xl: 20,\n  '2xl': 24,\n  '3xl': 32,\n  '4xl': 40,\n  '5xl': 48,\n  '6xl': 64,\n};\n\nexport const BorderRadius = {\n  sm: 6,\n  md: 8,\n  lg: 12,\n  xl: 16,\n  '2xl': 20,\n  full: 9999,\n};\n\nexport const Typography = {\n  // Font Sizes\n  xs: 12,\n  sm: 14,\n  base: 16,\n  lg: 18,\n  xl: 20,\n  '2xl': 24,\n  '3xl': 30,\n  '4xl': 36,\n  '5xl': 48,\n  \n  // Font Weights\n  regular: '400' as const,\n  medium: '500' as const,\n  semibold: '600' as const,\n  bold: '700' as const,\n  extrabold: '800' as const,\n  \n  // Line Heights\n  tight: 1.1,\n  normal: 1.5,\n  relaxed: 1.75,\n};\n\nexport const Shadows = {\n  sm: {\n    shadowColor: Colors.actionPrimary,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.15,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  md: {\n    shadowColor: Colors.actionPrimary,\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.25,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  lg: {\n    shadowColor: Colors.actionPrimary,\n    shadowOffset: { width: 0, height: 8 },\n    shadowOpacity: 0.3,\n    shadowRadius: 12,\n    elevation: 6,\n  },\n  success: {\n    shadowColor: Colors.success,\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n  destructive: {\n    shadowColor: Colors.destructive,\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 8,\n    elevation: 4,\n  },\n};\n\nexport const Animation = {\n  // Durations (ms)\n  fast: 150,\n  normal: 300,\n  slow: 500,\n  \n  // Spring configs\n  spring: {\n    damping: 15,\n    stiffness: 150,\n  },\n  springBouncy: {\n    damping: 10,\n    stiffness: 100,\n  },\n};\n\n// Button Presets\nexport const ButtonStyles = {\n  primary: {\n    backgroundColor: Colors.actionPrimary,\n    borderRadius: BorderRadius.lg,\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing.xl,\n    ...Shadows.md,\n  },\n  success: {\n    backgroundColor: Colors.success,\n    borderRadius: BorderRadius.lg,\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing.xl,\n    ...Shadows.success,\n  },\n  destructive: {\n    backgroundColor: Colors.destructive,\n    borderRadius: BorderRadius.lg,\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing.xl,\n    ...Shadows.destructive,\n  },\n  outline: {\n    backgroundColor: 'transparent',\n    borderRadius: BorderRadius.lg,\n    borderWidth: 1.5,\n    borderColor: Colors.gray700,\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing.xl,\n  },\n  ghost: {\n    backgroundColor: 'transparent',\n    borderRadius: BorderRadius.lg,\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing.xl,\n  },\n};\n\n// Card Presets\nexport const CardStyles = {\n  default: {\n    backgroundColor: Colors.cardBackground,\n    borderRadius: BorderRadius.lg,\n    borderWidth: 1,\n    borderColor: Colors.cardBorder,\n    padding: Spacing.lg,\n  },\n  elevated: {\n    backgroundColor: Colors.cardBackground,\n    borderRadius: BorderRadius.lg,\n    borderWidth: 1,\n    borderColor: Colors.cardBorder,\n    padding: Spacing.lg,\n    ...Shadows.sm,\n  },\n};\n","size_bytes":4844},"apps/mobile/app/(tabs)/_layout.tsx":{"content":"import { Tabs } from \"expo-router\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { Colors } from \"../../constants/Theme\";\nimport { useWorkoutFlow } from \"../_contexts/workout-flow-context\";\n\nconst tabBarOptions = {\n  tabBarActiveTintColor: Colors.foreground, // Black icons when active\n  tabBarInactiveTintColor: Colors.mutedForeground, // Gray icons when inactive\n  tabBarShowLabel: false, // Hide text labels for cleaner look\n  tabBarStyle: {\n    backgroundColor: Colors.card,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    height: 83, // 15% increase from 72px for better spacing\n    paddingBottom: 16, // More padding for breathing room\n    paddingTop: 12,\n  },\n  headerShown: false,\n};\n\nexport default function TabsLayout() {\n  const { hasUnsavedChanges, requestNavigation } = useWorkoutFlow();\n\n  const withGuard = (routeName: string) => ({\n    tabPress: (event: any) => {\n      if (hasUnsavedChanges) {\n        event.preventDefault();\n        requestNavigation(() => {\n          if (event?.navigation?.navigate) {\n            event.navigation.navigate(routeName);\n          }\n        });\n      }\n    },\n  });\n\n  return (\n    <Tabs screenOptions={tabBarOptions}>\n      <Tabs.Screen\n        name=\"dashboard\"\n        options={{\n          title: \"Dashboard\",\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"home\" size={20} color={color} />\n          ),\n        }}\n        listeners={withGuard(\"dashboard\")}\n      />\n      <Tabs.Screen\n        name=\"workout\"\n        options={{\n          title: \"Workout\",\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"barbell\" size={20} color={color} />\n          ),\n        }}\n        listeners={withGuard(\"workout\")}\n      />\n      <Tabs.Screen\n        name=\"exercises\"\n        options={{\n          title: \"Exercises\",\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"book\" size={20} color={color} />\n          ),\n        }}\n        listeners={withGuard(\"exercises\")}\n      />\n      <Tabs.Screen\n        name=\"progress\"\n        options={{\n          title: \"Progress\",\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"bar-chart\" size={20} color={color} />\n          ),\n        }}\n        listeners={withGuard(\"progress\")}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: \"Profile\",\n          tabBarIcon: ({ color, size }) => (\n            <Ionicons name=\"person\" size={20} color={color} />\n          ),\n        }}\n        listeners={withGuard(\"profile\")}\n      />\n    </Tabs>\n  );\n}\n","size_bytes":2582},"apps/mobile/app/(tabs)/dashboard.tsx":{"content":"import React, { useCallback, useMemo, useState } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useFocusEffect, useRouter } from \"expo-router\";\nimport { useAuth } from \"../_contexts/auth-context\";\nimport { useData } from \"../_contexts/data-context\";\nimport { ScreenHeader, ScreenContainer } from \"../../components/layout\";\nimport { StatCard, QuickActions, WeeklyTarget, RecentWorkouts, SimpleVolumeChart } from \"../../components/dashboard\";\nimport { RollingStatusBadge } from \"../../components/dashboard/RollingStatusBadge\";\nimport { GymToggle } from \"../../components/dashboard/GymToggle\";\nimport { Colors, Spacing } from \"../../constants/Theme\";\nimport type { WorkoutSession } from \"@data/storage/models\";\n\ninterface VolumePoint {\n  date: string;\n  volume: number;\n}\n\nconst formatDate = (iso?: string | null) => {\n  if (!iso) {\n    return null;\n  }\n  const date = new Date(iso);\n  if (Number.isNaN(date.getTime())) {\n    return null;\n  }\n  return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" })}`;\n};\n\nexport default function DashboardScreen() {\n  const { session, userId } = useAuth();\n  const data = useData();\n  const router = useRouter();\n\n  const [refreshing, setRefreshing] = useState(false);\n  const [sessions, setSessions] = useState<WorkoutSession[]>([]);\n  const [volumePoints, setVolumePoints] = useState<VolumePoint[]>([]);\n\n  const fetchDashboardData = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    try {\n      const [sessionData, volumeData] = await Promise.all([\n        data.getWorkoutSessions(userId),\n        data.getVolumeHistory(userId, 28),\n      ]);\n      const sortedSessions = [...sessionData].sort((a, b) => {\n        const dateA = new Date(a.completed_at ?? a.session_date).getTime();\n        const dateB = new Date(b.completed_at ?? b.session_date).getTime();\n        return dateB - dateA;\n      });\n      const latestVolume = volumeData.slice(-7);\n      setSessions(sortedSessions);\n      setVolumePoints(latestVolume);\n    } catch (error) {\n      console.error(\"[Dashboard] Failed to load data\", error);\n    }\n  }, [data, userId]);\n\n  useFocusEffect(\n    useCallback(() => {\n      fetchDashboardData();\n    }, [fetchDashboardData]),\n  );\n\n  const onRefresh = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n    setRefreshing(true);\n    try {\n      await fetchDashboardData();\n    } finally {\n      setRefreshing(false);\n    }\n  }, [fetchDashboardData, userId]);\n\n  const recentSessions = useMemo(() => {\n    return sessions.slice(0, 3).map((sessionItem) => ({\n      id: sessionItem.id,\n      name: sessionItem.template_name || \"Ad Hoc Workout\",\n      completedAt: formatDate(\n        sessionItem.completed_at ?? sessionItem.session_date,\n      ),\n    }));\n  }, [sessions]);\n\n\n  const welcomeSubtitle = useMemo(() => {\n    if (sessions.length === 0) {\n      return \"Let's get your first workout logged.\";\n    }\n    const lastSession = sessions[0];\n    const formatted = formatDate(\n      lastSession.completed_at ?? lastSession.session_date,\n    );\n    return formatted\n      ? `Last session on ${formatted}`\n      : \"Keep the momentum going!\";\n  }, [sessions]);\n\n  const userName =\n    session?.user?.user_metadata?.full_name ||\n    session?.user?.email ||\n    \"Athlete\";\n\n  const totalWorkouts = sessions.length;\n  const currentStreak = 0;\n  const totalVolume = volumePoints.reduce((sum, point) => sum + point.volume, 0);\n\n  return (\n    <>\n      <ScreenHeader \n        title={`Welcome back, ${userName}!`}\n        subtitle={welcomeSubtitle || undefined}\n      />\n      <ScreenContainer \n        refreshing={refreshing}\n        onRefresh={onRefresh}\n      >\n        <View style={styles.statsRow}>\n          <StatCard \n            icon=\"barbell\" \n            label=\"Total Workouts\" \n            value={totalWorkouts}\n            iconColor={Colors.actionPrimary}\n            style={styles.statCard}\n          />\n          <StatCard \n            icon=\"flame\" \n            label=\"Current Streak\" \n            value={`${currentStreak} days`}\n            iconColor={Colors.chart2}\n            style={styles.statCard}\n          />\n        </View>\n        \n        <StatCard \n          icon=\"trending-up\" \n          label=\"Total Volume (kg)\" \n          value={totalVolume.toLocaleString()}\n          iconColor={Colors.chart5}\n        />\n\n        <RollingStatusBadge />\n\n        <GymToggle />\n\n        <WeeklyTarget\n          completedCount={2}\n          goalCount={3}\n          programType=\"ppl\"\n          completedWorkouts={[\n            { id: '1', name: 'Push' },\n            { id: '2', name: 'Pull' },\n          ]}\n        />\n\n        <QuickActions />\n\n        <SimpleVolumeChart data={volumePoints} />\n\n        <RecentWorkouts\n          workouts={recentSessions}\n          onViewAll={() => router.push(\"/history\")}\n        />\n      </ScreenContainer>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  statsRow: {\n    flexDirection: 'row',\n    gap: Spacing.md,\n    marginBottom: Spacing.md,\n  },\n  statCard: {\n    flex: 1,\n  },\n});\n","size_bytes":5079},"apps/mobile/app/(tabs)/progress.tsx":{"content":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Dimensions,\n} from \"react-native\";\nimport { useAuth } from \"../_contexts/auth-context\";\nimport { useData } from \"../_contexts/data-context\";\nimport { exerciseList } from \"@data/exercises\";\n\nconst { width } = Dimensions.get(\"window\");\nconst CHART_WIDTH = width - 40;\nconst CHART_HEIGHT = 200;\n\nexport default function ProgressScreen() {\n  const { userId } = useAuth();\n  const {\n    getWorkoutStats,\n    getWorkoutFrequency,\n    getVolumeHistory,\n    getPRHistory,\n  } = useData();\n  const [stats, setStats] = useState({\n    totalWorkouts: 0,\n    totalVolume: 0,\n    averageVolume: 0,\n    currentStreak: 0,\n    longestStreak: 0,\n  });\n  const [frequencyData, setFrequencyData] = useState<\n    Array<{ date: string; count: number }>\n  >([]);\n  const [volumeData, setVolumeData] = useState<\n    Array<{ date: string; volume: number }>\n  >([]);\n  const [prData, setPrData] = useState<Array<{ date: string; weight: number }>>(\n    [],\n  );\n  const [selectedExercise, setSelectedExercise] =\n    useState<string>(\"bench-press\");\n  const [timeRange, setTimeRange] = useState(30);\n  const [loading, setLoading] = useState(true);\n\n  const loadData = useCallback(async () => {\n    if (!userId) {\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const [statsData, freqData, volData, prDataResult] = await Promise.all([\n        getWorkoutStats(userId, timeRange),\n        getWorkoutFrequency(userId, timeRange),\n        getVolumeHistory(userId, timeRange),\n        getPRHistory(userId, selectedExercise),\n      ]);\n\n      setStats(statsData);\n      setFrequencyData(freqData);\n      setVolumeData(volData);\n      setPrData(prDataResult);\n    } catch (error) {\n      console.error(\"Failed to load analytics:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    getPRHistory,\n    getVolumeHistory,\n    getWorkoutFrequency,\n    getWorkoutStats,\n    selectedExercise,\n    timeRange,\n    userId,\n  ]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  const renderBarChart = (\n    data: Array<{\n      date: string;\n      count?: number;\n      volume?: number;\n      weight?: number;\n    }>,\n    label: string,\n  ) => {\n    if (data.length === 0) {\n      return (\n        <View style={styles.emptyChart}>\n          <Text style={styles.emptyChartText}>No data for this period</Text>\n        </View>\n      );\n    }\n\n    const values = data.map((d) => d.count || d.volume || d.weight || 0);\n    const maxValue = Math.max(...values, 1);\n    const barWidth = Math.max(CHART_WIDTH / data.length - 4, 8);\n\n    return (\n      <View style={styles.chartContainer}>\n        <Text style={styles.chartLabel}>{label}</Text>\n        <View style={styles.chart}>\n          {data.map((item, idx) => {\n            const value = item.count || item.volume || item.weight || 0;\n            const heightPercent = (value / maxValue) * 100;\n\n            return (\n              <View\n                key={idx}\n                style={[styles.barContainer, { width: barWidth }]}\n              >\n                <View style={styles.barWrapper}>\n                  <View style={[styles.bar, { height: `${heightPercent}%` }]} />\n                </View>\n                {data.length <= 14 && idx % 2 === 0 && (\n                  <Text style={styles.barLabel}>\n                    {new Date(item.date).getDate()}\n                  </Text>\n                )}\n              </View>\n            );\n          })}\n        </View>\n        <View style={styles.chartAxis}>\n          <Text style={styles.axisLabel}>\n            {data[0]?.weight !== undefined\n              ? \"All time\"\n              : `Last ${timeRange} days`}\n          </Text>\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Progress & Analytics</Text>\n      </View>\n\n      <View style={styles.timeRangeSelector}>\n        {[7, 14, 30, 90].map((days) => (\n          <TouchableOpacity\n            key={days}\n            style={[\n              styles.timeRangeButton,\n              timeRange === days && styles.timeRangeButtonActive,\n            ]}\n            onPress={() => setTimeRange(days)}\n          >\n            <Text\n              style={[\n                styles.timeRangeText,\n                timeRange === days && styles.timeRangeTextActive,\n              ]}\n            >\n              {days}d\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {loading ? (\n        <View style={styles.loadingContainer}>\n          <Text style={styles.loadingText}>Loading analytics...</Text>\n        </View>\n      ) : (\n        <>\n          <View style={styles.statsGrid}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.totalWorkouts}</Text>\n              <Text style={styles.statLabel}>Workouts</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>\n                {Math.round(stats.totalVolume).toLocaleString()}\n              </Text>\n              <Text style={styles.statLabel}>Total Volume (kg)</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>\n                {Math.round(stats.averageVolume).toLocaleString()}\n              </Text>\n              <Text style={styles.statLabel}>Avg Volume (kg)</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={[styles.statValue, styles.streakValue]}>\n                🔥 {stats.currentStreak}\n              </Text>\n              <Text style={styles.statLabel}>Current Streak</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{stats.longestStreak}</Text>\n              <Text style={styles.statLabel}>Longest Streak</Text>\n            </View>\n          </View>\n\n          <View style={styles.section}>\n            {renderBarChart(frequencyData, \"Workout Frequency\")}\n          </View>\n\n          <View style={styles.section}>\n            {renderBarChart(volumeData, \"Volume Over Time (kg)\")}\n          </View>\n\n          <View style={styles.section}>\n            <Text style={styles.chartLabel}>Personal Record Progression</Text>\n            <ScrollView\n              horizontal\n              showsHorizontalScrollIndicator={false}\n              style={styles.exerciseSelector}\n            >\n              {exerciseList.slice(0, 8).map((ex) => (\n                <TouchableOpacity\n                  key={ex.id}\n                  style={[\n                    styles.exercisePill,\n                    selectedExercise === ex.id && styles.exercisePillActive,\n                  ]}\n                  onPress={() => setSelectedExercise(ex.id)}\n                >\n                  <Text\n                    style={[\n                      styles.exercisePillText,\n                      selectedExercise === ex.id &&\n                        styles.exercisePillTextActive,\n                    ]}\n                  >\n                    {ex.name}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </ScrollView>\n            {renderBarChart(\n              prData,\n              `${exerciseList.find((e) => e.id === selectedExercise)?.name || \"Exercise\"} Max Weight (kg)`,\n            )}\n          </View>\n\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Keep it up! 💪</Text>\n            <Text style={styles.sectionSubtext}>\n              {stats.currentStreak > 0\n                ? `You're on a ${stats.currentStreak}-day streak. Don't break it!`\n                : \"Start a new workout to build your streak!\"}\n            </Text>\n          </View>\n        </>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n    padding: 20,\n  },\n  header: {\n    marginBottom: 16,\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 28,\n    fontWeight: \"bold\",\n  },\n  timeRangeSelector: {\n    flexDirection: \"row\",\n    gap: 8,\n    marginBottom: 24,\n  },\n  timeRangeButton: {\n    flex: 1,\n    backgroundColor: \"#111\",\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    alignItems: \"center\",\n  },\n  timeRangeButtonActive: {\n    backgroundColor: \"#0a0\",\n    borderColor: \"#0a0\",\n  },\n  timeRangeText: {\n    color: \"#888\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  timeRangeTextActive: {\n    color: \"#fff\",\n  },\n  loadingContainer: {\n    padding: 48,\n    alignItems: \"center\",\n  },\n  loadingText: {\n    color: \"#888\",\n    fontSize: 16,\n  },\n  statsGrid: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    gap: 12,\n    marginBottom: 24,\n  },\n  statCard: {\n    flex: 1,\n    minWidth: \"45%\",\n    backgroundColor: \"#111\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    alignItems: \"center\",\n  },\n  statValue: {\n    color: \"#0a0\",\n    fontSize: 28,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  streakValue: {\n    fontSize: 32,\n  },\n  statLabel: {\n    color: \"#888\",\n    fontSize: 12,\n    textAlign: \"center\",\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    color: \"#fff\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    marginBottom: 8,\n  },\n  sectionSubtext: {\n    color: \"#888\",\n    fontSize: 14,\n  },\n  chartContainer: {\n    backgroundColor: \"#111\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  chartLabel: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n    marginBottom: 16,\n  },\n  chart: {\n    height: CHART_HEIGHT,\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    gap: 2,\n  },\n  barContainer: {\n    height: \"100%\",\n    alignItems: \"center\",\n  },\n  barWrapper: {\n    flex: 1,\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n  },\n  bar: {\n    width: \"100%\",\n    backgroundColor: \"#0a0\",\n    borderTopLeftRadius: 4,\n    borderTopRightRadius: 4,\n    minHeight: 2,\n  },\n  barLabel: {\n    color: \"#666\",\n    fontSize: 10,\n    marginTop: 4,\n  },\n  emptyChart: {\n    backgroundColor: \"#111\",\n    padding: 48,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    alignItems: \"center\",\n  },\n  emptyChartText: {\n    color: \"#666\",\n    fontSize: 14,\n  },\n  chartAxis: {\n    marginTop: 8,\n    alignItems: \"center\",\n  },\n  axisLabel: {\n    color: \"#666\",\n    fontSize: 12,\n  },\n  exerciseSelector: {\n    marginBottom: 16,\n  },\n  exercisePill: {\n    backgroundColor: \"#111\",\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  exercisePillActive: {\n    backgroundColor: \"#0a0\",\n    borderColor: \"#0a0\",\n  },\n  exercisePillText: {\n    color: \"#888\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  exercisePillTextActive: {\n    color: \"#fff\",\n  },\n});\n","size_bytes":11005},"apps/mobile/app/(tabs)/settings.tsx":{"content":"import React from \"react\";\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport { useAuth } from \"../_contexts/auth-context\";\nimport { usePreferences } from \"../_contexts/preferences-context\";\nimport { useRouter } from \"expo-router\";\n\nexport default function SettingsScreen() {\n  const { session, supabase } = useAuth();\n  const { unitSystem, setUnitSystem, loading } = usePreferences();\n  const router = useRouter();\n\n  const handleSignOut = async () => {\n    Alert.alert(\"Sign Out\", \"Are you sure you want to sign out?\", [\n      { text: \"Cancel\", style: \"cancel\" },\n      {\n        text: \"Sign Out\",\n        style: \"destructive\",\n        onPress: async () => {\n          await supabase.auth.signOut();\n          router.replace(\"/login\");\n        },\n      },\n    ]);\n  };\n\n  const toggleUnitSystem = async () => {\n    await setUnitSystem(unitSystem === \"metric\" ? \"imperial\" : \"metric\");\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Settings</Text>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Account</Text>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>Email</Text>\n          <Text style={styles.infoValue}>\n            {session?.user?.email || \"Not available\"}\n          </Text>\n        </View>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>User ID</Text>\n          <Text style={styles.infoValue}>\n            {session?.user?.id?.slice(0, 8) || \"Not available\"}...\n          </Text>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Fitness Settings</Text>\n\n        <TouchableOpacity\n          style={styles.navigationRow}\n          onPress={() => router.push(\"/gyms\")}\n        >\n          <View>\n            <Text style={styles.settingLabel}>My Gyms</Text>\n            <Text style={styles.settingDescription}>\n              Manage gym profiles and equipment\n            </Text>\n          </View>\n          <Text style={styles.chevron}>›</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Preferences</Text>\n\n        <TouchableOpacity\n          style={styles.settingRow}\n          onPress={toggleUnitSystem}\n          disabled={loading}\n        >\n          <View>\n            <Text style={styles.settingLabel}>Unit System</Text>\n            <Text style={styles.settingDescription}>\n              {unitSystem === \"metric\"\n                ? \"Metric (kg, km)\"\n                : \"Imperial (lbs, miles)\"}\n            </Text>\n          </View>\n          <View\n            style={[\n              styles.toggle,\n              unitSystem === \"imperial\" && styles.toggleActive,\n            ]}\n          >\n            <View\n              style={[\n                styles.toggleCircle,\n                unitSystem === \"imperial\" && styles.toggleCircleActive,\n              ]}\n            />\n          </View>\n        </TouchableOpacity>\n\n        <View style={styles.settingRow}>\n          <View>\n            <Text style={styles.settingLabel}>Theme</Text>\n            <Text style={styles.settingDescription}>Dark mode</Text>\n          </View>\n          <View style={[styles.toggle, styles.toggleActive]}>\n            <View style={[styles.toggleCircle, styles.toggleCircleActive]} />\n          </View>\n        </View>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>About</Text>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>App Version</Text>\n          <Text style={styles.infoValue}>1.0.0</Text>\n        </View>\n        <View style={styles.infoCard}>\n          <Text style={styles.infoLabel}>Build</Text>\n          <Text style={styles.infoValue}>Mobile (Expo)</Text>\n        </View>\n      </View>\n\n      <TouchableOpacity style={styles.signOutButton} onPress={handleSignOut}>\n        <Text style={styles.signOutText}>Sign Out</Text>\n      </TouchableOpacity>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n    padding: 20,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 32,\n    fontWeight: \"bold\",\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionTitle: {\n    color: \"#0a0\",\n    fontSize: 14,\n    fontWeight: \"bold\",\n    textTransform: \"uppercase\",\n    marginBottom: 12,\n    letterSpacing: 1,\n  },\n  infoCard: {\n    backgroundColor: \"#111\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginBottom: 8,\n  },\n  infoLabel: {\n    color: \"#888\",\n    fontSize: 12,\n    marginBottom: 4,\n  },\n  infoValue: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  navigationRow: {\n    backgroundColor: \"#111\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginBottom: 8,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  settingRow: {\n    backgroundColor: \"#111\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    marginBottom: 8,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  chevron: {\n    color: \"#888\",\n    fontSize: 24,\n    fontWeight: \"300\",\n  },\n  settingLabel: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"500\",\n    marginBottom: 4,\n  },\n  settingDescription: {\n    color: \"#888\",\n    fontSize: 14,\n  },\n  toggle: {\n    width: 50,\n    height: 28,\n    borderRadius: 14,\n    backgroundColor: \"#333\",\n    padding: 2,\n    justifyContent: \"center\",\n  },\n  toggleActive: {\n    backgroundColor: \"#0a0\",\n  },\n  toggleCircle: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: \"#666\",\n  },\n  toggleCircleActive: {\n    backgroundColor: \"#fff\",\n    alignSelf: \"flex-end\",\n  },\n  signOutButton: {\n    backgroundColor: \"#a00\",\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 12,\n    alignItems: \"center\",\n    marginTop: 16,\n    marginBottom: 32,\n  },\n  signOutText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n});\n","size_bytes":6299},"apps/mobile/app/(tabs)/workout.tsx":{"content":"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport { useAuth } from \"../_contexts/auth-context\";\nimport { useData } from \"../_contexts/data-context\";\nimport { useRouter, useLocalSearchParams } from \"expo-router\";\nimport { getExerciseById } from \"@data/exercises\";\nimport { RestTimer } from \"../_components/rest-timer\";\nimport { TemplateSaveModal } from \"../_components/template-save-modal\";\nimport { AICoachingCard } from \"../_components/ai-coaching-card\";\nimport { useWorkoutFlow } from \"../_contexts/workout-flow-context\";\n\ninterface ExerciseSet {\n  weight: string;\n  reps: string;\n}\n\ninterface WorkoutExercise {\n  exerciseId: string;\n  sets: ExerciseSet[];\n}\n\nexport default function WorkoutScreen() {\n  const { userId } = useAuth();\n  const {\n    addWorkoutSession,\n    addSetLog,\n    getPersonalRecord,\n    getTemplate,\n    getTPath,\n    saveTemplate,\n    isSyncing,\n    queueLength,\n    isOnline,\n  } = useData();\n  const router = useRouter();\n  const params = useLocalSearchParams<{\n    selectedExerciseId?: string;\n    templateId?: string;\n    tPathId?: string;\n  }>();\n  const { startSession, completeSession, setHasUnsavedChanges } =\n    useWorkoutFlow();\n\n  const [templateName, setTemplateName] = useState(\"\");\n  const [exercises, setExercises] = useState<WorkoutExercise[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [personalRecords, setPersonalRecords] = useState<\n    Record<string, number>\n  >({});\n  const [showRestTimer, setShowRestTimer] = useState(false);\n  const [showTemplateSaveModal, setShowTemplateSaveModal] = useState(false);\n  const [loadedTemplateId, setLoadedTemplateId] = useState<string | null>(null);\n  const [loadedTPathId, setLoadedTPathId] = useState<string | null>(null);\n  const [currentTemplateDescription, setCurrentTemplateDescription] =\n    useState<string>(\"\");\n\n  useEffect(() => {\n    startSession(params.templateId ?? params.tPathId ?? null);\n    return () => {\n      completeSession();\n      setHasUnsavedChanges(false);\n    };\n  }, [\n    completeSession,\n    params.templateId,\n    params.tPathId,\n    setHasUnsavedChanges,\n    startSession,\n  ]);\n\n  useEffect(() => {\n    if (params.selectedExerciseId) {\n      addExercise(params.selectedExerciseId);\n    }\n  }, [addExercise, params.selectedExerciseId]);\n\n  useEffect(() => {\n    if (params.templateId && userId) {\n      loadTemplate(params.templateId);\n    }\n  }, [loadTemplate, params.templateId, userId]);\n\n  useEffect(() => {\n    if (params.tPathId && userId) {\n      loadTPath(params.tPathId);\n    }\n  }, [loadTPath, params.tPathId, userId]);\n\n  const loadTemplate = useCallback(\n    async (templateId: string) => {\n      try {\n        const template = await getTemplate(templateId);\n        if (!template) {\n          Alert.alert(\"Error\", \"Template not found\");\n          return;\n        }\n\n        setTemplateName(template.name);\n        setLoadedTemplateId(templateId);\n        setCurrentTemplateDescription(template.description || \"\");\n\n        const loadedExercises: WorkoutExercise[] = template.exercises.map(\n          (ex) => ({\n            exerciseId: ex.exercise_id,\n            sets: Array(ex.default_sets)\n              .fill(null)\n              .map(() => ({\n                weight: ex.default_weight_kg?.toString() || \"\",\n                reps: ex.default_reps?.toString() || \"\",\n              })),\n          }),\n        );\n\n        setExercises(loadedExercises);\n        setHasUnsavedChanges(false);\n\n        for (const ex of template.exercises) {\n          if (userId) {\n            const pr = await getPersonalRecord(userId, ex.exercise_id);\n            setPersonalRecords((prev) => {\n              if (prev[ex.exercise_id] !== undefined) {\n                return prev;\n              }\n              return { ...prev, [ex.exercise_id]: pr };\n            });\n          }\n        }\n      } catch {\n        Alert.alert(\"Error\", \"Failed to load template\");\n      }\n    },\n    [getPersonalRecord, getTemplate, setHasUnsavedChanges, userId],\n  );\n\n  const loadTPath = useCallback(\n    async (tPathId: string) => {\n      try {\n        const tPath = await getTPath(tPathId);\n        if (!tPath) {\n          Alert.alert(\"Error\", \"Workout program not found\");\n          return;\n        }\n\n        setTemplateName(tPath.template_name);\n        setLoadedTPathId(tPathId);\n        setCurrentTemplateDescription(tPath.description || \"\");\n\n        const loadedExercises: WorkoutExercise[] = tPath.exercises\n          .filter((ex) => !ex.is_bonus_exercise)\n          .map((ex) => ({\n            exerciseId: ex.exercise_id,\n            sets: Array(ex.target_sets || 3)\n              .fill(null)\n              .map(() => ({\n                weight: \"\",\n                reps: ex.target_reps_min?.toString() || \"\",\n              })),\n          }));\n\n        setExercises(loadedExercises);\n        setHasUnsavedChanges(false);\n\n        for (const ex of tPath.exercises) {\n          if (userId) {\n            const pr = await getPersonalRecord(userId, ex.exercise_id);\n            setPersonalRecords((prev) => {\n              if (prev[ex.exercise_id] !== undefined) {\n                return prev;\n              }\n              return { ...prev, [ex.exercise_id]: pr };\n            });\n          }\n        }\n      } catch {\n        Alert.alert(\"Error\", \"Failed to load workout program\");\n      }\n    },\n    [getPersonalRecord, getTPath, setHasUnsavedChanges, userId],\n  );\n\n  const addExercise = useCallback(\n    async (exerciseId: string) => {\n      setExercises((prev) => {\n        if (prev.some((exercise) => exercise.exerciseId === exerciseId)) {\n          Alert.alert(\n            \"Already Added\",\n            \"This exercise is already in your workout\",\n          );\n          return prev;\n        }\n        return [\n          ...prev,\n          {\n            exerciseId,\n            sets: [{ weight: \"\", reps: \"\" }],\n          },\n        ];\n      });\n      setHasUnsavedChanges(true);\n\n      if (userId) {\n        const pr = await getPersonalRecord(userId, exerciseId);\n        setPersonalRecords((prev) => {\n          if (prev[exerciseId] !== undefined) {\n            return prev;\n          }\n          return { ...prev, [exerciseId]: pr };\n        });\n      }\n    },\n    [getPersonalRecord, setHasUnsavedChanges, userId],\n  );\n\n  const removeExercise = (index: number) => {\n    const newExercises = exercises.filter((_, i) => i !== index);\n    setExercises(newExercises);\n    setHasUnsavedChanges(true);\n  };\n\n  const addSet = (exerciseIndex: number) => {\n    const newExercises = [...exercises];\n    newExercises[exerciseIndex].sets.push({ weight: \"\", reps: \"\" });\n    setExercises(newExercises);\n    setHasUnsavedChanges(true);\n  };\n\n  const updateSet = (\n    exerciseIndex: number,\n    setIndex: number,\n    field: \"weight\" | \"reps\",\n    value: string,\n  ) => {\n    const newExercises = [...exercises];\n    newExercises[exerciseIndex].sets[setIndex][field] = value;\n    setExercises(newExercises);\n    setHasUnsavedChanges(true);\n  };\n\n  const removeSet = (exerciseIndex: number, setIndex: number) => {\n    const newExercises = [...exercises];\n    if (newExercises[exerciseIndex].sets.length > 1) {\n      newExercises[exerciseIndex].sets = newExercises[\n        exerciseIndex\n      ].sets.filter((_, i) => i !== setIndex);\n      setExercises(newExercises);\n      setHasUnsavedChanges(true);\n    }\n  };\n\n  const saveWorkout = async () => {\n    if (!userId) {\n      Alert.alert(\"Error\", \"Not authenticated\");\n      return;\n    }\n\n    if (!templateName.trim()) {\n      Alert.alert(\"Error\", \"Please enter a workout name\");\n      return;\n    }\n\n    if (exercises.length === 0) {\n      Alert.alert(\"Error\", \"Please add at least one exercise\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const now = new Date().toISOString();\n\n      const session = {\n        id: sessionId,\n        user_id: userId,\n        session_date: now,\n        template_name: templateName,\n        completed_at: now,\n        rating: null,\n        duration_string: null,\n        t_path_id: loadedTPathId,\n        created_at: now,\n      };\n\n      await addWorkoutSession(session);\n\n      let setCounter = 0;\n      let newPRs = 0;\n\n      for (const exercise of exercises) {\n        let currentPR = personalRecords[exercise.exerciseId] || 0;\n\n        for (const set of exercise.sets) {\n          if (set.weight && set.reps) {\n            const weight = parseFloat(set.weight);\n            const isPR = weight > currentPR;\n\n            if (isPR) {\n              newPRs++;\n              currentPR = weight;\n            }\n\n            const setLog = {\n              id: `set_${sessionId}_${setCounter}`,\n              session_id: sessionId,\n              exercise_id: exercise.exerciseId,\n              weight_kg: weight || null,\n              reps: parseInt(set.reps, 10) || null,\n              reps_l: null,\n              reps_r: null,\n              time_seconds: null,\n              is_pb: isPR,\n              created_at: now,\n            };\n            await addSetLog(setLog);\n            setCounter++;\n          }\n        }\n      }\n\n      const message =\n        newPRs > 0\n          ? `Workout saved! 🎉 ${newPRs} new personal record${newPRs > 1 ? \"s\" : \"\"}!`\n          : `Workout saved! ${exercises.length} exercises logged`;\n\n      Alert.alert(\"Success\", message);\n      setTemplateName(\"\");\n      setExercises([]);\n      setPersonalRecords({});\n      setLoadedTemplateId(null);\n      setLoadedTPathId(null);\n      setHasUnsavedChanges(false);\n      completeSession();\n      router.back();\n    } catch (error: any) {\n      Alert.alert(\"Error\", error.message || \"Failed to save workout\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveAsTemplate = () => {\n    if (!userId) {\n      Alert.alert(\"Error\", \"Not authenticated\");\n      return;\n    }\n\n    if (!templateName.trim()) {\n      Alert.alert(\"Error\", \"Please enter a workout name first\");\n      return;\n    }\n\n    if (exercises.length === 0) {\n      Alert.alert(\"Error\", \"Please add at least one exercise\");\n      return;\n    }\n\n    setShowTemplateSaveModal(true);\n  };\n\n  const handleConfirmSaveTemplate = async (description: string) => {\n    try {\n      const templateId =\n        loadedTemplateId ||\n        `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const now = new Date().toISOString();\n\n      let existingTemplate = null;\n      if (loadedTemplateId) {\n        existingTemplate = await getTemplate(loadedTemplateId);\n      }\n\n      const template = {\n        id: templateId,\n        user_id: userId!,\n        name: templateName,\n        description: description || null,\n        exercises: exercises.map((ex, idx) => ({\n          exercise_id: ex.exerciseId,\n          order_index: idx,\n          default_sets: ex.sets.length,\n          default_weight_kg: ex.sets[0]?.weight\n            ? parseFloat(ex.sets[0].weight)\n            : null,\n          default_reps: ex.sets[0]?.reps ? parseInt(ex.sets[0].reps, 10) : null,\n        })),\n        created_at: existingTemplate?.created_at || now,\n        updated_at: now,\n      };\n\n      await saveTemplate(template);\n      setLoadedTemplateId(templateId);\n      setCurrentTemplateDescription(\n        description || existingTemplate?.description || \"\",\n      );\n      Alert.alert(\"Success\", \"Template saved!\");\n    } catch (error: any) {\n      Alert.alert(\"Error\", error.message || \"Failed to save template\");\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.syncStatus}>\n        <Text style={styles.syncText}>\n          {isOnline ? \"🟢 Online\" : \"🔴 Offline\"} •{\" \"}\n          {isSyncing ? \"Syncing...\" : `Queue: ${queueLength}`}\n        </Text>\n      </View>\n\n      <View style={styles.section}>\n        <Text style={styles.label}>Workout Name</Text>\n        <TextInput\n          style={styles.input}\n          placeholder=\"e.g., Chest Day\"\n          placeholderTextColor=\"#666\"\n          value={templateName}\n          onChangeText={setTemplateName}\n        />\n      </View>\n\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Text style={styles.label}>Exercises ({exercises.length})</Text>\n          <TouchableOpacity\n            style={styles.addExerciseButton}\n            onPress={() => router.push(\"/exercise-picker\")}\n          >\n            <Text style={styles.addExerciseText}>+ Add Exercise</Text>\n          </TouchableOpacity>\n        </View>\n\n        {exercises.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Text style={styles.emptyText}>No exercises added yet</Text>\n            <Text style={styles.emptySubtext}>\n              Tap \"+ Add Exercise\" to get started\n            </Text>\n          </View>\n        ) : (\n          exercises.map((exercise, exerciseIndex) => {\n            const exerciseData = getExerciseById(exercise.exerciseId);\n            return (\n              <View key={exerciseIndex} style={styles.exerciseCard}>\n                <View style={styles.exerciseHeader}>\n                  <View style={styles.exerciseInfo}>\n                    <Text style={styles.exerciseTitle}>\n                      {exerciseData?.name || exercise.exerciseId}\n                    </Text>\n                    {exerciseData?.category && (\n                      <Text style={styles.exerciseCategory}>\n                        {exerciseData.category}\n                      </Text>\n                    )}\n                  </View>\n                  <TouchableOpacity\n                    onPress={() => removeExercise(exerciseIndex)}\n                  >\n                    <Text style={styles.removeButton}>✕</Text>\n                  </TouchableOpacity>\n                </View>\n\n                <View style={styles.setsContainer}>\n                  {personalRecords[exercise.exerciseId] > 0 && (\n                    <Text style={styles.prHint}>\n                      PR: {personalRecords[exercise.exerciseId]} kg\n                    </Text>\n                  )}\n                  {exercise.sets.map((set, setIndex) => {\n                    const weight = parseFloat(set.weight);\n                    const isPotentialPR =\n                      !Number.isNaN(weight) &&\n                      weight > (personalRecords[exercise.exerciseId] || 0);\n\n                    return (\n                      <View key={setIndex} style={styles.setRow}>\n                        <Text style={styles.setNumber}>#{setIndex + 1}</Text>\n                        <TextInput\n                          style={[\n                            styles.input,\n                            styles.setInput,\n                            isPotentialPR && styles.prInput,\n                          ]}\n                          placeholder=\"kg\"\n                          placeholderTextColor=\"#666\"\n                          keyboardType=\"numeric\"\n                          value={set.weight}\n                          onChangeText={(value) =>\n                            updateSet(exerciseIndex, setIndex, \"weight\", value)\n                          }\n                        />\n                        <TextInput\n                          style={[styles.input, styles.setInput]}\n                          placeholder=\"reps\"\n                          placeholderTextColor=\"#666\"\n                          keyboardType=\"numeric\"\n                          value={set.reps}\n                          onChangeText={(value) =>\n                            updateSet(exerciseIndex, setIndex, \"reps\", value)\n                          }\n                        />\n                        {isPotentialPR && (\n                          <Text style={styles.prBadge}>🎉 PR!</Text>\n                        )}\n                        {exercise.sets.length > 1 && (\n                          <TouchableOpacity\n                            onPress={() => removeSet(exerciseIndex, setIndex)}\n                          >\n                            <Text style={styles.removeSetButton}>−</Text>\n                          </TouchableOpacity>\n                        )}\n                      </View>\n                    );\n                  })}\n\n                  <TouchableOpacity\n                    style={styles.addSetButton}\n                    onPress={() => addSet(exerciseIndex)}\n                  >\n                    <Text style={styles.addSetText}>+ Add Set</Text>\n                  </TouchableOpacity>\n                </View>\n\n                <AICoachingCard\n                  exerciseName={exerciseData?.name || exercise.exerciseId}\n                  currentSet={\n                    exercise.sets.filter((s) => s.weight && s.reps).length + 1\n                  }\n                  totalSets={exercise.sets.length}\n                  targetReps={exercise.sets[0]?.reps}\n                />\n              </View>\n            );\n          })\n        )}\n      </View>\n\n      <View style={styles.bottomButtons}>\n        <TouchableOpacity\n          style={styles.timerButton}\n          onPress={() => setShowRestTimer(true)}\n        >\n          <Text style={styles.timerButtonText}>⏱ Rest Timer</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.templateButton}\n          onPress={handleSaveAsTemplate}\n        >\n          <Text style={styles.templateButtonText}>\n            {loadedTemplateId ? \"💾 Update Template\" : \"📋 Save as Template\"}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.saveButton, loading && styles.saveButtonDisabled]}\n          onPress={saveWorkout}\n          disabled={loading}\n        >\n          <Text style={styles.saveButtonText}>\n            {loading ? \"Saving...\" : \"Save Workout\"}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <RestTimer\n        visible={showRestTimer}\n        onClose={() => setShowRestTimer(false)}\n      />\n\n      <TemplateSaveModal\n        visible={showTemplateSaveModal}\n        onClose={() => setShowTemplateSaveModal(false)}\n        onSave={handleConfirmSaveTemplate}\n        isUpdate={!!loadedTemplateId}\n        initialDescription={currentTemplateDescription}\n      />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#000\",\n    padding: 20,\n  },\n  syncStatus: {\n    backgroundColor: \"#111\",\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 20,\n  },\n  syncText: {\n    color: \"#0a0\",\n    fontSize: 14,\n    textAlign: \"center\",\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 12,\n  },\n  label: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  input: {\n    backgroundColor: \"#111\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n    color: \"#fff\",\n    fontSize: 16,\n  },\n  addExerciseButton: {\n    backgroundColor: \"#0a0\",\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n  },\n  addExerciseText: {\n    color: \"#fff\",\n    fontSize: 14,\n    fontWeight: \"bold\",\n  },\n  emptyState: {\n    padding: 32,\n    alignItems: \"center\",\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  emptyText: {\n    color: \"#888\",\n    fontSize: 16,\n    marginBottom: 4,\n  },\n  emptySubtext: {\n    color: \"#666\",\n    fontSize: 14,\n  },\n  exerciseCard: {\n    backgroundColor: \"#111\",\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  exerciseHeader: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-start\",\n    marginBottom: 12,\n  },\n  exerciseInfo: {\n    flex: 1,\n  },\n  exerciseTitle: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginBottom: 4,\n  },\n  exerciseCategory: {\n    color: \"#0a0\",\n    fontSize: 14,\n    textTransform: \"capitalize\",\n  },\n  removeButton: {\n    color: \"#f00\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    paddingHorizontal: 8,\n  },\n  setsContainer: {\n    marginTop: 8,\n  },\n  setRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 12,\n    gap: 8,\n  },\n  setNumber: {\n    color: \"#888\",\n    fontSize: 16,\n    width: 32,\n  },\n  setInput: {\n    flex: 1,\n  },\n  removeSetButton: {\n    color: \"#f00\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    paddingHorizontal: 4,\n  },\n  addSetButton: {\n    backgroundColor: \"#222\",\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderStyle: \"dashed\",\n    marginTop: 4,\n  },\n  addSetText: {\n    color: \"#0a0\",\n    fontSize: 14,\n    textAlign: \"center\",\n  },\n  bottomButtons: {\n    gap: 12,\n    marginTop: 16,\n    marginBottom: 32,\n  },\n  timerButton: {\n    backgroundColor: \"#222\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  timerButtonText: {\n    color: \"#0a0\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  templateButton: {\n    backgroundColor: \"#222\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n    borderWidth: 1,\n    borderColor: \"#0a0\",\n  },\n  templateButtonText: {\n    color: \"#0a0\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  saveButton: {\n    backgroundColor: \"#0a0\",\n    padding: 16,\n    borderRadius: 8,\n    alignItems: \"center\",\n  },\n  saveButtonDisabled: {\n    opacity: 0.6,\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n  },\n  prHint: {\n    color: \"#0a0\",\n    fontSize: 12,\n    marginBottom: 8,\n    fontWeight: \"bold\",\n  },\n  prInput: {\n    borderColor: \"#0a0\",\n    borderWidth: 2,\n  },\n  prBadge: {\n    fontSize: 14,\n    marginLeft: 4,\n  },\n});\n","size_bytes":21896},"apps/mobile/app/_components/SyncManagerInitializer.tsx":{"content":"import { useMobileSyncManager } from \"../_hooks/useSyncManager\";\n\nexport const SyncManagerInitializer = () => {\n  useMobileSyncManager();\n  return null;\n};\n","size_bytes":156},"apps/mobile/app/_components/ai-coaching-card.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ActivityIndicator,\n} from \"react-native\";\nimport {\n  getCoachingAdvice,\n  getFormTips,\n  type CoachingContext,\n} from \"@data/ai/coaching\";\n\ninterface AICoachingCardProps {\n  exerciseName: string;\n  currentSet: number;\n  totalSets: number;\n  targetReps?: string;\n}\n\nexport function AICoachingCard({\n  exerciseName,\n  currentSet,\n  totalSets,\n  targetReps,\n}: AICoachingCardProps) {\n  const [advice, setAdvice] = useState<string | null>(null);\n  const [formTips, setFormTips] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [showFormTips, setShowFormTips] = useState(false);\n\n  const handleGetCoaching = async () => {\n    setLoading(true);\n    try {\n      const context: CoachingContext = {\n        exerciseName,\n        currentSet,\n        totalSets,\n        targetReps: targetReps || \"8-12\",\n      };\n\n      const response = await getCoachingAdvice(context);\n      setAdvice(response.message);\n    } catch {\n      setAdvice(\"You've got this! Focus on form and controlled movements.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGetFormTips = async () => {\n    if (formTips.length > 0) {\n      setShowFormTips(!showFormTips);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const tips = await getFormTips(exerciseName);\n      setFormTips(tips);\n      setShowFormTips(true);\n    } catch (error) {\n      console.error(\"Failed to get form tips:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.headerText}>✨ AI Coach</Text>\n        <View style={styles.buttonRow}>\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={handleGetCoaching}\n            disabled={loading}\n          >\n            {loading && !showFormTips ? (\n              <ActivityIndicator size=\"small\" color=\"#10b981\" />\n            ) : (\n              <Text style={styles.actionButtonText}>💪 Motivate</Text>\n            )}\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={handleGetFormTips}\n            disabled={loading}\n          >\n            {loading && showFormTips ? (\n              <ActivityIndicator size=\"small\" color=\"#10b981\" />\n            ) : (\n              <Text style={styles.actionButtonText}>📋 Form Tips</Text>\n            )}\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {advice && !showFormTips && (\n        <View style={styles.adviceBox}>\n          <Text style={styles.adviceText}>{advice}</Text>\n        </View>\n      )}\n\n      {showFormTips && formTips.length > 0 && (\n        <View style={styles.tipsBox}>\n          {formTips.map((tip, index) => (\n            <View key={index} style={styles.tipRow}>\n              <Text style={styles.tipBullet}>•</Text>\n              <Text style={styles.tipText}>{tip}</Text>\n            </View>\n          ))}\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#0d1f1a\",\n    borderRadius: 12,\n    padding: 12,\n    borderWidth: 1,\n    borderColor: \"#10b981\",\n    marginTop: 12,\n  },\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginBottom: 8,\n  },\n  headerText: {\n    color: \"#10b981\",\n    fontSize: 14,\n    fontWeight: \"600\",\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    gap: 8,\n  },\n  actionButton: {\n    backgroundColor: \"#1a2f26\",\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    minWidth: 80,\n    alignItems: \"center\",\n  },\n  actionButtonText: {\n    color: \"#10b981\",\n    fontSize: 12,\n    fontWeight: \"600\",\n  },\n  adviceBox: {\n    backgroundColor: \"#1a2f26\",\n    borderRadius: 8,\n    padding: 12,\n    marginTop: 8,\n  },\n  adviceText: {\n    color: \"#fff\",\n    fontSize: 14,\n    lineHeight: 20,\n  },\n  tipsBox: {\n    marginTop: 8,\n  },\n  tipRow: {\n    flexDirection: \"row\",\n    marginBottom: 8,\n  },\n  tipBullet: {\n    color: \"#10b981\",\n    fontSize: 16,\n    marginRight: 8,\n    fontWeight: \"bold\",\n  },\n  tipText: {\n    color: \"#fff\",\n    fontSize: 14,\n    flex: 1,\n    lineHeight: 20,\n  },\n});\n","size_bytes":4315},"apps/mobile/app/_components/rest-timer.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { View, Text, TouchableOpacity, StyleSheet, Modal } from \"react-native\";\n\ninterface RestTimerProps {\n  visible: boolean;\n  onClose: () => void;\n  initialSeconds?: number;\n}\n\nexport function RestTimer({\n  visible,\n  onClose,\n  initialSeconds = 90,\n}: RestTimerProps) {\n  const [seconds, setSeconds] = useState(initialSeconds);\n  const [isRunning, setIsRunning] = useState(true);\n\n  useEffect(() => {\n    if (visible) {\n      setSeconds(initialSeconds);\n      setIsRunning(true);\n    }\n  }, [visible, initialSeconds]);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout | null = null;\n\n    if (isRunning && seconds > 0) {\n      interval = setInterval(() => {\n        setSeconds((prev) => prev - 1);\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [isRunning, seconds]);\n\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  const timeDisplay = `${minutes}:${remainingSeconds.toString().padStart(2, \"0\")}`;\n\n  const presetTimes = [30, 60, 90, 120, 180];\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={onClose}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.container}>\n          <Text style={styles.title}>Rest Timer</Text>\n\n          <View style={styles.timerDisplay}>\n            <Text style={[styles.timeText, seconds === 0 && styles.timeUpText]}>\n              {seconds === 0 ? \"Time's up!\" : timeDisplay}\n            </Text>\n          </View>\n\n          <View style={styles.controls}>\n            <TouchableOpacity\n              style={styles.controlButton}\n              onPress={() => setIsRunning(!isRunning)}\n            >\n              <Text style={styles.controlButtonText}>\n                {isRunning ? \"⏸ Pause\" : \"▶️ Resume\"}\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              style={styles.controlButton}\n              onPress={() => {\n                setSeconds(initialSeconds);\n                setIsRunning(true);\n              }}\n            >\n              <Text style={styles.controlButtonText}>🔄 Reset</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.presets}>\n            <Text style={styles.presetsLabel}>Quick Set:</Text>\n            <View style={styles.presetsRow}>\n              {presetTimes.map((time) => (\n                <TouchableOpacity\n                  key={time}\n                  style={styles.presetButton}\n                  onPress={() => {\n                    setSeconds(time);\n                    setIsRunning(true);\n                  }}\n                >\n                  <Text style={styles.presetButtonText}>{time}s</Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n\n          <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n            <Text style={styles.closeButtonText}>Close</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    backgroundColor: \"#111\",\n    borderRadius: 20,\n    padding: 24,\n    width: \"85%\",\n    maxWidth: 400,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    marginBottom: 24,\n  },\n  timerDisplay: {\n    backgroundColor: \"#000\",\n    borderRadius: 16,\n    padding: 32,\n    marginBottom: 24,\n    borderWidth: 2,\n    borderColor: \"#0a0\",\n  },\n  timeText: {\n    color: \"#0a0\",\n    fontSize: 64,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    fontVariant: [\"tabular-nums\"],\n  },\n  timeUpText: {\n    color: \"#f00\",\n    fontSize: 32,\n  },\n  controls: {\n    flexDirection: \"row\",\n    gap: 12,\n    marginBottom: 24,\n  },\n  controlButton: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  controlButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    textAlign: \"center\",\n    fontWeight: \"600\",\n  },\n  presets: {\n    marginBottom: 24,\n  },\n  presetsLabel: {\n    color: \"#888\",\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  presetsRow: {\n    flexDirection: \"row\",\n    gap: 8,\n  },\n  presetButton: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  presetButtonText: {\n    color: \"#0a0\",\n    fontSize: 14,\n    textAlign: \"center\",\n    fontWeight: \"600\",\n  },\n  closeButton: {\n    backgroundColor: \"#0a0\",\n    padding: 16,\n    borderRadius: 12,\n  },\n  closeButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n});\n","size_bytes":4928},"apps/mobile/app/_components/template-save-modal.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  Modal,\n} from \"react-native\";\n\ninterface TemplateSaveModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onSave: (description: string) => void;\n  isUpdate: boolean;\n  initialDescription?: string;\n}\n\nexport function TemplateSaveModal({\n  visible,\n  onClose,\n  onSave,\n  isUpdate,\n  initialDescription = \"\",\n}: TemplateSaveModalProps) {\n  const [description, setDescription] = useState(initialDescription);\n\n  const handleSave = () => {\n    onSave(description);\n    onClose();\n  };\n\n  const handleClose = () => {\n    setDescription(initialDescription);\n    onClose();\n  };\n\n  React.useEffect(() => {\n    if (visible) {\n      setDescription(initialDescription);\n    }\n  }, [visible, initialDescription]);\n\n  return (\n    <Modal\n      visible={visible}\n      transparent\n      animationType=\"fade\"\n      onRequestClose={handleClose}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.container}>\n          <Text style={styles.title}>\n            {isUpdate ? \"Update Template\" : \"Save as Template\"}\n          </Text>\n\n          <Text style={styles.label}>Description (optional):</Text>\n          <TextInput\n            style={styles.input}\n            placeholder=\"e.g., Heavy chest and triceps day\"\n            placeholderTextColor=\"#666\"\n            value={description}\n            onChangeText={setDescription}\n            multiline\n            numberOfLines={3}\n          />\n\n          <View style={styles.buttons}>\n            <TouchableOpacity style={styles.cancelButton} onPress={handleClose}>\n              <Text style={styles.cancelButtonText}>Cancel</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.saveButton} onPress={handleSave}>\n              <Text style={styles.saveButtonText}>\n                {isUpdate ? \"Update\" : \"Save\"}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  container: {\n    backgroundColor: \"#111\",\n    borderRadius: 20,\n    padding: 24,\n    width: \"85%\",\n    maxWidth: 400,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  title: {\n    color: \"#fff\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 20,\n  },\n  label: {\n    color: \"#888\",\n    fontSize: 14,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: \"#000\",\n    borderWidth: 1,\n    borderColor: \"#333\",\n    borderRadius: 8,\n    padding: 12,\n    color: \"#fff\",\n    fontSize: 16,\n    marginBottom: 24,\n    minHeight: 80,\n    textAlignVertical: \"top\",\n  },\n  buttons: {\n    flexDirection: \"row\",\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: \"#333\",\n  },\n  cancelButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    textAlign: \"center\",\n    fontWeight: \"600\",\n  },\n  saveButton: {\n    flex: 1,\n    backgroundColor: \"#0a0\",\n    padding: 16,\n    borderRadius: 12,\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 16,\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n  },\n});\n","size_bytes":3313},"apps/mobile/app/_contexts/auth-context.tsx":{"content":"import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useMemo,\n} from \"react\";\nimport { Session, SupabaseClient } from \"@supabase/supabase-js\";\nimport { supabase } from \"@data/supabase/client-mobile\";\n\ninterface AuthContextType {\n  session: Session | null;\n  supabase: SupabaseClient;\n  userId: string | null;\n  loading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const userId = useMemo(() => session?.user?.id || null, [session?.user?.id]);\n\n  useEffect(() => {\n    supabase.auth\n      .getSession()\n      .then(\n        ({\n          data: { session: currentSession },\n        }: {\n          data: { session: Session | null };\n        }) => {\n          setSession(currentSession);\n          setLoading(false);\n        },\n      );\n\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(\n      (_event: string, newSession: Session | null) => {\n        setSession(newSession);\n      },\n    );\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ session, supabase, userId, loading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n","size_bytes":1572},"apps/mobile/app/_contexts/data-context.tsx":{"content":"import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useMemo,\n} from \"react\";\nimport { database, addToSyncQueue } from \"../_lib/database\";\nimport { useSyncQueueProcessor } from \"@data/hooks/use-sync-queue-processor\";\nimport { useAuth } from \"./auth-context\";\nimport type {\n  WorkoutSession,\n  SetLog,\n  WorkoutTemplate,\n  TPath,\n  TPathExercise,\n  TPathProgress,\n  TPathWithExercises,\n  Gym,\n} from \"@data/storage/models\";\nimport NetInfo from \"@react-native-community/netinfo\";\n\ninterface WorkoutStats {\n  totalWorkouts: number;\n  totalVolume: number;\n  averageVolume: number;\n  currentStreak: number;\n  longestStreak: number;\n}\n\ninterface BodyMeasurement {\n  id: string;\n  user_id: string;\n  measurement_date: string;\n  weight_kg?: number;\n  body_fat_percentage?: number;\n  chest_cm?: number;\n  waist_cm?: number;\n  hips_cm?: number;\n  left_arm_cm?: number;\n  right_arm_cm?: number;\n  left_thigh_cm?: number;\n  right_thigh_cm?: number;\n  notes?: string;\n  created_at: string;\n}\n\nexport interface Goal {\n  id: string;\n  user_id: string;\n  goal_type: string;\n  target_value: number;\n  current_value?: number;\n  start_date: string;\n  target_date?: string;\n  status: string;\n  exercise_id?: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserAchievement {\n  id: string;\n  user_id: string;\n  achievement_id: string;\n  unlocked_at: string;\n  progress_value?: number;\n}\n\ninterface DataContextType {\n  addWorkoutSession: (session: WorkoutSession) => Promise<void>;\n  addSetLog: (setLog: SetLog) => Promise<void>;\n  getWorkoutSessions: (userId: string) => Promise<WorkoutSession[]>;\n  getSetLogs: (sessionId: string) => Promise<SetLog[]>;\n  getPersonalRecord: (userId: string, exerciseId: string) => Promise<number>;\n  saveTemplate: (template: WorkoutTemplate) => Promise<void>;\n  getTemplates: (userId: string) => Promise<WorkoutTemplate[]>;\n  getTemplate: (templateId: string) => Promise<WorkoutTemplate | null>;\n  deleteTemplate: (templateId: string) => Promise<void>;\n  getWorkoutStats: (userId: string, days?: number) => Promise<WorkoutStats>;\n  getWorkoutFrequency: (\n    userId: string,\n    days?: number,\n  ) => Promise<Array<{ date: string; count: number }>>;\n  getVolumeHistory: (\n    userId: string,\n    days?: number,\n  ) => Promise<Array<{ date: string; volume: number }>>;\n  getPRHistory: (\n    userId: string,\n    exerciseId: string,\n  ) => Promise<Array<{ date: string; weight: number }>>;\n  saveBodyMeasurement: (measurement: BodyMeasurement) => Promise<void>;\n  getBodyMeasurements: (userId: string) => Promise<BodyMeasurement[]>;\n  getWeightHistory: (\n    userId: string,\n    days?: number,\n  ) => Promise<Array<{ date: string; weight: number }>>;\n  deleteBodyMeasurement: (measurementId: string) => Promise<void>;\n  saveGoal: (goal: Goal) => Promise<void>;\n  getGoals: (userId: string, status?: string) => Promise<Goal[]>;\n  getGoal: (goalId: string) => Promise<Goal | null>;\n  updateGoalProgress: (\n    goalId: string,\n    currentValue: number,\n    status?: string,\n  ) => Promise<void>;\n  deleteGoal: (goalId: string) => Promise<void>;\n  unlockAchievement: (achievement: UserAchievement) => Promise<void>;\n  getUserAchievements: (userId: string) => Promise<UserAchievement[]>;\n  hasAchievement: (userId: string, achievementId: string) => Promise<boolean>;\n  checkAndUnlockAchievements: (userId: string) => Promise<void>;\n  addTPath: (tPath: TPath) => Promise<void>;\n  getTPath: (tPathId: string) => Promise<TPathWithExercises | null>;\n  getTPaths: (userId: string, mainProgramsOnly?: boolean) => Promise<TPath[]>;\n  getTPathsByParent: (parentId: string) => Promise<TPath[]>;\n  updateTPath: (tPathId: string, updates: Partial<TPath>) => Promise<void>;\n  deleteTPath: (tPathId: string) => Promise<void>;\n  addTPathExercise: (exercise: TPathExercise) => Promise<void>;\n  getTPathExercises: (tPathId: string) => Promise<TPathExercise[]>;\n  deleteTPathExercise: (exerciseId: string) => Promise<void>;\n  updateTPathProgress: (progress: TPathProgress) => Promise<void>;\n  getTPathProgress: (\n    userId: string,\n    tPathId: string,\n  ) => Promise<TPathProgress | null>;\n  getAllTPathProgress: (userId: string) => Promise<TPathProgress[]>;\n  addGym: (gym: Gym) => Promise<void>;\n  getGym: (gymId: string) => Promise<Gym | null>;\n  getGyms: (userId: string) => Promise<Gym[]>;\n  getActiveGym: (userId: string) => Promise<Gym | null>;\n  updateGym: (gymId: string, updates: Partial<Gym>) => Promise<void>;\n  setActiveGym: (userId: string, gymId: string) => Promise<void>;\n  deleteGym: (gymId: string) => Promise<void>;\n  isSyncing: boolean;\n  queueLength: number;\n  isOnline: boolean;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\nexport const DataProvider = ({ children }: { children: React.ReactNode }) => {\n  const { supabase, userId } = useAuth();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isOnline, setIsOnline] = useState(true);\n\n  useEffect(() => {\n    database.init().then(() => setIsInitialized(true));\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe = NetInfo.addEventListener((state) => {\n      setIsOnline(state.isConnected ?? false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const { isSyncing, queueLength } = useSyncQueueProcessor({\n    supabase,\n    store: database.syncQueue,\n    isOnline,\n    enabled: isInitialized && !!userId,\n  });\n\n  const addWorkoutSession = async (session: WorkoutSession): Promise<void> => {\n    await database.addWorkoutSession(session);\n    await addToSyncQueue(\"create\", \"workout_sessions\", session);\n  };\n\n  const addSetLog = async (setLog: SetLog): Promise<void> => {\n    await database.addSetLog(setLog);\n    await addToSyncQueue(\"create\", \"set_logs\", setLog);\n  };\n\n  const getWorkoutSessions = async (\n    targetUserId: string,\n  ): Promise<WorkoutSession[]> => {\n    return await database.getWorkoutSessions(targetUserId);\n  };\n\n  const getSetLogs = async (sessionId: string): Promise<SetLog[]> => {\n    return await database.getSetLogs(sessionId);\n  };\n\n  const getPersonalRecord = async (\n    targetUserId: string,\n    exerciseId: string,\n  ): Promise<number> => {\n    return await database.getPersonalRecord(targetUserId, exerciseId);\n  };\n\n  const saveTemplate = async (template: WorkoutTemplate): Promise<void> => {\n    await database.saveTemplate(template);\n  };\n\n  const getTemplates = async (\n    targetUserId: string,\n  ): Promise<WorkoutTemplate[]> => {\n    return await database.getTemplates(targetUserId);\n  };\n\n  const getTemplate = async (\n    templateId: string,\n  ): Promise<WorkoutTemplate | null> => {\n    return await database.getTemplate(templateId);\n  };\n\n  const deleteTemplate = async (templateId: string): Promise<void> => {\n    await database.deleteTemplate(templateId);\n  };\n\n  const getWorkoutStats = async (\n    targetUserId: string,\n    days: number = 30,\n  ): Promise<WorkoutStats> => {\n    return await database.getWorkoutStats(targetUserId, days);\n  };\n\n  const getWorkoutFrequency = async (\n    targetUserId: string,\n    days: number = 30,\n  ): Promise<Array<{ date: string; count: number }>> => {\n    return await database.getWorkoutFrequency(targetUserId, days);\n  };\n\n  const getVolumeHistory = async (\n    targetUserId: string,\n    days: number = 30,\n  ): Promise<Array<{ date: string; volume: number }>> => {\n    return await database.getVolumeHistory(targetUserId, days);\n  };\n\n  const getPRHistory = async (\n    targetUserId: string,\n    exerciseId: string,\n  ): Promise<Array<{ date: string; weight: number }>> => {\n    return await database.getPRHistory(targetUserId, exerciseId);\n  };\n\n  const saveBodyMeasurement = async (\n    measurement: BodyMeasurement,\n  ): Promise<void> => {\n    await database.saveBodyMeasurement(measurement);\n  };\n\n  const getBodyMeasurements = async (\n    targetUserId: string,\n  ): Promise<BodyMeasurement[]> => {\n    return await database.getBodyMeasurements(targetUserId);\n  };\n\n  const getWeightHistory = async (\n    targetUserId: string,\n    days?: number,\n  ): Promise<Array<{ date: string; weight: number }>> => {\n    return await database.getWeightHistory(targetUserId, days);\n  };\n\n  const deleteBodyMeasurement = async (\n    measurementId: string,\n  ): Promise<void> => {\n    await database.deleteBodyMeasurement(measurementId);\n  };\n\n  const saveGoal = async (goal: Goal): Promise<void> => {\n    await database.saveGoal(goal);\n  };\n\n  const getGoals = async (\n    targetUserId: string,\n    status?: string,\n  ): Promise<Goal[]> => {\n    return await database.getGoals(targetUserId, status);\n  };\n\n  const getGoal = async (goalId: string): Promise<Goal | null> => {\n    return await database.getGoal(goalId);\n  };\n\n  const updateGoalProgress = async (\n    goalId: string,\n    currentValue: number,\n    status?: string,\n  ): Promise<void> => {\n    await database.updateGoalProgress(goalId, currentValue, status);\n  };\n\n  const deleteGoal = async (goalId: string): Promise<void> => {\n    await database.deleteGoal(goalId);\n  };\n\n  const unlockAchievement = async (\n    achievement: UserAchievement,\n  ): Promise<void> => {\n    await database.unlockAchievement(achievement);\n  };\n\n  const getUserAchievements = async (\n    targetUserId: string,\n  ): Promise<UserAchievement[]> => {\n    return await database.getUserAchievements(targetUserId);\n  };\n\n  const hasAchievement = async (\n    targetUserId: string,\n    achievementId: string,\n  ): Promise<boolean> => {\n    return await database.hasAchievement(targetUserId, achievementId);\n  };\n\n  const checkAndUnlockAchievements = async (\n    targetUserId: string,\n  ): Promise<void> => {\n    const { ACHIEVEMENTS } = await import(\"@data/achievements\");\n    const stats = await database.getWorkoutStats(targetUserId);\n    const unlockedAchievements =\n      await database.getUserAchievements(targetUserId);\n    const unlockedIds = new Set(\n      unlockedAchievements.map((a) => a.achievement_id),\n    );\n\n    for (const achievement of ACHIEVEMENTS) {\n      if (unlockedIds.has(achievement.id)) {\n        continue;\n      }\n\n      let shouldUnlock = false;\n      let progressValue = 0;\n\n      switch (achievement.requirement.type) {\n        case \"workout_count\":\n          progressValue = stats.totalWorkouts;\n          shouldUnlock = progressValue >= achievement.requirement.value;\n          break;\n        case \"streak_days\":\n          progressValue = stats.currentStreak;\n          shouldUnlock = progressValue >= achievement.requirement.value;\n          break;\n        case \"total_volume\":\n          progressValue = stats.totalVolume;\n          shouldUnlock = progressValue >= achievement.requirement.value;\n          break;\n        case \"max_weight\":\n          if (achievement.requirement.exercise_id) {\n            progressValue = await database.getPersonalRecord(\n              targetUserId,\n              achievement.requirement.exercise_id,\n            );\n            shouldUnlock = progressValue >= achievement.requirement.value;\n          }\n          break;\n      }\n\n      if (shouldUnlock) {\n        await database.unlockAchievement({\n          id: `${targetUserId}_${achievement.id}_${Date.now()}`,\n          user_id: targetUserId,\n          achievement_id: achievement.id,\n          unlocked_at: new Date().toISOString(),\n          progress_value: progressValue,\n        });\n      }\n    }\n  };\n\n  const addTPath = async (tPath: TPath): Promise<void> => {\n    await database.addTPath(tPath);\n  };\n\n  const getTPath = async (\n    tPathId: string,\n  ): Promise<TPathWithExercises | null> => {\n    return await database.getTPath(tPathId);\n  };\n\n  const getTPaths = async (\n    targetUserId: string,\n    mainProgramsOnly?: boolean,\n  ): Promise<TPath[]> => {\n    return await database.getTPaths(targetUserId, mainProgramsOnly);\n  };\n\n  const getTPathsByParent = async (parentId: string): Promise<TPath[]> => {\n    return await database.getTPathsByParent(parentId);\n  };\n\n  const updateTPath = async (\n    tPathId: string,\n    updates: Partial<TPath>,\n  ): Promise<void> => {\n    await database.updateTPath(tPathId, updates);\n  };\n\n  const deleteTPath = async (tPathId: string): Promise<void> => {\n    await database.deleteTPath(tPathId);\n  };\n\n  const addTPathExercise = async (exercise: TPathExercise): Promise<void> => {\n    await database.addTPathExercise(exercise);\n  };\n\n  const getTPathExercises = async (\n    tPathId: string,\n  ): Promise<TPathExercise[]> => {\n    return await database.getTPathExercises(tPathId);\n  };\n\n  const deleteTPathExercise = async (exerciseId: string): Promise<void> => {\n    await database.deleteTPathExercise(exerciseId);\n  };\n\n  const updateTPathProgress = async (\n    progress: TPathProgress,\n  ): Promise<void> => {\n    await database.updateTPathProgress(progress);\n  };\n\n  const getTPathProgress = async (\n    targetUserId: string,\n    tPathId: string,\n  ): Promise<TPathProgress | null> => {\n    return await database.getTPathProgress(targetUserId, tPathId);\n  };\n\n  const getAllTPathProgress = async (\n    targetUserId: string,\n  ): Promise<TPathProgress[]> => {\n    return await database.getAllTPathProgress(targetUserId);\n  };\n\n  const addGym = async (gym: Gym): Promise<void> => {\n    await database.addGym(gym);\n  };\n\n  const getGym = async (gymId: string): Promise<Gym | null> => {\n    return await database.getGym(gymId);\n  };\n\n  const getGyms = async (targetUserId: string): Promise<Gym[]> => {\n    return await database.getGyms(targetUserId);\n  };\n\n  const getActiveGym = async (targetUserId: string): Promise<Gym | null> => {\n    return await database.getActiveGym(targetUserId);\n  };\n\n  const updateGym = async (\n    gymId: string,\n    updates: Partial<Gym>,\n  ): Promise<void> => {\n    await database.updateGym(gymId, updates);\n  };\n\n  const setActiveGym = async (\n    targetUserId: string,\n    gymId: string,\n  ): Promise<void> => {\n    await database.setActiveGym(targetUserId, gymId);\n  };\n\n  const deleteGym = async (gymId: string): Promise<void> => {\n    await database.deleteGym(gymId);\n  };\n\n  const value = useMemo(\n    () => ({\n      addWorkoutSession,\n      addSetLog,\n      getWorkoutSessions,\n      getSetLogs,\n      getPersonalRecord,\n      saveTemplate,\n      getTemplates,\n      getTemplate,\n      deleteTemplate,\n      getWorkoutStats,\n      getWorkoutFrequency,\n      getVolumeHistory,\n      getPRHistory,\n      saveBodyMeasurement,\n      getBodyMeasurements,\n      getWeightHistory,\n      deleteBodyMeasurement,\n      saveGoal,\n      getGoals,\n      getGoal,\n      updateGoalProgress,\n      deleteGoal,\n      unlockAchievement,\n      getUserAchievements,\n      hasAchievement,\n      checkAndUnlockAchievements,\n      addTPath,\n      getTPath,\n      getTPaths,\n      getTPathsByParent,\n      updateTPath,\n      deleteTPath,\n      addTPathExercise,\n      getTPathExercises,\n      deleteTPathExercise,\n      updateTPathProgress,\n      getTPathProgress,\n      getAllTPathProgress,\n      addGym,\n      getGym,\n      getGyms,\n      getActiveGym,\n      updateGym,\n      setActiveGym,\n      deleteGym,\n      isSyncing,\n      queueLength,\n      isOnline,\n    }),\n    [isSyncing, queueLength, isOnline],\n  );\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return <DataContext.Provider value={value}>{children}</DataContext.Provider>;\n};\n\nexport const useData = () => {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error(\"useData must be used within a DataProvider\");\n  }\n  return context;\n};\n","size_bytes":15422},"apps/mobile/app/_contexts/preferences-context.tsx":{"content":"import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport { database } from \"../_lib/database\";\nimport { useAuth } from \"./auth-context\";\n\ntype UnitSystem = \"metric\" | \"imperial\";\ntype Theme = \"dark\" | \"light\";\n\ninterface PreferencesContextType {\n  unitSystem: UnitSystem;\n  theme: Theme;\n  setUnitSystem: (system: UnitSystem) => Promise<void>;\n  setTheme: (theme: Theme) => Promise<void>;\n  loading: boolean;\n}\n\nconst PreferencesContext = createContext<PreferencesContextType | undefined>(\n  undefined,\n);\n\nconst PreferencesProviderInner = ({\n  children,\n  userId,\n}: {\n  children: React.ReactNode;\n  userId: string | null;\n}) => {\n  const [unitSystem, setUnitSystemState] = useState<UnitSystem>(\"metric\");\n  const [theme, setThemeState] = useState<Theme>(\"dark\");\n  const [loading, setLoading] = useState(true);\n  const [isDbReady, setIsDbReady] = useState(false);\n\n  useEffect(() => {\n    database\n      .init()\n      .then(() => setIsDbReady(true))\n      .catch((err) => {\n        console.error(\n          \"Failed to initialize database in PreferencesProvider:\",\n          err,\n        );\n        setIsDbReady(true);\n      });\n  }, []);\n\n  useEffect(() => {\n    const loadPreferences = async () => {\n      if (!isDbReady) {\n        return;\n      }\n\n      if (!userId) {\n        setLoading(false);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const prefs = await database.getUserPreferences(userId);\n        if (prefs) {\n          setUnitSystemState(prefs.unit_system as UnitSystem);\n          setThemeState(prefs.theme as Theme);\n        }\n      } catch (error) {\n        console.error(\"Failed to load preferences:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPreferences();\n  }, [userId, isDbReady]);\n\n  const setUnitSystem = useCallback(\n    async (system: UnitSystem) => {\n      if (!userId) {\n        return;\n      }\n\n      setUnitSystemState(system);\n      try {\n        await database.saveUserPreferences(userId, { unit_system: system });\n      } catch (error) {\n        console.error(\"Failed to save unit system:\", error);\n      }\n    },\n    [userId],\n  );\n\n  const setTheme = useCallback(\n    async (newTheme: Theme) => {\n      if (!userId) {\n        return;\n      }\n\n      setThemeState(newTheme);\n      try {\n        await database.saveUserPreferences(userId, { theme: newTheme });\n      } catch (error) {\n        console.error(\"Failed to save theme:\", error);\n      }\n    },\n    [userId],\n  );\n\n  const value = useMemo(\n    () => ({\n      unitSystem,\n      theme,\n      setUnitSystem,\n      setTheme,\n      loading,\n    }),\n    [loading, setTheme, setUnitSystem, theme, unitSystem],\n  );\n\n  return (\n    <PreferencesContext.Provider value={value}>\n      {children}\n    </PreferencesContext.Provider>\n  );\n};\n\nexport const PreferencesProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const { userId } = useAuth();\n  return (\n    <PreferencesProviderInner key={userId || \"no-user\"} userId={userId}>\n      {children}\n    </PreferencesProviderInner>\n  );\n};\n\nexport const usePreferences = () => {\n  const context = useContext(PreferencesContext);\n  if (!context) {\n    throw new Error(\"usePreferences must be used within PreferencesProvider\");\n  }\n  return context;\n};\n","size_bytes":3321},"apps/mobile/app/_contexts/workout-flow-context.tsx":{"content":"import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { BackHandler } from \"react-native\";\nimport { useRouter } from \"expo-router\";\n\ninterface WorkoutFlowContextValue {\n  isWorkoutActive: boolean;\n  hasUnsavedChanges: boolean;\n  activeTemplateId: string | null;\n  startSession: (templateId?: string | null) => void;\n  completeSession: () => void;\n  setHasUnsavedChanges: (value: boolean) => void;\n  requestNavigation: (action: () => void) => void;\n  showUnsavedChangesDialog: boolean;\n  confirmLeave: () => void;\n  cancelLeave: () => void;\n}\n\nconst WorkoutFlowContext = createContext<WorkoutFlowContextValue | undefined>(\n  undefined,\n);\n\nexport const WorkoutFlowProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const router = useRouter();\n  const [isWorkoutActive, setIsWorkoutActive] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [activeTemplateId, setActiveTemplateId] = useState<string | null>(null);\n  const [showUnsavedChangesDialog, setShowUnsavedChangesDialog] =\n    useState(false);\n  const pendingActionRef = useRef<(() => void) | null>(null);\n\n  const startSession = useCallback((templateId?: string | null) => {\n    setIsWorkoutActive(true);\n    setActiveTemplateId(templateId ?? null);\n  }, []);\n\n  const completeSession = useCallback(() => {\n    setIsWorkoutActive(false);\n    setHasUnsavedChanges(false);\n    setActiveTemplateId(null);\n  }, []);\n\n  const setUnsavedChanges = useCallback((value: boolean) => {\n    setHasUnsavedChanges(value);\n  }, []);\n\n  const requestNavigation = useCallback(\n    (action: () => void) => {\n      if (hasUnsavedChanges) {\n        pendingActionRef.current = action;\n        setShowUnsavedChangesDialog(true);\n        return;\n      }\n      action();\n    },\n    [hasUnsavedChanges],\n  );\n\n  const confirmLeave = useCallback(() => {\n    setShowUnsavedChangesDialog(false);\n    setHasUnsavedChanges(false);\n    setIsWorkoutActive(false);\n    setActiveTemplateId(null);\n    const action = pendingActionRef.current;\n    pendingActionRef.current = null;\n    if (action) {\n      action();\n    }\n  }, []);\n\n  const cancelLeave = useCallback(() => {\n    setShowUnsavedChangesDialog(false);\n    pendingActionRef.current = null;\n  }, []);\n\n  useEffect(() => {\n    if (!hasUnsavedChanges) {\n      return;\n    }\n\n    const handler = () => {\n      pendingActionRef.current = () => router.back();\n      setShowUnsavedChangesDialog(true);\n      return true;\n    };\n\n    const subscription = BackHandler.addEventListener(\n      \"hardwareBackPress\",\n      handler,\n    );\n    return () => subscription.remove();\n  }, [hasUnsavedChanges, router]);\n\n  const value = useMemo(\n    () => ({\n      isWorkoutActive,\n      hasUnsavedChanges,\n      activeTemplateId,\n      startSession,\n      completeSession,\n      setHasUnsavedChanges: setUnsavedChanges,\n      requestNavigation,\n      showUnsavedChangesDialog,\n      confirmLeave,\n      cancelLeave,\n    }),\n    [\n      activeTemplateId,\n      completeSession,\n      confirmLeave,\n      hasUnsavedChanges,\n      isWorkoutActive,\n      requestNavigation,\n      setUnsavedChanges,\n      showUnsavedChangesDialog,\n      cancelLeave,\n      startSession,\n    ],\n  );\n\n  return (\n    <WorkoutFlowContext.Provider value={value}>\n      {children}\n    </WorkoutFlowContext.Provider>\n  );\n};\n\nexport const useWorkoutFlow = () => {\n  const context = useContext(WorkoutFlowContext);\n  if (!context) {\n    throw new Error(\"useWorkoutFlow must be used within a WorkoutFlowProvider\");\n  }\n  return context;\n};\n","size_bytes":3622},"apps/mobile/app/_hooks/use-unit-conversion.ts":{"content":"import { usePreferences } from \"../_contexts/preferences-context\";\nimport { convertWeight, formatWeight } from \"@data/utils/unit-conversions\";\n\nexport function useUnitConversion() {\n  const { unitSystem } = usePreferences();\n\n  const displayWeight = (weightKg: number | null | undefined): string => {\n    if (weightKg === null || weightKg === undefined) {\n      return \"0\";\n    }\n\n    if (unitSystem === \"imperial\") {\n      const lbs = convertWeight(weightKg, \"kg\", \"lbs\");\n      return formatWeight(lbs, \"lbs\");\n    }\n\n    return formatWeight(weightKg, \"kg\");\n  };\n\n  const parseWeight = (displayValue: string): number => {\n    const value = parseFloat(displayValue) || 0;\n\n    if (unitSystem === \"imperial\") {\n      return convertWeight(value, \"lbs\", \"kg\");\n    }\n\n    return value;\n  };\n\n  const weightUnit = unitSystem === \"metric\" ? \"kg\" : \"lbs\";\n\n  return {\n    displayWeight,\n    parseWeight,\n    weightUnit,\n    unitSystem,\n  };\n}\n","size_bytes":939},"apps/mobile/app/_hooks/useSyncManager.ts":{"content":"import {\n  addEventListener as addNetInfoListener,\n  fetch as fetchNetInfo,\n} from \"@react-native-community/netinfo\";\nimport { AppState, type AppStateStatus } from \"react-native\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { useSyncQueueProcessor } from \"@data/hooks/use-sync-queue-processor\";\n\nimport { useAuth } from \"../_contexts/auth-context\";\nimport { database } from \"../_lib/database\";\n\nexport const useMobileSyncManager = () => {\n  const { supabase } = useAuth();\n  const [isOnline, setIsOnline] = useState(true);\n  const [isDatabaseReady, setIsDatabaseReady] = useState(false);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    database\n      .init()\n      .then(() => {\n        if (isMounted) {\n          setIsDatabaseReady(true);\n        }\n      })\n      .catch((error) => {\n        console.error(\n          \"[useMobileSyncManager] Failed to initialise database\",\n          error,\n        );\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    const networkUnsubscribe = addNetInfoListener((state) => {\n      setIsOnline(Boolean(state.isConnected && state.isInternetReachable));\n    });\n\n    const appStateListener = (state: AppStateStatus) => {\n      if (state === \"active\") {\n        fetchNetInfo().then((info) => {\n          setIsOnline(Boolean(info.isConnected && info.isInternetReachable));\n        });\n      }\n    };\n\n    const appSubscription = AppState.addEventListener(\n      \"change\",\n      appStateListener,\n    );\n\n    return () => {\n      networkUnsubscribe();\n      appSubscription.remove();\n    };\n  }, []);\n\n  const processor = useSyncQueueProcessor({\n    supabase,\n    store: database.syncQueue,\n    isOnline,\n    enabled: isDatabaseReady && Boolean(supabase),\n    intervalMs: 5000,\n    onError: (_, error) => {\n      console.error(\"[useMobileSyncManager] Sync error\", error);\n    },\n  });\n\n  return useMemo(\n    () => ({\n      isOnline,\n      isDatabaseReady,\n      ...processor,\n    }),\n    [isOnline, isDatabaseReady, processor],\n  );\n};\n","size_bytes":2035},"apps/mobile/app/_lib/database.ts":{"content":"import * as SQLite from \"expo-sqlite\";\nimport type {\n  SyncQueueItem,\n  SyncQueueStore,\n  WorkoutSession,\n  SetLog,\n  WorkoutTemplate,\n  TPath,\n  TPathExercise,\n  TPathProgress,\n  TPathWithExercises,\n  Gym,\n} from \"@data/storage\";\n\nconst DB_NAME = \"fitness_tracker.db\";\n\nclass Database {\n  private db: SQLite.SQLiteDatabase | null = null;\n  private initPromise: Promise<void> | null = null;\n\n  async init(): Promise<void> {\n    if (this.db) {\n      return;\n    }\n\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    this.initPromise = (async () => {\n      try {\n        this.db = await SQLite.openDatabaseAsync(DB_NAME);\n      } catch (error: any) {\n        const message = typeof error?.message === \"string\" ? error.message : \"\";\n        if (\n          message.includes(\"Couldn't create directory\") ||\n          message.includes(\"Could not open database\")\n        ) {\n          await SQLite.deleteDatabaseAsync(DB_NAME);\n          this.db = await SQLite.openDatabaseAsync(DB_NAME);\n        } else {\n          this.initPromise = null;\n          throw error;\n        }\n      }\n\n      await this.db!.execAsync(`\n      PRAGMA journal_mode = WAL;\n      \n      CREATE TABLE IF NOT EXISTS workout_sessions (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        session_date TEXT NOT NULL,\n        template_name TEXT,\n        completed_at TEXT,\n        rating INTEGER,\n        duration_string TEXT,\n        t_path_id TEXT,\n        created_at TEXT NOT NULL\n      );\n      \n      CREATE TABLE IF NOT EXISTS set_logs (\n        id TEXT PRIMARY KEY NOT NULL,\n        session_id TEXT NOT NULL,\n        exercise_id TEXT NOT NULL,\n        weight_kg REAL,\n        reps INTEGER,\n        reps_l INTEGER,\n        reps_r INTEGER,\n        time_seconds INTEGER,\n        is_pb INTEGER,\n        created_at TEXT NOT NULL,\n        FOREIGN KEY (session_id) REFERENCES workout_sessions(id)\n      );\n      \n      CREATE TABLE IF NOT EXISTS sync_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        operation TEXT NOT NULL,\n        table_name TEXT NOT NULL,\n        payload TEXT NOT NULL,\n        timestamp INTEGER NOT NULL,\n        attempts INTEGER NOT NULL DEFAULT 0,\n        error TEXT\n      );\n      \n      CREATE TABLE IF NOT EXISTS workout_templates (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        name TEXT NOT NULL,\n        description TEXT,\n        exercises TEXT NOT NULL,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS user_preferences (\n        user_id TEXT PRIMARY KEY NOT NULL,\n        unit_system TEXT DEFAULT 'metric',\n        theme TEXT DEFAULT 'dark',\n        updated_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS body_measurements (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        measurement_date TEXT NOT NULL,\n        weight_kg REAL,\n        body_fat_percentage REAL,\n        chest_cm REAL,\n        waist_cm REAL,\n        hips_cm REAL,\n        left_arm_cm REAL,\n        right_arm_cm REAL,\n        left_thigh_cm REAL,\n        right_thigh_cm REAL,\n        notes TEXT,\n        created_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS user_goals (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        goal_type TEXT NOT NULL,\n        target_value REAL NOT NULL,\n        current_value REAL,\n        start_date TEXT NOT NULL,\n        target_date TEXT,\n        status TEXT DEFAULT 'active',\n        exercise_id TEXT,\n        notes TEXT,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      );\n\n      CREATE TABLE IF NOT EXISTS user_achievements (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        achievement_id TEXT NOT NULL,\n        unlocked_at TEXT NOT NULL,\n        progress_value REAL\n      );\n\n      CREATE TABLE IF NOT EXISTS t_paths (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        template_name TEXT NOT NULL,\n        description TEXT,\n        is_main_program INTEGER DEFAULT 0,\n        parent_t_path_id TEXT,\n        order_index INTEGER,\n        is_ai_generated INTEGER DEFAULT 0,\n        ai_generation_params TEXT,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL,\n        FOREIGN KEY (parent_t_path_id) REFERENCES t_paths(id)\n      );\n\n      CREATE TABLE IF NOT EXISTS t_path_exercises (\n        id TEXT PRIMARY KEY NOT NULL,\n        t_path_id TEXT NOT NULL,\n        exercise_id TEXT NOT NULL,\n        order_index INTEGER NOT NULL,\n        is_bonus_exercise INTEGER DEFAULT 0,\n        target_sets INTEGER,\n        target_reps_min INTEGER,\n        target_reps_max INTEGER,\n        notes TEXT,\n        created_at TEXT NOT NULL,\n        FOREIGN KEY (t_path_id) REFERENCES t_paths(id)\n      );\n\n      CREATE TABLE IF NOT EXISTS t_path_progress (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        t_path_id TEXT NOT NULL,\n        completed_at TEXT,\n        last_accessed_at TEXT,\n        total_workouts_completed INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL,\n        FOREIGN KEY (t_path_id) REFERENCES t_paths(id)\n      );\n\n      CREATE TABLE IF NOT EXISTS gyms (\n        id TEXT PRIMARY KEY NOT NULL,\n        user_id TEXT NOT NULL,\n        name TEXT NOT NULL,\n        description TEXT,\n        equipment TEXT NOT NULL,\n        is_active INTEGER DEFAULT 0,\n        created_at TEXT NOT NULL,\n        updated_at TEXT NOT NULL\n      );\n      \n      CREATE INDEX IF NOT EXISTS idx_session_date ON workout_sessions(session_date);\n      CREATE INDEX IF NOT EXISTS idx_set_logs_session ON set_logs(session_id);\n      CREATE INDEX IF NOT EXISTS idx_sync_queue_timestamp ON sync_queue(timestamp);\n      CREATE INDEX IF NOT EXISTS idx_templates_user ON workout_templates(user_id);\n      CREATE INDEX IF NOT EXISTS idx_measurements_user ON body_measurements(user_id);\n      CREATE INDEX IF NOT EXISTS idx_measurements_date ON body_measurements(measurement_date);\n      CREATE INDEX IF NOT EXISTS idx_goals_user ON user_goals(user_id);\n      CREATE INDEX IF NOT EXISTS idx_achievements_user ON user_achievements(user_id);\n      CREATE INDEX IF NOT EXISTS idx_t_paths_user ON t_paths(user_id);\n      CREATE INDEX IF NOT EXISTS idx_t_paths_parent ON t_paths(parent_t_path_id);\n      CREATE INDEX IF NOT EXISTS idx_t_path_exercises_tpath ON t_path_exercises(t_path_id);\n      CREATE INDEX IF NOT EXISTS idx_t_path_progress_user ON t_path_progress(user_id);\n      CREATE INDEX IF NOT EXISTS idx_t_path_progress_tpath ON t_path_progress(t_path_id);\n      CREATE INDEX IF NOT EXISTS idx_gyms_user ON gyms(user_id);\n      CREATE INDEX IF NOT EXISTS idx_gyms_active ON gyms(is_active);\n    `);\n    })();\n\n    await this.initPromise;\n  }\n\n  getDB(): SQLite.SQLiteDatabase {\n    if (!this.db) {\n      throw new Error(\"Database not initialized. Call init() first.\");\n    }\n    return this.db;\n  }\n\n  async addWorkoutSession(session: WorkoutSession): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO workout_sessions \n       (id, user_id, session_date, template_name, completed_at, rating, duration_string, t_path_id, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        session.id,\n        session.user_id,\n        session.session_date,\n        session.template_name,\n        session.completed_at,\n        session.rating,\n        session.duration_string,\n        session.t_path_id,\n        session.created_at,\n      ],\n    );\n  }\n\n  async addSetLog(setLog: SetLog): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO set_logs \n       (id, session_id, exercise_id, weight_kg, reps, reps_l, reps_r, time_seconds, is_pb, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        setLog.id,\n        setLog.session_id,\n        setLog.exercise_id,\n        setLog.weight_kg,\n        setLog.reps,\n        setLog.reps_l,\n        setLog.reps_r,\n        setLog.time_seconds,\n        setLog.is_pb ? 1 : 0,\n        setLog.created_at,\n      ],\n    );\n  }\n\n  async getWorkoutSessions(userId: string): Promise<WorkoutSession[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<WorkoutSession>(\n      \"SELECT * FROM workout_sessions WHERE user_id = ? ORDER BY session_date DESC\",\n      [userId],\n    );\n    return result;\n  }\n\n  async getSetLogs(sessionId: string): Promise<SetLog[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM set_logs WHERE session_id = ? ORDER BY created_at ASC\",\n      [sessionId],\n    );\n    return result.map((row) => ({\n      ...row,\n      is_pb: row.is_pb === 1,\n    }));\n  }\n\n  async getPersonalRecord(userId: string, exerciseId: string): Promise<number> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<{ max_weight: number }>(\n      `SELECT MAX(weight_kg) as max_weight \n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND sl.exercise_id = ?`,\n      [userId, exerciseId],\n    );\n    return result?.max_weight || 0;\n  }\n\n  async saveTemplate(template: WorkoutTemplate): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO workout_templates \n       (id, user_id, name, description, exercises, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?)`,\n      [\n        template.id,\n        template.user_id,\n        template.name,\n        template.description,\n        JSON.stringify(template.exercises),\n        template.created_at,\n        template.updated_at,\n      ],\n    );\n  }\n\n  async getTemplates(userId: string): Promise<WorkoutTemplate[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM workout_templates WHERE user_id = ? ORDER BY updated_at DESC\",\n      [userId],\n    );\n    return result.map((row) => ({\n      ...row,\n      exercises: JSON.parse(row.exercises),\n    }));\n  }\n\n  async getTemplate(templateId: string): Promise<WorkoutTemplate | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      \"SELECT * FROM workout_templates WHERE id = ?\",\n      [templateId],\n    );\n    if (!result) {\n      return null;\n    }\n    return {\n      ...result,\n      exercises: JSON.parse(result.exercises),\n    };\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"DELETE FROM workout_templates WHERE id = ?\", [\n      templateId,\n    ]);\n  }\n\n  async getWorkoutStats(\n    userId: string,\n    days: number = 30,\n  ): Promise<{\n    totalWorkouts: number;\n    totalVolume: number;\n    averageVolume: number;\n    currentStreak: number;\n    longestStreak: number;\n  }> {\n    const db = this.getDB();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const workouts = await db.getAllAsync<WorkoutSession>(\n      `SELECT * FROM workout_sessions \n       WHERE user_id = ? AND session_date >= ? \n       ORDER BY session_date DESC`,\n      [userId, startDate.toISOString()],\n    );\n\n    const volumeResult = await db.getFirstAsync<{ total_volume: number }>(\n      `SELECT SUM(sl.weight_kg * sl.reps) as total_volume\n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND ws.session_date >= ?`,\n      [userId, startDate.toISOString()],\n    );\n\n    const totalVolume = volumeResult?.total_volume || 0;\n    const totalWorkouts = workouts.length;\n    const averageVolume = totalWorkouts > 0 ? totalVolume / totalWorkouts : 0;\n\n    const allWorkouts = await db.getAllAsync<{ session_date: string }>(\n      `SELECT session_date FROM workout_sessions \n       WHERE user_id = ? \n       ORDER BY session_date DESC`,\n      [userId],\n    );\n\n    const { currentStreak, longestStreak } = this.calculateStreaks(\n      allWorkouts.map((w) => w.session_date),\n    );\n\n    return {\n      totalWorkouts,\n      totalVolume,\n      averageVolume,\n      currentStreak,\n      longestStreak,\n    };\n  }\n\n  private calculateStreaks(dates: string[]): {\n    currentStreak: number;\n    longestStreak: number;\n  } {\n    if (dates.length === 0) {\n      return { currentStreak: 0, longestStreak: 0 };\n    }\n\n    const uniqueDates = [...new Set(dates.map((d) => d.split(\"T\")[0]))]\n      .sort()\n      .reverse();\n\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    let lastDate: Date | null = null;\n\n    for (const dateStr of uniqueDates) {\n      const date = new Date(dateStr);\n\n      if (lastDate === null) {\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const daysDiff = Math.floor(\n          (today.getTime() - date.getTime()) / (1000 * 60 * 60 * 24),\n        );\n        if (daysDiff <= 1) {\n          currentStreak = 1;\n          tempStreak = 1;\n        }\n      } else {\n        const daysDiff = Math.floor(\n          (lastDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24),\n        );\n        if (daysDiff === 1) {\n          tempStreak++;\n          if (currentStreak > 0) {\n            currentStreak++;\n          }\n        } else {\n          if (currentStreak > 0) {\n            currentStreak = 0;\n          }\n          tempStreak = 1;\n        }\n      }\n\n      longestStreak = Math.max(longestStreak, tempStreak);\n      lastDate = date;\n    }\n\n    return { currentStreak, longestStreak };\n  }\n\n  async getWorkoutFrequency(\n    userId: string,\n    days: number = 30,\n  ): Promise<Array<{ date: string; count: number }>> {\n    const db = this.getDB();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const result = await db.getAllAsync<{ date: string; count: number }>(\n      `SELECT DATE(session_date) as date, COUNT(*) as count\n       FROM workout_sessions\n       WHERE user_id = ? AND session_date >= ?\n       GROUP BY DATE(session_date)\n       ORDER BY date ASC`,\n      [userId, startDate.toISOString()],\n    );\n\n    return result;\n  }\n\n  async getVolumeHistory(\n    userId: string,\n    days: number = 30,\n  ): Promise<Array<{ date: string; volume: number }>> {\n    const db = this.getDB();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const result = await db.getAllAsync<{ date: string; volume: number }>(\n      `SELECT DATE(ws.session_date) as date, SUM(sl.weight_kg * sl.reps) as volume\n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND ws.session_date >= ?\n       GROUP BY DATE(ws.session_date)\n       ORDER BY date ASC`,\n      [userId, startDate.toISOString()],\n    );\n\n    return result;\n  }\n\n  async getPRHistory(\n    userId: string,\n    exerciseId: string,\n  ): Promise<Array<{ date: string; weight: number }>> {\n    const db = this.getDB();\n\n    const result = await db.getAllAsync<{ date: string; weight: number }>(\n      `SELECT DATE(ws.session_date) as date, MAX(sl.weight_kg) as weight\n       FROM set_logs sl\n       JOIN workout_sessions ws ON sl.session_id = ws.id\n       WHERE ws.user_id = ? AND sl.exercise_id = ?\n       GROUP BY DATE(ws.session_date)\n       ORDER BY date ASC`,\n      [userId, exerciseId],\n    );\n\n    return result;\n  }\n\n  async getUserPreferences(\n    userId: string,\n  ): Promise<{ unit_system: string; theme: string } | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<{\n      unit_system: string;\n      theme: string;\n    }>(\"SELECT unit_system, theme FROM user_preferences WHERE user_id = ?\", [\n      userId,\n    ]);\n    return result || null;\n  }\n\n  async saveUserPreferences(\n    userId: string,\n    preferences: { unit_system?: string; theme?: string },\n  ): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n\n    const existing = await this.getUserPreferences(userId);\n\n    if (existing) {\n      await db.runAsync(\n        `UPDATE user_preferences \n         SET unit_system = ?, theme = ?, updated_at = ?\n         WHERE user_id = ?`,\n        [\n          preferences.unit_system || existing.unit_system,\n          preferences.theme || existing.theme,\n          now,\n          userId,\n        ],\n      );\n    } else {\n      await db.runAsync(\n        `INSERT INTO user_preferences (user_id, unit_system, theme, updated_at)\n         VALUES (?, ?, ?, ?)`,\n        [\n          userId,\n          preferences.unit_system || \"metric\",\n          preferences.theme || \"dark\",\n          now,\n        ],\n      );\n    }\n  }\n\n  async saveBodyMeasurement(measurement: {\n    id: string;\n    user_id: string;\n    measurement_date: string;\n    weight_kg?: number;\n    body_fat_percentage?: number;\n    chest_cm?: number;\n    waist_cm?: number;\n    hips_cm?: number;\n    left_arm_cm?: number;\n    right_arm_cm?: number;\n    left_thigh_cm?: number;\n    right_thigh_cm?: number;\n    notes?: string;\n    created_at: string;\n  }): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO body_measurements \n       (id, user_id, measurement_date, weight_kg, body_fat_percentage, chest_cm, waist_cm, hips_cm, left_arm_cm, right_arm_cm, left_thigh_cm, right_thigh_cm, notes, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        measurement.id,\n        measurement.user_id,\n        measurement.measurement_date,\n        measurement.weight_kg || null,\n        measurement.body_fat_percentage || null,\n        measurement.chest_cm || null,\n        measurement.waist_cm || null,\n        measurement.hips_cm || null,\n        measurement.left_arm_cm || null,\n        measurement.right_arm_cm || null,\n        measurement.left_thigh_cm || null,\n        measurement.right_thigh_cm || null,\n        measurement.notes || null,\n        measurement.created_at,\n      ],\n    );\n  }\n\n  async getBodyMeasurements(userId: string): Promise<any[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM body_measurements WHERE user_id = ? ORDER BY measurement_date DESC, created_at DESC\",\n      [userId],\n    );\n    return result;\n  }\n\n  async getWeightHistory(\n    userId: string,\n    days?: number,\n  ): Promise<Array<{ date: string; weight: number }>> {\n    const db = this.getDB();\n    let query = `SELECT DATE(measurement_date) as date, weight_kg as weight\n                 FROM body_measurements\n                 WHERE user_id = ? AND weight_kg IS NOT NULL`;\n    const params: any[] = [userId];\n\n    if (days) {\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n      query += \" AND measurement_date >= ?\";\n      params.push(startDate.toISOString());\n    }\n\n    query += \" ORDER BY measurement_date ASC\";\n\n    const result = await db.getAllAsync<{ date: string; weight: number }>(\n      query,\n      params,\n    );\n    return result;\n  }\n\n  async deleteBodyMeasurement(measurementId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"DELETE FROM body_measurements WHERE id = ?\", [\n      measurementId,\n    ]);\n  }\n\n  async saveGoal(goal: {\n    id: string;\n    user_id: string;\n    goal_type: string;\n    target_value: number;\n    current_value?: number;\n    start_date: string;\n    target_date?: string;\n    status?: string;\n    exercise_id?: string;\n    notes?: string;\n    created_at: string;\n    updated_at: string;\n  }): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO user_goals \n       (id, user_id, goal_type, target_value, current_value, start_date, target_date, status, exercise_id, notes, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        goal.id,\n        goal.user_id,\n        goal.goal_type,\n        goal.target_value,\n        goal.current_value || null,\n        goal.start_date,\n        goal.target_date || null,\n        goal.status || \"active\",\n        goal.exercise_id || null,\n        goal.notes || null,\n        goal.created_at,\n        goal.updated_at,\n      ],\n    );\n  }\n\n  async getGoals(userId: string, status?: string): Promise<any[]> {\n    const db = this.getDB();\n    let query = \"SELECT * FROM user_goals WHERE user_id = ?\";\n    const params: any[] = [userId];\n\n    if (status) {\n      query += \" AND status = ?\";\n      params.push(status);\n    }\n\n    query += \" ORDER BY created_at DESC\";\n\n    const result = await db.getAllAsync<any>(query, params);\n    return result;\n  }\n\n  async getGoal(goalId: string): Promise<any | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      \"SELECT * FROM user_goals WHERE id = ?\",\n      [goalId],\n    );\n    return result || null;\n  }\n\n  async updateGoalProgress(\n    goalId: string,\n    currentValue: number,\n    status?: string,\n  ): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n\n    if (status) {\n      await db.runAsync(\n        \"UPDATE user_goals SET current_value = ?, status = ?, updated_at = ? WHERE id = ?\",\n        [currentValue, status, now, goalId],\n      );\n    } else {\n      await db.runAsync(\n        \"UPDATE user_goals SET current_value = ?, updated_at = ? WHERE id = ?\",\n        [currentValue, now, goalId],\n      );\n    }\n  }\n\n  async deleteGoal(goalId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"DELETE FROM user_goals WHERE id = ?\", [goalId]);\n  }\n\n  async unlockAchievement(achievement: {\n    id: string;\n    user_id: string;\n    achievement_id: string;\n    unlocked_at: string;\n    progress_value?: number;\n  }): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO user_achievements \n       (id, user_id, achievement_id, unlocked_at, progress_value)\n       VALUES (?, ?, ?, ?, ?)`,\n      [\n        achievement.id,\n        achievement.user_id,\n        achievement.achievement_id,\n        achievement.unlocked_at,\n        achievement.progress_value || null,\n      ],\n    );\n  }\n\n  async getUserAchievements(userId: string): Promise<any[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM user_achievements WHERE user_id = ? ORDER BY unlocked_at DESC\",\n      [userId],\n    );\n    return result;\n  }\n\n  async hasAchievement(\n    userId: string,\n    achievementId: string,\n  ): Promise<boolean> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<{ count: number }>(\n      \"SELECT COUNT(*) as count FROM user_achievements WHERE user_id = ? AND achievement_id = ?\",\n      [userId, achievementId],\n    );\n    return (result?.count || 0) > 0;\n  }\n\n  async addTPath(tPath: TPath): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO t_paths \n       (id, user_id, template_name, description, is_main_program, parent_t_path_id, order_index, is_ai_generated, ai_generation_params, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        tPath.id,\n        tPath.user_id,\n        tPath.template_name,\n        tPath.description,\n        tPath.is_main_program ? 1 : 0,\n        tPath.parent_t_path_id,\n        tPath.order_index,\n        tPath.is_ai_generated ? 1 : 0,\n        tPath.ai_generation_params,\n        tPath.created_at,\n        tPath.updated_at,\n      ],\n    );\n  }\n\n  async getTPath(tPathId: string): Promise<TPathWithExercises | null> {\n    const db = this.getDB();\n    const tPath = await db.getFirstAsync<any>(\n      \"SELECT * FROM t_paths WHERE id = ?\",\n      [tPathId],\n    );\n\n    if (!tPath) {\n      return null;\n    }\n\n    const exercises = await db.getAllAsync<any>(\n      \"SELECT * FROM t_path_exercises WHERE t_path_id = ? ORDER BY order_index ASC\",\n      [tPathId],\n    );\n\n    return {\n      ...tPath,\n      is_main_program: Boolean(tPath.is_main_program),\n      is_ai_generated: Boolean(tPath.is_ai_generated),\n      exercises: exercises.map((ex) => ({\n        ...ex,\n        is_bonus_exercise: Boolean(ex.is_bonus_exercise),\n      })),\n    };\n  }\n\n  async getTPaths(\n    userId: string,\n    mainProgramsOnly: boolean = false,\n  ): Promise<TPath[]> {\n    const db = this.getDB();\n    let query = \"SELECT * FROM t_paths WHERE user_id = ?\";\n    const params: any[] = [userId];\n\n    if (mainProgramsOnly) {\n      query += \" AND is_main_program = 1\";\n    }\n\n    query += \" ORDER BY order_index ASC, created_at DESC\";\n\n    const result = await db.getAllAsync<any>(query, params);\n    return result.map((row) => ({\n      ...row,\n      is_main_program: Boolean(row.is_main_program),\n      is_ai_generated: Boolean(row.is_ai_generated),\n    }));\n  }\n\n  async getTPathsByParent(parentId: string): Promise<TPath[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM t_paths WHERE parent_t_path_id = ? ORDER BY order_index ASC\",\n      [parentId],\n    );\n    return result.map((row) => ({\n      ...row,\n      is_main_program: Boolean(row.is_main_program),\n      is_ai_generated: Boolean(row.is_ai_generated),\n    }));\n  }\n\n  async updateTPath(tPathId: string, updates: Partial<TPath>): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n\n    const fields: string[] = [];\n    const values: any[] = [];\n\n    if (updates.template_name !== undefined) {\n      fields.push(\"template_name = ?\");\n      values.push(updates.template_name);\n    }\n    if (updates.description !== undefined) {\n      fields.push(\"description = ?\");\n      values.push(updates.description);\n    }\n    if (updates.is_main_program !== undefined) {\n      fields.push(\"is_main_program = ?\");\n      values.push(updates.is_main_program ? 1 : 0);\n    }\n    if (updates.order_index !== undefined) {\n      fields.push(\"order_index = ?\");\n      values.push(updates.order_index);\n    }\n\n    fields.push(\"updated_at = ?\");\n    values.push(now);\n    values.push(tPathId);\n\n    if (fields.length > 1) {\n      await db.runAsync(\n        `UPDATE t_paths SET ${fields.join(\", \")} WHERE id = ?`,\n        values,\n      );\n    }\n  }\n\n  async deleteTPath(tPathId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"DELETE FROM t_path_exercises WHERE t_path_id = ?\", [\n      tPathId,\n    ]);\n    await db.runAsync(\"DELETE FROM t_path_progress WHERE t_path_id = ?\", [\n      tPathId,\n    ]);\n    await db.runAsync(\"DELETE FROM t_paths WHERE id = ?\", [tPathId]);\n  }\n\n  async addTPathExercise(exercise: TPathExercise): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO t_path_exercises \n       (id, t_path_id, exercise_id, order_index, is_bonus_exercise, target_sets, target_reps_min, target_reps_max, notes, created_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        exercise.id,\n        exercise.t_path_id,\n        exercise.exercise_id,\n        exercise.order_index,\n        exercise.is_bonus_exercise ? 1 : 0,\n        exercise.target_sets,\n        exercise.target_reps_min,\n        exercise.target_reps_max,\n        exercise.notes,\n        exercise.created_at,\n      ],\n    );\n  }\n\n  async getTPathExercises(tPathId: string): Promise<TPathExercise[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM t_path_exercises WHERE t_path_id = ? ORDER BY order_index ASC\",\n      [tPathId],\n    );\n    return result.map((row) => ({\n      ...row,\n      is_bonus_exercise: Boolean(row.is_bonus_exercise),\n    }));\n  }\n\n  async deleteTPathExercise(exerciseId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"DELETE FROM t_path_exercises WHERE id = ?\", [\n      exerciseId,\n    ]);\n  }\n\n  async updateTPathProgress(progress: TPathProgress): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO t_path_progress \n       (id, user_id, t_path_id, completed_at, last_accessed_at, total_workouts_completed, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        progress.id,\n        progress.user_id,\n        progress.t_path_id,\n        progress.completed_at,\n        progress.last_accessed_at,\n        progress.total_workouts_completed,\n        progress.created_at,\n        progress.updated_at,\n      ],\n    );\n  }\n\n  async getTPathProgress(\n    userId: string,\n    tPathId: string,\n  ): Promise<TPathProgress | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      \"SELECT * FROM t_path_progress WHERE user_id = ? AND t_path_id = ?\",\n      [userId, tPathId],\n    );\n    return result || null;\n  }\n\n  async getAllTPathProgress(userId: string): Promise<TPathProgress[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM t_path_progress WHERE user_id = ? ORDER BY last_accessed_at DESC\",\n      [userId],\n    );\n    return result;\n  }\n\n  async addGym(gym: Gym): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\n      `INSERT OR REPLACE INTO gyms \n       (id, user_id, name, description, equipment, is_active, created_at, updated_at)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,\n      [\n        gym.id,\n        gym.user_id,\n        gym.name,\n        gym.description,\n        JSON.stringify(gym.equipment),\n        gym.is_active ? 1 : 0,\n        gym.created_at,\n        gym.updated_at,\n      ],\n    );\n  }\n\n  async getGym(gymId: string): Promise<Gym | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      \"SELECT * FROM gyms WHERE id = ?\",\n      [gymId],\n    );\n    if (!result) {\n      return null;\n    }\n    return {\n      ...result,\n      equipment: JSON.parse(result.equipment),\n      is_active: Boolean(result.is_active),\n    };\n  }\n\n  async getGyms(userId: string): Promise<Gym[]> {\n    const db = this.getDB();\n    const result = await db.getAllAsync<any>(\n      \"SELECT * FROM gyms WHERE user_id = ? ORDER BY is_active DESC, name ASC\",\n      [userId],\n    );\n    return result.map((row) => ({\n      ...row,\n      equipment: JSON.parse(row.equipment),\n      is_active: Boolean(row.is_active),\n    }));\n  }\n\n  async getActiveGym(userId: string): Promise<Gym | null> {\n    const db = this.getDB();\n    const result = await db.getFirstAsync<any>(\n      \"SELECT * FROM gyms WHERE user_id = ? AND is_active = 1 LIMIT 1\",\n      [userId],\n    );\n    if (!result) {\n      return null;\n    }\n    return {\n      ...result,\n      equipment: JSON.parse(result.equipment),\n      is_active: Boolean(result.is_active),\n    };\n  }\n\n  async updateGym(gymId: string, updates: Partial<Gym>): Promise<void> {\n    const db = this.getDB();\n    const now = new Date().toISOString();\n\n    const fields: string[] = [];\n    const values: any[] = [];\n\n    if (updates.name !== undefined) {\n      fields.push(\"name = ?\");\n      values.push(updates.name);\n    }\n    if (updates.description !== undefined) {\n      fields.push(\"description = ?\");\n      values.push(updates.description);\n    }\n    if (updates.equipment !== undefined) {\n      fields.push(\"equipment = ?\");\n      values.push(JSON.stringify(updates.equipment));\n    }\n    if (updates.is_active !== undefined) {\n      fields.push(\"is_active = ?\");\n      values.push(updates.is_active ? 1 : 0);\n    }\n\n    fields.push(\"updated_at = ?\");\n    values.push(now);\n    values.push(gymId);\n\n    if (fields.length > 1) {\n      await db.runAsync(\n        `UPDATE gyms SET ${fields.join(\", \")} WHERE id = ?`,\n        values,\n      );\n    }\n  }\n\n  async setActiveGym(userId: string, gymId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"UPDATE gyms SET is_active = 0 WHERE user_id = ?\", [\n      userId,\n    ]);\n    await db.runAsync(\"UPDATE gyms SET is_active = 1 WHERE id = ?\", [gymId]);\n  }\n\n  async deleteGym(gymId: string): Promise<void> {\n    const db = this.getDB();\n    await db.runAsync(\"DELETE FROM gyms WHERE id = ?\", [gymId]);\n  }\n\n  syncQueue: SyncQueueStore = {\n    getAll: async (): Promise<SyncQueueItem[]> => {\n      const db = this.getDB();\n      const result = await db.getAllAsync<any>(\n        \"SELECT * FROM sync_queue ORDER BY timestamp ASC\",\n      );\n      return result.map((row) => ({\n        id: row.id,\n        operation: row.operation,\n        table: row.table_name,\n        payload: JSON.parse(row.payload),\n        timestamp: row.timestamp,\n        attempts: row.attempts,\n        error: row.error,\n      }));\n    },\n\n    add: async (item: Omit<SyncQueueItem, \"id\">): Promise<number> => {\n      const db = this.getDB();\n      const result = await db.runAsync(\n        \"INSERT INTO sync_queue (operation, table_name, payload, timestamp, attempts, error) VALUES (?, ?, ?, ?, ?, ?)\",\n        [\n          item.operation,\n          item.table,\n          JSON.stringify(item.payload),\n          item.timestamp,\n          item.attempts,\n          item.error || null,\n        ],\n      );\n      return result.lastInsertRowId;\n    },\n\n    remove: async (id: number): Promise<void> => {\n      const db = this.getDB();\n      await db.runAsync(\"DELETE FROM sync_queue WHERE id = ?\", [id]);\n    },\n\n    incrementAttempts: async (id: number, error: string): Promise<void> => {\n      const db = this.getDB();\n      await db.runAsync(\n        \"UPDATE sync_queue SET attempts = attempts + 1, error = ? WHERE id = ?\",\n        [error, id],\n      );\n    },\n\n    clear: async (): Promise<void> => {\n      const db = this.getDB();\n      await db.runAsync(\"DELETE FROM sync_queue\");\n    },\n  };\n}\n\nexport const database = new Database();\n\nexport const addToSyncQueue = async (\n  operation: \"create\" | \"update\" | \"delete\",\n  table: \"workout_sessions\" | \"set_logs\",\n  payload: { id: string; [key: string]: any },\n) => {\n  await database.syncQueue.add({\n    operation,\n    table,\n    payload,\n    timestamp: Date.now(),\n    attempts: 0,\n  });\n};\n","size_bytes":33769},"apps/mobile/app/_lib/supabase.ts":{"content":"export { supabase } from \"@data/supabase/client-mobile\";\n","size_bytes":57},"packages/data/src/storage/index.ts":{"content":"export * from './models';\nexport * from './sync-queue';\n","size_bytes":56},"apps/mobile/app/_components/dashboard/ActionHub.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Button } from \"../ui/Button\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"../ui/Card\";\nimport { Colors, Spacing } from \"../../../constants/design-system\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\ntype ActionVariant = \"primary\" | \"success\" | \"outline\";\n\ninterface ActionItem {\n  title: string;\n  subtitle?: string;\n  icon: keyof typeof Ionicons.glyphMap;\n  onPress: () => void;\n  variant?: ActionVariant;\n}\n\ninterface Props {\n  actions: ActionItem[];\n}\n\nexport const ActionHub: React.FC<Props> = ({ actions }) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Action Hub</CardTitle>\n      </CardHeader>\n      <CardContent style={styles.content}>\n        {actions.map((action, index) => (\n          <Button\n            key={index}\n            variant={action.variant ?? \"outline\"}\n            style={styles.button}\n            onPress={action.onPress}\n          >\n            <View style={styles.buttonContent}>\n              <Ionicons\n                name={action.icon}\n                size={20}\n                color={Colors.foreground}\n              />\n              <View style={styles.buttonTextWrapper}>\n                <Text style={styles.buttonTitle}>{action.title}</Text>\n                {action.subtitle ? (\n                  <Text style={styles.buttonSubtitle}>{action.subtitle}</Text>\n                ) : null}\n              </View>\n            </View>\n          </Button>\n        ))}\n      </CardContent>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    gap: Spacing.md,\n  },\n  button: {\n    alignItems: \"stretch\",\n  },\n  buttonContent: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    gap: Spacing.md,\n  },\n  buttonTextWrapper: {\n    flex: 1,\n  },\n  buttonTitle: {\n    color: Colors.foreground,\n    fontWeight: \"600\",\n    fontSize: 16,\n  },\n  buttonSubtitle: {\n    color: Colors.gray400,\n    fontSize: 14,\n    marginTop: 2,\n  },\n});\n","size_bytes":2005},"apps/mobile/app/_components/dashboard/NextWorkoutCard.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"../ui/Card\";\nimport { Button } from \"../ui/Button\";\nimport { Colors, Spacing } from \"../../../constants/design-system\";\nimport { Skeleton } from \"../ui/Skeleton\";\n\ninterface Props {\n  workoutName?: string;\n  lastCompletedAt?: string | null;\n  estimatedDuration?: string | null;\n  onStart: () => void;\n  loading?: boolean;\n}\n\nexport const NextWorkoutCard: React.FC<Props> = ({\n  workoutName,\n  lastCompletedAt,\n  estimatedDuration,\n  onStart,\n  loading,\n}) => {\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Next Workout</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Skeleton height={24} />\n          <Skeleton width=\"60%\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!workoutName) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Next Workout</CardTitle>\n        </CardHeader>\n        <CardContent style={styles.emptyContent}>\n          <Text style={styles.emptyText}>\n            No workout plans found. Create a template or start an ad-hoc\n            session.\n          </Text>\n          <Button onPress={onStart}>Create Workout</Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Your Next Workout</CardTitle>\n      </CardHeader>\n      <CardContent style={styles.content}>\n        <View style={styles.textBlock}>\n          <Text style={styles.workoutName}>{workoutName}</Text>\n          {estimatedDuration ? (\n            <Text style={styles.detail}>Estimated: {estimatedDuration}</Text>\n          ) : null}\n          {lastCompletedAt ? (\n            <Text style={styles.detail}>Last completed: {lastCompletedAt}</Text>\n          ) : null}\n        </View>\n        <Button onPress={onStart}>Start Workout</Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    gap: Spacing.md,\n  },\n  textBlock: {\n    gap: Spacing.sm,\n  },\n  workoutName: {\n    fontSize: 18,\n    fontWeight: \"600\",\n    color: Colors.foreground,\n  },\n  detail: {\n    color: Colors.gray400,\n    fontSize: 14,\n  },\n  emptyContent: {\n    gap: Spacing.md,\n  },\n  emptyText: {\n    color: Colors.gray400,\n    fontSize: 14,\n  },\n});\n","size_bytes":2352},"apps/mobile/app/_components/dashboard/PreviousWorkoutsCard.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"../ui/Card\";\nimport { Colors, Spacing } from \"../../../constants/design-system\";\nimport { Button } from \"../ui/Button\";\n\ninterface SessionSummary {\n  id: string;\n  name: string;\n  completedAt?: string | null;\n}\n\ninterface Props {\n  sessions: SessionSummary[];\n  onViewAll: () => void;\n}\n\nexport const PreviousWorkoutsCard: React.FC<Props> = ({\n  sessions,\n  onViewAll,\n}) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Previous Workouts</CardTitle>\n      </CardHeader>\n      <CardContent style={styles.content}>\n        {sessions.length === 0 ? (\n          <Text style={styles.emptyText}>\n            No workouts logged yet. Your history will appear here.\n          </Text>\n        ) : (\n          sessions.map((session) => (\n            <View key={session.id} style={styles.sessionRow}>\n              <View style={styles.sessionInfo}>\n                <Text style={styles.sessionName}>{session.name}</Text>\n                {session.completedAt ? (\n                  <Text style={styles.sessionDate}>{session.completedAt}</Text>\n                ) : null}\n              </View>\n            </View>\n          ))\n        )}\n        <Button variant=\"outline\" onPress={onViewAll}>\n          View history\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    gap: Spacing.md,\n  },\n  emptyText: {\n    color: Colors.gray400,\n    fontSize: 14,\n  },\n  sessionRow: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: Colors.cardBorder,\n    paddingBottom: Spacing.sm,\n  },\n  sessionInfo: {\n    gap: Spacing.xs,\n  },\n  sessionName: {\n    color: Colors.foreground,\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  sessionDate: {\n    color: Colors.gray500,\n    fontSize: 14,\n  },\n});\n","size_bytes":1905},"apps/mobile/app/_components/dashboard/QuickStartWorkouts.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"../ui/Card\";\nimport { Button } from \"../ui/Button\";\nimport { Colors, Spacing } from \"../../../constants/design-system\";\n\ninterface WorkoutTemplateSummary {\n  id: string;\n  name: string;\n  description?: string | null;\n}\n\ninterface Props {\n  templates: WorkoutTemplateSummary[];\n  onStartTemplate: (id: string) => void;\n  onCreateTemplate: () => void;\n}\n\nexport const QuickStartWorkouts: React.FC<Props> = ({\n  templates,\n  onStartTemplate,\n  onCreateTemplate,\n}) => {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Start</CardTitle>\n      </CardHeader>\n      <CardContent style={styles.content}>\n        {templates.length === 0 ? (\n          <View style={styles.emptyState}>\n            <Text style={styles.emptyText}>No saved workouts yet.</Text>\n            <Button onPress={onCreateTemplate}>Create a template</Button>\n          </View>\n        ) : (\n          templates.map((template) => (\n            <View key={template.id} style={styles.templateRow}>\n              <View style={styles.templateInfo}>\n                <Text style={styles.templateName}>{template.name}</Text>\n                {template.description ? (\n                  <Text style={styles.templateDescription} numberOfLines={2}>\n                    {template.description}\n                  </Text>\n                ) : null}\n              </View>\n              <Button size=\"sm\" onPress={() => onStartTemplate(template.id)}>\n                Start\n              </Button>\n            </View>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    gap: Spacing.md,\n  },\n  emptyState: {\n    gap: Spacing.md,\n  },\n  emptyText: {\n    color: Colors.gray400,\n    fontSize: 14,\n  },\n  templateRow: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    gap: Spacing.md,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    borderBottomColor: Colors.cardBorder,\n    paddingBottom: Spacing.sm,\n  },\n  templateInfo: {\n    flex: 1,\n    gap: Spacing.xs,\n  },\n  templateName: {\n    color: Colors.foreground,\n    fontSize: 16,\n    fontWeight: \"600\",\n  },\n  templateDescription: {\n    color: Colors.gray500,\n    fontSize: 13,\n  },\n});\n","size_bytes":2350},"apps/mobile/app/_components/dashboard/WeeklyVolumeChart.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"../ui/Card\";\nimport { Colors, Spacing, BorderRadius } from \"../../../constants/design-system\";\nimport { Skeleton } from \"../ui/Skeleton\";\n\ninterface VolumePoint {\n  date: string;\n  volume: number;\n}\n\ninterface Props {\n  data: VolumePoint[];\n  loading?: boolean;\n}\n\nconst formatLabel = (date: string) => {\n  const d = new Date(date);\n  return `${d.getMonth() + 1}/${d.getDate()}`;\n};\n\nexport const WeeklyVolumeChart: React.FC<Props> = ({ data, loading }) => {\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Weekly Volume</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Skeleton height={120} />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Weekly Volume</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Text style={styles.emptyText}>\n            Log some workouts to see your training volume.\n          </Text>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const maxVolume = Math.max(...data.map((d) => d.volume), 1);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Weekly Volume</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <View style={styles.chartRow}>\n          {data.map((point) => {\n            const heightPercent = Math.max(point.volume / maxVolume, 0.05);\n            return (\n              <View key={point.date} style={styles.barContainer}>\n                <View style={[styles.bar, { flex: heightPercent }]} />\n                <Text style={styles.barLabel}>{formatLabel(point.date)}</Text>\n              </View>\n            );\n          })}\n        </View>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst styles = StyleSheet.create({\n  chartRow: {\n    flexDirection: \"row\",\n    alignItems: \"flex-end\",\n    gap: Spacing.md,\n    minHeight: 160,\n  },\n  barContainer: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  bar: {\n    width: \"60%\",\n    backgroundColor: Colors.actionPrimary,\n    borderRadius: BorderRadius.md,\n  },\n  barLabel: {\n    marginTop: Spacing.sm,\n    color: Colors.gray500,\n    fontSize: 12,\n  },\n  emptyText: {\n    color: Colors.gray400,\n    fontSize: 14,\n  },\n});\n","size_bytes":2337},"apps/mobile/app/_components/dashboard/WelcomeHeader.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { Colors, Typography, Spacing } from \"../../../constants/design-system\";\n\ninterface Props {\n  name: string;\n  subtitle?: string;\n}\n\nexport const WelcomeHeader: React.FC<Props> = ({ name, subtitle }) => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Welcome back, {name}</Text>\n      {subtitle ? <Text style={styles.subtitle}>{subtitle}</Text> : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: Spacing[\"2xl\"],\n  },\n  title: {\n    fontSize: Typography[\"3xl\"],\n    fontWeight: \"700\",\n    color: Colors.foreground,\n  },\n  subtitle: {\n    marginTop: Spacing.sm,\n    fontSize: Typography.lg,\n    color: Colors.gray400,\n  },\n});\n","size_bytes":793},"apps/mobile/app/_components/ui/Button.tsx":{"content":"import React from \"react\";\nimport {\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n  ActivityIndicator,\n  TouchableOpacityProps,\n} from \"react-native\";\nimport {\n  ButtonStyles,\n  Colors,\n  BorderRadius,\n  Spacing,\n} from \"../../../constants/design-system\";\n\ntype Variant = \"primary\" | \"success\" | \"destructive\" | \"outline\" | \"ghost\";\n\ntype Size = \"sm\" | \"md\" | \"lg\";\n\ninterface ButtonProps extends TouchableOpacityProps {\n  children: React.ReactNode;\n  variant?: Variant;\n  size?: Size;\n  loading?: boolean;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  variant = \"primary\",\n  size = \"md\",\n  loading = false,\n  style,\n  disabled,\n  ...rest\n}) => {\n  const variantStyle = buttonVariants[variant] ?? buttonVariants.primary;\n  const sizeStyle = sizeVariants[size] ?? sizeVariants.md;\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.base,\n        variantStyle,\n        sizeStyle,\n        disabled && styles.disabled,\n        style,\n      ]}\n      activeOpacity={0.8}\n      disabled={disabled || loading}\n      {...rest}\n    >\n      {loading ? (\n        <ActivityIndicator\n          color={\n            variant === \"outline\" || variant === \"ghost\"\n              ? Colors.foreground\n              : Colors.foreground\n          }\n        />\n      ) : (\n        <Text style={[styles.text, variantText[variant]]}>{children}</Text>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    borderRadius: BorderRadius.lg,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    gap: Spacing.sm,\n  },\n  text: {\n    fontWeight: \"600\",\n    fontSize: 16,\n  },\n  disabled: {\n    opacity: 0.6,\n  },\n});\n\nconst buttonVariants: Record<Variant, any> = {\n  primary: {\n    ...ButtonStyles.primary,\n  },\n  success: {\n    ...ButtonStyles.success,\n  },\n  destructive: {\n    ...ButtonStyles.destructive,\n  },\n  outline: {\n    ...ButtonStyles.outline,\n  },\n  ghost: {\n    ...ButtonStyles.ghost,\n  },\n};\n\nconst variantText: Record<Variant, any> = {\n  primary: { color: Colors.foreground },\n  success: { color: Colors.foreground },\n  destructive: { color: Colors.foreground },\n  outline: { color: Colors.foreground },\n  ghost: { color: Colors.gray300 },\n};\n\nconst sizeVariants: Record<Size, any> = {\n  sm: {\n    paddingVertical: Spacing.sm,\n    paddingHorizontal: Spacing.lg,\n  },\n  md: {\n    paddingVertical: Spacing.md,\n    paddingHorizontal: Spacing.xl,\n  },\n  lg: {\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing[\"2xl\"],\n  },\n};\n","size_bytes":2514},"apps/mobile/app/_components/ui/Card.tsx":{"content":"import React from \"react\";\nimport { View, Text, StyleSheet, ViewProps } from \"react-native\";\nimport { Colors, BorderRadius, Spacing } from \"../../../constants/design-system\";\n\ninterface CardProps extends ViewProps {\n  children: React.ReactNode;\n  padded?: boolean;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  children,\n  style,\n  padded = true,\n  ...rest\n}) => {\n  return (\n    <View style={[styles.card, padded && styles.padded, style]} {...rest}>\n      {children}\n    </View>\n  );\n};\n\ninterface SectionProps {\n  children: React.ReactNode;\n  style?: any;\n}\n\nexport const CardHeader: React.FC<SectionProps> = ({ children, style }) => (\n  <View style={[styles.header, style]}>{children}</View>\n);\n\nexport const CardTitle: React.FC<{\n  children: React.ReactNode;\n  style?: any;\n}> = ({ children, style }) => (\n  <Text style={[styles.title, style]}>{children}</Text>\n);\n\nexport const CardSubtitle: React.FC<{\n  children: React.ReactNode;\n  style?: any;\n}> = ({ children, style }) => (\n  <Text style={[styles.subtitle, style]}>{children}</Text>\n);\n\nexport const CardContent: React.FC<SectionProps> = ({ children, style }) => (\n  <View style={[styles.content, style]}>{children}</View>\n);\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: Colors.cardBackground,\n    borderRadius: BorderRadius.xl,\n    borderWidth: 1,\n    borderColor: Colors.cardBorder,\n    overflow: \"hidden\",\n  },\n  padded: {\n    padding: Spacing.xl,\n  },\n  header: {\n    marginBottom: Spacing.lg,\n  },\n  title: {\n    fontSize: Spacing[\"2xl\"],\n    fontWeight: \"600\",\n    color: Colors.foreground,\n  },\n  subtitle: {\n    marginTop: Spacing.xs,\n    color: Colors.gray400,\n    fontSize: Spacing.lg,\n    fontWeight: \"400\",\n  },\n  content: {\n    gap: Spacing.md,\n  },\n});\n","size_bytes":1752},"apps/mobile/app/_components/ui/Skeleton.tsx":{"content":"import React from \"react\";\nimport { View, StyleSheet, ViewProps } from \"react-native\";\nimport { Colors, BorderRadius } from \"../../../constants/design-system\";\n\ninterface SkeletonProps extends ViewProps {\n  width?: number | string;\n  height?: number | string;\n  rounded?: boolean;\n}\n\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  width = \"100%\",\n  height = 20,\n  rounded = false,\n  style,\n  ...rest\n}) => {\n  return (\n    <View\n      style={[\n        styles.base,\n        { width, height },\n        rounded && { borderRadius: BorderRadius.full },\n        style,\n      ]}\n      {...rest}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    backgroundColor: Colors.gray800,\n    borderRadius: BorderRadius.lg,\n    overflow: \"hidden\",\n  },\n});\n","size_bytes":761},"apps/mobile/app/_components/workout/UnsavedChangesModal.tsx":{"content":"import React from \"react\";\nimport { Modal, View, Text, StyleSheet } from \"react-native\";\nimport { Button } from \"../ui/Button\";\nimport { Colors, Spacing, BorderRadius } from \"../../../constants/design-system\";\nimport { useWorkoutFlow } from \"../../_contexts/workout-flow-context\";\n\nexport const UnsavedChangesModal = () => {\n  const { showUnsavedChangesDialog, confirmLeave, cancelLeave } =\n    useWorkoutFlow();\n\n  return (\n    <Modal\n      visible={showUnsavedChangesDialog}\n      animationType=\"fade\"\n      transparent\n      onRequestClose={cancelLeave}\n    >\n      <View style={styles.overlay}>\n        <View style={styles.container}>\n          <Text style={styles.title}>Discard changes?</Text>\n          <Text style={styles.subtitle}>\n            You have unsaved progress in your current workout. Leaving now will\n            discard those changes.\n          </Text>\n          <View style={styles.actions}>\n            <Button\n              variant=\"outline\"\n              onPress={cancelLeave}\n              style={styles.actionButton}\n            >\n              Stay\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onPress={confirmLeave}\n              style={styles.actionButton}\n            >\n              Discard\n            </Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nconst styles = StyleSheet.create({\n  overlay: {\n    flex: 1,\n    backgroundColor: \"rgba(0, 0, 0, 0.6)\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: Spacing[\"2xl\"],\n  },\n  container: {\n    backgroundColor: Colors.surfaceLight,\n    borderRadius: BorderRadius[\"2xl\"],\n    padding: Spacing[\"2xl\"],\n    gap: Spacing.lg,\n    width: \"100%\",\n  },\n  title: {\n    color: Colors.foreground,\n    fontSize: 20,\n    fontWeight: \"700\",\n  },\n  subtitle: {\n    color: Colors.gray400,\n    fontSize: 15,\n  },\n  actions: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    gap: Spacing.md,\n  },\n  actionButton: {\n    flex: 1,\n  },\n});\n","size_bytes":2014},"apps/mobile/components/dashboard/QuickActions.tsx":{"content":"/**\n * QuickActions Component\n * Grid of quick action buttons matching web ActionHub\n */\n\nimport React from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport { useRouter } from 'expo-router';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\n\ninterface ActionButton {\n  id: string;\n  title: string;\n  icon: keyof typeof Ionicons.glyphMap;\n  iconColor?: string;\n  onPress: () => void;\n}\n\ninterface QuickActionsProps {\n  actions?: ActionButton[];\n}\n\nexport function QuickActions({ actions }: QuickActionsProps) {\n  const router = useRouter();\n\n  const defaultActions: ActionButton[] = [\n    {\n      id: 'workout',\n      title: 'Start Workout',\n      icon: 'barbell',\n      iconColor: Colors.actionPrimary,\n      onPress: () => router.push('/(tabs)/workout'),\n    },\n    {\n      id: 'ai-coach',\n      title: 'AI Coach',\n      icon: 'sparkles',\n      iconColor: Colors.chart4,\n      onPress: () => router.push('/ai-coach'),\n    },\n    {\n      id: 'history',\n      title: 'Workout Log',\n      icon: 'time',\n      iconColor: Colors.chart1,\n      onPress: () => router.push('/history'),\n    },\n    {\n      id: 'measurements',\n      title: 'Log Activity',\n      icon: 'fitness',\n      iconColor: Colors.chart2,\n      onPress: () => router.push('/measurements'),\n    },\n  ];\n\n  const actionList = actions || defaultActions;\n\n  return (\n    <Card style={styles.container}>\n      <Text style={styles.title}>Quick Links</Text>\n      <View style={styles.grid}>\n        {actionList.map((action) => (\n          <Pressable\n            key={action.id}\n            onPress={action.onPress}\n            style={({ pressed }) => [\n              styles.actionButton,\n              pressed && styles.actionButtonPressed,\n            ]}\n          >\n            <Ionicons name={action.icon} size={20} color={action.iconColor || Colors.foreground} />\n            <Text style={styles.actionTitle}>{action.title}</Text>\n          </Pressable>\n        ))}\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.lg,\n  },\n  title: {\n    ...TextStyles.h3,\n    color: Colors.foreground,\n    marginBottom: Spacing.md,\n    textAlign: 'center',\n  },\n  grid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: Spacing.sm,\n  },\n  actionButton: {\n    flex: 1,\n    minWidth: '47%',\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: Spacing.md,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: Spacing.xs,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  actionButtonPressed: {\n    transform: [{ scale: 0.98 }],\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0.02,\n    elevation: 0,\n  },\n  actionTitle: {\n    ...TextStyles.caption,\n    fontWeight: '600',\n    color: Colors.foreground,\n    textAlign: 'center',\n  },\n});\n","size_bytes":3106},"apps/mobile/components/dashboard/RecentWorkouts.tsx":{"content":"/**\n * RecentWorkouts Component\n * Shows list of recently completed workouts\n */\n\nimport React from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing, BorderRadius } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\nimport { getWorkoutColor } from '../../lib/workout-colors';\n\ninterface WorkoutItem {\n  id: string;\n  name: string;\n  completedAt: string;\n  workoutType?: string;\n}\n\ninterface RecentWorkoutsProps {\n  workouts: WorkoutItem[];\n  onViewAll?: () => void;\n}\n\nexport function RecentWorkouts({ workouts, onViewAll }: RecentWorkoutsProps) {\n  if (workouts.length === 0) {\n    return (\n      <Card style={styles.container}>\n        <Text style={styles.title}>Recent Workouts</Text>\n        <View style={styles.emptyState}>\n          <Ionicons name=\"barbell-outline\" size={48} color={Colors.mutedForeground} />\n          <Text style={styles.emptyText}>No workouts yet</Text>\n          <Text style={styles.emptySubtext}>Start your first workout to see it here</Text>\n        </View>\n      </Card>\n    );\n  }\n\n  return (\n    <Card style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Recent Workouts</Text>\n        {onViewAll && (\n          <Pressable onPress={onViewAll}>\n            <Text style={styles.viewAll}>View All</Text>\n          </Pressable>\n        )}\n      </View>\n\n      <View style={styles.workoutList}>\n        {workouts.map((workout, index) => {\n          const workoutColor = workout.workoutType ? getWorkoutColor(workout.workoutType).main : null;\n          \n          return (\n            <View \n              key={workout.id} \n              style={[\n                styles.workoutItem,\n                index < workouts.length - 1 && styles.workoutItemBorder,\n                workoutColor && { borderLeftWidth: 3, borderLeftColor: workoutColor, paddingLeft: Spacing.sm },\n              ]}\n            >\n              <View style={styles.workoutIcon}>\n                <Ionicons name=\"checkmark-circle\" size={24} color={workoutColor || Colors.success} />\n              </View>\n              <View style={styles.workoutInfo}>\n                <Text style={styles.workoutName}>{workout.name}</Text>\n                <Text style={styles.workoutDate}>{workout.completedAt}</Text>\n              </View>\n            </View>\n          );\n        })}\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.lg,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: Spacing.md,\n  },\n  title: {\n    ...TextStyles.h3,\n    color: Colors.foreground,\n  },\n  viewAll: {\n    ...TextStyles.caption,\n    color: Colors.actionPrimary,\n    fontWeight: '600',\n  },\n  workoutList: {\n    gap: Spacing.sm,\n  },\n  workoutItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.md,\n    paddingVertical: Spacing.sm,\n  },\n  workoutItemBorder: {\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  workoutIcon: {\n    width: 40,\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  workoutInfo: {\n    flex: 1,\n  },\n  workoutName: {\n    ...TextStyles.body,\n    color: Colors.foreground,\n    fontWeight: '500',\n    marginBottom: Spacing.xs / 2,\n  },\n  workoutDate: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: Spacing.xl,\n    gap: Spacing.sm,\n  },\n  emptyText: {\n    ...TextStyles.body,\n    color: Colors.foreground,\n    fontWeight: '500',\n  },\n  emptySubtext: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n  },\n});\n","size_bytes":3803},"apps/mobile/components/dashboard/SimpleVolumeChart.tsx":{"content":"/**\n * SimpleVolumeChart Component\n * Displays weekly volume as simple bar chart\n */\n\nimport React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\n\ninterface VolumeData {\n  date: string;\n  volume: number;\n}\n\ninterface SimpleVolumeChartProps {\n  data: VolumeData[];\n}\n\nexport function SimpleVolumeChart({ data }: SimpleVolumeChartProps) {\n  const maxVolume = Math.max(...data.map(d => d.volume), 1);\n  \n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { weekday: 'short' }).slice(0, 1);\n  };\n\n  return (\n    <Card style={styles.container}>\n      <Text style={styles.title}>Weekly Volume</Text>\n      \n      <View style={styles.chartContainer}>\n        {data.map((point, index) => {\n          const heightPercent = (point.volume / maxVolume) * 100;\n          \n          return (\n            <View key={index} style={styles.barContainer}>\n              <View style={styles.barWrapper}>\n                <View \n                  style={[\n                    styles.bar,\n                    { \n                      height: `${Math.max(heightPercent, 5)}%`,\n                      backgroundColor: point.volume > 0 ? Colors.actionPrimary : Colors.muted,\n                    },\n                  ]}\n                />\n              </View>\n              <Text style={styles.label}>{formatDate(point.date)}</Text>\n            </View>\n          );\n        })}\n      </View>\n      \n      {data.length === 0 && (\n        <View style={styles.emptyState}>\n          <Text style={styles.emptyText}>No volume data yet</Text>\n        </View>\n      )}\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.lg,\n  },\n  title: {\n    ...TextStyles.h3,\n    color: Colors.foreground,\n    marginBottom: Spacing.md,\n  },\n  chartContainer: {\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    justifyContent: 'space-between',\n    height: 120,\n    gap: Spacing.xs,\n  },\n  barContainer: {\n    flex: 1,\n    alignItems: 'center',\n    gap: Spacing.xs,\n  },\n  barWrapper: {\n    flex: 1,\n    width: '100%',\n    justifyContent: 'flex-end',\n  },\n  bar: {\n    width: '100%',\n    borderRadius: 4,\n    minHeight: 4,\n  },\n  label: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n    fontSize: 10,\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: Spacing.xl,\n  },\n  emptyText: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n  },\n});\n","size_bytes":2633},"apps/mobile/components/dashboard/StatCard.tsx":{"content":"/**\n * StatCard Component\n * Displays a single stat with icon, value, and label\n */\n\nimport React from 'react';\nimport { View, Text, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\n\ninterface StatCardProps {\n  icon: keyof typeof Ionicons.glyphMap;\n  label: string;\n  value: string | number;\n  iconColor?: string;\n  style?: StyleProp<ViewStyle>;\n}\n\nexport function StatCard({ icon, label, value, iconColor = Colors.actionPrimary, style }: StatCardProps) {\n  return (\n    <Card style={[styles.container, style]}>\n      <View style={styles.iconContainer}>\n        <Ionicons name={icon} size={24} color={iconColor} />\n      </View>\n      <View style={styles.content}>\n        <Text style={styles.value}>{value}</Text>\n        <Text style={styles.label}>{label}</Text>\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: Spacing.lg,\n    gap: Spacing.md,\n  },\n  iconContainer: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.muted,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  content: {\n    flex: 1,\n  },\n  value: {\n    ...TextStyles.h2,\n    color: Colors.foreground,\n    marginBottom: Spacing.xs / 2,\n  },\n  label: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n  },\n});\n","size_bytes":1538},"apps/mobile/components/dashboard/WeeklyTarget.tsx":{"content":"/**\n * WeeklyTarget Component\n * Shows weekly workout targets with visual progress\n */\n\nimport React from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\n\ninterface WeeklyTargetProps {\n  completedCount: number;\n  goalCount: number;\n  programType?: 'ppl' | 'ulul';\n  completedWorkouts?: { id: string; name: string }[];\n  onViewCalendar?: () => void;\n}\n\nexport function WeeklyTarget({\n  completedCount,\n  goalCount,\n  programType = 'ppl',\n  completedWorkouts = [],\n  onViewCalendar,\n}: WeeklyTargetProps) {\n  const goalWorkouts = programType === 'ulul'\n    ? ['Upper A', 'Lower A', 'Upper B', 'Lower B']\n    : ['Push', 'Pull', 'Legs'];\n\n  const displayCount = Math.max(goalCount, completedCount);\n\n  return (\n    <Card style={styles.container}>\n      <View style={styles.header}>\n        <View style={styles.titleContainer}>\n          <Ionicons name=\"barbell\" size={20} color={Colors.actionPrimary} />\n          <Text style={styles.title}>Weekly Target</Text>\n        </View>\n        {onViewCalendar && (\n          <Pressable onPress={onViewCalendar}>\n            <Ionicons name=\"calendar\" size={20} color={Colors.mutedForeground} />\n          </Pressable>\n        )}\n      </View>\n\n      <View style={styles.workoutList}>\n        {Array.from({ length: displayCount }).map((_, i) => {\n          const isCompleted = i < completedCount;\n          const workoutName = isCompleted \n            ? completedWorkouts[i]?.name || goalWorkouts[i] \n            : goalWorkouts[i];\n          \n          return (\n            <View key={i} style={styles.workoutItem}>\n              <View style={[\n                styles.checkIcon,\n                isCompleted && styles.checkIconCompleted,\n              ]}>\n                {isCompleted && (\n                  <Ionicons name=\"checkmark\" size={16} color={Colors.card} />\n                )}\n              </View>\n              <Text style={[\n                styles.workoutName,\n                isCompleted && styles.workoutNameCompleted,\n              ]}>\n                {workoutName}\n              </Text>\n            </View>\n          );\n        })}\n      </View>\n\n      <View style={styles.footer}>\n        <Text style={styles.progress}>\n          {completedCount}/{goalCount} completed\n        </Text>\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.lg,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: Spacing.md,\n  },\n  titleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n  },\n  title: {\n    ...TextStyles.h3,\n    color: Colors.foreground,\n  },\n  workoutList: {\n    gap: Spacing.sm,\n  },\n  workoutItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n    paddingVertical: Spacing.xs,\n  },\n  checkIcon: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkIconCompleted: {\n    backgroundColor: Colors.success,\n    borderColor: Colors.success,\n  },\n  workoutName: {\n    ...TextStyles.body,\n    color: Colors.mutedForeground,\n    flex: 1,\n  },\n  workoutNameCompleted: {\n    color: Colors.foreground,\n    fontWeight: '500',\n  },\n  footer: {\n    marginTop: Spacing.md,\n    paddingTop: Spacing.md,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  progress: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n    textAlign: 'center',\n  },\n});\n","size_bytes":3746},"apps/mobile/components/dashboard/index.ts":{"content":"/**\n * Dashboard Components Index\n */\n\nexport { StatCard } from './StatCard';\nexport { QuickActions } from './QuickActions';\nexport { WeeklyTarget } from './WeeklyTarget';\nexport { RecentWorkouts } from './RecentWorkouts';\nexport { SimpleVolumeChart } from './SimpleVolumeChart';\n","size_bytes":280},"MOBILE_REDESIGN_PLAN.md":{"content":"# Mobile App Redesign Plan - UPDATED\n## Bringing React Native App to Complete Visual Parity with Web Reference\n\n**Last Updated:** October 6, 2025 (Post-Phase 4)  \n**Reference App:** Web app codebase  \n**Current Status:** Phases 1-4 Complete (Foundation, Navigation, Dashboard Basic, Workout Screen)\n\n---\n\n## 📊 Current Gap Analysis\n\n### ✅ Completed (Phases 1-4)\n- Design system foundation (Theme.ts, Typography.ts)\n- 5-tab bottom navigation\n- Basic dashboard with StatCard, WeeklyTarget, QuickActions, RecentWorkouts, SimpleVolumeChart\n- Basic workout screen with ExerciseCard, SetRow, RestTimer, WorkoutHeader\n- ScreenHeader and ScreenContainer layout components\n\n### ❌ Missing \"Wow Factor\" Elements\n**Critical Visual Elements:**\n- Workout-type color system (Push/Pull/Legs color-coded UI)\n- Rolling Status badge (\"Getting into it\", \"Building Momentum\", etc.)\n- Weekly Target with circular checkmark indicators\n- Quick Links grid on dashboard\n- Active Gym widget with switcher\n- Colored workout history cards\n- Workout launcher/selector screen\n- Profile tabs (Overview/Stats/Photo/Media/Social/Settings)\n- Exercise manager tabs (My Exercises / Global Library)\n\n---\n\n## 🚀 FAST-TRACK PRIORITY PLAN\n\n### Sprint 1: Core Wow Factor (Phase 5 Accelerated) - ~1 week\n**Goal:** Restore visual impact with workout colors and launcher\n\n1. **Workout Type Color System** (Foundation)\n2. **Workout Launcher Screen** (High visibility)\n3. **Enhanced Dashboard Widgets** (Rolling Status + Gym Toggle)\n\n### Sprint 2: Feature Parity (Phases 6-7) - ~1 week\n4. **Profile Screen Overhaul** (Tabs + Header)\n5. **Exercise Management Polish** (Tabs + AI Photo)\n6. **Workout-Colored Components** (Exercise cards, Recent workouts)\n\n### Sprint 3: Final Polish (Phase 8-9) - ~1 week\n7. **Consistency Calendar Modal**\n8. **Enhanced Charts & Analytics**\n9. **Aurora Effects & Animations**\n\n---\n\n## 🎨 PHASE 5: WORKOUT COLOR SYSTEM & LAUNCHER (PRIORITY 1)\n\n### 5.1 Workout Type Color System\n**Implementation Details from Reference:**\n\nCreate `apps/mobile/lib/workout-colors.ts`:\n```typescript\n// From apps/web/src/lib/utils.ts getWorkoutColorClass()\nexport const WORKOUT_COLORS = {\n  // PPL Split\n  'Push': { main: '#228B22', light: '#2ea32e' }, // Forest green\n  'Pull': { main: '#F89C4D', light: '#fab86d' }, // Vintage orange\n  'Legs': { main: '#B645D9', light: '#c966e3' }, // Purple/magenta\n  \n  // ULUL Split\n  'Upper Body A': { main: '#1e3a8a', light: '#2563eb' }, // Dark blue\n  'Upper Body B': { main: '#EF4444', light: '#F87171' }, // Red\n  'Lower Body A': { main: '#0891b2', light: '#06b6d4' }, // Cyan\n  'Lower Body B': { main: '#6b21a8', light: '#9333ea' }, // Purple\n  \n  // Special\n  'Bonus': { main: '#F59E0B', light: '#FBBF24' }, // Golden yellow\n  'Ad Hoc Workout': { main: '#F59E0B', light: '#FBBF24' }, // Same as bonus\n};\n\nexport function getWorkoutColor(workoutName: string): { main: string; light: string } {\n  // Map workout names to colors\n  // Handle shortened names (Upper A, Lower A, etc.)\n}\n```\n\nUpdate `apps/mobile/constants/Theme.ts` to include:\n```typescript\nexport const WorkoutColors = {\n  push: '#228B22',\n  pushLight: '#2ea32e',\n  pull: '#F89C4D',\n  pullLight: '#fab86d',\n  legs: '#B645D9',\n  legsLight: '#c966e3',\n  upperA: '#1e3a8a',\n  upperALight: '#2563eb',\n  upperB: '#EF4444',\n  upperBLight: '#F87171',\n  lowerA: '#0891b2',\n  lowerALight: '#06b6d4',\n  lowerB: '#6b21a8',\n  lowerBLight: '#9333ea',\n  bonus: '#F59E0B',\n  bonusLight: '#FBBF24',\n};\n```\n\n**Tasks:**\n- [ ] Create workout color utility functions\n- [ ] Update ExerciseCard to show colored left border based on workout type\n- [ ] Update RecentWorkouts cards with colored borders\n- [ ] Add colored pills/badges for workout types\n\n### 5.2 Workout Launcher Screen\n**Reference:** `apps/web/src/app/(app)/workout/page.tsx` (Screenshot: app ui 1 & 2)\n\nCreate `apps/mobile/app/workout-launcher.tsx`:\n\n**Layout:**\n1. **Header Section**\n   - Title: \"Workout Session\"\n   - Subtitle: \"Select a workout or start an ad-hoc session.\"\n\n2. **Active Gym Widget** (if user has multiple gyms)\n   - Arrows to switch between gyms\n   - Display: \"Active Gym\" label + gym name with home icon\n\n3. **T-Path Workouts Section** (if user has active program)\n   - Program name with icon (e.g., \"🏋️ 3-Day Push/Pull/Legs\")\n   - Workout buttons (colored pills):\n     - **Push** - Green background (#228B22), white text, arrow icon\n     - **Pull** - Orange background (#F89C4D), white text, arrow icon  \n     - **Legs** - Purple background (#B645D9), white text, dumbbell icon\n     - Show \"Never\" or last completed date below each button\n   \n4. **Ad-Hoc Workout Card**\n   - Circle icon with \"Start Ad-Hoc Workout\" title\n   - Subtitle: \"Start a workout without a T-Path. Add exercises as you go.\"\n   - Two buttons:\n     - **Start Empty** - Outline button\n     - **Generate** - Black filled button with sparkles icon\n\n**Component Structure:**\n```\n<ScreenHeader title=\"Workout Session\" subtitle=\"...\" />\n<ScreenContainer>\n  <GymSwitcher /> {/* if multiple gyms */}\n  \n  <TPathWorkoutsList> {/* if active T-Path */}\n    <Text>3-Day Push/Pull/Legs</Text>\n    <ColoredWorkoutButton workout=\"Push\" color=\"#228B22\" />\n    <ColoredWorkoutButton workout=\"Pull\" color=\"#F89C4D\" />\n    <ColoredWorkoutButton workout=\"Legs\" color=\"#B645D9\" />\n  </TPathWorkoutsList>\n  \n  <AdHocWorkoutCard>\n    <Button>Start Empty</Button>\n    <Button>Generate</Button>\n  </AdHocWorkoutCard>\n</ScreenContainer>\n```\n\n**Tasks:**\n- [ ] Create workout-launcher.tsx screen\n- [ ] Create ColoredWorkoutButton component with workout-specific colors\n- [ ] Create GymSwitcher widget (reuse from dashboard)\n- [ ] Implement workout selection logic (navigate to /workout with tPathId)\n- [ ] Add \"Generate\" button → navigate to AI generation flow\n\n### 5.3 Enhanced Dashboard Widgets\n\n#### 5.3.1 Rolling Status Badge\n**Reference:** `apps/web/src/components/layout/rolling-status-badge.tsx`\n\n**Logic (from Supabase function):**\n- 0 periods: \"Getting into it\" (Gray badge, Dumbbell icon)\n- 1-3 periods: \"Building Momentum\" (Blue badge, CheckCircle icon)\n- 4-7 periods: \"In the Zone\" (Orange badge, Flame icon)\n- 8+ periods: \"On Fire\" (Red badge, Flame filled icon)\n\nCreate `apps/mobile/components/dashboard/RollingStatusBadge.tsx`:\n```typescript\n// Badge colors based on status\nconst statusStyles = {\n  'Getting into it': { bg: Colors.gray100, text: Colors.gray700, icon: 'barbell' },\n  'Building Momentum': { bg: '#DBEAFE', text: '#1E40AF', icon: 'checkmark-circle' },\n  'In the Zone': { bg: '#FFEDD5', text: '#C2410C', icon: 'flame' },\n  'On Fire': { bg: '#FEE2E2', text: '#991B1B', icon: 'flame' },\n};\n```\n\n**Tasks:**\n- [ ] Create RollingStatusBadge component\n- [ ] Fetch rolling_workout_status from profiles table\n- [ ] Add to top of dashboard (below header, above stats)\n- [ ] Add tap handler to show status explanation modal\n\n#### 5.3.2 Active Gym Widget\n**Reference:** `apps/web/src/components/dashboard/gym-toggle.tsx`\n\nCreate `apps/mobile/components/dashboard/GymToggle.tsx`:\n- Card with left/right chevron buttons\n- Center text: \"Active Gym\" label + gym name with home icon\n- Only show if user has multiple gyms\n- On tap chevron: cycle through user's gyms\n- Update active_gym_id in profiles table\n\n**Tasks:**\n- [ ] Create GymToggle component\n- [ ] Implement gym switching logic\n- [ ] Add to dashboard below Quick Links\n- [ ] Sync with gym context provider\n\n#### 5.3.3 Enhanced Weekly Target with Circles\n**Reference:** Current WeeklyTarget component needs upgrade\n\nUpdate `apps/mobile/components/dashboard/WeeklyTarget.tsx`:\n- Replace list items with circular checkmark indicators\n- Each circle: filled blue (#3B82F6) if completed, gray outline if not\n- White checkmark icon in completed circles\n- Show workout names below each circle\n- Progress text: \"X/Y completed\" at bottom\n\n**Tasks:**\n- [ ] Update WeeklyTarget to use circular indicators\n- [ ] Style completed circles with blue fill + white checkmark\n- [ ] Add calendar icon button (links to Consistency Calendar modal)\n\n---\n\n## 💪 PHASE 6: PROFILE SCREEN OVERHAUL\n\n### 6.1 Profile Header\n**Reference:** `apps/web/src/app/(app)/profile/page.tsx` (Screenshot: app ui 3)\n\nCreate `apps/mobile/components/profile/ProfileHeader.tsx`:\n\n**Layout:**\n1. **Avatar Section**\n   - Large circular avatar (initials if no photo)\n   - User's full name (h2 typography)\n   - Fitness level badge: \"Rookie\" / \"Beginner\" / \"Intermediate\" / \"Advanced\" / \"Expert\" / \"Legend\"\n     - Badge color based on level (gray → blue → purple → orange → red)\n   - \"Member since [date]\" subtitle\n\n2. **Points Display**\n   - Total fitness points\n   - Tap to show explanation modal\n\n**Component Structure:**\n```\n<View style={styles.profileHeader}>\n  <Avatar size={80} initials={getInitials(name)} />\n  <Text style={Typography.h2}>{fullName}</Text>\n  <Badge color={getLevelColor(level)}>{level}</Badge>\n  <Text style={Typography.caption}>Member since {memberDate}</Text>\n</View>\n```\n\n**Tasks:**\n- [ ] Create ProfileHeader component\n- [ ] Implement avatar with initials fallback\n- [ ] Create fitness level badge with dynamic colors\n- [ ] Add points explanation modal\n\n### 6.2 Profile Tabs\n**Reference:** `apps/web/src/components/profile/mobile-navigation.tsx`\n\nCreate `apps/mobile/components/profile/ProfileTabs.tsx`:\n\n**6 Tabs:**\n1. 📊 Overview\n2. 📈 Stats  \n3. 📸 Photo\n4. 🎬 Media\n5. 👥 Social (placeholder)\n6. ⚙️ Settings\n\n**Tab Component:**\n- Horizontal scrollable tab bar\n- Emoji icons + text labels\n- Active tab: blue background, white text\n- Inactive tabs: transparent, muted text\n- Swipe gesture support\n\n**Tasks:**\n- [ ] Create ProfileTabs navigation component\n- [ ] Implement 6 tab content screens\n- [ ] Add swipe-to-change-tab gesture\n\n### 6.3 Overview Tab\n**Reference:** `apps/web/src/components/profile/profile-overview-tab.tsx`\n\n**Content:**\n- **Stats Grid** (2-3 columns)\n  - Current Streak (orange gradient card, flame icon)\n  - Total Workouts (blue gradient card, dumbbell icon)\n  - Total Exercises (purple gradient card, list icon)\n  - Total Points (yellow gradient card, star icon) - tap for explanation\n  - BMI (if height/weight entered)\n  - Estimated Daily Calories\n\n- **Achievements Section**\n  - \"Recent Achievements\" header\n  - Grid of achievement badges (3 per row)\n  - Unlocked: yellow background, colored icon\n  - Locked: gray background, gray icon\n  - \"View All\" button\n\n**Tasks:**\n- [ ] Create ProfileOverviewTab screen\n- [ ] Create gradient StatCard component\n- [ ] Implement achievements grid\n- [ ] Add Points Explanation modal\n\n### 6.4 Stats Tab\n**Reference:** `apps/web/src/components/profile/profile-stats-tab.tsx`\n\n**Content:**\n- **Fitness Level Card** (large gradient card)\n  - Level icon (large)\n  - Level name (h1)\n  - Progress bar to next level\n  - \"X% to next level\" text\n\n- **Monthly Momentum Bars** (chart)\n- **Weekly Progress** (placeholder)\n- **Personal Records** (placeholder for Phase 7)\n\n**Tasks:**\n- [ ] Create ProfileStatsTab screen\n- [ ] Create fitness level card with gradient + progress bar\n- [ ] Add monthly momentum chart\n\n### 6.5 Photo Tab\n**Reference:** `apps/web/src/components/profile/photo-journey/photo-journey-tab.tsx`\n\n**Content:**\n- \"My Progress Journey\" header\n- \"Compare Photos\" button (if 2+ photos exist)\n- Photo grid (3 columns)\n- Empty state: \"You haven't uploaded any progress photos yet. Click the camera button to start your journey!\"\n\n**Tasks:**\n- [ ] Create PhotoJourneyTab screen\n- [ ] Display progress photos in grid\n- [ ] Add photo comparison modal\n- [ ] Implement empty state\n\n### 6.6 Settings Tab\n**Reference:** `apps/web/src/components/profile/profile-settings-tab.tsx`\n\n**Content:**\n- Personal Info Form (name, height, weight, body fat %, preferred muscles)\n- Workout Preferences (unit system toggle)\n- Programme Type Section (PPL vs ULUL)\n- Gym Management Section (My Gyms list)\n- AI Coach Usage (daily limit display)\n- Data Export Section\n- Sign Out button (red, destructive variant)\n\n**Tasks:**\n- [ ] Create ProfileSettingsTab screen\n- [ ] Port all settings forms from web\n- [ ] Implement My Gyms management\n- [ ] Add sign out functionality\n\n---\n\n## 📚 PHASE 7: EXERCISE MANAGEMENT POLISH\n\n### 7.1 Manage Exercises Screen\n**Reference:** `apps/web/src/app/(app)/manage-exercises/page.tsx` (Screenshot: app ui 4)\n\nUpdate `apps/mobile/app/exercises.tsx`:\n\n**Header:**\n- Title: \"Manage Exercises\"\n- Filter button (top-right corner)\n\n**Tabs:**\n- **My Exercises** (active by default, black background)\n- **Global Library** (gray background)\n\n**Search Bar:**\n- Icon: magnifying glass\n- Placeholder: \"Search exercises...\"\n\n**Analyse Gym Photo Button:**\n- Camera icon + \"Analyse Gym Photo\" text\n- Full-width button below search\n- Opens AI photo analysis dialog\n\n**Add New Exercise Accordion:**\n- Collapsible section\n- \"Add New Exercise\" header with chevron\n\n**Exercise List:**\n- Exercise cards with:\n  - Exercise name (bold)\n  - Muscle group (caption)\n  - Gym badges (small green pills with \"📍Ben\" or gym name)\n  - Action icons:\n    - ℹ️ Info\n    - ❤️ Favorite\n    - ➕ Add to T-Path\n    - 📍 Manage Gyms\n    - ≡ More menu\n\n**Filter Sheet:**\n- Muscle group dropdown\n- Gym dropdown\n- \"Apply Filters\" button\n\n**Tasks:**\n- [ ] Create tab switcher (My Exercises / Global Library)\n- [ ] Add search bar component\n- [ ] Create \"Analyse Gym Photo\" button\n- [ ] Add collapsible \"Add New Exercise\" form\n- [ ] Create exercise card with gym badges\n- [ ] Implement filter sheet\n- [ ] Add exercise action buttons (info, favorite, add to T-Path, manage gyms)\n\n### 7.2 Gym Badges on Exercise Cards\n**Reference:** Exercise cards in screenshots show gym availability\n\nCreate `apps/mobile/components/exercises/GymBadge.tsx`:\n- Small rounded badge\n- Green background (#228B22)\n- Home icon + gym name\n- Show up to 2 badges, then \"+X more\"\n\n**Tasks:**\n- [ ] Create GymBadge component\n- [ ] Fetch gym associations for each exercise\n- [ ] Display gym badges on exercise cards\n\n---\n\n## 📊 PHASE 8: DASHBOARD FINAL ENHANCEMENTS\n\n### 8.1 Next Workout Card (if not already present)\n**Reference:** Web dashboard shows \"Your Next Workout\"\n\n- Workout name with colored pill\n- Last completed date\n- Estimated duration\n- \"Start Now\" button (colored based on workout type)\n\n### 8.2 All Workouts Widget\n**Reference:** Web dashboard \"All Workouts\" section\n\n- List all workouts from active T-Path\n- Color-coded buttons for each workout\n- \"Ad-hoc Workout\" option at bottom\n- One-tap launch\n\n### 8.3 Enhanced Recent Workouts\n**Reference:** Current RecentWorkouts needs color borders\n\nUpdate `apps/mobile/components/dashboard/RecentWorkouts.tsx`:\n- Add colored left border based on workout type\n- Show workout name in colored text\n- Time ago (e.g., \"4d ago\")\n- Exercise count + duration\n- Eye icon button (view details)\n\n**Tasks:**\n- [ ] Add colored borders to workout cards\n- [ ] Update card styling to match web\n- [ ] Add eye icon for workout details\n\n---\n\n## 📅 PHASE 9: CONSISTENCY CALENDAR & DIALOGS\n\n### 9.1 Consistency Calendar Modal\n**Reference:** Quick Links → Consistency Calendar\n\nCreate `apps/mobile/components/dashboard/ConsistencyCalendar.tsx`:\n\n**Features:**\n- Monthly calendar view\n- Color-coded dots for workout types\n- Current month header with prev/next arrows\n- Tap day to see workout details\n- Streak visualization\n- Swipe between months\n\n**Color Coding:**\n- Push workouts: Green dot\n- Pull workouts: Orange dot\n- Legs workouts: Purple dot\n- Multiple workouts: Multiple dots\n- No workout: Gray/empty\n\n**Tasks:**\n- [ ] Create ConsistencyCalendar modal component\n- [ ] Implement calendar grid layout\n- [ ] Add colored workout dots\n- [ ] Add month navigation\n- [ ] Implement day detail view\n- [ ] Add swipe gestures\n\n### 9.2 Weekly Activity Summary Dialog\n**Reference:** Weekly Target → View Summary\n\n**Content:**\n- Summary of all activities (workouts + logged activities)\n- Total volume\n- Total duration  \n- Activity breakdown\n- Progress toward weekly goal\n\n**Tasks:**\n- [ ] Create WeeklySummaryDialog component\n- [ ] Fetch and calculate weekly stats\n- [ ] Display activity breakdown\n\n### 9.3 Workout Performance Modal\n**Reference:** Quick Links → Workout Log\n\n**Content:**\n- Quick workout history\n- Performance charts (volume over time)\n- Personal records list\n- \"View Full History\" link\n\n**Tasks:**\n- [ ] Create WorkoutPerformanceModal component\n- [ ] Add performance charts\n- [ ] Display PR list\n\n---\n\n## 🎨 PHASE 10: VISUAL POLISH & EFFECTS\n\n### 10.1 Aurora Gradient Effects\n**Reference:** Web app has aurora gradients on certain screens\n\n**Aurora Colors (from globals.css):**\n```css\n--aurora-blue: hsl(200, 100%, 78%);\n--aurora-purple: hsl(270, 50%, 32%);\n--aurora-orange: hsl(58, 98%, 73%);\n--aurora-green: hsl(160, 100%, 43%);\n--aurora-pink: hsl(324, 100%, 44%);\n```\n\n**Implementation:**\n- Create animated gradient background component\n- Apply to:\n  - Profile header\n  - Fitness level card\n  - Achievement unlock celebrations\n  - Onboarding screens\n\n**Tasks:**\n- [ ] Create AuroraGradient component with React Native animation\n- [ ] Apply to profile header\n- [ ] Add to fitness level card\n- [ ] Implement achievement unlock animation\n\n### 10.2 Animations & Micro-interactions\n**Reference:** Web app has smooth transitions\n\n**Animations to Add:**\n- Card press scale effect (0.98 scale)\n- Tab switch transitions\n- Modal slide-in/out\n- Achievement unlock celebration\n- PR celebration (confetti or sparkles)\n- Workout completion celebration\n- Streak milestone celebration\n\n**Tasks:**\n- [ ] Implement card press animations\n- [ ] Add modal transitions\n- [ ] Create celebration animations\n- [ ] Add sparkle/confetti effects for PRs\n\n### 10.3 Gradient Stat Cards\n**Reference:** Profile Overview tab has gradient cards\n\n**Gradient Card Styles:**\n- Current Streak: Orange gradient (from-orange-400 to-orange-500)\n- Total Workouts: Blue gradient (from-blue-400 to-blue-500)\n- Total Exercises: Purple gradient (from-purple-400 to-purple-500)\n- Total Points: Yellow gradient (from-yellow-400 to-yellow-500)\n\n**Tasks:**\n- [ ] Create GradientCard component\n- [ ] Apply gradients to dashboard stats\n- [ ] Apply gradients to profile overview stats\n\n---\n\n## 📱 PHASE 11: MISSING FEATURES FROM REFERENCE\n\n### 11.1 Media Feed Tab\n**Reference:** Profile → Media tab, screenshots show video feed\n\n**Features:**\n- Video posts grid\n- Category filter (All, Tutorials, Tips, etc.)\n- Tap video to play in full screen\n- YouTube embed support\n\n**Tasks:**\n- [ ] Create MediaFeedTab screen\n- [ ] Implement video grid\n- [ ] Add category filter\n- [ ] Integrate YouTube player\n\n### 11.2 Social Tab (Placeholder)\n**Reference:** Profile → Social tab (not implemented in web)\n\n**Placeholder Content:**\n- \"Coming Soon\" message\n- Feature description\n- Illustration or icon\n\n**Tasks:**\n- [ ] Create SocialTab placeholder screen\n- [ ] Add \"Coming Soon\" messaging\n\n### 11.3 Workout History Screen\n**Reference:** Quick Links → Workout Log\n\n**Features:**\n- List of all completed workouts (newest first)\n- Filter by date range\n- Filter by workout type\n- Tap workout to view details\n- Delete workout option\n\n**Tasks:**\n- [ ] Create workout history screen\n- [ ] Implement date range filter\n- [ ] Add workout type filter\n- [ ] Create workout detail view\n\n### 11.4 AI Coach Screen\n**Reference:** Quick Links → AI Coach\n\n**Features:**\n- Chat interface\n- Latest session analysis display\n- 30-day overview tab\n- Usage tracking (X/15 daily limit)\n- Markdown rendering for AI responses\n\n**Tasks:**\n- [ ] Create AI Coach chat screen\n- [ ] Implement message history\n- [ ] Add usage limit display\n- [ ] Integrate markdown rendering\n\n### 11.5 Activity Logging Screen\n**Reference:** Quick Links → Log Activity\n\n**Features:**\n- Quick log form\n- Activity type selector (Running, Swimming, Cycling, Tennis, etc.)\n- Duration input\n- Distance input (optional)\n- Calories input (optional)\n- Notes field\n\n**Tasks:**\n- [ ] Create activity logging screen\n- [ ] Implement activity type picker\n- [ ] Add duration/distance inputs\n- [ ] Save to logged_activities table\n\n---\n\n## 🔄 PHASE 12: ADVANCED FEATURES\n\n### 12.1 Exercise Swap System\n**Reference:** During workout, tap exercise to swap\n\n**Features:**\n- Tap exercise card → \"Swap Exercise\" option\n- Opens exercise picker filtered by same muscle group\n- Swaps exercise but keeps existing sets/reps\n- Updates workout session in real-time\n\n**Tasks:**\n- [ ] Add \"Swap Exercise\" button to ExerciseCard\n- [ ] Create swap exercise flow\n- [ ] Preserve set data when swapping\n\n### 12.2 Personal Records Display\n**Reference:** Profile → Stats tab, Progress screen\n\n**Features:**\n- List of all PRs by exercise\n- Chart showing PR progression over time\n- Filter by exercise or muscle group\n- Celebrate PR achievements\n\n**Tasks:**\n- [ ] Create PR list screen\n- [ ] Implement PR progression chart\n- [ ] Add exercise/muscle group filter\n\n### 12.3 Goals & Goal Progress\n**Reference:** Profile → Overview tab\n\n**Features:**\n- Set fitness goals (weight loss/gain, strength, frequency, body fat)\n- Track progress toward goals\n- Visual progress bars\n- Goal achievement celebrations\n\n**Tasks:**\n- [ ] Create goals management screen\n- [ ] Implement goal progress tracking\n- [ ] Add goal achievement notifications\n\n---\n\n## 🧪 TESTING & QA CHECKLIST\n\n### Visual Parity Testing\n- [ ] Compare mobile screenshots with web screenshots side-by-side\n- [ ] Verify all colors match exactly (use color picker)\n- [ ] Check spacing/padding consistency\n- [ ] Verify font sizes and weights\n- [ ] Test on multiple device sizes (iPhone SE, iPhone 14 Pro, iPad)\n\n### Functional Testing\n- [ ] Test all user flows end-to-end\n- [ ] Verify data persistence (offline mode)\n- [ ] Test workout creation and completion\n- [ ] Verify PR detection and celebration\n- [ ] Test AI features (generation, coaching)\n- [ ] Verify sync between mobile and web\n\n### Performance Testing\n- [ ] Measure app launch time\n- [ ] Test scrolling performance (60fps)\n- [ ] Verify animation smoothness\n- [ ] Test with large datasets (100+ workouts, 500+ exercises)\n\n### Accessibility Testing\n- [ ] Verify touch target sizes (minimum 44x44)\n- [ ] Test with VoiceOver/TalkBack\n- [ ] Verify color contrast ratios\n- [ ] Test with large text sizes\n\n---\n\n## 📈 PROGRESS TRACKING\n\n### Completed Phases\n- ✅ Phase 1: Foundation & Design System\n- ✅ Phase 2: Navigation & Layout\n- ✅ Phase 3: Dashboard Screen (Basic)\n- ✅ Phase 4: Workout Flow (Basic)\n\n### Current Sprint (PRIORITY)\n- 🔄 Phase 5: Workout Color System & Launcher\n\n### Upcoming Sprints\n- ⏳ Phase 6: Profile Screen Overhaul\n- ⏳ Phase 7: Exercise Management Polish\n- ⏳ Phase 8: Dashboard Final Enhancements\n- ⏳ Phase 9: Consistency Calendar & Dialogs\n- ⏳ Phase 10: Visual Polish & Effects\n- ⏳ Phase 11: Missing Features\n- ⏳ Phase 12: Advanced Features\n\n---\n\n## 🎯 SUCCESS METRICS\n\n**Visual Parity:** 95%+ pixel-perfect match with web app\n**Feature Parity:** 100% of web features implemented\n**Performance:** 60fps animations, <3s app launch\n**User Experience:** Seamless cross-platform experience\n\n---\n\n## 📝 NOTES\n\n**Design Principles:**\n- Follow iOS/Android platform conventions where appropriate\n- Maintain consistent touch target sizes (min 44x44)\n- Use native gestures (swipe, long-press, etc.)\n- Optimize for one-handed use\n- Ensure accessibility compliance\n\n**Technical Decisions:**\n- Use React Native StyleSheet over styled-components for performance\n- Leverage Expo SDK for native features\n- Keep offline-first architecture\n- Maintain TypeScript strict mode\n- Follow existing code patterns from web app\n\n**Maintenance:**\n- Update this plan as features are completed\n- Document any deviations from web reference\n- Track technical debt and refactoring opportunities\n- Maintain changelog of significant changes\n","size_bytes":23677},"apps/mobile/constants/Theme.ts":{"content":"/**\n * Theme System - Mobile App\n * Complete parity with web app design system (apps/web/src/app/globals.css)\n * Uses HSL color system for consistency\n */\n\n// Helper function to convert HSL to RGB\nfunction hslToRgb(h: number, s: number, l: number): string {\n  s /= 100;\n  l /= 100;\n  const k = (n: number) => (n + h / 30) % 12;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n: number) =>\n    l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));\n  const r = Math.round(255 * f(0));\n  const g = Math.round(255 * f(8));\n  const b = Math.round(255 * f(4));\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\n// Core color definitions matching web globals.css\nexport const Colors = {\n  // Base Colors\n  background: hslToRgb(0, 0, 98), // hsl(0 0% 98%) - Soft off-white\n  foreground: hslToRgb(0, 0, 3.9), // hsl(0 0% 3.9%) - Near black\n  \n  // Card\n  card: hslToRgb(0, 0, 100), // hsl(0 0% 100%) - White\n  cardForeground: hslToRgb(0, 0, 3.9),\n  \n  // Primary\n  primary: hslToRgb(0, 0, 9), // hsl(0 0% 9%) - Near black\n  primaryForeground: hslToRgb(0, 0, 98),\n  \n  // Secondary\n  secondary: hslToRgb(0, 0, 96.1), // hsl(0 0% 96.1%)\n  secondaryForeground: hslToRgb(0, 0, 9),\n  \n  // Muted\n  muted: hslToRgb(0, 0, 96.1), // hsl(0 0% 96.1%)\n  mutedForeground: hslToRgb(0, 0, 45.1), // hsl(0 0% 45.1%)\n  \n  // Accent\n  accent: hslToRgb(0, 0, 96.1), // hsl(0 0% 96.1%)\n  accentForeground: hslToRgb(0, 0, 9),\n  \n  // Action (Premium Blue)\n  actionPrimary: hslToRgb(217, 91, 60), // hsl(217 91% 60%)\n  actionPrimaryLight: hslToRgb(217, 91, 70), // hsl(217 91% 70%)\n  actionPrimaryForeground: hslToRgb(0, 0, 100),\n  \n  // Status\n  success: hslToRgb(142.1, 76.2, 36.3), // hsl(142.1 76.2% 36.3%)\n  successForeground: hslToRgb(0, 0, 98),\n  destructive: hslToRgb(0, 84.2, 60.2), // hsl(0 84.2% 60.2%)\n  destructiveForeground: hslToRgb(0, 0, 98),\n  \n  // Borders & Inputs\n  border: hslToRgb(0, 0, 89.8), // hsl(0 0% 89.8%)\n  input: hslToRgb(0, 0, 89.8),\n  ring: hslToRgb(0, 0, 3.9),\n  \n  // Chart Colors\n  chart1: hslToRgb(12, 76, 61), // hsl(12 76% 61%)\n  chart2: hslToRgb(173, 58, 39), // hsl(173 58% 39%)\n  chart3: hslToRgb(197, 37, 24), // hsl(197 37% 24%)\n  chart4: hslToRgb(43, 74, 66), // hsl(43 74% 66%)\n  chart5: hslToRgb(27, 87, 67), // hsl(27 87% 67%)\n  \n  // Workout Colors - ULUL Split\n  workoutUpperBodyA: hslToRgb(220, 68, 32), // hsl(220 68% 32%) - Blue\n  workoutUpperBodyALight: hslToRgb(220, 68, 42),\n  workoutUpperBodyB: hslToRgb(0, 84, 60), // hsl(0 84% 60%) - Red\n  workoutUpperBodyBLight: hslToRgb(0, 84, 70),\n  workoutLowerBodyA: hslToRgb(190, 86, 36), // hsl(190 86% 36%) - Cyan\n  workoutLowerBodyALight: hslToRgb(190, 86, 46),\n  workoutLowerBodyB: hslToRgb(270, 67, 40), // hsl(270 67% 40%) - Purple\n  workoutLowerBodyBLight: hslToRgb(270, 67, 50),\n  \n  // Workout Colors - PPL Split\n  workoutPush: hslToRgb(120, 60, 45), // hsl(120 60% 45%) - Forest Green\n  workoutPushLight: hslToRgb(120, 60, 55),\n  workoutPull: hslToRgb(35, 85, 55), // hsl(35 85% 55%) - Vintage Orange\n  workoutPullLight: hslToRgb(35, 85, 65),\n  workoutLegs: hslToRgb(280, 55, 50), // hsl(280 55% 50%) - Purple/Magenta\n  workoutLegsLight: hslToRgb(280, 55, 60),\n  \n  // Workout Special\n  workoutBonus: hslToRgb(50, 75, 60), // hsl(50 75% 60%) - Golden Yellow\n  workoutBonusLight: hslToRgb(50, 75, 70),\n  workoutAdHoc: hslToRgb(50, 75, 60), // Same as bonus\n  workoutAdHocLight: hslToRgb(50, 75, 70),\n  workoutActivity: hslToRgb(173, 58, 39), // Same as chart-2\n  workoutActivityLight: hslToRgb(173, 58, 49),\n  \n  // Activity Colors\n  activityRunning: hslToRgb(25, 80, 55), // hsl(25 80% 55%) - Coral/Salmon\n  activityRunningLight: hslToRgb(25, 80, 65),\n  activitySwimming: hslToRgb(200, 85, 45), // hsl(200 85% 45%) - Aqua Blue\n  activitySwimmingLight: hslToRgb(200, 85, 55),\n  activityCycling: hslToRgb(160, 70, 40), // hsl(160 70% 40%) - Sage Green\n  activityCyclingLight: hslToRgb(160, 70, 50),\n  activityTennis: hslToRgb(300, 70, 55), // hsl(300 70% 55%) - Bright Magenta\n  activityTennisLight: hslToRgb(300, 70, 65),\n  \n  // Aurora Effects\n  auroraBlue: hslToRgb(200, 100, 78), // hsl(200 100% 78%) - Sky Blue\n  auroraPurple: hslToRgb(270, 50, 32), // hsl(270 50% 32%) - Deep Purple\n  auroraOrange: hslToRgb(58, 98, 73), // hsl(58 98% 73%) - Pale Yellow\n  auroraGreen: hslToRgb(160, 100, 43), // hsl(160 100% 43%) - Vibrant Mint\n  auroraPink: hslToRgb(324, 100, 44), // hsl(324 100% 44%) - Hot Magenta\n  auroraYellow: hslToRgb(58, 98, 73), // hsl(58 98% 73%) - Pale Yellow\n  \n  // Onboarding Theme\n  onboardingPrimary: hslToRgb(220, 68, 32), // Same as Upper Body A\n  onboardingPrimaryLight: hslToRgb(220, 68, 42),\n  onboardingPrimaryFaint: hslToRgb(220, 68, 98),\n  \n  // Sidebar (for reference, may not be used in mobile)\n  sidebarBackground: hslToRgb(0, 0, 98),\n  sidebarForeground: hslToRgb(240, 5.3, 26.1),\n  sidebarPrimary: hslToRgb(240, 5.9, 10),\n  sidebarPrimaryForeground: hslToRgb(0, 0, 98),\n  sidebarAccent: hslToRgb(240, 4.8, 95.9),\n  sidebarAccentForeground: hslToRgb(240, 5.9, 10),\n  sidebarBorder: hslToRgb(220, 13, 91),\n  sidebarRing: hslToRgb(217.2, 91.2, 59.8),\n};\n\n// Convenient workout color exports (hex values for compatibility)\nexport const WorkoutColors = {\n  push: '#228B22',\n  pushLight: '#2ea32e',\n  pull: '#F89C4D',\n  pullLight: '#fab86d',\n  legs: '#B645D9',\n  legsLight: '#c966e3',\n  upperA: '#1e3a8a',\n  upperALight: '#2563eb',\n  upperB: '#EF4444',\n  upperBLight: '#F87171',\n  lowerA: '#0891b2',\n  lowerALight: '#06b6d4',\n  lowerB: '#6b21a8',\n  lowerBLight: '#9333ea',\n  bonus: '#F59E0B',\n  bonusLight: '#FBBF24',\n  adHoc: '#F59E0B',\n  adHocLight: '#FBBF24',\n};\n\n// Spacing scale matching web app\nexport const Spacing = {\n  xs: 4,\n  sm: 8,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  '2xl': 48,\n  '3xl': 64,\n  '4xl': 80,\n  '5xl': 96,\n  '6xl': 128,\n};\n\n// Border radius matching web app (0.75rem = 12px)\nexport const BorderRadius = {\n  sm: 6,\n  md: 12, // Default from web\n  lg: 16,\n  xl: 24,\n  '2xl': 32,\n  full: 9999,\n};\n\n// Shadows for elevation\nexport const Shadows = {\n  sm: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  md: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  lg: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n    elevation: 5,\n  },\n  xl: {\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 8 },\n    shadowOpacity: 0.2,\n    shadowRadius: 12,\n    elevation: 8,\n  },\n};\n\n// Animation durations\nexport const Animation = {\n  fast: 150,\n  normal: 300,\n  slow: 500,\n  slower: 700,\n};\n\n// Export default theme object\nexport const Theme = {\n  colors: Colors,\n  spacing: Spacing,\n  borderRadius: BorderRadius,\n  shadows: Shadows,\n  animation: Animation,\n};\n\nexport default Theme;\n","size_bytes":6858},"apps/mobile/app/workout-launcher.tsx":{"content":"/**\n * Workout Launcher Screen\n * Allows users to select from T-Path workouts or start an ad-hoc workout\n * Reference: apps/web/src/app/(app)/workout/page.tsx\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, Pressable, Alert } from 'react-native';\nimport { useRouter } from 'expo-router';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useAuth } from './_contexts/auth-context';\nimport { useData } from './_contexts/data-context';\nimport { ScreenHeader } from '../components/layout/ScreenHeader';\nimport { ScreenContainer } from '../components/layout/ScreenContainer';\nimport { ColoredWorkoutButton } from '../components/workout-launcher';\nimport { Card } from '../components/ui/Card';\nimport { Colors, Spacing, BorderRadius } from '../constants/Theme';\nimport { TextStyles } from '../constants/Typography';\n\nexport default function WorkoutLauncherScreen() {\n  const router = useRouter();\n  const { userId } = useAuth();\n  const { getTPath } = useData();\n  \n  const [activeTPath, setActiveTPath] = useState<any | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadActiveTPath();\n  }, [userId]);\n\n  const loadActiveTPath = async () => {\n    if (!userId) return;\n    \n    try {\n      setLoading(true);\n      \n      const tPaths = await getTPath();\n      if (tPaths && tPaths.length > 0) {\n        setActiveTPath(tPaths[0]);\n      }\n    } catch (error) {\n      console.error('Error loading T-Path:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleWorkoutPress = (tPathId: string) => {\n    router.push({\n      pathname: '/(tabs)/workout',\n      params: { tPathId }\n    });\n  };\n\n  const handleStartEmpty = () => {\n    router.push('/(tabs)/workout');\n  };\n\n  const handleGenerate = () => {\n    router.push('/ai-generator');\n  };\n\n  const getWorkoutsList = () => {\n    if (!activeTPath) return [];\n    \n    const programType = activeTPath.settings?.tPathType || 'ppl';\n    \n    if (programType === 'ulul') {\n      return [\n        { name: 'Upper Body A', id: activeTPath.id },\n        { name: 'Lower Body A', id: activeTPath.id },\n        { name: 'Upper Body B', id: activeTPath.id },\n        { name: 'Lower Body B', id: activeTPath.id },\n      ];\n    } else {\n      return [\n        { name: 'Push', id: activeTPath.id },\n        { name: 'Pull', id: activeTPath.id },\n        { name: 'Legs', id: activeTPath.id },\n      ];\n    }\n  };\n\n  const workouts = getWorkoutsList();\n\n  return (\n    <>\n      <ScreenHeader \n        title=\"Workout Session\"\n        subtitle=\"Select a workout or start an ad-hoc session.\"\n      />\n      <ScreenContainer>\n        {activeTPath && (\n          <View style={styles.tPathSection}>\n            <View style={styles.tPathHeader}>\n              <Ionicons name=\"barbell\" size={20} color={Colors.foreground} />\n              <Text style={styles.tPathTitle}>{activeTPath.template_name}</Text>\n            </View>\n            \n            <View style={styles.workoutsList}>\n              {workouts.map((workout) => (\n                <ColoredWorkoutButton\n                  key={workout.name}\n                  workoutName={workout.name}\n                  lastCompleted={null}\n                  onPress={() => handleWorkoutPress(workout.id)}\n                />\n              ))}\n            </View>\n          </View>\n        )}\n\n        <Card style={styles.adHocCard}>\n          <View style={styles.adHocHeader}>\n            <View style={styles.adHocTitleContainer}>\n              <Ionicons name=\"add-circle-outline\" size={24} color={Colors.foreground} />\n              <Text style={styles.adHocTitle}>Start Ad-Hoc Workout</Text>\n            </View>\n            <Text style={styles.adHocSubtitle}>\n              Start a workout without a T-Path. Add exercises as you go.\n            </Text>\n          </View>\n\n          <View style={styles.adHocButtons}>\n            <Pressable \n              style={styles.emptyButton}\n              onPress={handleStartEmpty}\n            >\n              <Text style={styles.emptyButtonText}>Start Empty</Text>\n            </Pressable>\n            \n            <Pressable \n              style={styles.generateButton}\n              onPress={handleGenerate}\n            >\n              <Ionicons name=\"sparkles\" size={20} color=\"white\" />\n              <Text style={styles.generateButtonText}>Generate</Text>\n            </Pressable>\n          </View>\n        </Card>\n      </ScreenContainer>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tPathSection: {\n    marginBottom: Spacing['2xl'],\n  },\n  tPathHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n    marginBottom: Spacing.lg,\n  },\n  tPathTitle: {\n    ...TextStyles.h3,\n    color: Colors.foreground,\n  },\n  workoutsList: {\n    gap: Spacing.md,\n  },\n  adHocCard: {\n    padding: Spacing.lg,\n  },\n  adHocHeader: {\n    marginBottom: Spacing.lg,\n  },\n  adHocTitleContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n    marginBottom: Spacing.sm,\n  },\n  adHocTitle: {\n    ...TextStyles.h4,\n    color: Colors.foreground,\n  },\n  adHocSubtitle: {\n    ...TextStyles.body,\n    color: Colors.mutedForeground,\n    marginLeft: 32,\n  },\n  adHocButtons: {\n    flexDirection: 'row',\n    gap: Spacing.md,\n  },\n  emptyButton: {\n    flex: 1,\n    paddingVertical: Spacing.md,\n    paddingHorizontal: Spacing.lg,\n    borderRadius: BorderRadius.md,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    backgroundColor: Colors.card,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  emptyButtonText: {\n    ...TextStyles.body,\n    color: Colors.foreground,\n    fontWeight: '500',\n  },\n  generateButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: Spacing.sm,\n    paddingVertical: Spacing.md,\n    paddingHorizontal: Spacing.lg,\n    borderRadius: BorderRadius.md,\n    backgroundColor: Colors.primary,\n  },\n  generateButtonText: {\n    ...TextStyles.body,\n    color: Colors.primaryForeground,\n    fontWeight: '600',\n  },\n});\n","size_bytes":6066},"apps/mobile/components/workout-launcher/ColoredWorkoutButton.tsx":{"content":"/**\n * ColoredWorkoutButton Component\n * Displays a workout button with color-coded background\n * Used in workout launcher screen for PPL/ULUL workouts\n */\n\nimport React from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { getWorkoutColor, getWorkoutIcon } from '../../lib/workout-colors';\nimport { TextStyles } from '../../constants/Typography';\nimport { Spacing, BorderRadius } from '../../constants/Theme';\n\ninterface ColoredWorkoutButtonProps {\n  workoutName: string;\n  lastCompleted?: string | null;\n  onPress: () => void;\n}\n\nexport function ColoredWorkoutButton({ \n  workoutName, \n  lastCompleted, \n  onPress \n}: ColoredWorkoutButtonProps) {\n  const colors = getWorkoutColor(workoutName);\n  const iconName = getWorkoutIcon(workoutName);\n\n  return (\n    <Pressable\n      onPress={onPress}\n      style={({ pressed }) => [\n        styles.container,\n        pressed && styles.pressed,\n      ]}\n    >\n      <LinearGradient\n        colors={[colors.main, colors.light]}\n        start={{ x: 0, y: 0 }}\n        end={{ x: 1, y: 1 }}\n        style={styles.gradient}\n      >\n        <View style={styles.content}>\n          <View style={styles.leftSection}>\n            <Ionicons \n              name={iconName as any} \n              size={24} \n              color=\"white\" \n            />\n            <Text style={styles.workoutName}>{workoutName}</Text>\n          </View>\n          \n          <View style={styles.rightSection}>\n            <Text style={styles.lastCompleted}>\n              {lastCompleted || 'Never'}\n            </Text>\n          </View>\n        </View>\n      </LinearGradient>\n    </Pressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: Spacing.sm,\n    borderRadius: BorderRadius.lg,\n    overflow: 'hidden',\n  },\n  pressed: {\n    opacity: 0.8,\n    transform: [{ scale: 0.98 }],\n  },\n  gradient: {\n    borderRadius: BorderRadius.lg,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: Spacing.lg,\n    paddingHorizontal: Spacing.lg,\n  },\n  leftSection: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.md,\n  },\n  workoutName: {\n    ...TextStyles.h4,\n    color: 'white',\n    fontWeight: '600',\n  },\n  rightSection: {\n    alignItems: 'flex-end',\n  },\n  lastCompleted: {\n    ...TextStyles.caption,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n});\n","size_bytes":2523},"apps/mobile/components/workout-launcher/index.ts":{"content":"export { ColoredWorkoutButton } from './ColoredWorkoutButton';\n","size_bytes":63},"apps/mobile/lib/workout-colors.ts":{"content":"/**\n * Workout Color System\n * Maps workout types to their specific color schemes\n * Reference: apps/web/src/lib/utils.ts getWorkoutColorClass()\n */\n\nexport interface WorkoutColorScheme {\n  main: string;\n  light: string;\n}\n\nexport const WORKOUT_COLORS: Record<string, WorkoutColorScheme> = {\n  'Push': { main: '#228B22', light: '#2ea32e' },\n  'Pull': { main: '#F89C4D', light: '#fab86d' },\n  'Legs': { main: '#B645D9', light: '#c966e3' },\n  \n  'Upper Body A': { main: '#1e3a8a', light: '#2563eb' },\n  'Upper A': { main: '#1e3a8a', light: '#2563eb' },\n  'Upper Body B': { main: '#EF4444', light: '#F87171' },\n  'Upper B': { main: '#EF4444', light: '#F87171' },\n  'Lower Body A': { main: '#0891b2', light: '#06b6d4' },\n  'Lower A': { main: '#0891b2', light: '#06b6d4' },\n  'Lower Body B': { main: '#6b21a8', light: '#9333ea' },\n  'Lower B': { main: '#6b21a8', light: '#9333ea' },\n  \n  'Bonus': { main: '#F59E0B', light: '#FBBF24' },\n  'Ad Hoc Workout': { main: '#F59E0B', light: '#FBBF24' },\n  \n  '3-Day Push/Pull/Legs': { main: '#228B22', light: '#2ea32e' },\n  '4-Day Upper/Lower': { main: '#1e3a8a', light: '#2563eb' },\n};\n\nexport function getWorkoutColor(workoutName: string): WorkoutColorScheme {\n  const normalizedName = workoutName?.trim() || '';\n  \n  if (WORKOUT_COLORS[normalizedName]) {\n    return WORKOUT_COLORS[normalizedName];\n  }\n  \n  const lowerName = normalizedName.toLowerCase();\n  if (lowerName.includes('push')) {\n    return WORKOUT_COLORS['Push'];\n  } else if (lowerName.includes('pull')) {\n    return WORKOUT_COLORS['Pull'];\n  } else if (lowerName.includes('leg')) {\n    return WORKOUT_COLORS['Legs'];\n  } else if (lowerName.includes('upper')) {\n    const words = lowerName.split(/\\s+/);\n    const lastWord = words[words.length - 1];\n    const letter = lastWord.match(/[a-z](?=[^a-z]*$)/)?.[0];\n    if (letter === 'b') {\n      return WORKOUT_COLORS['Upper Body B'];\n    }\n    return WORKOUT_COLORS['Upper Body A'];\n  } else if (lowerName.includes('lower')) {\n    const words = lowerName.split(/\\s+/);\n    const lastWord = words[words.length - 1];\n    const letter = lastWord.match(/[a-z](?=[^a-z]*$)/)?.[0];\n    if (letter === 'b') {\n      return WORKOUT_COLORS['Lower Body B'];\n    }\n    return WORKOUT_COLORS['Lower Body A'];\n  } else if (lowerName.includes('bonus')) {\n    return WORKOUT_COLORS['Bonus'];\n  } else if (lowerName.includes('ad hoc') || lowerName.includes('ad-hoc')) {\n    return WORKOUT_COLORS['Ad Hoc Workout'];\n  }\n  \n  return { main: '#9CA3AF', light: '#D1D5DB' };\n}\n\nexport function getWorkoutIcon(workoutName: string): string {\n  const normalizedName = workoutName?.toLowerCase() || '';\n  \n  if (normalizedName.includes('push')) {\n    return 'arrow-up';\n  } else if (normalizedName.includes('pull')) {\n    return 'arrow-down';\n  } else if (normalizedName.includes('leg')) {\n    return 'walk';\n  } else if (normalizedName.includes('upper')) {\n    return 'body';\n  } else if (normalizedName.includes('lower')) {\n    return 'footsteps';\n  } else if (normalizedName.includes('bonus')) {\n    return 'star';\n  }\n  \n  return 'barbell';\n}\n","size_bytes":3071},"apps/mobile/components/workout/ExerciseCard.tsx":{"content":"/**\n * ExerciseCard Component\n * Displays exercise with sets and completion tracking\n */\n\nimport React from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { SetRow } from './SetRow';\nimport { Colors, Spacing } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\nimport { getWorkoutColor } from '../../lib/workout-colors';\n\ninterface ExerciseSet {\n  weight: string;\n  reps: string;\n  isCompleted: boolean;\n  isPR?: boolean;\n}\n\ninterface ExerciseCardProps {\n  exerciseName: string;\n  muscleGroup?: string;\n  sets: ExerciseSet[];\n  isCompleted: boolean;\n  workoutType?: string;\n  onSetChange: (setIndex: number, field: 'weight' | 'reps', value: string) => void;\n  onToggleSetComplete: (setIndex: number) => void;\n  onRemove?: () => void;\n  onAddSet?: () => void;\n}\n\nexport function ExerciseCard({\n  exerciseName,\n  muscleGroup,\n  sets,\n  isCompleted,\n  workoutType,\n  onSetChange,\n  onToggleSetComplete,\n  onRemove,\n  onAddSet,\n}: ExerciseCardProps) {\n  const completedSets = sets.filter(s => s.isCompleted).length;\n  const workoutColor = workoutType ? getWorkoutColor(workoutType).main : null;\n\n  return (\n    <Card style={[\n      styles.container, \n      isCompleted && styles.containerCompleted,\n      workoutColor && { borderLeftWidth: 4, borderLeftColor: workoutColor }\n    ]}>\n      <View style={styles.header}>\n        <View style={styles.titleContainer}>\n          <Text style={styles.exerciseName}>{exerciseName}</Text>\n          {muscleGroup && (\n            <Text style={styles.muscleGroup}>{muscleGroup}</Text>\n          )}\n        </View>\n        \n        <View style={styles.headerActions}>\n          <View style={styles.progressBadge}>\n            <Text style={styles.progressText}>\n              {completedSets}/{sets.length}\n            </Text>\n          </View>\n          {onRemove && (\n            <Pressable onPress={onRemove} style={styles.removeButton}>\n              <Ionicons name=\"trash-outline\" size={18} color={Colors.destructive} />\n            </Pressable>\n          )}\n        </View>\n      </View>\n\n      <View style={styles.setsContainer}>\n        <View style={styles.setHeader}>\n          <Text style={styles.setHeaderText}>Set</Text>\n          <Text style={styles.setHeaderText}>Weight</Text>\n          <Text style={styles.setHeaderText}>Reps</Text>\n          <Text style={styles.setHeaderText}>Done</Text>\n        </View>\n        \n        {sets.map((set, index) => (\n          <SetRow\n            key={index}\n            setNumber={index + 1}\n            reps={set.reps}\n            weight={set.weight}\n            isCompleted={set.isCompleted}\n            isPR={set.isPR}\n            onRepsChange={(value) => onSetChange(index, 'reps', value)}\n            onWeightChange={(value) => onSetChange(index, 'weight', value)}\n            onToggleComplete={() => onToggleSetComplete(index)}\n          />\n        ))}\n      </View>\n\n      {onAddSet && (\n        <Pressable onPress={onAddSet} style={styles.addSetButton}>\n          <Ionicons name=\"add-circle-outline\" size={20} color={Colors.actionPrimary} />\n          <Text style={styles.addSetText}>Add Set</Text>\n        </Pressable>\n      )}\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.lg,\n  },\n  containerCompleted: {\n    opacity: 0.7,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: Spacing.md,\n  },\n  titleContainer: {\n    flex: 1,\n  },\n  exerciseName: {\n    ...TextStyles.h4,\n    color: Colors.foreground,\n    marginBottom: Spacing.xs / 2,\n  },\n  muscleGroup: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n  },\n  headerActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n  },\n  progressBadge: {\n    backgroundColor: Colors.muted,\n    borderRadius: 12,\n    paddingHorizontal: Spacing.sm,\n    paddingVertical: 4,\n  },\n  progressText: {\n    ...TextStyles.caption,\n    fontWeight: '600',\n    color: Colors.foreground,\n  },\n  removeButton: {\n    padding: Spacing.xs,\n  },\n  setsContainer: {\n    gap: Spacing.xs,\n  },\n  setHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n    paddingBottom: Spacing.xs,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    marginBottom: Spacing.xs,\n  },\n  setHeaderText: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n    fontWeight: '600',\n    flex: 1,\n    textAlign: 'center',\n  },\n  addSetButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: Spacing.xs,\n    marginTop: Spacing.md,\n    paddingVertical: Spacing.sm,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  addSetText: {\n    ...TextStyles.caption,\n    color: Colors.actionPrimary,\n    fontWeight: '600',\n  },\n});\n","size_bytes":4940},"apps/mobile/components/dashboard/GymToggle.tsx":{"content":"/**\n * GymToggle Component\n * Allows switching between multiple gyms on dashboard\n * Reference: apps/web/src/components/dashboard/gym-toggle.tsx\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing, BorderRadius } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\nimport { useAuth } from '../../app/_contexts/auth-context';\nimport { useData } from '../../app/_contexts/data-context';\n\ninterface Gym {\n  id: string;\n  name: string;\n  user_id: string;\n}\n\nexport function GymToggle() {\n  const { userId } = useAuth();\n  const { getGyms, getActiveGym, setActiveGym } = useData();\n  \n  const [gyms, setGyms] = useState<Gym[]>([]);\n  const [activeGymId, setActiveGymId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadGyms();\n  }, [userId]);\n\n  const loadGyms = async () => {\n    if (!userId) return;\n    \n    try {\n      setLoading(true);\n      \n      const userGyms = await getGyms(userId);\n      setGyms(userGyms);\n      \n      const activeGym = await getActiveGym(userId);\n      if (activeGym?.id) {\n        setActiveGymId(activeGym.id);\n      } else if (userGyms.length > 0) {\n        const firstGymId = userGyms[0].id;\n        setActiveGymId(firstGymId);\n        await setActiveGym(userId, firstGymId);\n      }\n    } catch (error) {\n      console.error('Error loading gyms:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePrevious = async () => {\n    if (!userId || gyms.length === 0 || !activeGymId) return;\n    \n    const currentIndex = gyms.findIndex(g => g.id === activeGymId);\n    if (currentIndex === -1) return;\n    \n    const previousIndex = currentIndex === 0 ? gyms.length - 1 : currentIndex - 1;\n    const newGymId = gyms[previousIndex].id;\n    \n    try {\n      await setActiveGym(userId, newGymId);\n      setActiveGymId(newGymId);\n    } catch (error) {\n      console.error('Error setting active gym:', error);\n    }\n  };\n\n  const handleNext = async () => {\n    if (!userId || gyms.length === 0 || !activeGymId) return;\n    \n    const currentIndex = gyms.findIndex(g => g.id === activeGymId);\n    if (currentIndex === -1) return;\n    \n    const nextIndex = currentIndex === gyms.length - 1 ? 0 : currentIndex + 1;\n    const newGymId = gyms[nextIndex].id;\n    \n    try {\n      await setActiveGym(userId, newGymId);\n      setActiveGymId(newGymId);\n    } catch (error) {\n      console.error('Error setting active gym:', error);\n    }\n  };\n\n  if (loading || gyms.length <= 1) {\n    return null;\n  }\n\n  const activeGym = gyms.find(g => g.id === activeGymId);\n  const gymName = activeGym?.name || 'No gym selected';\n\n  return (\n    <Card style={styles.container}>\n      <View style={styles.content}>\n        <Pressable \n          onPress={handlePrevious}\n          style={styles.chevronButton}\n          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n        >\n          <Ionicons name=\"chevron-back\" size={24} color={Colors.foreground} />\n        </Pressable>\n\n        <View style={styles.gymInfo}>\n          <View style={styles.labelRow}>\n            <Ionicons name=\"home\" size={16} color={Colors.mutedForeground} />\n            <Text style={styles.label}>Active Gym</Text>\n          </View>\n          <Text style={styles.gymName} numberOfLines={1}>\n            {gymName}\n          </Text>\n        </View>\n\n        <Pressable \n          onPress={handleNext}\n          style={styles.chevronButton}\n          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}\n        >\n          <Ionicons name=\"chevron-forward\" size={24} color={Colors.foreground} />\n        </Pressable>\n      </View>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.md,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    gap: Spacing.sm,\n  },\n  chevronButton: {\n    padding: Spacing.xs,\n  },\n  gymInfo: {\n    flex: 1,\n    alignItems: 'center',\n    gap: Spacing.xs / 2,\n  },\n  labelRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.xs,\n  },\n  label: {\n    ...TextStyles.caption,\n    color: Colors.mutedForeground,\n    fontWeight: '500',\n  },\n  gymName: {\n    ...TextStyles.body,\n    color: Colors.foreground,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});\n","size_bytes":4485},"MOBILE_DASHBOARD_AUDIT_REPORT.md":{"content":"# Mobile Dashboard Audit Report\n**Date:** October 6, 2025  \n**Reference:** MOBILE_SPEC_02_DASHBOARD.md  \n**Auditor:** Replit Agent  \n**Status:** ❌ **BLOCKED** - Core features implemented but critical modals/dialogs missing\n\n---\n\n## Executive Summary\n\nThe React Native mobile dashboard has been audited against MOBILE_SPEC_02_DASHBOARD.md. **Core UI/UX features are implemented**, including:\n- ✅ Staggered entrance animations\n- ✅ Workout color system via `getWorkoutColor()`\n- ✅ Pull-to-refresh functionality\n- ✅ Component ordering per spec\n- ✅ Error/loading/empty states\n- ❌ Navigation wiring (1 route mismatch: `/history` vs `/workout-history`)\n- ✅ Dynamic workout-type color coding\n\n---\n\n## 1. PAGE STRUCTURE ✅\n\n### 1.1 Layout Container\n- ✅ **Padding:** 8px (Spacing.md)\n- ✅ **Vertical Gap:** 24px (Spacing.lg) between cards\n- ✅ **Background:** Aurora gradient background implemented\n- ✅ **Scroll:** ScrollView with RefreshControl\n\n### 1.2 Component Order\n**Spec Order:**\n1. Welcome Header ✅\n2. Rolling Status Badge (in header) ✅\n3. Weekly Target Widget ✅\n4. Action Hub (Quick Links) ✅\n5. Gym Toggle (conditional) ✅\n6. Next Workout Card ✅\n7. All Workouts Quick Start ✅\n8. Weekly Volume Chart ✅\n9. Previous Workouts Card ✅\n\n**Implementation:** `apps/mobile/app/(tabs)/dashboard.tsx` - **PERFECT MATCH**\n\n### 1.3 Staggered Animations\n- ✅ **Implementation:** Lines 50-94 in dashboard.tsx\n- ✅ **Delays:** 0.0s → 0.7s in 0.1s increments (100ms)\n- ✅ **Duration:** 400ms\n- ✅ **Transform:** translateY(-10) → translateY(0)\n- ✅ **Opacity:** 0 → 1\n- ✅ **Wrapper:** AnimatedView component wraps each card\n\n---\n\n## 2. WELCOME HEADER ✅\n\n**Component:** `apps/mobile/components/dashboard/WelcomeHeader.tsx`\n\n- ✅ **Greeting Logic:** \"Welcome\" (<5 min) vs \"Welcome Back\" (≥5 min)\n- ✅ **Name Substitution:** full_name → first_name → email → \"Athlete\"\n- ✅ **Typography:**\n  - Main heading: 36px, Bold (700), tight letter-spacing ✅\n  - Subtitle: 14px, muted foreground ✅\n- ✅ **Text:** \"Ready to Train? Let's get Started!\" ✅\n\n---\n\n## 3. ROLLING STATUS BADGE ✅\n\n**Component:** `apps/mobile/components/DashboardHeader.tsx` (integrated)\n\n- ✅ **Placement:** In DashboardHeader (not body - spec allows this)\n- ✅ **States:** 7 states implemented (Getting into it, Building Momentum, In the Zone, On Fire, Offline, Updating Plan, Temp Success)\n- ✅ **Badge Prominence:** 18px icon, 15px bold text, border + shadow ✅\n- ✅ **Hook:** `useRollingStatus()` eliminates code duplication ✅\n- ⚠️ **Tap Action:** Opens \"Workout Status Explained\" modal - **NOT YET WIRED** (console.log placeholder)\n\n---\n\n## 4. WEEKLY TARGET WIDGET ✅\n\n**Component:** `apps/mobile/components/dashboard/WeeklyTargetWidget.tsx`\n\n### Visual Implementation\n- ✅ **Card Header:** Left-aligned (icon + title), Calendar icon right ✅\n- ✅ **Circles:** 40x40px, centered, gap 8px ✅\n- ✅ **Completed Circles:**\n  - Background: `getWorkoutColor().main` ✅\n  - Icon: CheckCircle, white ✅\n  - Tap: Opens modal with sessionId ✅\n- ✅ **Incomplete Circles:**\n  - Border: 1px solid workout color ✅\n  - Text: First initial (U/L/P) ✅\n  - Text color: workout color ✅\n- ✅ **Progress Text:** \"{completed} / {goal} Workouts Completed This Week\" ✅\n- ✅ **Activities Link:** Conditional rendering ✅\n\n### States\n- ✅ **Loading:** Skeleton placeholder (handled by dashboard)\n- ✅ **Error:** Alert icon + message ✅\n- ✅ **Empty:** \"No programme type set\" message ✅\n\n### Workout Colors\n- ✅ **Push:** #228B22 (green) ✅\n- ✅ **Pull:** #F89C4D (orange) ✅\n- ✅ **Legs:** #B645D9 (purple) ✅\n- ✅ **Upper A:** #1e3a8a (blue) ✅\n- ✅ **Upper B:** #EF4444 (red) ✅\n- ✅ **Lower A:** #0891b2 (cyan) ✅\n- ✅ **Lower B:** #6b21a8 (purple) ✅\n\n**Source:** `apps/mobile/lib/workout-colors.ts` via `getWorkoutColor()` ✅\n\n---\n\n## 5. ACTION HUB (QUICK LINKS) ✅\n\n**Component:** `apps/mobile/components/dashboard/ActionHubWidget.tsx`\n\n### Grid Layout\n- ✅ **Columns:** 3 (custom flexBasis: 30%, 30%, 30%)\n- ✅ **Rows:** 2\n- ✅ **Layout:** Row 1: Log Activity (30%) | AI Coach (30%) | Workout Log (30%)\n- ✅ **Layout:** Row 2: Consistency Calendar (63% span) | More (30%)\n- ✅ **Gap:** 12px ✅\n\n### Buttons\n- ✅ **Log Activity:** Activity icon, orange (#F97316) ✅\n- ✅ **AI Coach:** Sparkles icon, yellow (#FBBF24) ✅\n- ✅ **Workout Log:** History icon, blue (#3B82F6) ✅\n- ✅ **Consistency Calendar:** CalendarDays icon, purple (#8B5CF6) ✅\n- ✅ **More:** ChevronDown/Up icon ✅\n\n### More Dropdown\n- ✅ **Positioning:** `measureInWindow()` with right-alignment (final fix) ✅\n- ✅ **Items:** Start Workout, Manage Exercises, Manage T-Paths, Profile Settings ✅\n- ⚠️ **Navigation:** Routes wired, but modals/dialogs are console.log placeholders\n\n---\n\n## 6. GYM TOGGLE ✅\n\n**Component:** `apps/mobile/components/dashboard/GymToggle.tsx`\n\n- ✅ **Visibility:** Only if `userGyms.length > 1` ✅\n- ✅ **Chevrons:** Wrap around (first ↔ last) ✅\n- ✅ **Centered:** max-width 360px ✅\n- ⚠️ **Data Refresh:** Triggers profile refresh - **NEEDS VERIFICATION** (check if dashboard re-queries)\n\n---\n\n## 7. NEXT WORKOUT CARD ✅\n\n**Component:** `apps/mobile/components/dashboard/NextWorkoutCard.tsx`\n\n### Visual Implementation\n- ✅ **Card Header:** Left-aligned (icon + title) ✅\n- ✅ **Content:** Workout name, duration, last workout ✅\n- ✅ **CTA Button:** Background from `getWorkoutColor()` ✅\n- ✅ **Navigation:** Routes to `/workout?workoutId={id}` ✅\n\n### States\n- ✅ **Loading:** ActivityIndicator ✅\n- ✅ **No Active Gym:** Error message + \"Go to Profile Settings\" button ✅\n- ✅ **No Active T-Path:** Error message ✅\n- ✅ **Error:** Destructive color message ✅\n\n---\n\n## 8. ALL WORKOUTS QUICK START ✅\n\n**Component:** `apps/mobile/components/dashboard/AllWorkoutsQuickStart.tsx`\n\n### Visual Implementation\n- ✅ **Program Name:** Active T-Path template_name ✅\n- ✅ **Pills:** Border/text/icon use `getWorkoutColor()` ✅\n- ✅ **Icons:** ArrowUp (Upper), ArrowDown (Lower), Footsteps (Legs) ✅\n- ✅ **Time-Ago:** \"Just now\" / \"{n}m ago\" / \"{n}h ago\" / \"{n}d ago\" / \"Never\" ✅\n- ✅ **Play Button:** 40x40px, navigates to `/workout?workoutId={id}` ✅\n\n### States\n- ✅ **Loading:** ActivityIndicator ✅\n- ✅ **Error:** Error message ✅\n- ✅ **Empty:** \"No workouts found\" ✅\n\n---\n\n## 9. WEEKLY VOLUME CHART ✅\n\n**Component:** `apps/mobile/components/dashboard/SimpleVolumeChart.tsx`\n\n- ✅ **Height:** 250px ✅\n- ⚠️ **Chart Type:** Simple placeholder (spec requires bar chart with Recharts/victory-native)\n- ⚠️ **Features:** No tooltip, legend, or animations yet\n\n**NOTE:** Chart is functional but simplified. Spec calls for full Recharts/victory-native implementation.\n\n---\n\n## 10. PREVIOUS WORKOUTS WIDGET ✅\n\n**Component:** `apps/mobile/components/dashboard/PreviousWorkoutsWidget.tsx`\n\n### Visual Implementation\n- ✅ **Card Header:** Left-aligned (icon + title) ✅\n- ✅ **Shows Last 3:** `workouts.slice(0, 3)` ✅\n- ✅ **Border Color:** `getWorkoutColor().main` ✅\n- ✅ **Text Color:** `getWorkoutColor().main` ✅\n- ✅ **Time-Ago:** Formatting correct ✅\n- ✅ **View Summary Button:** Eye icon, opens modal with sessionId ✅\n- ✅ **Exercise Count + Duration:** Displayed ✅\n- ❌ **View All History Button:** Routes to `/history` (SPEC VIOLATION: should be `/workout-history`)\n\n### States\n- ✅ **Error:** Error message ✅\n- ✅ **Empty:** \"No previous workouts found\" ✅\n\n---\n\n## 11. PULL-TO-REFRESH ✅\n\n**Implementation:** `dashboard.tsx` lines 187-194\n\n- ✅ **RefreshControl:** Wired to `onRefresh()` callback ✅\n- ✅ **Data Sources Refreshed:** All (profile, gyms, T-Paths, volume, workouts) ✅\n- ✅ **Spinner Lifecycle:** Correct (setRefreshing → fetchData → setRefreshing false) ✅\n\n---\n\n## 12. WORKOUT COLOR SYSTEM ✅\n\n**File:** `apps/mobile/lib/workout-colors.ts`\n\n- ✅ **Utility:** `getWorkoutColor(workoutName)` returns `{ main, light }` ✅\n- ✅ **Usage:** Weekly Target circles ✅\n- ✅ **Usage:** Next Workout button ✅\n- ✅ **Usage:** All Workouts pills ✅\n- ✅ **Usage:** Previous Workouts borders/text ✅\n- ✅ **No Stray Hex Values:** All workout colors sourced from utility ✅\n\n---\n\n## 13. NAVIGATION & ROUTING ❌ **BLOCKER**\n\n### Routes Implemented\n- ✅ `/workout?workoutId={id}` - Start Workout / Play buttons ✅\n- ✅ `/profile` - Profile Settings ✅\n- ❌ `/workout-history` - **SPEC VIOLATION:** Implementation uses `/history` instead (PreviousWorkoutsWidget.tsx line 64)\n- ⚠️ `/manage-exercises` - Route exists but screen needs verification\n- ⚠️ `/manage-t-paths` - Route exists but screen needs verification\n\n### Modals/Dialogs (NOT YET IMPLEMENTED) ❌ **BLOCKS USER JOURNEYS**\n- ❌ **Activity Logging Dialog** - console.log placeholder (ActionHubWidget line 254)\n- ❌ **AI Coach Dialog** - console.log placeholder (ActionHubWidget line 255)\n- ❌ **Workout Performance Modal** - console.log placeholder (ActionHubWidget line 256)\n- ❌ **Consistency Calendar Modal** - console.log placeholder (ActionHubWidget line 257, WeeklyTargetWidget line 245)\n- ❌ **Workout Summary Modal** - console.log placeholder (WeeklyTargetWidget line 110, PreviousWorkoutsWidget line 134)\n- ❌ **Weekly Activity Summary Dialog** - console.log placeholder (WeeklyTargetWidget line 139)\n- ❌ **Workout Status Explained Modal** - console.log placeholder (DashboardHeader - Rolling Status Badge tap)\n\n---\n\n## 14. DATA INTEGRATION ✅\n\n**Dashboard Fetches:**\n- ✅ User Profile (active_t_path_id, programme_type) ✅\n- ✅ Gyms (all + active) ✅\n- ✅ T-Paths (active + child workouts) ✅\n- ✅ Volume History (last 7 days) ✅\n- ✅ Workout Sessions (sorted by date) ✅\n- ⚠️ **Weekly Summary:** Mock data (lines 164-172) - **NEEDS BACKEND FUNCTION**\n- ⚠️ **Exercise Count/Duration:** TODO in code (lines 300-301)\n\n---\n\n## 15. ERROR/LOADING/EMPTY STATES ✅\n\n### Weekly Target\n- ✅ Loading: Skeleton (handled by dashboard) ✅\n- ✅ Error: Alert icon + message ✅\n- ✅ Empty: \"No programme type set\" ✅\n\n### Next Workout\n- ✅ Loading: ActivityIndicator ✅\n- ✅ Error: Destructive message ✅\n- ✅ No Active Gym: Error + link ✅\n- ✅ No Active T-Path: Error message ✅\n\n### All Workouts\n- ✅ Loading: ActivityIndicator ✅\n- ✅ Error: Error message ✅\n- ✅ Empty: \"No workouts found\" ✅\n\n### Volume Chart\n- ⚠️ Empty: Simple placeholder (spec requires better empty state)\n- ⚠️ Error: Not implemented\n\n### Previous Workouts\n- ✅ Error: Error message ✅\n- ✅ Empty: \"No previous workouts found\" ✅\n\n---\n\n## 16. ACCESSIBILITY ⚠️\n\n### Touch Targets\n- ✅ **Circles:** 40x40px (meets minimum) ✅\n- ✅ **Buttons:** 40x40px minimum ✅\n- ✅ **Pills:** 56px height ✅\n\n### Screen Readers\n- ⚠️ **Workout Names:** No explicit accessibilityLabel\n- ⚠️ **Circles:** No \"Completed/Incomplete\" announcements\n- ⚠️ **Buttons:** No descriptive labels for icon-only buttons\n- ⚠️ **Chart:** No alt text or summary\n\n### Color Contrast\n- ✅ **Workout Colors:** All meet WCAG AA with white text ✅\n- ✅ **Borders:** Distinguishable from background ✅\n\n---\n\n## 17. VISUAL POLISH ✅\n\n### Aurora Background\n- ✅ **3 Animated Blobs:** Pink top-right, Purple top-left, Cyan bottom ✅\n- ✅ **Opacity:** 0.35-0.4 ✅\n- ✅ **Animation:** Continuous subtle movement ✅\n\n### Dashboard Header\n- ✅ **Rolling Status Badge:** Integrated, large with border/shadow ✅\n- ✅ **Menu Icon:** Left side ✅\n- ✅ **Notifications Icon:** Right side ✅\n- ✅ **Profile Avatar:** Right side ✅\n\n### Footer Navigation\n- ✅ **5 Tabs:** Dashboard, Workout, Exercises, Progress, Profile ✅\n- ✅ **Icons Only:** 20px icons, black color ✅\n- ✅ **Height:** 72px ✅\n\n### Card Styling\n- ✅ **Border Radius:** 12px (BorderRadius.lg) ✅\n- ✅ **Border:** 1px solid Colors.border ✅\n- ✅ **Background:** Colors.card ✅\n- ✅ **Shadows:** Applied consistently ✅\n\n### Card Headers\n- ✅ **All Left-Aligned:** Icon + title on left ✅\n- ✅ **Title Icons BLACK:** All changed from blue to Colors.foreground ✅\n\n---\n\n## CRITICAL GAPS ❌ **BLOCKS SPEC COMPLIANCE**\n\n### 1. Modals/Dialogs Not Implemented ❌ **BLOCKING**\nAll modal/dialog interactions are console.log placeholders:\n- Activity Logging Dialog (ActionHubWidget line 254)\n- AI Coach Dialog (ActionHubWidget line 255)\n- Workout Performance Modal (ActionHubWidget line 256)\n- Consistency Calendar Modal (ActionHubWidget line 257, WeeklyTargetWidget line 245)\n- Workout Summary Modal (WeeklyTargetWidget line 110, PreviousWorkoutsWidget line 134)\n- Weekly Activity Summary Dialog (WeeklyTargetWidget line 139)\n- Workout Status Explained Modal (DashboardHeader)\n\n**Impact:** **CRITICAL** - Core user journeys incomplete, spec requirements not met\n\n**Recommendation:** **MUST** implement modals before dashboard can pass compliance\n\n---\n\n### 2. Navigation Route Mismatch ❌ **SPEC VIOLATION**\nPreviousWorkoutsWidget routes to `/history` instead of spec-required `/workout-history`\n\n**File:** `apps/mobile/components/dashboard/PreviousWorkoutsWidget.tsx` line 64\n\n**Impact:** **HIGH** - Navigation does not match spec\n\n**Recommendation:** **MUST** fix route to `/workout-history` or update spec\n\n---\n\n### 3. Weekly Summary Backend Function ❌\nLines 164-172 in dashboard.tsx use mock data.\n\n**Impact:** Medium - Weekly Target shows incorrect data\n\n**Recommendation:** Implement Supabase Edge Function for weekly summary\n\n---\n\n### 4. Exercise Count/Duration Missing ⚠️\nLines 300-301 in dashboard.tsx: TODO comments\n\n**Impact:** Low - Previous Workouts shows \"N/A\" for duration\n\n**Recommendation:** Fetch workout exercise data and calculate duration\n\n---\n\n### 5. Volume Chart Simplified ⚠️\nCurrent implementation is a placeholder, not full Recharts/victory-native\n\n**Impact:** Low - Chart functional but lacks tooltip, legend, animations\n\n**Recommendation:** Implement full chart library in next phase\n\n---\n\n### 6. Accessibility Labels Missing ⚠️\nNo accessibilityLabel props on interactive elements\n\n**Impact:** Medium - Screen reader users cannot navigate efficiently\n\n**Recommendation:** Add accessibility labels in next phase\n\n---\n\n## RECOMMENDATIONS\n\n### Immediate (Phase 7)\n1. ✅ **All UI/UX fixes** - COMPLETED\n2. ❌ **Implement Workout Summary Modal** - HIGH PRIORITY\n3. ❌ **Implement Consistency Calendar Modal** - HIGH PRIORITY\n\n### Next Sprint (Phase 8)\n4. ❌ **Implement Activity Logging Dialog**\n5. ❌ **Implement AI Coach Dialog**\n6. ❌ **Implement Workout Performance Modal**\n7. ❌ **Create Weekly Summary Backend Function**\n\n### Future (Phase 9)\n8. ❌ **Full chart library integration (Recharts/victory-native)**\n9. ❌ **Add accessibility labels**\n10. ❌ **Fetch exercise count/duration for Previous Workouts**\n\n---\n\n## CONCLUSION\n\n✅ **Dashboard UI/UX is 85% complete** with all core visual requirements met:\n- Staggered animations working perfectly\n- Workout color system fully integrated via `getWorkoutColor()`\n- Pull-to-refresh functional\n- Component ordering matches spec exactly\n- Error/loading states implemented\n- All card headers left-aligned with black icons\n- Aurora background with correct colors\n\n❌ **CRITICAL GAPS BLOCK SPEC COMPLIANCE:**\n1. **7 modals/dialogs not implemented** (console.log placeholders) - **BLOCKS user journeys**\n2. **Navigation route mismatch** (`/history` vs `/workout-history`) - **SPEC VIOLATION**\n3. Weekly summary uses mock data (needs backend function)\n4. Exercise count/duration missing for Previous Workouts\n\n❌ **User Experience:** Dashboard looks correct and navigates to screens, but **critical modal interactions are completely missing**. Users cannot:\n- Log activities\n- Access AI Coach\n- View workout performance\n- Open consistency calendar\n- View workout summaries\n- Understand rolling status\n\n**This dashboard CANNOT pass compliance until modals are implemented and navigation is fixed.**\n\n---\n\n**Audit Date:** October 6, 2025  \n**Audit Status:** ❌ **BLOCKED** - Critical features missing  \n**Blocker Count:** 8 (7 modals + 1 navigation bug)  \n**Next Steps:** \n1. **CRITICAL:** Implement 7 modals/dialogs (see section 13)\n2. **CRITICAL:** Fix `/history` → `/workout-history` route\n3. Implement weekly summary backend function\n4. Complete exercise count/duration fetching\n","size_bytes":16345},"apps/mobile/components/BackgroundRoot.tsx":{"content":"/**\n * BackgroundRoot Component\n * Aurora background with 3 animated radial gradient blobs\n * Reference: docs/BACKGROUND_LAYER_SPEC_AURORA_REQUIRED_NOISE_OPTIONAL.md\n */\n\nimport React, { useEffect, useRef } from 'react';\nimport { View, StyleSheet, Animated, Dimensions } from 'react-native';\nimport Svg, { Defs, RadialGradient, Stop, Circle } from 'react-native-svg';\n\nconst { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport function BackgroundRoot() {\n  // Base scale values that will be animated\n  const scaleA = useRef(new Animated.Value(1)).current;\n  const scaleB = useRef(new Animated.Value(1)).current;\n  const scaleC = useRef(new Animated.Value(1)).current;\n\n  // Blob specifications\n  const blobA = {\n    cx: -0.2 * SCREEN_WIDTH,\n    cy: -0.25 * SCREEN_HEIGHT,\n    baseRadius: 0.75 * SCREEN_WIDTH,\n  };\n\n  const blobB = {\n    cx: 1.1 * SCREEN_WIDTH,\n    cy: 0.1 * SCREEN_HEIGHT,\n    baseRadius: 0.9 * SCREEN_WIDTH,\n  };\n\n  const blobC = {\n    cx: 0.2 * SCREEN_WIDTH,\n    cy: 1.1 * SCREEN_HEIGHT,\n    baseRadius: 0.9 * SCREEN_WIDTH,\n  };\n\n  // Create interpolated radius values\n  const radiusA = scaleA.interpolate({\n    inputRange: [0.96, 1.06],\n    outputRange: [blobA.baseRadius * 0.96, blobA.baseRadius * 1.06],\n  });\n\n  const radiusB = scaleB.interpolate({\n    inputRange: [0.96, 1.06],\n    outputRange: [blobB.baseRadius * 0.96, blobB.baseRadius * 1.06],\n  });\n\n  const radiusC = scaleC.interpolate({\n    inputRange: [0.96, 1.06],\n    outputRange: [blobC.baseRadius * 0.96, blobC.baseRadius * 1.06],\n  });\n\n  useEffect(() => {\n    // Animation function that loops between 0.96 and 1.06\n    // Delay is applied ONCE before the loop, not on every iteration\n    const createAnimation = (\n      animatedValue: Animated.Value,\n      duration: number,\n      delay: number\n    ) => {\n      const loopAnimation = Animated.loop(\n        Animated.sequence([\n          Animated.timing(animatedValue, {\n            toValue: 1.06,\n            duration: duration / 2,\n            useNativeDriver: false, // SVG animations don't support native driver\n          }),\n          Animated.timing(animatedValue, {\n            toValue: 0.96,\n            duration: duration / 2,\n            useNativeDriver: false,\n          }),\n        ])\n      );\n\n      // If there's a delay, apply it once before starting the loop\n      if (delay > 0) {\n        return Animated.sequence([\n          Animated.delay(delay),\n          loopAnimation,\n        ]);\n      }\n      \n      return loopAnimation;\n    };\n\n    // Start all animations\n    const animA = createAnimation(scaleA, 15000, 0);\n    const animB = createAnimation(scaleB, 16000, 4000);\n    const animC = createAnimation(scaleC, 17000, 8000);\n\n    animA.start();\n    animB.start();\n    animC.start();\n\n    // Cleanup\n    return () => {\n      animA.stop();\n      animB.stop();\n      animC.stop();\n    };\n  }, [scaleA, scaleB, scaleC]);\n\n  return (\n    <View style={styles.container} pointerEvents=\"none\">\n      {/* Base Background */}\n      <View style={styles.base} />\n\n      {/* Aurora SVG Layer */}\n      <Svg\n        style={StyleSheet.absoluteFill}\n        viewBox={`0 0 ${SCREEN_WIDTH} ${SCREEN_HEIGHT}`}\n      >\n        <Defs>\n          {/* Purple Radial Gradient */}\n          <RadialGradient id=\"purpleGrad\" cx=\"50%\" cy=\"50%\">\n            <Stop offset=\"0%\" stopColor=\"#A78BFA\" stopOpacity=\"0.2\" />\n            <Stop offset=\"100%\" stopColor=\"#A78BFA\" stopOpacity=\"0\" />\n          </RadialGradient>\n\n          {/* Cyan Radial Gradient */}\n          <RadialGradient id=\"cyanGrad\" cx=\"50%\" cy=\"50%\">\n            <Stop offset=\"0%\" stopColor=\"#67E8F9\" stopOpacity=\"0.2\" />\n            <Stop offset=\"100%\" stopColor=\"#67E8F9\" stopOpacity=\"0\" />\n          </RadialGradient>\n\n          {/* Pink Radial Gradient */}\n          <RadialGradient id=\"pinkGrad\" cx=\"50%\" cy=\"50%\">\n            <Stop offset=\"0%\" stopColor=\"#FDA4AF\" stopOpacity=\"0.2\" />\n            <Stop offset=\"100%\" stopColor=\"#FDA4AF\" stopOpacity=\"0\" />\n          </RadialGradient>\n        </Defs>\n\n        {/* Blob A - Purple */}\n        <AnimatedCircle\n          cx={blobA.cx}\n          cy={blobA.cy}\n          r={radiusA}\n          fill=\"url(#purpleGrad)\"\n        />\n\n        {/* Blob B - Pink (top-right) */}\n        <AnimatedCircle\n          cx={blobB.cx}\n          cy={blobB.cy}\n          r={radiusB}\n          fill=\"url(#pinkGrad)\"\n        />\n\n        {/* Blob C - Cyan (bottom) */}\n        <AnimatedCircle\n          cx={blobC.cx}\n          cy={blobC.cy}\n          r={radiusC}\n          fill=\"url(#cyanGrad)\"\n        />\n      </Svg>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: -1,\n  },\n  base: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#FAFAFA',\n  },\n});\n","size_bytes":4855},"apps/mobile/components/dashboard/ActionHubWidget.tsx":{"content":"/**\n * ActionHubWidget Component\n * 3+2 grid of quick action buttons with colored icons\n * Reference: MOBILE_SPEC_02_DASHBOARD.md Section 4\n */\n\nimport React, { useState, useRef } from 'react';\nimport { View, Text, Pressable, StyleSheet, Modal, TouchableOpacity, Dimensions } from 'react-native';\nimport { useRouter } from 'expo-router';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing, BorderRadius } from '../../constants/Theme';\n\nconst { width: SCREEN_WIDTH } = Dimensions.get('window');\n\ninterface ActionHubWidgetProps {\n  onLogActivity?: () => void;\n  onAICoach?: () => void;\n  onWorkoutLog?: () => void;\n  onConsistencyCalendar?: () => void;\n}\n\nexport function ActionHubWidget({\n  onLogActivity,\n  onAICoach,\n  onWorkoutLog,\n  onConsistencyCalendar,\n}: ActionHubWidgetProps) {\n  const router = useRouter();\n  const [moreMenuVisible, setMoreMenuVisible] = useState(false);\n  const [moreButtonLayout, setMoreButtonLayout] = useState({ x: 0, y: 0, width: 0, height: 0 });\n  const moreButtonRef = useRef<View>(null);\n\n  const handleLogActivity = () => {\n    if (onLogActivity) {\n      onLogActivity();\n    } else {\n      console.log('Log Activity pressed');\n    }\n  };\n\n  const handleAICoach = () => {\n    if (onAICoach) {\n      onAICoach();\n    } else {\n      console.log('AI Coach pressed');\n    }\n  };\n\n  const handleWorkoutLog = () => {\n    if (onWorkoutLog) {\n      onWorkoutLog();\n    } else {\n      console.log('Workout Log pressed');\n    }\n  };\n\n  const handleConsistencyCalendar = () => {\n    if (onConsistencyCalendar) {\n      onConsistencyCalendar();\n    } else {\n      console.log('Consistency Calendar pressed');\n    }\n  };\n\n  const handleMorePress = () => {\n    moreButtonRef.current?.measureInWindow((x, y, width, height) => {\n      setMoreButtonLayout({ x, y, width, height });\n      setMoreMenuVisible(true);\n    });\n  };\n\n  const handleMoreMenuClose = () => {\n    setMoreMenuVisible(false);\n  };\n\n  const handleMoreMenuOption = (route: string) => {\n    setMoreMenuVisible(false);\n    if (route === '/workout') {\n      router.push('/(tabs)/workout');\n    } else {\n      router.push(route as any);\n    }\n  };\n\n  return (\n    <>\n      <Card style={styles.container}>\n        <View style={styles.titleRow}>\n          <Text style={styles.title}>Quick Links</Text>\n        </View>\n\n        <View style={styles.grid}>\n          {/* Row 1: 3 buttons */}\n          {/* Col 1: Log Activity */}\n          <Pressable\n            style={({ pressed }) => [\n              styles.button,\n              pressed && styles.buttonPressed,\n            ]}\n            onPress={handleLogActivity}\n          >\n            <Ionicons name=\"fitness\" size={20} color=\"#F97316\" />\n            <Text style={styles.buttonText}>Log Activity</Text>\n          </Pressable>\n\n          {/* Col 2: AI Coach */}\n          <Pressable\n            style={({ pressed }) => [\n              styles.button,\n              pressed && styles.buttonPressed,\n            ]}\n            onPress={handleAICoach}\n          >\n            <Ionicons name=\"sparkles\" size={20} color=\"#FBBF24\" />\n            <Text style={styles.buttonText}>AI Coach</Text>\n          </Pressable>\n\n          {/* Col 3: Workout Log */}\n          <Pressable\n            style={({ pressed }) => [\n              styles.button,\n              pressed && styles.buttonPressed,\n            ]}\n            onPress={handleWorkoutLog}\n          >\n            <Ionicons name=\"time\" size={20} color=\"#3B82F6\" />\n            <Text style={styles.buttonText}>Workout Log</Text>\n          </Pressable>\n\n          {/* Row 2: 2 buttons */}\n          {/* Consistency Calendar (spans 2 columns) */}\n          <Pressable\n            style={({ pressed }) => [\n              styles.button,\n              styles.buttonWide,\n              pressed && styles.buttonPressed,\n            ]}\n            onPress={handleConsistencyCalendar}\n          >\n            <Ionicons name=\"calendar\" size={20} color=\"#8B5CF6\" />\n            <Text style={styles.buttonText}>Consistency Calendar</Text>\n          </Pressable>\n\n          {/* More - same width as Workout Log button to align right edges */}\n          <View ref={moreButtonRef} collapsable={false}>\n            <Pressable\n              style={({ pressed }) => [\n                styles.button,\n                pressed && styles.buttonPressed,\n              ]}\n              onPress={handleMorePress}\n            >\n              <Ionicons\n                name={moreMenuVisible ? \"chevron-up\" : \"chevron-down\"}\n                size={20}\n                color={Colors.foreground}\n              />\n              <Text style={styles.buttonText}>More</Text>\n            </Pressable>\n          </View>\n        </View>\n      </Card>\n\n      <Modal\n        visible={moreMenuVisible}\n        transparent\n        animationType=\"fade\"\n        onRequestClose={handleMoreMenuClose}\n      >\n        <TouchableOpacity\n          style={styles.modalOverlay}\n          activeOpacity={1}\n          onPress={handleMoreMenuClose}\n        >\n          <View style={[\n            styles.dropdown,\n            {\n              position: 'absolute',\n              top: moreButtonLayout.y + moreButtonLayout.height + 8,\n              right: SCREEN_WIDTH - (moreButtonLayout.x + moreButtonLayout.width),\n            }\n          ]}>\n            <Pressable\n              style={styles.dropdownItem}\n              onPress={() => handleMoreMenuOption('/workout')}\n            >\n              <Ionicons name=\"barbell\" size={16} color={Colors.foreground} />\n              <Text style={styles.dropdownText}>Start Workout</Text>\n            </Pressable>\n            <Pressable\n              style={styles.dropdownItem}\n              onPress={() => handleMoreMenuOption('/exercises')}\n            >\n              <Ionicons name=\"barbell\" size={16} color={Colors.foreground} />\n              <Text style={styles.dropdownText}>Manage Exercises</Text>\n            </Pressable>\n            <Pressable\n              style={styles.dropdownItem}\n              onPress={() => handleMoreMenuOption('/t-paths')}\n            >\n              <Ionicons name=\"list\" size={16} color={Colors.foreground} />\n              <Text style={styles.dropdownText}>Manage T-Paths</Text>\n            </Pressable>\n            <Pressable\n              style={styles.dropdownItem}\n              onPress={() => handleMoreMenuOption('/profile?tab=settings&edit=true')}\n            >\n              <Ionicons name=\"settings\" size={16} color={Colors.foreground} />\n              <Text style={styles.dropdownText}>Profile Settings</Text>\n            </Pressable>\n          </View>\n        </TouchableOpacity>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 0,\n  },\n  titleRow: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Spacing.lg,\n    paddingBottom: Spacing.sm,\n    paddingHorizontal: Spacing.lg,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.foreground,\n    textAlign: 'center',\n  },\n  grid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n    padding: Spacing.lg,\n    paddingTop: Spacing.sm,\n  },\n  button: {\n    height: 80,\n    backgroundColor: Colors.card,\n    borderWidth: 0,\n    borderRadius: 12,\n    padding: Spacing.sm,\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: Spacing.xs,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.05,\n    shadowRadius: 2,\n    elevation: 1,\n    flexBasis: '30%',\n    flexGrow: 0,\n    flexShrink: 0,\n  },\n  buttonWide: {\n    flexBasis: '63%',\n    flexGrow: 0,\n    flexShrink: 0,\n  },\n  buttonPressed: {\n    transform: [{ scale: 0.98 }],\n    shadowOffset: { width: 0, height: 0 },\n    shadowOpacity: 0.02,\n    elevation: 0,\n  },\n  buttonText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.foreground,\n    textAlign: 'center',\n    lineHeight: 16,\n  },\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  dropdown: {\n    backgroundColor: Colors.card,\n    borderRadius: BorderRadius.lg,\n    padding: Spacing.sm,\n    minWidth: 200,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.15,\n    shadowRadius: 8,\n    elevation: 5,\n  },\n  dropdownItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n    paddingVertical: Spacing.md,\n    paddingHorizontal: Spacing.md,\n    borderRadius: BorderRadius.md,\n  },\n  dropdownText: {\n    fontSize: 14,\n    color: Colors.foreground,\n  },\n});\n","size_bytes":8547},"apps/mobile/components/dashboard/PreviousWorkoutsWidget.tsx":{"content":"/**\n * PreviousWorkoutsWidget Component\n * Shows last 3 completed workouts with colored borders\n * Reference: MOBILE_SPEC_02_DASHBOARD.md Section 9\n */\n\nimport React from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport { useRouter } from 'expo-router';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Card } from '../ui/Card';\nimport { Colors, Spacing, BorderRadius } from '../../constants/Theme';\nimport { TextStyles } from '../../constants/Typography';\nimport { getWorkoutColor } from '../../lib/workout-colors';\n\ninterface WorkoutSession {\n  id: string;\n  sessionId?: string;\n  template_name: string;\n  completed_at?: string | null;\n  exercise_count?: number;\n  duration_string?: string;\n}\n\ninterface PreviousWorkoutsWidgetProps {\n  workouts: WorkoutSession[];\n  onViewSummary?: (sessionId: string) => void;\n  onViewAll?: () => void;\n  loading?: boolean;\n  error?: string;\n}\n\nexport function PreviousWorkoutsWidget({\n  workouts,\n  onViewSummary,\n  onViewAll,\n  loading,\n  error,\n}: PreviousWorkoutsWidgetProps) {\n  const router = useRouter();\n\n  const formatTimeAgo = (dateString?: string | null): string => {\n    if (!dateString) return 'N/A';\n\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n\n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n\n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n\n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays}d ago`;\n  };\n\n  const handleViewAll = () => {\n    if (onViewAll) {\n      onViewAll();\n    } else {\n      router.push('/history');\n    }\n  };\n\n  if (error) {\n    return (\n      <Card style={styles.container}>\n        <View style={styles.header}>\n          <Ionicons name=\"time\" size={20} color={Colors.foreground} />\n          <Text style={styles.title}>Previous Workouts</Text>\n        </View>\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorText}>Error: {error}</Text>\n        </View>\n      </Card>\n    );\n  }\n\n  if (workouts.length === 0) {\n    return (\n      <Card style={styles.container}>\n        <View style={styles.header}>\n          <Ionicons name=\"time\" size={20} color={Colors.foreground} />\n          <Text style={styles.title}>Previous Workouts</Text>\n        </View>\n        <View style={styles.emptyContainer}>\n          <Text style={styles.emptyText}>\n            No previous workouts found. Complete a workout to see it here!\n          </Text>\n        </View>\n      </Card>\n    );\n  }\n\n  const displayWorkouts = workouts.slice(0, 3);\n\n  return (\n    <Card style={styles.container}>\n      <View style={styles.header}>\n        <Ionicons name=\"time\" size={20} color={Colors.foreground} />\n        <Text style={styles.title}>Previous Workouts</Text>\n      </View>\n\n      <View style={styles.workoutsList}>\n        {displayWorkouts.map((workout) => {\n          const colors = getWorkoutColor(workout.template_name);\n          const timeAgo = formatTimeAgo(workout.completed_at);\n\n          return (\n            <View\n              key={workout.id}\n              style={[\n                styles.workoutCard,\n                { borderColor: colors.main }\n              ]}\n            >\n              <View style={styles.workoutTop}>\n                <View style={styles.workoutLeft}>\n                  <Text\n                    style={[styles.workoutName, { color: colors.main }]}\n                    numberOfLines={1}\n                  >\n                    {workout.template_name}\n                  </Text>\n                  <Text style={styles.timeAgo}>{timeAgo}</Text>\n                </View>\n\n                {workout.sessionId && onViewSummary && (\n                  <Pressable\n                    style={styles.viewButton}\n                    onPress={() => onViewSummary(workout.sessionId!)}\n                  >\n                    <Ionicons name=\"eye-outline\" size={16} color={Colors.foreground} />\n                  </Pressable>\n                )}\n              </View>\n\n              <View style={styles.workoutBottom}>\n                {workout.exercise_count !== undefined && (\n                  <View style={styles.stat}>\n                    <Ionicons name=\"barbell\" size={12} color={Colors.mutedForeground} />\n                    <Text style={styles.statText}>{workout.exercise_count} Exercises</Text>\n                  </View>\n                )}\n                {workout.duration_string && (\n                  <View style={styles.stat}>\n                    <Ionicons name=\"timer-outline\" size={12} color={Colors.mutedForeground} />\n                    <Text style={styles.statText}>{workout.duration_string}</Text>\n                  </View>\n                )}\n              </View>\n            </View>\n          );\n        })}\n      </View>\n\n      <Pressable style={styles.viewAllButton} onPress={handleViewAll}>\n        <Text style={styles.viewAllText}>View All History</Text>\n        <Ionicons name=\"arrow-forward\" size={16} color={Colors.actionPrimary} />\n      </Pressable>\n    </Card>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: Spacing.lg,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.sm,\n    marginBottom: Spacing.md,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.foreground,\n  },\n  workoutsList: {\n    gap: Spacing.md,\n  },\n  workoutCard: {\n    borderWidth: 2,\n    borderRadius: BorderRadius.lg,\n    backgroundColor: Colors.card,\n  },\n  workoutTop: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: Spacing.md,\n  },\n  workoutLeft: {\n    flex: 1,\n    gap: 2,\n  },\n  workoutName: {\n    fontSize: 16,\n    fontWeight: '600',\n    lineHeight: 20,\n  },\n  timeAgo: {\n    fontSize: 12,\n    color: Colors.mutedForeground,\n    lineHeight: 16,\n  },\n  viewButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  workoutBottom: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.md,\n    paddingHorizontal: Spacing.md,\n    paddingBottom: Spacing.md,\n  },\n  stat: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: Spacing.xs,\n  },\n  statText: {\n    fontSize: 12,\n    color: Colors.mutedForeground,\n  },\n  viewAllButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: Spacing.sm,\n    paddingVertical: Spacing.md,\n    marginTop: Spacing.sm,\n  },\n  viewAllText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.actionPrimary,\n  },\n  errorContainer: {\n    paddingVertical: Spacing.lg,\n    alignItems: 'center',\n  },\n  errorText: {\n    fontSize: 14,\n    color: Colors.destructive,\n    textAlign: 'center',\n  },\n  emptyContainer: {\n    paddingVertical: Spacing.lg,\n  },\n  emptyText: {\n    fontSize: 14,\n    color: Colors.mutedForeground,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n});\n","size_bytes":7142}},"version":1}