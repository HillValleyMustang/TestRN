/**
 * This file contains the Supabase database types and derived utility types.
 * It is automatically generated by Supabase CLI, but custom types are added here.
 *
 * To regenerate the core database types, run:
 * `supabase gen types typescript --local > src/types/supabase.ts`
 * Then, manually re-integrate any custom types like `SetLogState`.
 */

// --- JSON Type Definition ---
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

// --- Database Schema Definition ---
// This is the core schema generated from your Supabase project.
export type Database = {
  public: {
    Tables: {
      activity_logs: {
        Row: {
          activity_type: string
          avg_time: number | null
          created_at: string | null
          distance: string | null
          id: string
          is_pb: boolean | null
          log_date: string
          time: string | null
          user_id: string | null
        }
        Insert: {
          activity_type: string
          avg_time?: number | null
          created_at?: string | null
          distance?: string | null
          id?: string
          is_pb?: boolean | null
          log_date: string
          time?: string | null
          user_id?: string | null
        }
        Update: {
          activity_type?: string
          avg_time?: number | null
          created_at?: string | null
          distance?: string | null
          id?: string
          is_pb?: boolean | null
          log_date?: string
          time?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "activity_logs_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      exercise_definitions: {
        Row: {
          category: string | null
          created_at: string | null
          description: string | null
          id: string
          main_muscle: string
          name: string
          pro_tip: string | null
          type: string
          user_id: string | null
          video_url: string | null
        }
        Insert: {
          category?: string | null
          created_at?: string | null
          description?: string | null
          id?: string
          main_muscle: string
          name: string
          pro_tip?: string | null
          type?: string
          user_id?: string | null
          video_url?: string | null
        }
        Update: {
          category?: string | null
          created_at?: string | null
          description?: string | null
          id?: string
          main_muscle?: string
          name?: string
          pro_tip?: string | null
          type?: string
          user_id?: string | null
          video_url?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "exercise_definitions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          body_fat_pct: number | null
          created_at: string | null
          default_rest_time_seconds: number | null
          first_name: string | null
          full_name: string | null
          health_notes: string | null
          height_cm: number | null
          id: string
          last_ai_coach_use_at: string | null
          last_name: string | null
          preferred_distance_unit: string | null
          preferred_muscles: string | null
          preferred_weight_unit: string | null
          primary_goal: string | null
          target_date: string | null
          updated_at: string | null
          weight_kg: number | null
        }
        Insert: {
          body_fat_pct?: number | null
          created_at?: string | null
          default_rest_time_seconds?: number | null
          first_name?: string | null
          full_name?: string | null
          health_notes?: string | null
          height_cm?: number | null
          id: string
          last_ai_coach_use_at?: string | null
          last_name?: string | null
          preferred_distance_unit?: string | null
          preferred_muscles?: string | null
          preferred_weight_unit?: string | null
          primary_goal?: string | null
          target_date?: string | null
          updated_at?: string | null
          weight_kg?: number | null
        }
        Update: {
          body_fat_pct?: number | null
          created_at?: string | null
          default_rest_time_seconds?: number | null
          first_name?: string | null
          full_name?: string | null
          health_notes?: string | null
          height_cm?: number | null
          id?: string
          last_ai_coach_use_at?: string | null
          last_name?: string | null
          preferred_distance_unit?: string | null
          preferred_muscles?: string | null
          preferred_weight_unit?: string | null
          primary_goal?: string | null
          target_date?: string | null
          updated_at?: string | null
          weight_kg?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            isOneToOne: true
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      set_logs: {
        Row: {
          created_at: string | null
          exercise_id: string | null
          id: string
          is_pb: boolean | null
          reps: number | null
          reps_l: number | null
          reps_r: number | null
          session_id: string | null
          time_seconds: number | null
          weight_kg: number | null
        }
        Insert: {
          created_at?: string | null
          exercise_id?: string | null
          id?: string
          is_pb?: boolean | null
          reps?: number | null
          reps_l?: number | null
          reps_r?: number | null
          session_id?: string | null
          time_seconds?: number | null
          weight_kg?: number | null
        }
        Update: {
          created_at?: string | null
          exercise_id?: string | null
          id?: string
          is_pb?: boolean | null
          reps?: number | null
          reps_l?: number | null
          reps_r?: number | null
          session_id?: string | null
          time_seconds?: number | null
          weight_kg?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "set_logs_exercise_id_fkey"
            columns: ["exercise_id"]
            isOneToOne: false
            referencedRelation: "exercise_definitions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "set_logs_session_id_fkey"
            columns: ["session_id"]
            isOneToOne: false
            referencedRelation: "workout_sessions"
            referencedColumns: ["id"]
          },
        ]
      }
      t_path_exercises: {
        Row: {
          created_at: string | null
          exercise_id: string
          id: string
          order_index: number
          template_id: string
        }
        Insert: {
          created_at?: string | null
          exercise_id: string
          id?: string
          order_index: number
          template_id: string
        }
        Update: {
          created_at?: string | null
          exercise_id?: string
          id?: string
          order_index?: number
          template_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "t_path_exercises_exercise_id_fkey"
            columns: ["exercise_id"]
            isOneToOne: false
            referencedRelation: "exercise_definitions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "t_path_exercises_template_id_fkey"
            columns: ["template_id"]
            isOneToOne: false
            referencedRelation: "t_paths"
            referencedColumns: ["id"]
          },
        ]
      }
      t_paths: {
        Row: {
          created_at: string | null
          id: string
          is_bonus: boolean | null
          template_name: string
          user_id: string | null
          version: number | null
          settings: Json | null
          progression_settings: Json | null
        }
        Insert: {
          created_at?: string | null
          id?: string
          is_bonus?: boolean | null
          template_name: string
          user_id?: string | null
          version?: number | null
          settings?: Json | null
          progression_settings?: Json | null
        }
        Update: {
          created_at?: string | null
          id?: string
          is_bonus?: boolean | null
          template_name?: string
          user_id?: string | null
          version?: number | null
          settings?: Json | null
          progression_settings?: Json | null
        }
        Relationships: [
          {
            foreignKeyName: "workout_templates_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      workout_sessions: {
        Row: {
          created_at: string | null
          duration_string: string | null
          id: string
          rating: number | null
          session_date: string
          template_name: string | null
          user_id: string | null
        }
        Insert: {
          created_at?: string | null
          duration_string?: string | null
          id?: string
          rating?: number | null
          session_date: string
          template_name?: string | null
          user_id?: string | null
        }
        Update: {
          created_at?: string | null
          duration_string?: string | null
          id?: string
          rating?: number | null
          session_date?: string
          template_name?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "workout_sessions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      user_notifications: {
        Row: {
          id: string;
          user_id: string;
          notification_id: string;
          read_at: string | null;
        };
        Insert: {
          id?: string;
          user_id: string;
          notification_id: string;
          read_at?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string;
          notification_id?: string;
          read_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "user_notifications_notification_id_fkey";
            columns: ["notification_id"];
            isOneToOne: false;
            referencedRelation: "notifications";
            referencedColumns: ["id"];
          },
          {
            foreignKeyName: "user_notifications_user_id_fkey";
            columns: ["user_id"];
            isOneToOne: false;
            referencedRelation: "profiles";
            referencedColumns: ["id"];
          }
        ];
      };
      notifications: {
        Row: {
          id: string;
          title: string;
          message: string;
          type: string;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          title: string;
          message: string;
          type?: string;
          created_at?: string | null;
        };
        Update: {
          id?: string;
          title?: string;
          message?: string;
          type?: string;
          created_at?: string | null;
        };
        Relationships: [];
      };
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      get_notifications_with_read_status: {
        Args: Record<PropertyKey, never>
        Returns: {
          created_at: string
          id: string
          is_read: boolean
          message: string
          title: string
          type: string
        }[]
      }
      handle_new_user: {
        Args: Record<PropertyKey, never>
        Returns: string
      }
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

// --- Utility Types for Tables and Enums ---
// These types simplify access to Row, Insert, Update, and Enum types from the Database schema.

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

// --- Custom Types ---
// These are application-specific types that extend or combine Supabase-generated types.

// Consolidated SetLogState for use across hooks and components
export interface SetLogState extends Omit<Tables<'set_logs'>, 'id' | 'created_at'> {
  id: string | null; // Explicitly allow null for new sets
  created_at: string | null; // Explicitly allow null for new sets
  isSaved: boolean;
  isPR: boolean;
  lastWeight?: number | null;
  lastReps?: number | null;
  lastTimeSeconds?: number | null;
}